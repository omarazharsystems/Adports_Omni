"use strict";

var _typeof = require("@babel/runtime-corejs3/helpers/typeof");

var _WeakMap = require("@babel/runtime-corejs3/core-js-stable/weak-map");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/slicedToArray"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _Composer = _interopRequireDefault(require("./Composer"));

var _useReadyState3 = _interopRequireDefault(require("./hooks/useReadyState"));

var _useSupported3 = _interopRequireDefault(require("./hooks/useSupported"));

function _getRequireWildcardCache(nodeInterop) { if (typeof _WeakMap !== "function") return null; var cacheBabelInterop = new _WeakMap(); var cacheNodeInterop = new _WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = _Object$defineProperty && _Object$getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { _Object$defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* eslint no-magic-numbers: ["error", { "ignore": [0, 1, 2, 3] }] */
var DictateCheckboxCore = function DictateCheckboxCore(_ref) {
  var children = _ref.children,
      className = _ref.className,
      disabled = _ref.disabled,
      onChange = _ref.onChange,
      started = _ref.started;

  var _useReadyState = (0, _useReadyState3["default"])(),
      _useReadyState2 = (0, _slicedToArray2["default"])(_useReadyState, 1),
      readyState = _useReadyState2[0];

  var _useSupported = (0, _useSupported3["default"])(),
      _useSupported2 = (0, _slicedToArray2["default"])(_useSupported, 1),
      supported = _useSupported2[0];

  return /*#__PURE__*/_react["default"].createElement("label", null, /*#__PURE__*/_react["default"].createElement("input", {
    checked: started,
    className: className,
    disabled: readyState === 1 || readyState === 3 || !supported || disabled,
    onChange: onChange,
    type: "checkbox"
  }), typeof children === 'function' ? children({
    readyState: readyState
  }) : children);
};

DictateCheckboxCore.defaultProps = {
  children: undefined,
  className: undefined,
  disabled: undefined
};
DictateCheckboxCore.propTypes = {
  children: _propTypes["default"].any,
  className: _propTypes["default"].string,
  disabled: _propTypes["default"].bool,
  onChange: _propTypes["default"].func.isRequired,
  started: _propTypes["default"].bool.isRequired
};

var DictateCheckbox = function DictateCheckbox(_ref2) {
  var children = _ref2.children,
      className = _ref2.className,
      disabled = _ref2.disabled,
      extra = _ref2.extra,
      grammar = _ref2.grammar,
      lang = _ref2.lang,
      onDictate = _ref2.onDictate,
      onError = _ref2.onError,
      onProgress = _ref2.onProgress,
      onRawEvent = _ref2.onRawEvent,
      speechGrammarList = _ref2.speechGrammarList,
      speechRecognition = _ref2.speechRecognition;

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      started = _useState2[0],
      setStarted = _useState2[1];

  var handleChange = (0, _react.useCallback)(function (_ref3) {
    var checked = _ref3.target.checked;
    setStarted(checked);
  }, [setStarted]);
  var handleDictate = (0, _react.useCallback)(function (event) {
    setStarted(false);
    onDictate && onDictate(event);
  }, [onDictate, setStarted]);
  var handleError = (0, _react.useCallback)(function (event) {
    setStarted(false);
    onError && onError(event);
  }, [onError, setStarted]);
  return /*#__PURE__*/_react["default"].createElement(_Composer["default"], {
    extra: extra,
    grammar: grammar,
    lang: lang,
    onDictate: handleDictate,
    onError: handleError,
    onProgress: onProgress,
    onRawEvent: onRawEvent,
    speechGrammarList: speechGrammarList,
    speechRecognition: speechRecognition,
    started: started && !disabled
  }, /*#__PURE__*/_react["default"].createElement(DictateCheckboxCore, {
    className: className,
    disabled: disabled,
    onChange: handleChange,
    started: started
  }, children));
};

DictateCheckbox.defaultProps = {
  children: undefined,
  className: undefined,
  disabled: undefined,
  extra: undefined,
  grammar: undefined,
  lang: undefined,
  onDictate: undefined,
  onError: undefined,
  onProgress: undefined,
  onRawEvent: undefined,
  speechGrammarList: undefined,
  speechRecognition: undefined
};
DictateCheckbox.propTypes = {
  children: _propTypes["default"].any,
  className: _propTypes["default"].string,
  disabled: _propTypes["default"].bool,
  extra: _propTypes["default"].any,
  grammar: _propTypes["default"].string,
  lang: _propTypes["default"].string,
  onDictate: _propTypes["default"].func,
  onError: _propTypes["default"].func,
  onProgress: _propTypes["default"].func,
  onRawEvent: _propTypes["default"].func,
  speechGrammarList: _propTypes["default"].any,
  speechRecognition: _propTypes["default"].any
};
var _default = DictateCheckbox;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9EaWN0YXRlQ2hlY2tib3guanMiXSwibmFtZXMiOlsiRGljdGF0ZUNoZWNrYm94Q29yZSIsImNoaWxkcmVuIiwiY2xhc3NOYW1lIiwiZGlzYWJsZWQiLCJvbkNoYW5nZSIsInN0YXJ0ZWQiLCJyZWFkeVN0YXRlIiwic3VwcG9ydGVkIiwiZGVmYXVsdFByb3BzIiwidW5kZWZpbmVkIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiYW55Iiwic3RyaW5nIiwiYm9vbCIsImZ1bmMiLCJpc1JlcXVpcmVkIiwiRGljdGF0ZUNoZWNrYm94IiwiZXh0cmEiLCJncmFtbWFyIiwibGFuZyIsIm9uRGljdGF0ZSIsIm9uRXJyb3IiLCJvblByb2dyZXNzIiwib25SYXdFdmVudCIsInNwZWVjaEdyYW1tYXJMaXN0Iiwic3BlZWNoUmVjb2duaXRpb24iLCJzZXRTdGFydGVkIiwiaGFuZGxlQ2hhbmdlIiwiY2hlY2tlZCIsInRhcmdldCIsImhhbmRsZURpY3RhdGUiLCJldmVudCIsImhhbmRsZUVycm9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOzs7Ozs7QUFQQTtBQVNBLElBQU1BLG1CQUFtQixHQUFHLFNBQXRCQSxtQkFBc0IsT0FBMEQ7QUFBQSxNQUF2REMsUUFBdUQsUUFBdkRBLFFBQXVEO0FBQUEsTUFBN0NDLFNBQTZDLFFBQTdDQSxTQUE2QztBQUFBLE1BQWxDQyxRQUFrQyxRQUFsQ0EsUUFBa0M7QUFBQSxNQUF4QkMsUUFBd0IsUUFBeEJBLFFBQXdCO0FBQUEsTUFBZEMsT0FBYyxRQUFkQSxPQUFjOztBQUNwRix1QkFBcUIsaUNBQXJCO0FBQUE7QUFBQSxNQUFPQyxVQUFQOztBQUNBLHNCQUFvQixnQ0FBcEI7QUFBQTtBQUFBLE1BQU9DLFNBQVA7O0FBRUEsc0JBQ0UsNERBQ0U7QUFDRSxJQUFBLE9BQU8sRUFBRUYsT0FEWDtBQUVFLElBQUEsU0FBUyxFQUFFSCxTQUZiO0FBR0UsSUFB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QUFFVixzQkFBVUksSUFQSztBQVExQk8sRUFBQUEsT0FBTyxFQUFFWCxzQkFBVUksSUFSTztBQVMxQlEsRUFBQUEsVUFBVSxFQUFFWixzQkFBVUksSUFUSTtBQVUxQlMsRUFBQUEsVUFBVSxFQUFFYixzQkFBVUksSUFWSTtBQVcxQlUsRUFBQUEsaUJBQWlCLEVBQUVkLHNCQUFVQyxHQVhIO0FBWTFCYyxFQUFBQSxpQkFBaUIsRUFBRWYsc0JBQVVDO0FBWkgsQ0FBNUI7ZUFlZUssZSIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludCBuby1tYWdpYy1udW1iZXJzOiBbXCJlcnJvclwiLCB7IFwiaWdub3JlXCI6IFswLCAxLCAyLCAzXSB9XSAqL1xuXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IENvbXBvc2VyIGZyb20gJy4vQ29tcG9zZXInO1xuaW1wb3J0IHVzZVJlYWR5U3RhdGUgZnJvbSAnLi9ob29rcy91c2VSZWFkeVN0YXRlJztcbmltcG9ydCB1c2VTdXBwb3J0ZWQgZnJvbSAnLi9ob29rcy91c2VTdXBwb3J0ZWQnO1xuXG5jb25zdCBEaWN0YXRlQ2hlY2tib3hDb3JlID0gKHsgY2hpbGRyZW4sIGNsYXNzTmFtZSwgZGlzYWJsZWQsIG9uQ2hhbmdlLCBzdGFydGVkIH0pID0+IHtcbiAgY29uc3QgW3JlYWR5U3RhdGVdID0gdXNlUmVhZHlTdGF0ZSgpO1xuICBjb25zdCBbc3VwcG9ydGVkXSA9IHVzZVN1cHBvcnRlZCgpO1xuXG4gIHJldHVybiAoXG4gICAgPGxhYmVsPlxuICAgICAgPGlucHV0XG4gICAgICAgIGNoZWNrZWQ9e3N0YXJ0ZWR9XG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgICBkaXNhYmxlZD17cmVhZHlTdGF0ZSA9PT0gMSB8fCByZWFkeVN0YXRlID09PSAzIHx8ICFzdXBwb3J0ZWQgfHwgZGlzYWJsZWR9XG4gICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgIC8+XG4gICAgICB7dHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nID8gY2hpbGRyZW4oeyByZWFkeVN0YXRlIH0pIDogY2hpbGRyZW59XG4gICAgPC9sYWJlbD5cbiAgKTtcbn07XG5cbkRpY3RhdGVDaGVja2JveENvcmUuZGVmYXVsdFByb3BzID0ge1xuICBjaGlsZHJlbjogdW5kZWZpbmVkLFxuICBjbGFzc05hbWU6IHVuZGVmaW5lZCxcbiAgZGlzYWJsZWQ6IHVuZGVmaW5lZFxufTtcblxuRGljdGF0ZUNoZWNrYm94Q29yZS5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55LFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHN0YXJ0ZWQ6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWRcbn07XG5cbmNvbnN0IERpY3RhdGVDaGVja2JveCA9ICh7XG4gIGNoaWxkcmVuLFxuICBjbGFzc05hbWUsXG4gIGRpc2FibGVkLFxuICBleHRyYSxcbiAgZ3JhbW1hcixcbiAgbGFuZyxcbiAgb25EaWN0YXRlLFxuICBvbkVycm9yLFxuICBvblByb2dyZXNzLFxuICBvblJhd0V2ZW50LFxuICBzcGVlY2hHcmFtbWFyTGlzdCxcbiAgc3BlZWNoUmVjb2duaXRpb25cbn0pID0+IHtcbiAgY29uc3QgW3N0YXJ0ZWQsIHNldFN0YXJ0ZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IGhhbmRsZUNoYW5nZSA9IHVzZUNhbGxiYWNrKFxuICAgICh7IHRhcmdldDogeyBjaGVja2VkIH0gfSkgPT4ge1xuICAgICAgc2V0U3RhcnRlZChjaGVja2VkKTtcbiAgICB9LFxuICAgIFtzZXRTdGFydGVkXVxuICApO1xuXG4gIGNvbnN0IGhhbmRsZURpY3RhdGUgPSB1c2VDYWxsYmFjayhcbiAgICBldmVudCA9PiB7XG4gICAgICBzZXRTdGFydGVkKGZhbHNlKTtcblxuICAgICAgb25EaWN0YXRlICYmIG9uRGljdGF0ZShldmVudCk7XG4gICAgfSxcbiAgICBbb25EaWN0YXRlLCBzZXRTdGFydGVkXVxuICApO1xuXG4gIGNvbnN0IGhhbmRsZUVycm9yID0gdXNlQ2FsbGJhY2soXG4gICAgZXZlbnQgPT4ge1xuICAgICAgc2V0U3RhcnRlZChmYWxzZSk7XG4gICAgICBvbkVycm9yICYmIG9uRXJyb3IoZXZlbnQpO1xuICAgIH0sXG4gICAgW29uRXJyb3IsIHNldFN0YXJ0ZWRdXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8Q29tcG9zZXJcbiAgICAgIGV4dHJhPXtleHRyYX1cbiAgICAgIGdyYW1tYXI9e2dyYW1tYXJ9XG4gICAgICBsYW5nPXtsYW5nfVxuICAgICAgb25EaWN0YXRlPXtoYW5kbGVEaWN0YXRlfVxuICAgICAgb25FcnJvcj17aGFuZGxlRXJyb3J9XG4gICAgICBvblByb2dyZXNzPXtvblByb2dyZXNzfVxuICAgICAgb25SYXdFdmVudD17b25SYXdFdmVudH1cbiAgICAgIHNwZWVjaEdyYW1tYXJMaXN0PXtzcGVlY2hHcmFtbWFyTGlzdH1cbiAgICAgIHNwZWVjaFJlY29nbml0aW9uPXtzcGVlY2hSZWNvZ25pdGlvbn1cbiAgICAgIHN0YXJ0ZWQ9e3N0YXJ0ZWQgJiYgIWRpc2FibGVkfVxuICAgID5cbiAgICAgIDxEaWN0YXRlQ2hlY2tib3hDb3JlIGNsYXNzTmFtZT17Y2xhc3NOYW1lfSBkaXNhYmxlZD17ZGlzYWJsZWR9IG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9IHN0YXJ0ZWQ9e3N0YXJ0ZWR9PlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L0RpY3RhdGVDaGVja2JveENvcmU+XG4gICAgPC9Db21wb3Nlcj5cbiAgKTtcbn07XG5cbkRpY3RhdGVDaGVja2JveC5kZWZhdWx0UHJvcHMgPSB7XG4gIGNoaWxkcmVuOiB1bmRlZmluZWQsXG4gIGNsYXNzTmFtZTogdW5kZWZpbmVkLFxuICBkaXNhYmxlZDogdW5kZWZpbmVkLFxuICBleHRyYTogdW5kZWZpbmVkLFxuICBncmFtbWFyOiB1bmRlZmluZWQsXG4gIGxhbmc6IHVuZGVmaW5lZCxcbiAgb25EaWN0YXRlOiB1bmRlZmluZWQsXG4gIG9uRXJyb3I6IHVuZGVmaW5lZCxcbiAgb25Qcm9ncmVzczogdW5kZWZpbmVkLFxuICBvblJhd0V2ZW50OiB1bmRlZmluZWQsXG4gIHNwZWVjaEdyYW1tYXJMaXN0OiB1bmRlZmluZWQsXG4gIHNwZWVjaFJlY29nbml0aW9uOiB1bmRlZmluZWRcbn07XG5cbkRpY3RhdGVDaGVja2JveC5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55LFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgZXh0cmE6IFByb3BUeXBlcy5hbnksXG4gIGdyYW1tYXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGxhbmc6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG9uRGljdGF0ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uRXJyb3I6IFByb3BUeXBlcy5mdW5jLFxuICBvblByb2dyZXNzOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25SYXdFdmVudDogUHJvcFR5cGVzLmZ1bmMsXG4gIHNwZWVjaEdyYW1tYXJMaXN0OiBQcm9wVHlwZXMuYW55LFxuICBzcGVlY2hSZWNvZ25pdGlvbjogUHJvcFR5cGVzLmFueVxufTtcblxuZXhwb3J0IGRlZmF1bHQgRGljdGF0ZUNoZWNrYm94O1xuIl19