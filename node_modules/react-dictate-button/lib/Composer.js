"use strict";

var _typeof = require("@babel/runtime-corejs3/helpers/typeof");

var _WeakMap = require("@babel/runtime-corejs3/core-js-stable/weak-map");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/slicedToArray"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));

var _entries = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/entries"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _Context = _interopRequireDefault(require("./Context"));

var _usePrevious = _interopRequireDefault(require("./usePrevious"));

var _useRefFrom = _interopRequireDefault(require("./useRefFrom"));

var _vendorPrefix = _interopRequireDefault(require("./vendorPrefix"));

function _getRequireWildcardCache(nodeInterop) { if (typeof _WeakMap !== "function") return null; var cacheBabelInterop = new _WeakMap(); var cacheNodeInterop = new _WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = _Object$defineProperty && _Object$getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { _Object$defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* eslint no-magic-numbers: ["error", { "ignore": [0, 1, 2, 3] }] */
function applyAll() {
  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }

  return function () {
    var _arguments = arguments,
        _this = this;

    // eslint-disable-next-line no-invalid-this, prefer-rest-params
    (0, _forEach["default"])(fns).call(fns, function (fn) {
      return fn.apply(_this, _arguments);
    });
  };
}

function recognitionAbortable(recognition) {
  return !!(recognition && typeof recognition.abort === 'function');
}

var Composer = function Composer(_ref) {
  var children = _ref.children,
      extra = _ref.extra,
      grammar = _ref.grammar,
      lang = _ref.lang,
      onDictate = _ref.onDictate,
      onError = _ref.onError,
      onProgress = _ref.onProgress,
      onRawEvent = _ref.onRawEvent,
      speechGrammarList = _ref.speechGrammarList,
      speechRecognition = _ref.speechRecognition,
      started = _ref.started;

  var _useState = (0, _react.useState)(0),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      readyState = _useState2[0],
      setReadyState = _useState2[1];

  var emitDictateOnEndRef = (0, _react.useRef)(false);
  var extraRef = (0, _useRefFrom["default"])(extra);
  var grammarRef = (0, _useRefFrom["default"])(grammar);
  var langRef = (0, _useRefFrom["default"])(lang);
  var notAllowedRef = (0, _react.useRef)(false);
  var onDictateRef = (0, _useRefFrom["default"])(onDictate);
  var onErrorRef = (0, _useRefFrom["default"])(onError);
  var onProgressRef = (0, _useRefFrom["default"])(onProgress);
  var onRawEventRef = (0, _useRefFrom["default"])(onRawEvent);
  var prevSpeechRecognition = (0, _usePrevious["default"])(speechRecognition);
  var recognitionRef = (0, _react.useRef)();
  var speechGrammarListRef = (0, _useRefFrom["default"])(speechGrammarList);
  var speechRecognitionRef = (0, _useRefFrom["default"])(speechRecognition); // If "speechRecognition" ponyfill changed, reset the "notAllowed" flag.

  if (prevSpeechRecognition !== speechRecognition) {
    notAllowedRef.current = false;
  }

  var handleAudioEnd = (0, _react.useCallback)(function (_ref2) {
    var target = _ref2.target;
    return target === recognitionRef.current && setReadyState(3);
  }, [recognitionRef, setReadyState]);
  var handleAudioStart = (0, _react.useCallback)(function (_ref3) {
    var target = _ref3.target;

    if (target !== recognitionRef.current) {
      return;
    }

    setReadyState(2); // Web Speech API does not emit "result" when nothing is heard, and Chrome does not emit "nomatch" event.
    // Because we emitted onProgress, we should emit "dictate" if not error, so they works in pair.

    emitDictateOnEndRef.current = true;
    onProgressRef.current && onProgressRef.current({
      abortable: recognitionAbortable(target),
      type: 'progress'
    });
  }, [emitDictateOnEndRef, onProgressRef, recognitionRef, setReadyState]);
  var handleEnd = (0, _react.useCallback)(function (_ref4) {
    var target = _ref4.target;

    if (target !== recognitionRef.current) {
      return;
    }

    recognitionRef.current = undefined;
    setReadyState(0);

    if (emitDictateOnEndRef.current) {
      onDictateRef.current && onDictateRef.current({
        type: 'dictate'
      });
      emitDictateOnEndRef.current = false;
    }
  }, [emitDictateOnEndRef, onDictateRef, recognitionRef, setReadyState]);
  var handleError = (0, _react.useCallback)(function (event) {
    if (event.target !== recognitionRef.current) {
      return;
    } // Error out, no need to emit "dictate"


    emitDictateOnEndRef.current = false;
    recognitionRef.current = undefined;

    if (event.error === 'not-allowed') {
      notAllowedRef.current = true;
    }

    setReadyState(0);
    onErrorRef.current && onErrorRef.current(event);
  }, [emitDictateOnEndRef, onErrorRef, notAllowedRef, recognitionRef, setReadyState]);
  var handleRawEvent = (0, _react.useCallback)(function (event) {
    if (event.target !== recognitionRef.current) {
      return;
    }

    onRawEventRef.current && onRawEventRef.current(event);
  }, [onRawEventRef, recognitionRef]);
  var handleResult = (0, _react.useCallback)(function (_ref5) {
    var rawResults = _ref5.results,
        target = _ref5.target;

    if (target !== recognitionRef.current) {
      return;
    }

    if (rawResults.length) {
      var results = (0, _map["default"])([]).call(rawResults, function (alts) {
        // Destructuring breaks Angular due to a bug in Zone.js.
        // eslint-disable-next-line prefer-destructuring
        var firstAlt = alts[0];
        return {
          confidence: firstAlt.confidence,
          transcript: firstAlt.transcript
        };
      }); // Destructuring breaks Angular due to a bug in Zone.js.
      // eslint-disable-next-line prefer-destructuring

      var first = rawResults[0];

      if (first.isFinal) {
        // After "onDictate" callback, the caller should be able to set "started" to false on an unabortable recognition.
        // TODO: Add test for fortification.
        recognitionRef.current = undefined;
        setReadyState(0);
        onDictateRef.current && onDictateRef.current({
          result: results[0],
          type: 'dictate'
        });
      } else {
        onProgressRef.current && onProgressRef.current({
          abortable: recognitionAbortable(target),
          results: results,
          type: 'progress'
        });
      }
    }
  }, [onDictateRef, onProgressRef, recognitionRef, setReadyState]);
  var handleStart = (0, _react.useCallback)(function (_ref6) {
    var target = _ref6.target;
    return target === recognitionRef.current && setReadyState(1);
  }, [recognitionRef, setReadyState]);
  (0, _react.useEffect)(function () {
    if (started) {
      var _context;

      if (!speechRecognitionRef.current || notAllowedRef.current) {
        throw new Error('Speech recognition is not supported');
      }

      var grammars = speechGrammarListRef.current && grammarRef.current && new speechGrammarListRef.current();
      var recognition = recognitionRef.current = new speechRecognitionRef.current();

      if (grammars) {
        grammars.addFromString(grammarRef.current, 1);
        recognition.grammars = grammars;
      }

      recognition.lang = langRef.current;
      recognition.interimResults = true;
      recognition.onaudioend = applyAll(handleAudioEnd, handleRawEvent);
      recognition.onaudiostart = applyAll(handleAudioStart, handleRawEvent);
      recognition.onend = applyAll(handleEnd, handleRawEvent);
      recognition.onerror = applyAll(handleError, handleRawEvent);
      recognition.onnomatch = handleRawEvent;
      recognition.onresult = applyAll(handleResult, handleRawEvent);
      recognition.onsoundend = handleRawEvent;
      recognition.onsoundstart = handleRawEvent;
      recognition.onspeechend = handleRawEvent;
      recognition.onspeechstart = handleRawEvent;
      recognition.onstart = applyAll(handleStart, handleRawEvent);
      var _extra = extraRef.current;
      _extra && (0, _forEach["default"])(_context = (0, _entries["default"])(_extra)).call(_context, function (_ref7) {
        var _ref8 = (0, _slicedToArray2["default"])(_ref7, 2),
            key = _ref8[0],
            value = _ref8[1];

        if (key !== 'constructor' && key !== 'prototype' && key !== '__proto__') {
          recognition[key] = value;
        }
      });
      recognition.start();
    }

    return function () {
      var recognition = recognitionRef.current;

      if (recognition) {
        if (recognitionAbortable(recognition)) {
          recognition.abort();
        } else {
          throw new Error('Failed to stop recognition while the current one is ongoing and is not abortable.');
        }
      }
    };
  }, [extraRef, grammarRef, handleAudioEnd, handleAudioStart, handleEnd, handleError, handleRawEvent, handleResult, handleStart, langRef, notAllowedRef, recognitionRef, speechGrammarListRef, speechRecognitionRef, started]);
  var abortable = recognitionAbortable(recognitionRef.current) && readyState === 2;
  var supported = !!speechRecognition && !notAllowedRef.current;
  var context = (0, _react.useMemo)(function () {
    return {
      abortable: abortable,
      readyState: readyState,
      supported: supported
    };
  }, [abortable, readyState, supported]);
  return /*#__PURE__*/_react["default"].createElement(_Context["default"].Provider, {
    value: context
  }, /*#__PURE__*/_react["default"].createElement(_Context["default"].Consumer, null, function (context) {
    return typeof children === 'function' ? children(context) : children;
  }));
};

Composer.defaultProps = {
  children: undefined,
  extra: undefined,
  grammar: undefined,
  lang: undefined,
  onDictate: undefined,
  onError: undefined,
  onProgress: undefined,
  onRawEvent: undefined,
  speechGrammarList: navigator.mediaDevices && navigator.mediaDevices.getUserMedia && (0, _vendorPrefix["default"])('SpeechGrammarList'),
  speechRecognition: navigator.mediaDevices && navigator.mediaDevices.getUserMedia && (0, _vendorPrefix["default"])('SpeechRecognition'),
  started: undefined
};
Composer.propTypes = {
  children: _propTypes["default"].any,
  extra: _propTypes["default"].any,
  grammar: _propTypes["default"].string,
  lang: _propTypes["default"].string,
  onDictate: _propTypes["default"].func,
  onError: _propTypes["default"].func,
  onProgress: _propTypes["default"].func,
  onRawEvent: _propTypes["default"].func,
  speechGrammarList: _propTypes["default"].any,
  speechRecognition: _propTypes["default"].any,
  started: _propTypes["default"].any
};
var _default = Composer;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,