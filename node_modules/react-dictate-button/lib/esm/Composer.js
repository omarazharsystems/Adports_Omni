import _slicedToArray from "@babel/runtime-corejs3/helpers/slicedToArray";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _Object$entries from "@babel/runtime-corejs3/core-js-stable/object/entries";

/* eslint no-magic-numbers: ["error", { "ignore": [0, 1, 2, 3] }] */
import PropTypes from 'prop-types';
import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';
import Context from './Context';
import usePrevious from './usePrevious';
import useRefFrom from './useRefFrom';
import vendorPrefix from './vendorPrefix';

function applyAll() {
  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }

  return function () {
    var _arguments = arguments,
        _this = this;

    // eslint-disable-next-line no-invalid-this, prefer-rest-params
    _forEachInstanceProperty(fns).call(fns, function (fn) {
      return fn.apply(_this, _arguments);
    });
  };
}

function recognitionAbortable(recognition) {
  return !!(recognition && typeof recognition.abort === 'function');
}

var Composer = function Composer(_ref) {
  var children = _ref.children,
      extra = _ref.extra,
      grammar = _ref.grammar,
      lang = _ref.lang,
      onDictate = _ref.onDictate,
      onError = _ref.onError,
      onProgress = _ref.onProgress,
      onRawEvent = _ref.onRawEvent,
      speechGrammarList = _ref.speechGrammarList,
      speechRecognition = _ref.speechRecognition,
      started = _ref.started;

  var _useState = useState(0),
      _useState2 = _slicedToArray(_useState, 2),
      readyState = _useState2[0],
      setReadyState = _useState2[1];

  var emitDictateOnEndRef = useRef(false);
  var extraRef = useRefFrom(extra);
  var grammarRef = useRefFrom(grammar);
  var langRef = useRefFrom(lang);
  var notAllowedRef = useRef(false);
  var onDictateRef = useRefFrom(onDictate);
  var onErrorRef = useRefFrom(onError);
  var onProgressRef = useRefFrom(onProgress);
  var onRawEventRef = useRefFrom(onRawEvent);
  var prevSpeechRecognition = usePrevious(speechRecognition);
  var recognitionRef = useRef();
  var speechGrammarListRef = useRefFrom(speechGrammarList);
  var speechRecognitionRef = useRefFrom(speechRecognition); // If "speechRecognition" ponyfill changed, reset the "notAllowed" flag.

  if (prevSpeechRecognition !== speechRecognition) {
    notAllowedRef.current = false;
  }

  var handleAudioEnd = useCallback(function (_ref2) {
    var target = _ref2.target;
    return target === recognitionRef.current && setReadyState(3);
  }, [recognitionRef, setReadyState]);
  var handleAudioStart = useCallback(function (_ref3) {
    var target = _ref3.target;

    if (target !== recognitionRef.current) {
      return;
    }

    setReadyState(2); // Web Speech API does not emit "result" when nothing is heard, and Chrome does not emit "nomatch" event.
    // Because we emitted onProgress, we should emit "dictate" if not error, so they works in pair.

    emitDictateOnEndRef.current = true;
    onProgressRef.current && onProgressRef.current({
      abortable: recognitionAbortable(target),
      type: 'progress'
    });
  }, [emitDictateOnEndRef, onProgressRef, recognitionRef, setReadyState]);
  var handleEnd = useCallback(function (_ref4) {
    var target = _ref4.target;

    if (target !== recognitionRef.current) {
      return;
    }

    recognitionRef.current = undefined;
    setReadyState(0);

    if (emitDictateOnEndRef.current) {
      onDictateRef.current && onDictateRef.current({
        type: 'dictate'
      });
      emitDictateOnEndRef.current = false;
    }
  }, [emitDictateOnEndRef, onDictateRef, recognitionRef, setReadyState]);
  var handleError = useCallback(function (event) {
    if (event.target !== recognitionRef.current) {
      return;
    } // Error out, no need to emit "dictate"


    emitDictateOnEndRef.current = false;
    recognitionRef.current = undefined;

    if (event.error === 'not-allowed') {
      notAllowedRef.current = true;
    }

    setReadyState(0);
    onErrorRef.current && onErrorRef.current(event);
  }, [emitDictateOnEndRef, onErrorRef, notAllowedRef, recognitionRef, setReadyState]);
  var handleRawEvent = useCallback(function (event) {
    if (event.target !== recognitionRef.current) {
      return;
    }

    onRawEventRef.current && onRawEventRef.current(event);
  }, [onRawEventRef, recognitionRef]);
  var handleResult = useCallback(function (_ref5) {
    var rawResults = _ref5.results,
        target = _ref5.target;

    if (target !== recognitionRef.current) {
      return;
    }

    if (rawResults.length) {
      var results = _mapInstanceProperty([]).call(rawResults, function (alts) {
        // Destructuring breaks Angular due to a bug in Zone.js.
        // eslint-disable-next-line prefer-destructuring
        var firstAlt = alts[0];
        return {
          confidence: firstAlt.confidence,
          transcript: firstAlt.transcript
        };
      }); // Destructuring breaks Angular due to a bug in Zone.js.
      // eslint-disable-next-line prefer-destructuring


      var first = rawResults[0];

      if (first.isFinal) {
        // After "onDictate" callback, the caller should be able to set "started" to false on an unabortable recognition.
        // TODO: Add test for fortification.
        recognitionRef.current = undefined;
        setReadyState(0);
        onDictateRef.current && onDictateRef.current({
          result: results[0],
          type: 'dictate'
        });
      } else {
        onProgressRef.current && onProgressRef.current({
          abortable: recognitionAbortable(target),
          results: results,
          type: 'progress'
        });
      }
    }
  }, [onDictateRef, onProgressRef, recognitionRef, setReadyState]);
  var handleStart = useCallback(function (_ref6) {
    var target = _ref6.target;
    return target === recognitionRef.current && setReadyState(1);
  }, [recognitionRef, setReadyState]);
  useEffect(function () {
    if (started) {
      var _context;

      if (!speechRecognitionRef.current || notAllowedRef.current) {
        throw new Error('Speech recognition is not supported');
      }

      var grammars = speechGrammarListRef.current && grammarRef.current && new speechGrammarListRef.current();
      var recognition = recognitionRef.current = new speechRecognitionRef.current();

      if (grammars) {
        grammars.addFromString(grammarRef.current, 1);
        recognition.grammars = grammars;
      }

      recognition.lang = langRef.current;
      recognition.interimResults = true;
      recognition.onaudioend = applyAll(handleAudioEnd, handleRawEvent);
      recognition.onaudiostart = applyAll(handleAudioStart, handleRawEvent);
      recognition.onend = applyAll(handleEnd, handleRawEvent);
      recognition.onerror = applyAll(handleError, handleRawEvent);
      recognition.onnomatch = handleRawEvent;
      recognition.onresult = applyAll(handleResult, handleRawEvent);
      recognition.onsoundend = handleRawEvent;
      recognition.onsoundstart = handleRawEvent;
      recognition.onspeechend = handleRawEvent;
      recognition.onspeechstart = handleRawEvent;
      recognition.onstart = applyAll(handleStart, handleRawEvent);
      var _extra = extraRef.current;
      _extra && _forEachInstanceProperty(_context = _Object$entries(_extra)).call(_context, function (_ref7) {
        var _ref8 = _slicedToArray(_ref7, 2),
            key = _ref8[0],
            value = _ref8[1];

        if (key !== 'constructor' && key !== 'prototype' && key !== '__proto__') {
          recognition[key] = value;
        }
      });
      recognition.start();
    }

    return function () {
      var recognition = recognitionRef.current;

      if (recognition) {
        if (recognitionAbortable(recognition)) {
          recognition.abort();
        } else {
          throw new Error('Failed to stop recognition while the current one is ongoing and is not abortable.');
        }
      }
    };
  }, [extraRef, grammarRef, handleAudioEnd, handleAudioStart, handleEnd, handleError, handleRawEvent, handleResult, handleStart, langRef, notAllowedRef, recognitionRef, speechGrammarListRef, speechRecognitionRef, started]);
  var abortable = recognitionAbortable(recognitionRef.current) && readyState === 2;
  var supported = !!speechRecognition && !notAllowedRef.current;
  var context = useMemo(function () {
    return {
      abortable: abortable,
      readyState: readyState,
      supported: supported
    };
  }, [abortable, readyState, supported]);
  return /*#__PURE__*/React.createElement(Context.Provider, {
    value: context
  }, /*#__PURE__*/React.createElement(Context.Consumer, null, function (context) {
    return typeof children === 'function' ? children(context) : children;
  }));
};

Composer.defaultProps = {
  children: undefined,
  extra: undefined,
  grammar: undefined,
  lang: undefined,
  onDictate: undefined,
  onError: undefined,
  onProgress: undefined,
  onRawEvent: undefined,
  speechGrammarList: navigator.mediaDevices && navigator.mediaDevices.getUserMedia && vendorPrefix('SpeechGrammarList'),
  speechRecognition: navigator.mediaDevices && navigator.mediaDevices.getUserMedia && vendorPrefix('SpeechRecognition'),
  started: undefined
};
Composer.propTypes = {
  children: PropTypes.any,
  extra: PropTypes.any,
  grammar: PropTypes.string,
  lang: PropTypes.string,
  onDictate: PropTypes.func,
  onError: PropTypes.func,
  onProgress: PropTypes.func,
  onRawEvent: PropTypes.func,
  speechGrammarList: PropTypes.any,
  speechRecognition: PropTypes.any,
  started: PropTypes.any
};
export default Composer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Db21wb3Nlci5qcyJdLCJuYW1lcyI6WyJQcm9wVHlwZXMiLCJSZWFjdCIsInVzZUNhbGxiYWNrIiwidXNlRWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZiIsInVzZVN0YXRlIiwiQ29udGV4dCIsInVzZVByZXZpb3VzIiwidXNlUmVmRnJvbSIsInZlbmRvclByZWZpeCIsImFwcGx5QWxsIiwiZm5zIiwiZm4iLCJhcHBseSIsImFyZ3VtZW50cyIsInJlY29nbml0aW9uQWJvcnRhYmxlIiwicmVjb2duaXRpb24iLCJhYm9ydCIsIkNvbXBvc2VyIiwiY2hpbGRyZW4iLCJleHRyYSIsImdyYW1tYXIiLCJsYW5nIiwib25EaWN0YXRlIiwib25FcnJvciIsIm9uUHJvZ3Jlc3MiLCJvblJhd0V2ZW50Iiwic3BlZWNoR3JhbW1hckxpc3QiLCJzcGVlY2hSZWNvZ25pdGlvbiIsInN0YXJ0ZWQiLCJyZWFkeVN0YXRlIiwic2V0UmVhZHlTdGF0ZSIsImVtaXREaWN0YXRlT25FbmRSZWYiLCJleHRyYVJlZiIsImdyYW1tYXJSZWYiLCJsYW5nUmVmIiwibm90QWxsb3dlZFJlZiIsIm9uRGljdGF0ZVJlZiIsIm9uRXJyb3JSZWYiLCJvblByb2dyZXNzUmVmIiwib25SYXdFdmVudFJlZiIsInByZXZTcGVlY2hSZWNvZ25pdGlvbiIsInJlY29nbml0aW9uUmVmIiwic3BlZWNoR3JhbW1hckxpc3RSZWYiLCJzcGVlY2hSZWNvZ25pdGlvblJlZiIsImN1cnJlbnQiLCJoYW5kbGVBdWRpb0VuZCIsInRhcmdldCIsImhhbmRsZUF1ZGlvU3RhcnQiLCJhYm9ydGFibGUiLCJ0eXBlIiwiaGFuZGxlRW5kIiwidW5kZWZpbmVkIiwiaGFuZGxlRXJyb3IiLCJldmVudCIsImVycm9yIiwiaGFuZGxlUmF3RXZlbnQiLCJoYW5kbGVSZXN1bHQiLCJyYXdSZXN1bHRzIiwicmVzdWx0cyIsImxlbmd0aCIsImNhbGwiLCJhbHRzIiwiZmlyc3RBbHQiLCJjb25maWRlbmNlIiwidHJhbnNjcmlwdCIsImZpcnN0IiwiaXNGaW5hbCIsInJlc3VsdCIsImhhbmRsZVN0YXJ0IiwiRXJyb3IiLCJncmFtbWFycyIsImFkZEZyb21TdHJpbmciLCJpbnRlcmltUmVzdWx0cyIsIm9uYXVkaW9lbmQiLCJvbmF1ZGlvc3RhcnQiLCJvbmVuZCIsIm9uZXJyb3IiLCJvbm5vbWF0Y2giLCJvbnJlc3VsdCIsIm9uc291bmRlbmQiLCJvbnNvdW5kc3RhcnQiLCJvbnNwZWVjaGVuZCIsIm9uc3BlZWNoc3RhcnQiLCJvbnN0YXJ0Iiwia2V5IiwidmFsdWUiLCJzdGFydCIsInN1cHBvcnRlZCIsImNvbnRleHQiLCJkZWZhdWx0UHJvcHMiLCJuYXZpZ2F0b3IiLCJtZWRpYURldmljZXMiLCJnZXRVc2VyTWVkaWEiLCJwcm9wVHlwZXMiLCJhbnkiLCJzdHJpbmciLCJmdW5jIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBRUEsT0FBT0EsU0FBUCxNQUFzQixZQUF0QjtBQUNBLE9BQU9DLEtBQVAsSUFBZ0JDLFdBQWhCLEVBQTZCQyxTQUE3QixFQUF3Q0MsT0FBeEMsRUFBaURDLE1BQWpELEVBQXlEQyxRQUF6RCxRQUF5RSxPQUF6RTtBQUVBLE9BQU9DLE9BQVAsTUFBb0IsV0FBcEI7QUFDQSxPQUFPQyxXQUFQLE1BQXdCLGVBQXhCO0FBQ0EsT0FBT0MsVUFBUCxNQUF1QixjQUF2QjtBQUNBLE9BQU9DLFlBQVAsTUFBeUIsZ0JBQXpCOztBQUVBLFNBQVNDLFFBQVQsR0FBMEI7QUFBQSxvQ0FBTEMsR0FBSztBQUFMQSxJQUFBQSxHQUFLO0FBQUE7O0FBQ3hCLFNBQU8sWUFBWTtBQUFBO0FBQUE7O0FBQ2pCO0FBQ0EsNkJBQUFBLEdBQUcsTUFBSCxDQUFBQSxHQUFHLEVBQVMsVUFBQUMsRUFBRTtBQUFBLGFBQUlBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTLEtBQVQsRUFBZUMsVUFBZixDQUFKO0FBQUEsS0FBWCxDQUFIO0FBQ0QsR0FIRDtBQUlEOztBQUVELFNBQVNDLG9CQUFULENBQThCQyxXQUE5QixFQUEyQztBQUN6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QUFpQixFQUFFK0QsU0FBUyxDQUFDQyxZQUFWLElBQTBCRCxTQUFTLENBQUNDLFlBQVYsQ0FBdUJDLFlBQWpELElBQWlFcEYsWUFBWSxDQUFDLG1CQUFELENBVjFFO0FBV3RCb0IsRUFBQUEsT0FBTyxFQUFFdUI7QUFYYSxDQUF4QjtBQWNBbEMsUUFBUSxDQUFDNEUsU0FBVCxHQUFxQjtBQUNuQjNFLEVBQUFBLFFBQVEsRUFBRXBCLFNBQVMsQ0FBQ2dHLEdBREQ7QUFFbkIzRSxFQUFBQSxLQUFLLEVBQUVyQixTQUFTLENBQUNnRyxHQUZFO0FBR25CMUUsRUFBQUEsT0FBTyxFQUFFdEIsU0FBUyxDQUFDaUcsTUFIQTtBQUluQjFFLEVBQUFBLElBQUksRUFBRXZCLFNBQVMsQ0FBQ2lHLE1BSkc7QUFLbkJ6RSxFQUFBQSxTQUFTLEVBQUV4QixTQUFTLENBQUNrRyxJQUxGO0FBTW5CekUsRUFBQUEsT0FBTyxFQUFFekIsU0FBUyxDQUFDa0csSUFOQTtBQU9uQnhFLEVBQUFBLFVBQVUsRUFBRTFCLFNBQVMsQ0FBQ2tHLElBUEg7QUFRbkJ2RSxFQUFBQSxVQUFVLEVBQUUzQixTQUFTLENBQUNrRyxJQVJIO0FBU25CdEUsRUFBQUEsaUJBQWlCLEVBQUU1QixTQUFTLENBQUNnRyxHQVRWO0FBVW5CbkUsRUFBQUEsaUJBQWlCLEVBQUU3QixTQUFTLENBQUNnRyxHQVZWO0FBV25CbEUsRUFBQUEsT0FBTyxFQUFFOUIsU0FBUyxDQUFDZ0c7QUFYQSxDQUFyQjtBQWNBLGVBQWU3RSxRQUFmIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50IG5vLW1hZ2ljLW51bWJlcnM6IFtcImVycm9yXCIsIHsgXCJpZ25vcmVcIjogWzAsIDEsIDIsIDNdIH1dICovXG5cbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlTWVtbywgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IENvbnRleHQgZnJvbSAnLi9Db250ZXh0JztcbmltcG9ydCB1c2VQcmV2aW91cyBmcm9tICcuL3VzZVByZXZpb3VzJztcbmltcG9ydCB1c2VSZWZGcm9tIGZyb20gJy4vdXNlUmVmRnJvbSc7XG5pbXBvcnQgdmVuZG9yUHJlZml4IGZyb20gJy4vdmVuZG9yUHJlZml4JztcblxuZnVuY3Rpb24gYXBwbHlBbGwoLi4uZm5zKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWludmFsaWQtdGhpcywgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgZm5zLmZvckVhY2goZm4gPT4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlY29nbml0aW9uQWJvcnRhYmxlKHJlY29nbml0aW9uKSB7XG4gIHJldHVybiAhIShyZWNvZ25pdGlvbiAmJiB0eXBlb2YgcmVjb2duaXRpb24uYWJvcnQgPT09ICdmdW5jdGlvbicpO1xufVxuXG5jb25zdCBDb21wb3NlciA9ICh7XG4gIGNoaWxkcmVuLFxuICBleHRyYSxcbiAgZ3JhbW1hcixcbiAgbGFuZyxcbiAgb25EaWN0YXRlLFxuICBvbkVycm9yLFxuICBvblByb2dyZXNzLFxuICBvblJhd0V2ZW50LFxuICBzcGVlY2hHcmFtbWFyTGlzdCxcbiAgc3BlZWNoUmVjb2duaXRpb24sXG4gIHN0YXJ0ZWRcbn0pID0+IHtcbiAgY29uc3QgW3JlYWR5U3RhdGUsIHNldFJlYWR5U3RhdGVdID0gdXNlU3RhdGUoMCk7XG4gIGNvbnN0IGVtaXREaWN0YXRlT25FbmRSZWYgPSB1c2VSZWYoZmFsc2UpO1xuICBjb25zdCBleHRyYVJlZiA9IHVzZVJlZkZyb20oZXh0cmEpO1xuICBjb25zdCBncmFtbWFyUmVmID0gdXNlUmVmRnJvbShncmFtbWFyKTtcbiAgY29uc3QgbGFuZ1JlZiA9IHVzZVJlZkZyb20obGFuZyk7XG4gIGNvbnN0IG5vdEFsbG93ZWRSZWYgPSB1c2VSZWYoZmFsc2UpO1xuICBjb25zdCBvbkRpY3RhdGVSZWYgPSB1c2VSZWZGcm9tKG9uRGljdGF0ZSk7XG4gIGNvbnN0IG9uRXJyb3JSZWYgPSB1c2VSZWZGcm9tKG9uRXJyb3IpO1xuICBjb25zdCBvblByb2dyZXNzUmVmID0gdXNlUmVmRnJvbShvblByb2dyZXNzKTtcbiAgY29uc3Qgb25SYXdFdmVudFJlZiA9IHVzZVJlZkZyb20ob25SYXdFdmVudCk7XG4gIGNvbnN0IHByZXZTcGVlY2hSZWNvZ25pdGlvbiA9IHVzZVByZXZpb3VzKHNwZWVjaFJlY29nbml0aW9uKTtcbiAgY29uc3QgcmVjb2duaXRpb25SZWYgPSB1c2VSZWYoKTtcbiAgY29uc3Qgc3BlZWNoR3JhbW1hckxpc3RSZWYgPSB1c2VSZWZGcm9tKHNwZWVjaEdyYW1tYXJMaXN0KTtcbiAgY29uc3Qgc3BlZWNoUmVjb2duaXRpb25SZWYgPSB1c2VSZWZGcm9tKHNwZWVjaFJlY29nbml0aW9uKTtcblxuICAvLyBJZiBcInNwZWVjaFJlY29nbml0aW9uXCIgcG9ueWZpbGwgY2hhbmdlZCwgcmVzZXQgdGhlIFwibm90QWxsb3dlZFwiIGZsYWcuXG4gIGlmIChwcmV2U3BlZWNoUmVjb2duaXRpb24gIT09IHNwZWVjaFJlY29nbml0aW9uKSB7XG4gICAgbm90QWxsb3dlZFJlZi5jdXJyZW50ID0gZmFsc2U7XG4gIH1cblxuICBjb25zdCBoYW5kbGVBdWRpb0VuZCA9IHVzZUNhbGxiYWNrKFxuICAgICh7IHRhcmdldCB9KSA9PiB0YXJnZXQgPT09IHJlY29nbml0aW9uUmVmLmN1cnJlbnQgJiYgc2V0UmVhZHlTdGF0ZSgzKSxcbiAgICBbcmVjb2duaXRpb25SZWYsIHNldFJlYWR5U3RhdGVdXG4gICk7XG5cbiAgY29uc3QgaGFuZGxlQXVkaW9TdGFydCA9IHVzZUNhbGxiYWNrKFxuICAgICh7IHRhcmdldCB9KSA9PiB7XG4gICAgICBpZiAodGFyZ2V0ICE9PSByZWNvZ25pdGlvblJlZi5jdXJyZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2V0UmVhZHlTdGF0ZSgyKTtcblxuICAgICAgLy8gV2ViIFNwZWVjaCBBUEkgZG9lcyBub3QgZW1pdCBcInJlc3VsdFwiIHdoZW4gbm90aGluZyBpcyBoZWFyZCwgYW5kIENocm9tZSBkb2VzIG5vdCBlbWl0IFwibm9tYXRjaFwiIGV2ZW50LlxuICAgICAgLy8gQmVjYXVzZSB3ZSBlbWl0dGVkIG9uUHJvZ3Jlc3MsIHdlIHNob3VsZCBlbWl0IFwiZGljdGF0ZVwiIGlmIG5vdCBlcnJvciwgc28gdGhleSB3b3JrcyBpbiBwYWlyLlxuICAgICAgZW1pdERpY3RhdGVPbkVuZFJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgIG9uUHJvZ3Jlc3NSZWYuY3VycmVudCAmJiBvblByb2dyZXNzUmVmLmN1cnJlbnQoeyBhYm9ydGFibGU6IHJlY29nbml0aW9uQWJvcnRhYmxlKHRhcmdldCksIHR5cGU6ICdwcm9ncmVzcycgfSk7XG4gICAgfSxcbiAgICBbZW1pdERpY3RhdGVPbkVuZFJlZiwgb25Qcm9ncmVzc1JlZiwgcmVjb2duaXRpb25SZWYsIHNldFJlYWR5U3RhdGVdXG4gICk7XG5cbiAgY29uc3QgaGFuZGxlRW5kID0gdXNlQ2FsbGJhY2soXG4gICAgKHsgdGFyZ2V0IH0pID0+IHtcbiAgICAgIGlmICh0YXJnZXQgIT09IHJlY29nbml0aW9uUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWNvZ25pdGlvblJlZi5jdXJyZW50ID0gdW5kZWZpbmVkO1xuICAgICAgc2V0UmVhZHlTdGF0ZSgwKTtcblxuICAgICAgaWYgKGVtaXREaWN0YXRlT25FbmRSZWYuY3VycmVudCkge1xuICAgICAgICBvbkRpY3RhdGVSZWYuY3VycmVudCAmJiBvbkRpY3RhdGVSZWYuY3VycmVudCh7IHR5cGU6ICdkaWN0YXRlJyB9KTtcbiAgICAgICAgZW1pdERpY3RhdGVPbkVuZFJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSxcbiAgICBbZW1pdERpY3RhdGVPbkVuZFJlZiwgb25EaWN0YXRlUmVmLCByZWNvZ25pdGlvblJlZiwgc2V0UmVhZHlTdGF0ZV1cbiAgKTtcblxuICBjb25zdCBoYW5kbGVFcnJvciA9IHVzZUNhbGxiYWNrKFxuICAgIGV2ZW50ID0+IHtcbiAgICAgIGlmIChldmVudC50YXJnZXQgIT09IHJlY29nbml0aW9uUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBFcnJvciBvdXQsIG5vIG5lZWQgdG8gZW1pdCBcImRpY3RhdGVcIlxuICAgICAgZW1pdERpY3RhdGVPbkVuZFJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICByZWNvZ25pdGlvblJlZi5jdXJyZW50ID0gdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoZXZlbnQuZXJyb3IgPT09ICdub3QtYWxsb3dlZCcpIHtcbiAgICAgICAgbm90QWxsb3dlZFJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgc2V0UmVhZHlTdGF0ZSgwKTtcblxuICAgICAgb25FcnJvclJlZi5jdXJyZW50ICYmIG9uRXJyb3JSZWYuY3VycmVudChldmVudCk7XG4gICAgfSxcbiAgICBbZW1pdERpY3RhdGVPbkVuZFJlZiwgb25FcnJvclJlZiwgbm90QWxsb3dlZFJlZiwgcmVjb2duaXRpb25SZWYsIHNldFJlYWR5U3RhdGVdXG4gICk7XG5cbiAgY29uc3QgaGFuZGxlUmF3RXZlbnQgPSB1c2VDYWxsYmFjayhcbiAgICBldmVudCA9PiB7XG4gICAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSByZWNvZ25pdGlvblJlZi5jdXJyZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgb25SYXdFdmVudFJlZi5jdXJyZW50ICYmIG9uUmF3RXZlbnRSZWYuY3VycmVudChldmVudCk7XG4gICAgfSxcbiAgICBbb25SYXdFdmVudFJlZiwgcmVjb2duaXRpb25SZWZdXG4gICk7XG5cbiAgY29uc3QgaGFuZGxlUmVzdWx0ID0gdXNlQ2FsbGJhY2soXG4gICAgKHsgcmVzdWx0czogcmF3UmVzdWx0cywgdGFyZ2V0IH0pID0+IHtcbiAgICAgIGlmICh0YXJnZXQgIT09IHJlY29nbml0aW9uUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAocmF3UmVzdWx0cy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IFtdLm1hcC5jYWxsKHJhd1Jlc3VsdHMsIGFsdHMgPT4ge1xuICAgICAgICAgIC8vIERlc3RydWN0dXJpbmcgYnJlYWtzIEFuZ3VsYXIgZHVlIHRvIGEgYnVnIGluIFpvbmUuanMuXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgICAgY29uc3QgZmlyc3RBbHQgPSBhbHRzWzBdO1xuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbmZpZGVuY2U6IGZpcnN0QWx0LmNvbmZpZGVuY2UsXG4gICAgICAgICAgICB0cmFuc2NyaXB0OiBmaXJzdEFsdC50cmFuc2NyaXB0XG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gRGVzdHJ1Y3R1cmluZyBicmVha3MgQW5ndWxhciBkdWUgdG8gYSBidWcgaW4gWm9uZS5qcy5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIGNvbnN0IGZpcnN0ID0gcmF3UmVzdWx0c1swXTtcblxuICAgICAgICBpZiAoZmlyc3QuaXNGaW5hbCkge1xuICAgICAgICAgIC8vIEFmdGVyIFwib25EaWN0YXRlXCIgY2FsbGJhY2ssIHRoZSBjYWxsZXIgc2hvdWxkIGJlIGFibGUgdG8gc2V0IFwic3RhcnRlZFwiIHRvIGZhbHNlIG9uIGFuIHVuYWJvcnRhYmxlIHJlY29nbml0aW9uLlxuICAgICAgICAgIC8vIFRPRE86IEFkZCB0ZXN0IGZvciBmb3J0aWZpY2F0aW9uLlxuICAgICAgICAgIHJlY29nbml0aW9uUmVmLmN1cnJlbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgc2V0UmVhZHlTdGF0ZSgwKTtcblxuICAgICAgICAgIG9uRGljdGF0ZVJlZi5jdXJyZW50ICYmIG9uRGljdGF0ZVJlZi5jdXJyZW50KHsgcmVzdWx0OiByZXN1bHRzWzBdLCB0eXBlOiAnZGljdGF0ZScgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb25Qcm9ncmVzc1JlZi5jdXJyZW50ICYmXG4gICAgICAgICAgICBvblByb2dyZXNzUmVmLmN1cnJlbnQoeyBhYm9ydGFibGU6IHJlY29nbml0aW9uQWJvcnRhYmxlKHRhcmdldCksIHJlc3VsdHMsIHR5cGU6ICdwcm9ncmVzcycgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFtvbkRpY3RhdGVSZWYsIG9uUHJvZ3Jlc3NSZWYsIHJlY29nbml0aW9uUmVmLCBzZXRSZWFkeVN0YXRlXVxuICApO1xuXG4gIGNvbnN0IGhhbmRsZVN0YXJ0ID0gdXNlQ2FsbGJhY2soXG4gICAgKHsgdGFyZ2V0IH0pID0+IHRhcmdldCA9PT0gcmVjb2duaXRpb25SZWYuY3VycmVudCAmJiBzZXRSZWFkeVN0YXRlKDEpLFxuICAgIFtyZWNvZ25pdGlvblJlZiwgc2V0UmVhZHlTdGF0ZV1cbiAgKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChzdGFydGVkKSB7XG4gICAgICBpZiAoIXNwZWVjaFJlY29nbml0aW9uUmVmLmN1cnJlbnQgfHwgbm90QWxsb3dlZFJlZi5jdXJyZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU3BlZWNoIHJlY29nbml0aW9uIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZ3JhbW1hcnMgPSBzcGVlY2hHcmFtbWFyTGlzdFJlZi5jdXJyZW50ICYmIGdyYW1tYXJSZWYuY3VycmVudCAmJiBuZXcgc3BlZWNoR3JhbW1hckxpc3RSZWYuY3VycmVudCgpO1xuICAgICAgY29uc3QgcmVjb2duaXRpb24gPSAocmVjb2duaXRpb25SZWYuY3VycmVudCA9IG5ldyBzcGVlY2hSZWNvZ25pdGlvblJlZi5jdXJyZW50KCkpO1xuXG4gICAgICBpZiAoZ3JhbW1hcnMpIHtcbiAgICAgICAgZ3JhbW1hcnMuYWRkRnJvbVN0cmluZyhncmFtbWFyUmVmLmN1cnJlbnQsIDEpO1xuXG4gICAgICAgIHJlY29nbml0aW9uLmdyYW1tYXJzID0gZ3JhbW1hcnM7XG4gICAgICB9XG5cbiAgICAgIHJlY29nbml0aW9uLmxhbmcgPSBsYW5nUmVmLmN1cnJlbnQ7XG4gICAgICByZWNvZ25pdGlvbi5pbnRlcmltUmVzdWx0cyA9IHRydWU7XG4gICAgICByZWNvZ25pdGlvbi5vbmF1ZGlvZW5kID0gYXBwbHlBbGwoaGFuZGxlQXVkaW9FbmQsIGhhbmRsZVJhd0V2ZW50KTtcbiAgICAgIHJlY29nbml0aW9uLm9uYXVkaW9zdGFydCA9IGFwcGx5QWxsKGhhbmRsZUF1ZGlvU3RhcnQsIGhhbmRsZVJhd0V2ZW50KTtcbiAgICAgIHJlY29nbml0aW9uLm9uZW5kID0gYXBwbHlBbGwoaGFuZGxlRW5kLCBoYW5kbGVSYXdFdmVudCk7XG4gICAgICByZWNvZ25pdGlvbi5vbmVycm9yID0gYXBwbHlBbGwoaGFuZGxlRXJyb3IsIGhhbmRsZVJhd0V2ZW50KTtcbiAgICAgIHJlY29nbml0aW9uLm9ubm9tYXRjaCA9IGhhbmRsZVJhd0V2ZW50O1xuICAgICAgcmVjb2duaXRpb24ub25yZXN1bHQgPSBhcHBseUFsbChoYW5kbGVSZXN1bHQsIGhhbmRsZVJhd0V2ZW50KTtcbiAgICAgIHJlY29nbml0aW9uLm9uc291bmRlbmQgPSBoYW5kbGVSYXdFdmVudDtcbiAgICAgIHJlY29nbml0aW9uLm9uc291bmRzdGFydCA9IGhhbmRsZVJhd0V2ZW50O1xuICAgICAgcmVjb2duaXRpb24ub25zcGVlY2hlbmQgPSBoYW5kbGVSYXdFdmVudDtcbiAgICAgIHJlY29nbml0aW9uLm9uc3BlZWNoc3RhcnQgPSBoYW5kbGVSYXdFdmVudDtcbiAgICAgIHJlY29nbml0aW9uLm9uc3RhcnQgPSBhcHBseUFsbChoYW5kbGVTdGFydCwgaGFuZGxlUmF3RXZlbnQpO1xuXG4gICAgICBjb25zdCB7IGN1cnJlbnQ6IGV4dHJhIH0gPSBleHRyYVJlZjtcblxuICAgICAgZXh0cmEgJiZcbiAgICAgICAgT2JqZWN0LmVudHJpZXMoZXh0cmEpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgIGlmIChrZXkgIT09ICdjb25zdHJ1Y3RvcicgJiYga2V5ICE9PSAncHJvdG90eXBlJyAmJiBrZXkgIT09ICdfX3Byb3RvX18nKSB7XG4gICAgICAgICAgICByZWNvZ25pdGlvbltrZXldID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgcmVjb2duaXRpb24uc3RhcnQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29uc3QgeyBjdXJyZW50OiByZWNvZ25pdGlvbiB9ID0gcmVjb2duaXRpb25SZWY7XG5cbiAgICAgIGlmIChyZWNvZ25pdGlvbikge1xuICAgICAgICBpZiAocmVjb2duaXRpb25BYm9ydGFibGUocmVjb2duaXRpb24pKSB7XG4gICAgICAgICAgcmVjb2duaXRpb24uYWJvcnQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBzdG9wIHJlY29nbml0aW9uIHdoaWxlIHRoZSBjdXJyZW50IG9uZSBpcyBvbmdvaW5nIGFuZCBpcyBub3QgYWJvcnRhYmxlLicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW1xuICAgIGV4dHJhUmVmLFxuICAgIGdyYW1tYXJSZWYsXG4gICAgaGFuZGxlQXVkaW9FbmQsXG4gICAgaGFuZGxlQXVkaW9TdGFydCxcbiAgICBoYW5kbGVFbmQsXG4gICAgaGFuZGxlRXJyb3IsXG4gICAgaGFuZGxlUmF3RXZlbnQsXG4gICAgaGFuZGxlUmVzdWx0LFxuICAgIGhhbmRsZVN0YXJ0LFxuICAgIGxhbmdSZWYsXG4gICAgbm90QWxsb3dlZFJlZixcbiAgICByZWNvZ25pdGlvblJlZixcbiAgICBzcGVlY2hHcmFtbWFyTGlzdFJlZixcbiAgICBzcGVlY2hSZWNvZ25pdGlvblJlZixcbiAgICBzdGFydGVkXG4gIF0pO1xuXG4gIGNvbnN0IGFib3J0YWJsZSA9IHJlY29nbml0aW9uQWJvcnRhYmxlKHJlY29nbml0aW9uUmVmLmN1cnJlbnQpICYmIHJlYWR5U3RhdGUgPT09IDI7XG4gIGNvbnN0IHN1cHBvcnRlZCA9ICEhc3BlZWNoUmVjb2duaXRpb24gJiYgIW5vdEFsbG93ZWRSZWYuY3VycmVudDtcblxuICBjb25zdCBjb250ZXh0ID0gdXNlTWVtbyhcbiAgICAoKSA9PiAoe1xuICAgICAgYWJvcnRhYmxlLFxuICAgICAgcmVhZHlTdGF0ZSxcbiAgICAgIHN1cHBvcnRlZFxuICAgIH0pLFxuICAgIFthYm9ydGFibGUsIHJlYWR5U3RhdGUsIHN1cHBvcnRlZF1cbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtjb250ZXh0fT5cbiAgICAgIDxDb250ZXh0LkNvbnN1bWVyPntjb250ZXh0ID0+ICh0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbicgPyBjaGlsZHJlbihjb250ZXh0KSA6IGNoaWxkcmVuKX08L0NvbnRleHQuQ29uc3VtZXI+XG4gICAgPC9Db250ZXh0LlByb3ZpZGVyPlxuICApO1xufTtcblxuQ29tcG9zZXIuZGVmYXVsdFByb3BzID0ge1xuICBjaGlsZHJlbjogdW5kZWZpbmVkLFxuICBleHRyYTogdW5kZWZpbmVkLFxuICBncmFtbWFyOiB1bmRlZmluZWQsXG4gIGxhbmc6IHVuZGVmaW5lZCxcbiAgb25EaWN0YXRlOiB1bmRlZmluZWQsXG4gIG9uRXJyb3I6IHVuZGVmaW5lZCxcbiAgb25Qcm9ncmVzczogdW5kZWZpbmVkLFxuICBvblJhd0V2ZW50OiB1bmRlZmluZWQsXG4gIHNwZWVjaEdyYW1tYXJMaXN0OiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzICYmIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhICYmIHZlbmRvclByZWZpeCgnU3BlZWNoR3JhbW1hckxpc3QnKSxcbiAgc3BlZWNoUmVjb2duaXRpb246IG5hdmlnYXRvci5tZWRpYURldmljZXMgJiYgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEgJiYgdmVuZG9yUHJlZml4KCdTcGVlY2hSZWNvZ25pdGlvbicpLFxuICBzdGFydGVkOiB1bmRlZmluZWRcbn07XG5cbkNvbXBvc2VyLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5hbnksXG4gIGV4dHJhOiBQcm9wVHlwZXMuYW55LFxuICBncmFtbWFyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBsYW5nOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBvbkRpY3RhdGU6IFByb3BUeXBlcy5mdW5jLFxuICBvbkVycm9yOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25Qcm9ncmVzczogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uUmF3RXZlbnQ6IFByb3BUeXBlcy5mdW5jLFxuICBzcGVlY2hHcmFtbWFyTGlzdDogUHJvcFR5cGVzLmFueSxcbiAgc3BlZWNoUmVjb2duaXRpb246IFByb3BUeXBlcy5hbnksXG4gIHN0YXJ0ZWQ6IFByb3BUeXBlcy5hbnlcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvc2VyO1xuIl19