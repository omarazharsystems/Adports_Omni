import _slicedToArray from "@babel/runtime-corejs3/helpers/slicedToArray";

/* eslint no-magic-numbers: ["error", { "ignore": [0, 1, 2, 3] }] */
import PropTypes from 'prop-types';
import React, { useCallback, useState } from 'react';
import Composer from './Composer';
import useReadyState from './hooks/useReadyState';
import useRefFrom from './useRefFrom';
import useSupported from './hooks/useSupported';

var DictateButtonCore = function DictateButtonCore(_ref) {
  var children = _ref.children,
      className = _ref.className,
      disabled = _ref.disabled,
      onClick = _ref.onClick;

  var _useReadyState = useReadyState(),
      _useReadyState2 = _slicedToArray(_useReadyState, 1),
      readyState = _useReadyState2[0];

  var _useSupported = useSupported(),
      _useSupported2 = _slicedToArray(_useSupported, 1),
      supported = _useSupported2[0];

  return /*#__PURE__*/React.createElement("button", {
    className: className,
    disabled: readyState === 1 || readyState === 3 || !supported || disabled,
    onClick: onClick,
    type: "button"
  }, typeof children === 'function' ? children({
    readyState: readyState
  }) : children);
};

DictateButtonCore.defaultProps = {
  children: undefined,
  className: undefined,
  disabled: undefined
};
DictateButtonCore.propTypes = {
  children: PropTypes.any,
  className: PropTypes.string,
  disabled: PropTypes.bool,
  onClick: PropTypes.func.isRequired
};

var DictateButton = function DictateButton(_ref2) {
  var children = _ref2.children,
      className = _ref2.className,
      disabled = _ref2.disabled,
      extra = _ref2.extra,
      grammar = _ref2.grammar,
      lang = _ref2.lang,
      onClick = _ref2.onClick,
      onDictate = _ref2.onDictate,
      onError = _ref2.onError,
      onProgress = _ref2.onProgress,
      onRawEvent = _ref2.onRawEvent,
      speechGrammarList = _ref2.speechGrammarList,
      speechRecognition = _ref2.speechRecognition;

  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      started = _useState2[0],
      setStarted = _useState2[1];

  var onClickRef = useRefFrom(onClick);
  var onDictateRef = useRefFrom(onDictate);
  var onErrorRef = useRefFrom(onError);
  var handleClick = useCallback(function (event) {
    onClickRef.current && onClickRef.current(event);
    !event.isDefaultPrevented() && setStarted(function (started) {
      return !started;
    });
  }, [onClickRef, setStarted]);
  var handleDictate = useCallback(function (event) {
    setStarted(false);
    onDictateRef.current && onDictateRef.current(event);
  }, [onDictateRef, setStarted]);
  var handleError = useCallback(function (event) {
    setStarted(false);
    onErrorRef.current && onErrorRef.current(event);
  }, [onErrorRef, setStarted]);
  return /*#__PURE__*/React.createElement(Composer, {
    extra: extra,
    grammar: grammar,
    lang: lang,
    onDictate: handleDictate,
    onError: handleError,
    onProgress: onProgress,
    onRawEvent: onRawEvent,
    speechGrammarList: speechGrammarList,
    speechRecognition: speechRecognition,
    started: started && !disabled
  }, /*#__PURE__*/React.createElement(DictateButtonCore, {
    className: className,
    disabled: disabled,
    onClick: handleClick
  }, children));
};

DictateButton.defaultProps = {
  children: undefined,
  className: undefined,
  disabled: undefined,
  extra: undefined,
  grammar: undefined,
  lang: undefined,
  onClick: undefined,
  onDictate: undefined,
  onError: undefined,
  onProgress: undefined,
  onRawEvent: undefined,
  speechGrammarList: undefined,
  speechRecognition: undefined
};
DictateButton.propTypes = {
  children: PropTypes.any,
  className: PropTypes.string,
  disabled: PropTypes.bool,
  extra: PropTypes.any,
  grammar: PropTypes.string,
  lang: PropTypes.string,
  onClick: PropTypes.func,
  onDictate: PropTypes.func,
  onError: PropTypes.func,
  onProgress: PropTypes.func,
  onRawEvent: PropTypes.func,
  speechGrammarList: PropTypes.any,
  speechRecognition: PropTypes.any
};
export default DictateButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,