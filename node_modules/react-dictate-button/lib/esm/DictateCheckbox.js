import _slicedToArray from "@babel/runtime-corejs3/helpers/slicedToArray";

/* eslint no-magic-numbers: ["error", { "ignore": [0, 1, 2, 3] }] */
import PropTypes from 'prop-types';
import React, { useCallback, useState } from 'react';
import Composer from './Composer';
import useReadyState from './hooks/useReadyState';
import useSupported from './hooks/useSupported';

var DictateCheckboxCore = function DictateCheckboxCore(_ref) {
  var children = _ref.children,
      className = _ref.className,
      disabled = _ref.disabled,
      onChange = _ref.onChange,
      started = _ref.started;

  var _useReadyState = useReadyState(),
      _useReadyState2 = _slicedToArray(_useReadyState, 1),
      readyState = _useReadyState2[0];

  var _useSupported = useSupported(),
      _useSupported2 = _slicedToArray(_useSupported, 1),
      supported = _useSupported2[0];

  return /*#__PURE__*/React.createElement("label", null, /*#__PURE__*/React.createElement("input", {
    checked: started,
    className: className,
    disabled: readyState === 1 || readyState === 3 || !supported || disabled,
    onChange: onChange,
    type: "checkbox"
  }), typeof children === 'function' ? children({
    readyState: readyState
  }) : children);
};

DictateCheckboxCore.defaultProps = {
  children: undefined,
  className: undefined,
  disabled: undefined
};
DictateCheckboxCore.propTypes = {
  children: PropTypes.any,
  className: PropTypes.string,
  disabled: PropTypes.bool,
  onChange: PropTypes.func.isRequired,
  started: PropTypes.bool.isRequired
};

var DictateCheckbox = function DictateCheckbox(_ref2) {
  var children = _ref2.children,
      className = _ref2.className,
      disabled = _ref2.disabled,
      extra = _ref2.extra,
      grammar = _ref2.grammar,
      lang = _ref2.lang,
      onDictate = _ref2.onDictate,
      onError = _ref2.onError,
      onProgress = _ref2.onProgress,
      onRawEvent = _ref2.onRawEvent,
      speechGrammarList = _ref2.speechGrammarList,
      speechRecognition = _ref2.speechRecognition;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      started = _useState2[0],
      setStarted = _useState2[1];

  var handleChange = useCallback(function (_ref3) {
    var checked = _ref3.target.checked;
    setStarted(checked);
  }, [setStarted]);
  var handleDictate = useCallback(function (event) {
    setStarted(false);
    onDictate && onDictate(event);
  }, [onDictate, setStarted]);
  var handleError = useCallback(function (event) {
    setStarted(false);
    onError && onError(event);
  }, [onError, setStarted]);
  return /*#__PURE__*/React.createElement(Composer, {
    extra: extra,
    grammar: grammar,
    lang: lang,
    onDictate: handleDictate,
    onError: handleError,
    onProgress: onProgress,
    onRawEvent: onRawEvent,
    speechGrammarList: speechGrammarList,
    speechRecognition: speechRecognition,
    started: started && !disabled
  }, /*#__PURE__*/React.createElement(DictateCheckboxCore, {
    className: className,
    disabled: disabled,
    onChange: handleChange,
    started: started
  }, children));
};

DictateCheckbox.defaultProps = {
  children: undefined,
  className: undefined,
  disabled: undefined,
  extra: undefined,
  grammar: undefined,
  lang: undefined,
  onDictate: undefined,
  onError: undefined,
  onProgress: undefined,
  onRawEvent: undefined,
  speechGrammarList: undefined,
  speechRecognition: undefined
};
DictateCheckbox.propTypes = {
  children: PropTypes.any,
  className: PropTypes.string,
  disabled: PropTypes.bool,
  extra: PropTypes.any,
  grammar: PropTypes.string,
  lang: PropTypes.string,
  onDictate: PropTypes.func,
  onError: PropTypes.func,
  onProgress: PropTypes.func,
  onRawEvent: PropTypes.func,
  speechGrammarList: PropTypes.any,
  speechRecognition: PropTypes.any
};
export default DictateCheckbox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,