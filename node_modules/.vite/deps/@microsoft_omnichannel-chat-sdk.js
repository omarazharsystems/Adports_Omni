import {
  require_LogLevel
} from "./chunk-D37BO4AK.js";
import {
  init_src,
  init_src2,
  require_DeliveryMode,
  require_FileSharingProtocolType,
  require_HostType,
  require_MessageContentType,
  require_MessageType,
  require_PersonType,
  require_ProtocoleType,
  require_asyncToGenerator,
  require_axios,
  require_classCallCheck,
  require_createClass,
  require_crypto,
  require_defineProperty,
  require_interopRequireDefault,
  require_lib,
  require_lib2,
  require_package,
  require_package2,
  require_package3,
  require_package4,
  require_regenerator,
  require_typeof,
  src_exports,
  src_exports2
} from "./chunk-Z6QG7C7D.js";
import "./chunk-AI3I5DMF.js";
import {
  __commonJS,
  __require,
  __toCommonJS
} from "./chunk-AUZ3RYOM.js";

// node_modules/@microsoft/ocsdk/lib/Common/EventNames.js
var require_EventNames = __commonJS({
  "node_modules/@microsoft/ocsdk/lib/Common/EventNames.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var EventNames = function() {
      function EventNames2() {
        (0, _classCallCheck2["default"])(this, EventNames2);
      }
      (0, _createClass2["default"])(EventNames2, null, [{
        key: "OCSDKLOAD",
        get: function get() {
          return "oc:sdk:load";
        }
      }]);
      return EventNames2;
    }();
    exports["default"] = EventNames;
  }
});

// node_modules/@microsoft/ocsdk/lib/Common/Enums.js
var require_Enums = __commonJS({
  "node_modules/@microsoft/ocsdk/lib/Common/Enums.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SDKError = exports.LiveChatVersion = exports.OCSDKTelemetryEvent = exports.ChannelId = exports.OperatingSystem = exports.DeviceType = exports.Browser = exports.BrowserVendor = void 0;
    var BrowserVendor;
    exports.BrowserVendor = BrowserVendor;
    (function(BrowserVendor2) {
      BrowserVendor2["IE"] = "IE";
      BrowserVendor2["CHROME"] = "Chrome";
      BrowserVendor2["FIREFOX"] = "Firefox";
      BrowserVendor2["SAFARI"] = "Safari";
      BrowserVendor2["EDGE"] = "Edge";
      BrowserVendor2["EDGE_CHROMIUM"] = "Edg";
      BrowserVendor2["OPERA"] = "Opera";
      BrowserVendor2["UNKNOWN"] = "Unknown";
    })(BrowserVendor || (exports.BrowserVendor = BrowserVendor = {}));
    var Browser;
    exports.Browser = Browser;
    (function(Browser2) {
      Browser2[Browser2["Chrome"] = 0] = "Chrome";
      Browser2[Browser2["Firefox"] = 1] = "Firefox";
      Browser2[Browser2["Ie"] = 2] = "Ie";
      Browser2[Browser2["Edge"] = 3] = "Edge";
      Browser2[Browser2["Safari"] = 4] = "Safari";
      Browser2[Browser2["None"] = 5] = "None";
    })(Browser || (exports.Browser = Browser = {}));
    var DeviceType;
    exports.DeviceType = DeviceType;
    (function(DeviceType2) {
      DeviceType2["Desktop"] = "Desktop";
      DeviceType2["Mobile"] = "Mobile";
      DeviceType2["Tablet"] = "Tablet";
    })(DeviceType || (exports.DeviceType = DeviceType = {}));
    var OperatingSystem;
    exports.OperatingSystem = OperatingSystem;
    (function(OperatingSystem2) {
      OperatingSystem2["WINDOWS"] = "Windows";
      OperatingSystem2["MACOSX"] = "Mac OS X";
      OperatingSystem2["WINDOWS_PHONE"] = "Windows Phone";
      OperatingSystem2["WINDOWS_RT"] = "Windows RT";
      OperatingSystem2["IOS"] = "iOS";
      OperatingSystem2["ANDROID"] = "Android";
      OperatingSystem2["LINUX"] = "Linux";
      OperatingSystem2["UNKNOWN"] = "Unknown";
    })(OperatingSystem || (exports.OperatingSystem = OperatingSystem = {}));
    var ChannelId;
    exports.ChannelId = ChannelId;
    (function(ChannelId2) {
      ChannelId2["LCW"] = "lcw";
      ChannelId2["SMS"] = "sms";
      ChannelId2["FACEBOOK"] = "facebook";
      ChannelId2["WECHAT"] = "wechat";
    })(ChannelId || (exports.ChannelId = ChannelId = {}));
    var OCSDKTelemetryEvent;
    exports.OCSDKTelemetryEvent = OCSDKTelemetryEvent;
    (function(OCSDKTelemetryEvent2) {
      OCSDKTelemetryEvent2["GETCHATCONFIG"] = "GetChatConfig";
      OCSDKTelemetryEvent2["GETCHATCONFIGSUCCESS"] = "GetChatConfigSucceeded";
      OCSDKTelemetryEvent2["GETRECONNECTABLECHATS"] = "GetReconnnectableChats";
      OCSDKTelemetryEvent2["GETRECONNECTAVAILABILITY"] = "GetReconnnectableAvailability";
      OCSDKTelemetryEvent2["GETCHATTOKENSTARTED"] = "GetChatTokenStarted";
      OCSDKTelemetryEvent2["GETCHATTOKENSUCCEEDED"] = "GetChatTokenSucceeded";
      OCSDKTelemetryEvent2["GETCHATTOKENFAILED"] = "GetChatTokenFailed";
      OCSDKTelemetryEvent2["GETLWISTATUSSTARTED"] = "GetLwiStatusStarted";
      OCSDKTelemetryEvent2["GETLWISTATUSSUCCEEDED"] = "GetLwiStatusSucceeded";
      OCSDKTelemetryEvent2["GETLWISTATUSFAILED"] = "GetLwiStatusFailed";
      OCSDKTelemetryEvent2["SESSIONINITSTARTED"] = "SessionInitStarted";
      OCSDKTelemetryEvent2["SESSIONINITSUCCEEDED"] = "SessionInitSucceeded";
      OCSDKTelemetryEvent2["SESSIONINITFAILED"] = "SessionInitFailed";
      OCSDKTelemetryEvent2["SESSIONCLOSESTARTED"] = "SessionCloseStarted";
      OCSDKTelemetryEvent2["SESSIONCLOSESUCCEEDED"] = "SessionCloseSucceeded";
      OCSDKTelemetryEvent2["SESSIONCLOSEFAILED"] = "SessionCloseFailed";
      OCSDKTelemetryEvent2["SUBMITPOSTCHATSTARTED"] = "SubmitPostChatStarted";
      OCSDKTelemetryEvent2["SUBMITPOSTCHATSUCCEEDED"] = "SubmitPostChatSucceeded";
      OCSDKTelemetryEvent2["SUBMITPOSTCHATFAILED"] = "SubmitPostChatFailed";
      OCSDKTelemetryEvent2["GETCHATTRANSCRIPTSTARTED"] = "GetChatTranscriptStarted";
      OCSDKTelemetryEvent2["GETCHATTRANSCRIPTSUCCEEDED"] = "GetChatTranscriptSucceeded";
      OCSDKTelemetryEvent2["GETCHATTRANSCRIPTFAILED"] = "GetChatTranscriptFailed";
      OCSDKTelemetryEvent2["EMAILTRANSCRIPTSTARTED"] = "EmailTranscriptStarted";
      OCSDKTelemetryEvent2["EMAILTRANSCRIPTSUCCEEDED"] = "EmailTranscriptSucceeded";
      OCSDKTelemetryEvent2["EMAILTRANSCRIPTFAILED"] = "EmailTranscriptFailed";
      OCSDKTelemetryEvent2["FETCHDATAMASKINGSTARTED"] = "FetchDataMaskingStarted";
      OCSDKTelemetryEvent2["FETCHDATAMASKINGSUCCEEDED"] = "FetchDataMaskingSucceeded";
      OCSDKTelemetryEvent2["FETCHDATAMASKINGFAILED"] = "FetchDataMaskingFailed";
      OCSDKTelemetryEvent2["SECONDARYCHANNELEVENTREQUESTSTARTED"] = "SecondaryChannelEventRequestStarted";
      OCSDKTelemetryEvent2["SECONDARYCHANNELEVENTREQUESTSUCCEEDED"] = "SecondaryChannelEventRequestSucceeded";
      OCSDKTelemetryEvent2["SECONDARYCHANNELEVENTREQUESTFAILED"] = "SecondaryChannelEventRequestFailed";
      OCSDKTelemetryEvent2["GETSURVEYINVITELINKSTARTED"] = "GetSurveyInviteLinkStarted";
      OCSDKTelemetryEvent2["GETSURVEYINVITELINKSUCCEEDED"] = "GetSurveyInviteLinkSucceeded";
      OCSDKTelemetryEvent2["GETSURVEYINVITELINKFAILED"] = "GetSurveyInviteLinkFailed";
      OCSDKTelemetryEvent2["VALIDATEAUTHCHATRECORDSTARTED"] = "ValidateAuthChatRecordStarted";
      OCSDKTelemetryEvent2["VALIDATEAUTHCHATRECORDSUCCEEDED"] = "ValidateAuthChatRecordSucceeded";
      OCSDKTelemetryEvent2["VALIDATEAUTHCHATRECORDFAILED"] = "ValidateAuthChatRecordFailed";
      OCSDKTelemetryEvent2["GETAGENTAVAILABILITYSTARTED"] = "GetAgentAvailabilityStarted";
      OCSDKTelemetryEvent2["GETAGENTAVAILABILITYSUCCEEDED"] = "GetAgentAvailabilitySucceeded";
      OCSDKTelemetryEvent2["GETAGENTAVAILABILITYFAILED"] = "GetAgentAvailabilityFailed";
      OCSDKTelemetryEvent2["SENDTYPINGINDICATORFAILED"] = "SendTypingIndicatorFailed";
      OCSDKTelemetryEvent2["SENDTYPINGINDICATORSUCCEEDED"] = "SendTypingIndicatorSucceeded";
    })(OCSDKTelemetryEvent || (exports.OCSDKTelemetryEvent = OCSDKTelemetryEvent = {}));
    var LiveChatVersion;
    exports.LiveChatVersion = LiveChatVersion;
    (function(LiveChatVersion2) {
      LiveChatVersion2[LiveChatVersion2["V1"] = 1] = "V1";
      LiveChatVersion2[LiveChatVersion2["V2"] = 2] = "V2";
      LiveChatVersion2[LiveChatVersion2["V3"] = 3] = "V3";
    })(LiveChatVersion || (exports.LiveChatVersion = LiveChatVersion = {}));
    var SDKError;
    exports.SDKError = SDKError;
    (function(SDKError2) {
      SDKError2["ClientHTTPTimeoutErrorName"] = "ClientHTTPTimeoutError";
      SDKError2["ClientHTTPTimeoutErrorMessage"] = "Server took too long to respond";
    })(SDKError || (exports.SDKError = SDKError = {}));
  }
});

// node_modules/@microsoft/ocsdk/lib/Common/Constants.js
var require_Constants = __commonJS({
  "node_modules/@microsoft/ocsdk/lib/Common/Constants.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Enums = require_Enums();
    var Constants = function Constants2() {
      (0, _classCallCheck2["default"])(this, Constants2);
    };
    exports["default"] = Constants;
    (0, _defineProperty2["default"])(Constants, "requiredOmnichannelConfigurationParameters", ["orgUrl", "orgId", "widgetId"]);
    (0, _defineProperty2["default"])(Constants, "defaultHeaders", {
      "Content-Type": "application/json"
    });
    (0, _defineProperty2["default"])(Constants, "bypassCacheHeaders", {
      "Cache-Control": "no-store, must-revalidate, no-cache",
      "X-Cache-Control": "no-store"
    });
    (0, _defineProperty2["default"])(Constants, "defaultChannelId", _Enums.ChannelId.LCW);
    (0, _defineProperty2["default"])(Constants, "defaultLocale", "en-us");
    (0, _defineProperty2["default"])(Constants, "noContentStatusCode", 204);
    (0, _defineProperty2["default"])(Constants, "tooManyRequestsStatusCode", 429);
    (0, _defineProperty2["default"])(Constants, "badRequestStatusCode", 400);
    (0, _defineProperty2["default"])(Constants, "outOfOfficeErrorCode", 705);
    (0, _defineProperty2["default"])(Constants, "sensitiveProperties", ["AuthenticatedUserToken"]);
    (0, _defineProperty2["default"])(Constants, "transactionid", "transaction-id");
    (0, _defineProperty2["default"])(Constants, "customerDisplayName", "customerDisplayName");
    (0, _defineProperty2["default"])(Constants, "hiddenContentPlaceholder", "*content hidden*");
    (0, _defineProperty2["default"])(Constants, "axiosTimeoutErrorCode", "ECONNABORTED");
  }
});

// node_modules/@microsoft/ocsdk/lib/Utils/TelemetryHelper.js
var require_TelemetryHelper = __commonJS({
  "node_modules/@microsoft/ocsdk/lib/Utils/TelemetryHelper.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var TelemetryHelper = function() {
      function TelemetryHelper2() {
        (0, _classCallCheck2["default"])(this, TelemetryHelper2);
      }
      (0, _createClass2["default"])(TelemetryHelper2, null, [{
        key: "GETTELEMETRYEVENTDATA",
        value: function GETTELEMETRYEVENTDATA(telemetryEvent, customData, description) {
          var logData = {
            Description: description,
            ElapsedTimeInMilliseconds: customData.ElapsedTimeInMilliseconds,
            Event: telemetryEvent,
            ExceptionDetails: customData.ExceptionDetails,
            Region: customData.Region,
            RequestId: customData.RequestId,
            TransactionId: customData.TransactionId,
            RequestPayload: customData.RequestPayload,
            RequestPath: customData.RequestPath,
            RequestMethod: customData.RequestMethod,
            ResponseStatusCode: customData.ResponseStatusCode
          };
          return logData;
        }
      }]);
      return TelemetryHelper2;
    }();
    exports["default"] = TelemetryHelper;
  }
});

// node_modules/@microsoft/ocsdk/lib/Common/OCSDKLogger.js
var require_OCSDKLogger = __commonJS({
  "node_modules/@microsoft/ocsdk/lib/Common/OCSDKLogger.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _TelemetryHelper = _interopRequireDefault(require_TelemetryHelper());
    var OCSDKLogger = function() {
      function OCSDKLogger2(logger) {
        (0, _classCallCheck2["default"])(this, OCSDKLogger2);
        (0, _defineProperty2["default"])(this, "logger", void 0);
        this.logger = logger;
      }
      (0, _createClass2["default"])(OCSDKLogger2, [{
        key: "log",
        value: function log(loglevel, telemetryEvent, customData, description) {
          if (this.isLoggingEnabled()) {
            var logData = _TelemetryHelper["default"].GETTELEMETRYEVENTDATA(telemetryEvent, customData, description);
            this.logEvent(loglevel, logData);
          }
        }
      }, {
        key: "logEvent",
        value: function logEvent(logLevel, logData) {
          if (this.isLoggingEnabled()) {
            setTimeout(this.logger.logClientSdkTelemetryEvent.bind(this.logger), 0, logLevel, logData);
          }
        }
      }, {
        key: "isLoggingEnabled",
        value: function isLoggingEnabled() {
          return !this.isNullOrUndefined(this.logger);
        }
      }, {
        key: "isNullOrUndefined",
        value: function isNullOrUndefined(obj) {
          return obj === null || obj === void 0;
        }
      }]);
      return OCSDKLogger2;
    }();
    exports["default"] = OCSDKLogger;
  }
});

// node_modules/@microsoft/ocsdk/lib/Utils/BrowserInfo.js
var require_BrowserInfo = __commonJS({
  "node_modules/@microsoft/ocsdk/lib/Utils/BrowserInfo.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.BrowserInfo = exports.UNKNOWN_VERSION = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Enums = require_Enums();
    var REGEX_VERSION = "([\\d,.]+)";
    var UNKNOWN_VERSION = "U";
    exports.UNKNOWN_VERSION = UNKNOWN_VERSION;
    var BrowserInfo = function() {
      function BrowserInfo2() {
        (0, _classCallCheck2["default"])(this, BrowserInfo2);
      }
      (0, _createClass2["default"])(BrowserInfo2, null, [{
        key: "getUserAgent",
        value: function getUserAgent() {
          return this.userAgent();
        }
      }, {
        key: "userAgentContainsString",
        value: function userAgentContainsString(searchString) {
          return this.getUserAgent().indexOf(searchString) > -1;
        }
      }, {
        key: "isChrome",
        value: function isChrome() {
          return this.userAgentContainsString(_Enums.BrowserVendor.CHROME) && !this.userAgentContainsString(_Enums.BrowserVendor.EDGE) && !this.userAgentContainsString(_Enums.BrowserVendor.EDGE_CHROMIUM);
        }
      }, {
        key: "isIe",
        value: function isIe() {
          return this.userAgentContainsString("Trident");
        }
      }, {
        key: "isEdge",
        value: function isEdge() {
          return this.userAgentContainsString(_Enums.BrowserVendor.EDGE) || this.userAgentContainsString(_Enums.BrowserVendor.EDGE_CHROMIUM);
        }
      }, {
        key: "isOpera",
        value: function isOpera() {
          return this.userAgentContainsString("OPR/");
        }
      }, {
        key: "getBrowserName",
        value: function getBrowserName() {
          if (this.isOpera()) {
            return _Enums.BrowserVendor.OPERA;
          }
          if (this.isEdge()) {
            return _Enums.BrowserVendor.EDGE;
          }
          if (this.isChrome()) {
            return _Enums.BrowserVendor.CHROME;
          }
          if (this.userAgentContainsString(_Enums.BrowserVendor.FIREFOX)) {
            return _Enums.BrowserVendor.FIREFOX;
          }
          if (this.userAgentContainsString(_Enums.BrowserVendor.SAFARI)) {
            return _Enums.BrowserVendor.SAFARI;
          }
          if (this.isIe()) {
            return _Enums.BrowserVendor.IE;
          }
          return _Enums.BrowserVendor.UNKNOWN;
        }
      }, {
        key: "getBrowserVersion",
        value: function getBrowserVersion() {
          var _this = this;
          var getIeVersion = function getIeVersion2() {
            var userAgent = _this.getUserAgent();
            var classicIeVersionMatches = userAgent.match(new RegExp(_Enums.BrowserVendor.IE + " " + REGEX_VERSION));
            if (classicIeVersionMatches) {
              return classicIeVersionMatches[1];
            }
            var ieVersionMatches = userAgent.match(new RegExp("rv:" + REGEX_VERSION));
            if (ieVersionMatches) {
              return ieVersionMatches[1];
            }
            return void 0;
          };
          var getOtherVersion = function getOtherVersion2(browserString) {
            if (browserString === _Enums.BrowserVendor.SAFARI) {
              browserString = "Version";
            }
            if (browserString === _Enums.BrowserVendor.OPERA) {
              browserString = "OPR";
            }
            if (browserString === _Enums.BrowserVendor.EDGE) {
              browserString = "Edge?";
            }
            var matches = _this.getUserAgent().match(new RegExp(browserString + "/" + REGEX_VERSION));
            if (matches) {
              return matches[1];
            }
            return UNKNOWN_VERSION;
          };
          if (this.isIe()) {
            return getIeVersion();
          }
          return getOtherVersion(this.getBrowserName());
        }
      }]);
      return BrowserInfo2;
    }();
    exports.BrowserInfo = BrowserInfo;
    (0, _defineProperty2["default"])(BrowserInfo, "userAgent", function() {
      return window.navigator.userAgent;
    });
  }
});

// node_modules/@microsoft/ocsdk/lib/Common/OmnichannelEndpoints.js
var require_OmnichannelEndpoints = __commonJS({
  "node_modules/@microsoft/ocsdk/lib/Common/OmnichannelEndpoints.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var OmnichannelEndpoints = function OmnichannelEndpoints2() {
      (0, _classCallCheck2["default"])(this, OmnichannelEndpoints2);
    };
    exports["default"] = OmnichannelEndpoints;
    (0, _defineProperty2["default"])(OmnichannelEndpoints, "LiveChatConfigPath", "livechatconnector/config");
    (0, _defineProperty2["default"])(OmnichannelEndpoints, "LiveChatSessionInitPath", "livechatconnector/sessioninit");
    (0, _defineProperty2["default"])(OmnichannelEndpoints, "LiveChatAuthSessionInitPath", "livechatconnector/auth/sessioninit");
    (0, _defineProperty2["default"])(OmnichannelEndpoints, "LiveChatGetChatTokenPath", "livechatconnector/getchattoken");
    (0, _defineProperty2["default"])(OmnichannelEndpoints, "LiveChatv2GetChatTokenPath", "livechatconnector/v2/getchattoken");
    (0, _defineProperty2["default"])(OmnichannelEndpoints, "LiveChatv3GetChatTokenPath", "livechatconnector/v3/getchattoken");
    (0, _defineProperty2["default"])(OmnichannelEndpoints, "LiveChatAuthGetChatTokenPath", "livechatconnector/auth/getchattoken");
    (0, _defineProperty2["default"])(OmnichannelEndpoints, "LiveChatv2AuthGetChatTokenPath", "livechatconnector/v2/auth/getchattoken");
    (0, _defineProperty2["default"])(OmnichannelEndpoints, "LiveChatv3AuthGetChatTokenPath", "livechatconnector/v3/auth/getchattoken");
    (0, _defineProperty2["default"])(OmnichannelEndpoints, "LiveChatSessionClosePath", "livechatconnector/sessionclose");
    (0, _defineProperty2["default"])(OmnichannelEndpoints, "LiveChatAuthSessionClosePath", "livechatconnector/auth/sessionclose");
    (0, _defineProperty2["default"])(OmnichannelEndpoints, "LiveChatSubmitPostChatPath", "survey/submitpostchat");
    (0, _defineProperty2["default"])(OmnichannelEndpoints, "LiveChatAuthSubmitPostChatPath", "survey/auth/submitpostchat");
    (0, _defineProperty2["default"])(OmnichannelEndpoints, "LiveChatGetSurveyInviteLinkPath", "livechatconnector/getsurveyinvite");
    (0, _defineProperty2["default"])(OmnichannelEndpoints, "LiveChatAuthGetSurveyInviteLinkPath", "livechatconnector/auth/getsurveyinvite");
    (0, _defineProperty2["default"])(OmnichannelEndpoints, "LiveChatGetChatTranscriptPath", "livechatconnector/getchattranscripts");
    (0, _defineProperty2["default"])(OmnichannelEndpoints, "LiveChatv2GetChatTranscriptPath", "livechatconnector/v2/getchattranscripts");
    (0, _defineProperty2["default"])(OmnichannelEndpoints, "LiveChatAuthGetChatTranscriptPath", "livechatconnector/auth/getchattranscripts");
    (0, _defineProperty2["default"])(OmnichannelEndpoints, "LiveChatv2AuthGetChatTranscriptPath", "livechatconnector/v2/auth/getchattranscripts");
    (0, _defineProperty2["default"])(OmnichannelEndpoints, "LiveChatTranscriptEmailRequestPath", "livechatconnector/createemailrequest");
    (0, _defineProperty2["default"])(OmnichannelEndpoints, "LiveChatAuthTranscriptEmailRequestPath", "livechatconnector/auth/createemailrequest");
    (0, _defineProperty2["default"])(OmnichannelEndpoints, "LiveChatFetchDataMaskingInfoPath", "livechatconnector/fetchdatamaskinginfo");
    (0, _defineProperty2["default"])(OmnichannelEndpoints, "LiveChatSecondaryChannelEventPath", "livechatconnector/secondarychannelevent");
    (0, _defineProperty2["default"])(OmnichannelEndpoints, "LiveChatAuthSecondaryChannelEventPath", "livechatconnector/auth/secondarychannelevent");
    (0, _defineProperty2["default"])(OmnichannelEndpoints, "LiveChatLiveWorkItemDetailsPath", "livechatconnector/getliveworkitemdetails");
    (0, _defineProperty2["default"])(OmnichannelEndpoints, "LiveChatAuthLiveWorkItemDetailsPath", "livechatconnector/auth/getliveworkitemdetails");
    (0, _defineProperty2["default"])(OmnichannelEndpoints, "LiveChatGetReconnectableChatsPath", "livechatconnector/auth/reconnectablechats");
    (0, _defineProperty2["default"])(OmnichannelEndpoints, "LiveChatReconnectAvailabilityPath", "livechatconnector/reconnect");
    (0, _defineProperty2["default"])(OmnichannelEndpoints, "LiveChatValidateAuthChatMapRecordPath", "livechatconnector/auth/validateauthchatmaprecord");
    (0, _defineProperty2["default"])(OmnichannelEndpoints, "GetAgentAvailabilityPath", "livechatconnector/auth/getagentavailability");
    (0, _defineProperty2["default"])(OmnichannelEndpoints, "SendTypingIndicatorPath", "inbound/typingindicator/livechat/sendtypingindicator");
  }
});

// node_modules/@microsoft/ocsdk/lib/Utils/endpointsCreators.js
var require_endpointsCreators = __commonJS({
  "node_modules/@microsoft/ocsdk/lib/Utils/endpointsCreators.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.createGetChatTokenEndpoint = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Enums = require_Enums();
    var _OmnichannelEndpoints = _interopRequireDefault(require_OmnichannelEndpoints());
    var createGetChatTokenEndpoint = function createGetChatTokenEndpoint2(liveChatVersion, auth) {
      var _endpointsMapping, _authEndpointsMapping;
      var endpointsMapping = (_endpointsMapping = {}, (0, _defineProperty2["default"])(_endpointsMapping, _Enums.LiveChatVersion.V1, _OmnichannelEndpoints["default"].LiveChatGetChatTokenPath), (0, _defineProperty2["default"])(_endpointsMapping, _Enums.LiveChatVersion.V2, _OmnichannelEndpoints["default"].LiveChatv2GetChatTokenPath), (0, _defineProperty2["default"])(_endpointsMapping, _Enums.LiveChatVersion.V3, _OmnichannelEndpoints["default"].LiveChatv3GetChatTokenPath), _endpointsMapping);
      var authEndpointsMapping = (_authEndpointsMapping = {}, (0, _defineProperty2["default"])(_authEndpointsMapping, _Enums.LiveChatVersion.V1, _OmnichannelEndpoints["default"].LiveChatAuthGetChatTokenPath), (0, _defineProperty2["default"])(_authEndpointsMapping, _Enums.LiveChatVersion.V2, _OmnichannelEndpoints["default"].LiveChatv2AuthGetChatTokenPath), (0, _defineProperty2["default"])(_authEndpointsMapping, _Enums.LiveChatVersion.V3, _OmnichannelEndpoints["default"].LiveChatv3AuthGetChatTokenPath), _authEndpointsMapping);
      if (Object.values(_Enums.LiveChatVersion).includes(liveChatVersion)) {
        return auth ? authEndpointsMapping[liveChatVersion] : endpointsMapping[liveChatVersion];
      }
      return auth ? authEndpointsMapping[_Enums.LiveChatVersion.V2] : endpointsMapping[_Enums.LiveChatVersion.V2];
    };
    exports.createGetChatTokenEndpoint = createGetChatTokenEndpoint;
  }
});

// node_modules/@microsoft/ocsdk/lib/Utils/DeviceInfo.js
var require_DeviceInfo = __commonJS({
  "node_modules/@microsoft/ocsdk/lib/Utils/DeviceInfo.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.DeviceInfo = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _Enums = require_Enums();
    var DeviceInfo = function() {
      function DeviceInfo2() {
        (0, _classCallCheck2["default"])(this, DeviceInfo2);
      }
      (0, _createClass2["default"])(DeviceInfo2, null, [{
        key: "getDeviceType",
        value: function getDeviceType() {
          var mobile = /(android|ipod|windows phone|wpdesktop|windows ce|blackberry\w*|meego|webos|palm|symbian|pda|\w*?mobile\w*?|\w*?phone\w*?)/i;
          var tablet = /tablet|ipad/i;
          if (window.navigator.userAgent.match(mobile)) {
            return _Enums.DeviceType.Mobile;
          }
          if (window.navigator.userAgent.match(tablet)) {
            return _Enums.DeviceType.Tablet;
          }
          return _Enums.DeviceType.Desktop;
        }
      }]);
      return DeviceInfo2;
    }();
    exports.DeviceInfo = DeviceInfo;
  }
});

// node_modules/@microsoft/ocsdk/lib/Common/Locales.js
var require_Locales = __commonJS({
  "node_modules/@microsoft/ocsdk/lib/Common/Locales.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var Locales = function Locales2() {
      (0, _classCallCheck2["default"])(this, Locales2);
    };
    exports["default"] = Locales;
    (0, _defineProperty2["default"])(Locales, "supportedLocales", ["ar-sa", "bg-bg", "ca-es", "cs-cz", "da-dk", "de-de", "el-gr", "en-us", "es-es", "et-ee", "eu-es", "fi-fi", "fr-fr", "gl-es", "he-il", "hi-in", "hr-hr", "hu-hu", "id-id", "it-it", "ja-jp", "kk-kz", "ko-kr", "lt-lt", "lv-lv", "ms-my", "nb-no", "nl-nl", "pl-pl", "pt-br", "pt-pt", "ro-ro", "ru-ru", "sk-sk", "sl-si", "sr-cyrl-cs", "sr-latn-cs", "sv-se", "th-th", "tr-tr", "uk-ua", "vi-vn", "zh-cn", "zh-hk", "zh-tw"]);
  }
});

// node_modules/@microsoft/ocsdk/lib/Utils/LoggingSanitizer.js
var require_LoggingSanitizer = __commonJS({
  "node_modules/@microsoft/ocsdk/lib/Utils/LoggingSanitizer.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.LoggingSanitizer = void 0;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _Constants = _interopRequireDefault(require_Constants());
    var LoggingSanitizer = function() {
      function LoggingSanitizer2() {
        (0, _classCallCheck2["default"])(this, LoggingSanitizer2);
      }
      (0, _createClass2["default"])(LoggingSanitizer2, null, [{
        key: "stripCustomContextDataValues",
        value: function stripCustomContextDataValues(customContextData) {
          if (customContextData) {
            var _Object$keys;
            (_Object$keys = Object.keys(customContextData)) === null || _Object$keys === void 0 ? void 0 : _Object$keys.forEach(function(contextKey) {
              var _customContextData$;
              if ((_customContextData$ = customContextData["".concat(contextKey)]) !== null && _customContextData$ !== void 0 && _customContextData$.value) {
                customContextData["".concat(contextKey)].value = _Constants["default"].hiddenContentPlaceholder;
              }
            });
          }
        }
      }, {
        key: "stripPreChatResponse",
        value: function stripPreChatResponse(preChatResponse) {
          if (preChatResponse) {
            Object.keys(preChatResponse).forEach(function(responseKey) {
              if (preChatResponse["".concat(responseKey)] && responseKey !== "Type") {
                preChatResponse["".concat(responseKey)] = _Constants["default"].hiddenContentPlaceholder;
              }
            });
          }
        }
      }, {
        key: "stripGeolocation",
        value: function stripGeolocation(data) {
          if (data) {
            if (Object.keys(data).includes("longitude")) {
              data["longitude"] = _Constants["default"].hiddenContentPlaceholder;
            }
            if (Object.keys(data).includes("latitude")) {
              data["latitude"] = _Constants["default"].hiddenContentPlaceholder;
            }
          }
        }
      }, {
        key: "stripErrorSensitiveProperties",
        value: function stripErrorSensitiveProperties(errorObject) {
          var _Object$keys2, _this = this;
          if (errorObject && (0, _typeof2["default"])(errorObject) === "object" && ((_Object$keys2 = Object.keys(errorObject)) === null || _Object$keys2 === void 0 ? void 0 : _Object$keys2.length) > 0) {
            var _Object$keys3;
            (_Object$keys3 = Object.keys(errorObject)) === null || _Object$keys3 === void 0 ? void 0 : _Object$keys3.forEach(function(key) {
              if (_Constants["default"].sensitiveProperties.indexOf(key) !== -1) {
                delete errorObject["".concat(key)];
              }
              if (key === "data") {
                var data;
                if (typeof errorObject[key] === "string") {
                  try {
                    data = JSON.parse(errorObject[key]);
                  } catch (_unused) {
                    data = void 0;
                  }
                }
                if (data) {
                  if (Object.keys(data).includes("preChatResponse")) {
                    LoggingSanitizer2.stripPreChatResponse(data.preChatResponse);
                  }
                  if (Object.keys(data).includes("customContextData")) {
                    LoggingSanitizer2.stripCustomContextDataValues(data.customContextData);
                  }
                  LoggingSanitizer2.stripGeolocation(data);
                  errorObject[key] = JSON.stringify(data);
                }
              }
              if (errorObject["".concat(key)] !== null && (0, _typeof2["default"])(errorObject["".concat(key)]) === "object") {
                _this.stripErrorSensitiveProperties(errorObject["".concat(key)]);
                return;
              }
            });
          }
        }
      }]);
      return LoggingSanitizer2;
    }();
    exports.LoggingSanitizer = LoggingSanitizer;
  }
});

// node_modules/@microsoft/ocsdk/lib/Model/LogLevel.js
var require_LogLevel2 = __commonJS({
  "node_modules/@microsoft/ocsdk/lib/Model/LogLevel.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.LogLevel = void 0;
    var LogLevel;
    exports.LogLevel = LogLevel;
    (function(LogLevel2) {
      LogLevel2["INFO"] = "INFO";
      LogLevel2["DEBUG"] = "DEBUG";
      LogLevel2["WARN"] = "WARN";
      LogLevel2["ERROR"] = "ERROR";
    })(LogLevel || (exports.LogLevel = LogLevel = {}));
  }
});

// node_modules/@microsoft/ocsdk/lib/Utils/OSInfo.js
var require_OSInfo = __commonJS({
  "node_modules/@microsoft/ocsdk/lib/Utils/OSInfo.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.OSInfo = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _Enums = require_Enums();
    var OSInfo = function() {
      function OSInfo2() {
        (0, _classCallCheck2["default"])(this, OSInfo2);
      }
      (0, _createClass2["default"])(OSInfo2, null, [{
        key: "getOsType",
        value: function getOsType() {
          var win = /(windows|win32)/i;
          var winrt = / arm;/i;
          var winphone = /windows\sphone\s\d+\.\d+/i;
          var osx = /(macintosh|mac os x)/i;
          var ios = /(iPad|iPhone|iPod)(?=.*like Mac OS X)/i;
          var linux = /(linux|joli|[kxln]?ubuntu|debian|[open]*suse|gentoo|arch|slackware|fedora|mandriva|centos|pclinuxos|redhat|zenwalk|cros)/i;
          var android = /android/i;
          var userAgent = function userAgent2() {
            return window.navigator.userAgent;
          };
          if (userAgent().match(winphone)) {
            return _Enums.OperatingSystem.WINDOWS_PHONE;
          }
          if (userAgent().match(winrt)) {
            return _Enums.OperatingSystem.WINDOWS_RT;
          }
          if (userAgent().match(ios)) {
            return _Enums.OperatingSystem.IOS;
          }
          if (userAgent().match(android)) {
            return _Enums.OperatingSystem.ANDROID;
          }
          if (userAgent().match(linux)) {
            return _Enums.OperatingSystem.LINUX;
          }
          if (userAgent().match(osx)) {
            return _Enums.OperatingSystem.MACOSX;
          }
          if (userAgent().match(win)) {
            return _Enums.OperatingSystem.WINDOWS;
          }
          return _Enums.OperatingSystem.UNKNOWN;
        }
      }]);
      return OSInfo2;
    }();
    exports.OSInfo = OSInfo;
  }
});

// node_modules/@microsoft/ocsdk/lib/Common/OmnichannelHTTPHeaders.js
var require_OmnichannelHTTPHeaders = __commonJS({
  "node_modules/@microsoft/ocsdk/lib/Common/OmnichannelHTTPHeaders.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var OmnichannelHTTPHeaders = function OmnichannelHTTPHeaders2() {
      (0, _classCallCheck2["default"])(this, OmnichannelHTTPHeaders2);
    };
    exports["default"] = OmnichannelHTTPHeaders;
    (0, _defineProperty2["default"])(OmnichannelHTTPHeaders, "authenticatedUserToken", "AuthenticatedUserToken");
    (0, _defineProperty2["default"])(OmnichannelHTTPHeaders, "authorization", "Authorization");
    (0, _defineProperty2["default"])(OmnichannelHTTPHeaders, "organizationId", "OrganizationId");
    (0, _defineProperty2["default"])(OmnichannelHTTPHeaders, "widgetAppId", "widgetAppId");
    (0, _defineProperty2["default"])(OmnichannelHTTPHeaders, "requestId", "Request-Id");
    (0, _defineProperty2["default"])(OmnichannelHTTPHeaders, "authCodeNonce", "AuthCodeNonce");
  }
});

// node_modules/@microsoft/ocsdk/lib/Utils/Timer.js
var require_Timer = __commonJS({
  "node_modules/@microsoft/ocsdk/lib/Utils/Timer.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Timer = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var Timer = function() {
      function Timer2() {
        (0, _classCallCheck2["default"])(this, Timer2);
      }
      (0, _createClass2["default"])(Timer2, null, [{
        key: "TIMER",
        value: function TIMER() {
          var timeStart = (/* @__PURE__ */ new Date()).getTime();
          return {
            get milliSecondsElapsed() {
              return (/* @__PURE__ */ new Date()).getTime() - timeStart;
            }
          };
        }
      }]);
      return Timer2;
    }();
    exports.Timer = Timer;
  }
});

// node_modules/@microsoft/ocsdk/lib/Utils/sleep.js
var require_sleep = __commonJS({
  "node_modules/@microsoft/ocsdk/lib/Utils/sleep.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var sleep = function sleep2(ms) {
      return new Promise(function(resolve) {
        return setTimeout(resolve, ms);
      });
    };
    var _default = sleep;
    exports["default"] = _default;
  }
});

// node_modules/@microsoft/ocsdk/lib/Utils/axiosRetry.js
var require_axiosRetry = __commonJS({
  "node_modules/@microsoft/ocsdk/lib/Utils/axiosRetry.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _Constants = _interopRequireDefault(require_Constants());
    var _sleep = _interopRequireDefault(require_sleep());
    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F = function F2() {
          };
          return { s: F, n: function n() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e) {
            throw _e;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    var axiosRetry = function axiosRetry2(axios, axiosRetryOptions) {
      var retryInterval = 1e3;
      if (axiosRetryOptions.retryOn429 === void 0 || axiosRetryOptions.retryOn429 === null) {
        axiosRetryOptions.retryOn429 = true;
      }
      var retries = axiosRetryOptions.retries, headerOverwrites = axiosRetryOptions.headerOverwrites;
      var currentTry = 1;
      var onSuccess = void 0;
      if (!axiosRetryOptions.shouldRetry) {
        axiosRetryOptions.shouldRetry = function(response) {
          if (response && response.status && response.status === _Constants["default"].tooManyRequestsStatusCode && axiosRetryOptions.retryOn429 === false) {
            return false;
          }
          return true;
        };
      }
      var onError = function onError2(error) {
        var config = error.config, response = error.response;
        if (!config) {
          return Promise.reject(error);
        }
        if (axiosRetryOptions.shouldRetry && !axiosRetryOptions.shouldRetry(response)) {
          return Promise.reject(error);
        }
        var shouldRetry = currentTry < retries;
        if (shouldRetry) {
          currentTry++;
          if (headerOverwrites && response !== null && response !== void 0 && response.headers) {
            var _iterator = _createForOfIteratorHelper(headerOverwrites), _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                var headerName = _step.value;
                var responseHeader = response === null || response === void 0 ? void 0 : response.headers[headerName.toLocaleLowerCase()];
                if (responseHeader) {
                  config.headers[headerName] = responseHeader;
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }
          return new Promise(function(resolve) {
            return (0, _sleep["default"])(retryInterval).then(function() {
              return resolve(axios(config));
            });
          });
        }
        return Promise.reject(error);
      };
      axios.interceptors.response.use(onSuccess, onError);
    };
    var _default = axiosRetry;
    exports["default"] = _default;
  }
});

// node_modules/@microsoft/ocsdk/lib/Utils/uuid.js
var require_uuid = __commonJS({
  "node_modules/@microsoft/ocsdk/lib/Utils/uuid.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.uuidv4 = void 0;
    var uuidv4 = function uuidv42() {
      return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
        var r = Math.random() * 16 | 0, v = c === "x" ? r : r & 3 | 8;
        return v.toString(16);
      });
    };
    exports.uuidv4 = uuidv4;
  }
});

// node_modules/@microsoft/ocsdk/lib/Utils/CustomContextData.js
var require_CustomContextData = __commonJS({
  "node_modules/@microsoft/ocsdk/lib/Utils/CustomContextData.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CustomContextData = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var CustomContextData = function() {
      function CustomContextData2() {
        (0, _classCallCheck2["default"])(this, CustomContextData2);
      }
      (0, _createClass2["default"])(CustomContextData2, null, [{
        key: "sort",
        value: (
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          function sort(customContextData) {
            var tempArr = new Array();
            Object.keys(customContextData).forEach(function(key) {
              if (customContextData && customContextData["".concat(key)]) {
                var obj = {
                  "key": key,
                  "value": customContextData["".concat(key)]
                };
                tempArr.push(obj);
              }
            });
            tempArr.sort(function(a, b) {
              var keyA = a.key.toUpperCase();
              var keyB = b.key.toUpperCase();
              if (keyA < keyB) {
                return -1;
              }
              if (keyA > keyB) {
                return 1;
              }
              return 0;
            });
            return tempArr;
          }
        )
      }]);
      return CustomContextData2;
    }();
    exports.CustomContextData = CustomContextData;
  }
});

// node_modules/@microsoft/ocsdk/lib/Utils/throwClientHTTPError.js
var require_throwClientHTTPError = __commonJS({
  "node_modules/@microsoft/ocsdk/lib/Utils/throwClientHTTPError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _Enums = require_Enums();
    var throwClientHTTPTimeoutError = function throwClientHTTPTimeoutError2() {
      var message = "".concat(_Enums.SDKError.ClientHTTPTimeoutErrorName, ": ").concat(_Enums.SDKError.ClientHTTPTimeoutErrorMessage);
      throw new Error(message);
    };
    var _default = throwClientHTTPTimeoutError;
    exports["default"] = _default;
  }
});

// node_modules/@microsoft/ocsdk/lib/Utils/SessionInitRetryHandler.js
var require_SessionInitRetryHandler = __commonJS({
  "node_modules/@microsoft/ocsdk/lib/Utils/SessionInitRetryHandler.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _Constants = _interopRequireDefault(require_Constants());
    var sessionInitRetryHandler = function sessionInitRetryHandler2(response, axiosRetryOptions) {
      if (response !== null && response !== void 0 && response.status) {
        switch (response.status) {
          case _Constants["default"].tooManyRequestsStatusCode:
            if (axiosRetryOptions && axiosRetryOptions.retryOn429 === false) {
              return false;
            }
            break;
          case _Constants["default"].badRequestStatusCode:
            if (parseInt(response.headers.errorcode) === _Constants["default"].outOfOfficeErrorCode) {
              return false;
            }
            break;
          default:
            return true;
        }
      }
      return true;
    };
    var _default = sessionInitRetryHandler;
    exports["default"] = _default;
  }
});

// node_modules/@microsoft/ocsdk/lib/SDK.js
var require_SDK = __commonJS({
  "node_modules/@microsoft/ocsdk/lib/SDK.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof3 = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Enums = require_Enums();
    var _axios = _interopRequireDefault(require_axios());
    var _BrowserInfo = require_BrowserInfo();
    var _Constants = _interopRequireDefault(require_Constants());
    var _endpointsCreators = require_endpointsCreators();
    var _DeviceInfo = require_DeviceInfo();
    var _Locales = _interopRequireDefault(require_Locales());
    var _LoggingSanitizer = require_LoggingSanitizer();
    var _LogLevel = require_LogLevel2();
    var _OSInfo = require_OSInfo();
    var _OmnichannelEndpoints = _interopRequireDefault(require_OmnichannelEndpoints());
    var _OmnichannelHTTPHeaders = _interopRequireDefault(require_OmnichannelHTTPHeaders());
    var _Timer = require_Timer();
    var _axiosRetry = _interopRequireDefault(require_axiosRetry());
    var _uuid = require_uuid();
    var hash = _interopRequireWildcard(require_crypto());
    var _CustomContextData = require_CustomContextData();
    var _throwClientHTTPError = _interopRequireDefault(require_throwClientHTTPError());
    var _SessionInitRetryHandler = _interopRequireDefault(require_SessionInitRetryHandler());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty2["default"])(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F = function F2() {
          };
          return { s: F, n: function n() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e) {
            throw _e;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    var SDK = function() {
      function SDK2(omnichannelConfiguration) {
        var _this = this;
        var configuration = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : SDK2.defaultConfiguration;
        var logger = arguments.length > 2 ? arguments[2] : void 0;
        (0, _classCallCheck2["default"])(this, SDK2);
        this.omnichannelConfiguration = omnichannelConfiguration;
        this.configuration = configuration;
        this.logger = logger;
        (0, _defineProperty2["default"])(this, "liveChatVersion", void 0);
        (0, _defineProperty2["default"])(this, "setAuthCodeNonce", function(headers) {
          if (headers !== null && headers !== void 0 && headers.authcodenonce) {
            _this.configuration.authCodeNonce = headers === null || headers === void 0 ? void 0 : headers.authcodenonce;
          }
        });
        if (!Object.keys(this.configuration).length || (0, _typeof2["default"])(configuration) !== "object") {
          this.configuration = SDK2.defaultConfiguration;
        }
        for (var _i = 0, _Object$keys = Object.keys(SDK2.defaultConfiguration); _i < _Object$keys.length; _i++) {
          var key = _Object$keys[_i];
          if (!this.configuration.hasOwnProperty(key)) {
            this.configuration["".concat(key)] = SDK2.defaultConfiguration["".concat(key)];
          }
        }
        for (var _i2 = 0, _Object$keys2 = Object.keys(SDK2.defaultConfiguration["requestTimeoutConfig"]); _i2 < _Object$keys2.length; _i2++) {
          var _key = _Object$keys2[_i2];
          if (!this.configuration["requestTimeoutConfig"].hasOwnProperty(_key)) {
            this.configuration["requestTimeoutConfig"]["".concat(_key)] = SDK2.defaultConfiguration["requestTimeoutConfig"]["".concat(_key)];
          }
        }
        var channelId = omnichannelConfiguration.channelId;
        if (!Object.values(_Enums.ChannelId).includes(channelId)) {
          throw new Error("Invalid channelId");
        }
        var currentOmnichannelConfigurationParameters = Object.keys(omnichannelConfiguration);
        var _iterator = _createForOfIteratorHelper(_Constants["default"].requiredOmnichannelConfigurationParameters), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var _key2 = _step.value;
            if (!currentOmnichannelConfigurationParameters.includes(_key2)) {
              throw new Error("Missing '".concat(_key2, "' in OmnichannelConfiguration"));
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        this.liveChatVersion = _Enums.LiveChatVersion.V2;
      }
      (0, _createClass2["default"])(SDK2, [{
        key: "getChatConfig",
        value: function() {
          var _getChatConfig = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(requestId) {
            var _this$configuration$d;
            var bypassCache, timer, requestPath, method, url, axiosInstance, headers, response, elapsedTimeInMilliseconds, data, _args = arguments;
            return _regenerator["default"].wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    bypassCache = _args.length > 1 && _args[1] !== void 0 ? _args[1] : false;
                    timer = _Timer.Timer.TIMER();
                    this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETCHATCONFIG, "Get Chat config started", requestId);
                    if (!requestId) {
                      requestId = (0, _uuid.uuidv4)();
                    }
                    requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatConfigPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "?requestId=").concat(requestId, "&channelId=").concat(this.omnichannelConfiguration.channelId);
                    method = "GET";
                    url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                    axiosInstance = _axios["default"].create();
                    (0, _axiosRetry["default"])(axiosInstance, {
                      retries: this.configuration.maxRequestRetriesOnFailure
                    });
                    headers = {};
                    if (bypassCache) {
                      headers = _objectSpread(_objectSpread({}, _Constants["default"].bypassCacheHeaders), headers);
                    }
                    _context.next = 13;
                    return axiosInstance.get(url, {
                      headers,
                      timeout: (_this$configuration$d = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d !== void 0 ? _this$configuration$d : this.configuration.requestTimeoutConfig.getChatConfig
                    });
                  case 13:
                    response = _context.sent;
                    elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                    data = response.data;
                    if (data.LiveChatVersion) {
                      this.liveChatVersion = data.LiveChatVersion;
                    }
                    data.headers = {};
                    if (response.headers && response.headers["date"]) {
                      data.headers["date"] = response.headers["date"];
                    }
                    this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETCHATCONFIGSUCCESS, "Get Chat config succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);
                    return _context.abrupt("return", data);
                  case 21:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));
          function getChatConfig(_x) {
            return _getChatConfig.apply(this, arguments);
          }
          return getChatConfig;
        }()
        /**
         * Fetches LWI details.
         * @param requestId: RequestId to use to get chat config (Optional).
         * @param getLWIDetailsOptionalParams: Optional parameters for get LWI Details.
         */
      }, {
        key: "getLWIDetails",
        value: function() {
          var _getLWIDetails = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3(requestId) {
            var _this$configuration$d2, _this2 = this;
            var getLWIDetailsOptionalParams, timer, requestPath, axiosInstance, authenticatedUserToken, reconnectId, headers, url, method, options, _args3 = arguments;
            return _regenerator["default"].wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    getLWIDetailsOptionalParams = _args3.length > 1 && _args3[1] !== void 0 ? _args3[1] : {};
                    timer = _Timer.Timer.TIMER();
                    this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETLWISTATUSSTARTED, "Get LWI Details Started", requestId);
                    if (!requestId) {
                      requestId = (0, _uuid.uuidv4)();
                    }
                    requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatLiveWorkItemDetailsPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId);
                    axiosInstance = _axios["default"].create();
                    (0, _axiosRetry["default"])(axiosInstance, {
                      headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce],
                      retries: this.configuration.maxRequestRetriesOnFailure
                    });
                    authenticatedUserToken = getLWIDetailsOptionalParams.authenticatedUserToken, reconnectId = getLWIDetailsOptionalParams.reconnectId;
                    headers = _Constants["default"].defaultHeaders;
                    if (authenticatedUserToken) {
                      requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatAuthLiveWorkItemDetailsPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId);
                      headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                      headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                    }
                    if (reconnectId) {
                      requestPath += "/".concat(reconnectId);
                    }
                    requestPath += "?channelId=".concat(this.omnichannelConfiguration.channelId);
                    url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                    method = "GET";
                    options = {
                      headers,
                      method,
                      url,
                      timeout: (_this$configuration$d2 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d2 !== void 0 ? _this$configuration$d2 : this.configuration.requestTimeoutConfig.getLWIDetails
                    };
                    return _context3.abrupt("return", new Promise(function() {
                      var _ref = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2(resolve, reject) {
                        var response, elapsedTimeInMilliseconds, data, _headers, _elapsedTimeInMilliseconds;
                        return _regenerator["default"].wrap(function _callee2$(_context2) {
                          while (1) {
                            switch (_context2.prev = _context2.next) {
                              case 0:
                                _context2.prev = 0;
                                _context2.next = 3;
                                return axiosInstance(options);
                              case 3:
                                response = _context2.sent;
                                elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                                data = response.data, _headers = response.headers;
                                _this2.setAuthCodeNonce(_headers);
                                _this2.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETLWISTATUSSUCCEEDED, "Get LWI Details succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);
                                resolve(data);
                                _context2.next = 17;
                                break;
                              case 11:
                                _context2.prev = 11;
                                _context2.t0 = _context2["catch"](0);
                                _elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                                _this2.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.GETLWISTATUSFAILED, "Get LWI Details failed", requestId, void 0, _elapsedTimeInMilliseconds, requestPath, method, _context2.t0);
                                if (_context2.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                                  (0, _throwClientHTTPError["default"])();
                                }
                                reject(_context2.t0);
                              case 17:
                              case "end":
                                return _context2.stop();
                            }
                          }
                        }, _callee2, null, [[0, 11]]);
                      }));
                      return function(_x3, _x4) {
                        return _ref.apply(this, arguments);
                      };
                    }()));
                  case 16:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this);
          }));
          function getLWIDetails(_x2) {
            return _getLWIDetails.apply(this, arguments);
          }
          return getLWIDetails;
        }()
        /**
         * Fetches the chat token from Omnichannel to join T1 thread.
         * @param requestId: RequestId to use for getchattoken (Optional).
         * @param getChatTokenOptionalParams: Optional parameters for get chat token.
         */
      }, {
        key: "getChatToken",
        value: function() {
          var _getChatToken = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee5(requestId) {
            var _this$configuration$d3, _this3 = this;
            var getChatTokenOptionalParams, currentRetryCount, timer, reconnectId, authenticatedUserToken, currentLiveChatVersion, refreshToken, headers, endpoint, requestPath, queryParams, url, method, options, axiosInstance, _args5 = arguments;
            return _regenerator["default"].wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    getChatTokenOptionalParams = _args5.length > 1 && _args5[1] !== void 0 ? _args5[1] : {};
                    currentRetryCount = _args5.length > 2 && _args5[2] !== void 0 ? _args5[2] : 0;
                    timer = _Timer.Timer.TIMER();
                    reconnectId = getChatTokenOptionalParams.reconnectId, authenticatedUserToken = getChatTokenOptionalParams.authenticatedUserToken, currentLiveChatVersion = getChatTokenOptionalParams.currentLiveChatVersion, refreshToken = getChatTokenOptionalParams.refreshToken;
                    this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETCHATTOKENSTARTED, "Get Chat Token Started", requestId);
                    if (!(currentRetryCount < 0)) {
                      _context5.next = 7;
                      break;
                    }
                    throw new Error("Invalid currentRetryCount");
                  case 7:
                    if (!requestId) {
                      requestId = (0, _uuid.uuidv4)();
                    }
                    headers = _Constants["default"].defaultHeaders;
                    endpoint = (0, _endpointsCreators.createGetChatTokenEndpoint)(currentLiveChatVersion || this.liveChatVersion, authenticatedUserToken ? true : false);
                    if (authenticatedUserToken) {
                      headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                      headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                    }
                    requestPath = "/".concat(endpoint, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId);
                    if (reconnectId) {
                      requestPath += "/".concat(reconnectId);
                    }
                    queryParams = "channelId=".concat(this.omnichannelConfiguration.channelId);
                    if (refreshToken) {
                      queryParams += "&refreshToken=true";
                    }
                    requestPath += "?".concat(queryParams);
                    url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                    method = "GET";
                    options = {
                      headers,
                      method,
                      url,
                      timeout: (_this$configuration$d3 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d3 !== void 0 ? _this$configuration$d3 : this.configuration.requestTimeoutConfig.getChatToken
                    };
                    axiosInstance = _axios["default"].create();
                    (0, _axiosRetry["default"])(axiosInstance, {
                      headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce],
                      retries: this.configuration.maxRequestRetriesOnFailure,
                      retryOn429: this.configuration.getChatTokenRetryOn429
                    });
                    return _context5.abrupt("return", new Promise(function() {
                      var _ref2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee4(resolve, reject) {
                        var getChatTokenError, response, elapsedTimeInMilliseconds, data, _headers2, _response, _elapsedTimeInMilliseconds2;
                        return _regenerator["default"].wrap(function _callee4$(_context4) {
                          while (1) {
                            switch (_context4.prev = _context4.next) {
                              case 0:
                                getChatTokenError = void 0;
                                _context4.prev = 1;
                                _context4.next = 4;
                                return axiosInstance(options);
                              case 4:
                                response = _context4.sent;
                                elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                                data = response.data, _headers2 = response.headers;
                                _this3.setAuthCodeNonce(_headers2);
                                if (!data) {
                                  _context4.next = 13;
                                  break;
                                }
                                data.requestId = requestId;
                                _this3.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETCHATTOKENSUCCEEDED, "Get Chat Token succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);
                                resolve(data);
                                return _context4.abrupt("return");
                              case 13:
                                if (!(reconnectId && response.status === _Constants["default"].noContentStatusCode)) {
                                  _context4.next = 16;
                                  break;
                                }
                                reject(response);
                                return _context4.abrupt("return");
                              case 16:
                                _context4.next = 26;
                                break;
                              case 18:
                                _context4.prev = 18;
                                _context4.t0 = _context4["catch"](1);
                                _elapsedTimeInMilliseconds2 = timer.milliSecondsElapsed;
                                _this3.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.GETCHATTOKENFAILED, "Get Chat Token failed", requestId, void 0, _elapsedTimeInMilliseconds2, requestPath, method, _context4.t0);
                                getChatTokenError = _context4.t0;
                                if (!(((_response = _context4.t0.response) === null || _response === void 0 ? void 0 : _response.status) === _Constants["default"].tooManyRequestsStatusCode && !_this3.configuration.getChatTokenRetryOn429)) {
                                  _context4.next = 26;
                                  break;
                                }
                                reject(_context4.t0);
                                return _context4.abrupt("return");
                              case 26:
                                if (!(currentRetryCount + 1 >= _this3.configuration.getChatTokenRetryCount)) {
                                  _context4.next = 29;
                                  break;
                                }
                                if (getChatTokenError && getChatTokenError.code == _Constants["default"].axiosTimeoutErrorCode) {
                                  (0, _throwClientHTTPError["default"])();
                                } else {
                                  reject(getChatTokenError);
                                }
                                return _context4.abrupt("return");
                              case 29:
                                setTimeout(function() {
                                  _this3.getChatToken(requestId, getChatTokenOptionalParams, currentRetryCount + 1).then(function(response2) {
                                    return resolve(response2);
                                  })["catch"](function(error) {
                                    return reject(error);
                                  });
                                }, _this3.configuration.getChatTokenTimeBetweenRetriesOnFailure);
                              case 30:
                              case "end":
                                return _context4.stop();
                            }
                          }
                        }, _callee4, null, [[1, 18]]);
                      }));
                      return function(_x6, _x7) {
                        return _ref2.apply(this, arguments);
                      };
                    }()));
                  case 22:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5, this);
          }));
          function getChatToken(_x5) {
            return _getChatToken.apply(this, arguments);
          }
          return getChatToken;
        }()
        /**
         * Fetches the reconnectable chats from omnichannel from the given user information in JWT token(claim name: sub).
         * @param reconnectableChatsParams Mandate parameters for get reconnectable chats.
         */
      }, {
        key: "getReconnectableChats",
        value: function() {
          var _getReconnectableChats = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee7(reconnectableChatsParams) {
            var _this$configuration$d4, _this4 = this;
            var timer, authenticatedUserToken, requestPath, headers, url, method, options, axiosInstance, requestId;
            return _regenerator["default"].wrap(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    timer = _Timer.Timer.TIMER();
                    authenticatedUserToken = reconnectableChatsParams.authenticatedUserToken;
                    this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETRECONNECTABLECHATS, "Get Reconnectable chat Started");
                    requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatGetReconnectableChatsPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(this.omnichannelConfiguration.orgId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                    headers = _Constants["default"].defaultHeaders;
                    headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                    headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                    url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                    method = "GET";
                    options = {
                      headers,
                      method,
                      url,
                      timeout: (_this$configuration$d4 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d4 !== void 0 ? _this$configuration$d4 : this.configuration.requestTimeoutConfig.getReconnectableChats
                    };
                    axiosInstance = _axios["default"].create();
                    requestId = this.omnichannelConfiguration.orgId;
                    return _context7.abrupt("return", new Promise(function() {
                      var _ref3 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee6(resolve, reject) {
                        var response, elapsedTimeInMilliseconds, data, _headers3, _elapsedTimeInMilliseconds3;
                        return _regenerator["default"].wrap(function _callee6$(_context6) {
                          while (1) {
                            switch (_context6.prev = _context6.next) {
                              case 0:
                                _context6.prev = 0;
                                _context6.next = 3;
                                return axiosInstance(options);
                              case 3:
                                response = _context6.sent;
                                elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                                data = response.data, _headers3 = response.headers;
                                _this4.setAuthCodeNonce(_headers3);
                                if (!data) {
                                  _context6.next = 11;
                                  break;
                                }
                                _this4.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETRECONNECTABLECHATS, "Get Reconnectable Chats Succeeded and old session returned", requestId, response, elapsedTimeInMilliseconds, requestPath, method);
                                resolve(data);
                                return _context6.abrupt("return");
                              case 11:
                                resolve();
                                return _context6.abrupt("return");
                              case 15:
                                _context6.prev = 15;
                                _context6.t0 = _context6["catch"](0);
                                _elapsedTimeInMilliseconds3 = timer.milliSecondsElapsed;
                                _this4.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.GETRECONNECTABLECHATS, "Get Reconnectable Chats failed", requestId, void 0, _elapsedTimeInMilliseconds3, requestPath, method, _context6.t0);
                                if (_context6.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                                  (0, _throwClientHTTPError["default"])();
                                }
                                reject(_context6.t0);
                                return _context6.abrupt("return");
                              case 22:
                              case "end":
                                return _context6.stop();
                            }
                          }
                        }, _callee6, null, [[0, 15]]);
                      }));
                      return function(_x9, _x10) {
                        return _ref3.apply(this, arguments);
                      };
                    }()));
                  case 13:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee7, this);
          }));
          function getReconnectableChats(_x8) {
            return _getReconnectableChats.apply(this, arguments);
          }
          return getReconnectableChats;
        }()
        /**
        * Fetches the reconnectable chats from omnichannel from the given user information in JWT token(claim name: sub).
        * @param reconnectableChatsParams Mandate parameters for get reconnectable chats.
        */
      }, {
        key: "getReconnectAvailability",
        value: function() {
          var _getReconnectAvailability = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee9(reconnectId) {
            var _this$configuration$d5, _this5 = this;
            var timer, requestPath, headers, url, method, options, axiosInstance;
            return _regenerator["default"].wrap(function _callee9$(_context9) {
              while (1) {
                switch (_context9.prev = _context9.next) {
                  case 0:
                    timer = _Timer.Timer.TIMER();
                    this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETRECONNECTAVAILABILITY, "Get Reconnectable availability Started");
                    requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatReconnectAvailabilityPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(reconnectId);
                    headers = _Constants["default"].defaultHeaders;
                    url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                    method = "GET";
                    options = {
                      headers,
                      method,
                      url,
                      timeout: (_this$configuration$d5 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d5 !== void 0 ? _this$configuration$d5 : this.configuration.requestTimeoutConfig.getReconnectAvailability
                    };
                    axiosInstance = _axios["default"].create();
                    return _context9.abrupt("return", new Promise(function() {
                      var _ref4 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee8(resolve, reject) {
                        var response, elapsedTimeInMilliseconds, data, _elapsedTimeInMilliseconds4;
                        return _regenerator["default"].wrap(function _callee8$(_context8) {
                          while (1) {
                            switch (_context8.prev = _context8.next) {
                              case 0:
                                _context8.prev = 0;
                                _context8.next = 3;
                                return axiosInstance(options);
                              case 3:
                                response = _context8.sent;
                                elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                                data = response.data;
                                if (!data) {
                                  _context8.next = 10;
                                  break;
                                }
                                _this5.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETRECONNECTAVAILABILITY, "Get Reconnect availability succeeded", void 0, response, elapsedTimeInMilliseconds, requestPath, method);
                                resolve(data);
                                return _context8.abrupt("return");
                              case 10:
                                _this5.logWithLogger(_LogLevel.LogLevel.WARN, _Enums.OCSDKTelemetryEvent.GETRECONNECTAVAILABILITY, "Get Reconnect availability didn't send any valid data", void 0, response, elapsedTimeInMilliseconds, requestPath, method);
                                resolve();
                                return _context8.abrupt("return");
                              case 15:
                                _context8.prev = 15;
                                _context8.t0 = _context8["catch"](0);
                                _elapsedTimeInMilliseconds4 = timer.milliSecondsElapsed;
                                _this5.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.GETRECONNECTAVAILABILITY, "Get Reconnect Availability failed", void 0, void 0, _elapsedTimeInMilliseconds4, requestPath, method, _context8.t0);
                                if (_context8.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                                  (0, _throwClientHTTPError["default"])();
                                }
                                reject(_context8.t0);
                                return _context8.abrupt("return");
                              case 22:
                              case "end":
                                return _context8.stop();
                            }
                          }
                        }, _callee8, null, [[0, 15]]);
                      }));
                      return function(_x12, _x13) {
                        return _ref4.apply(this, arguments);
                      };
                    }()));
                  case 9:
                  case "end":
                    return _context9.stop();
                }
              }
            }, _callee9, this);
          }));
          function getReconnectAvailability(_x11) {
            return _getReconnectAvailability.apply(this, arguments);
          }
          return getReconnectAvailability;
        }()
        /**
         *
         * @param requestId: RequestId to use for session init.
         * @param queueAvailabilityOptionalParams: Optional parameters for session init.
         */
      }, {
        key: "getAgentAvailability",
        value: function() {
          var _getAgentAvailability = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee11(requestId) {
            var _this$configuration$d6, _this6 = this;
            var queueAvailabilityOptionalParams, timer, requestPath, axiosInstance, authenticatedUserToken, initContext, getContext, headers, data, cachObj, tempArr, url, method, options, _args11 = arguments;
            return _regenerator["default"].wrap(function _callee11$(_context11) {
              while (1) {
                switch (_context11.prev = _context11.next) {
                  case 0:
                    queueAvailabilityOptionalParams = _args11.length > 1 && _args11[1] !== void 0 ? _args11[1] : {};
                    timer = _Timer.Timer.TIMER();
                    this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETAGENTAVAILABILITYSTARTED, "Get agent availability Started", requestId);
                    requestPath = "/".concat(_OmnichannelEndpoints["default"].GetAgentAvailabilityPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId, "?channelId=lcw");
                    axiosInstance = _axios["default"].create();
                    (0, _axiosRetry["default"])(axiosInstance, {
                      headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce],
                      retries: this.configuration.maxRequestRetriesOnFailure
                    });
                    authenticatedUserToken = queueAvailabilityOptionalParams.authenticatedUserToken, initContext = queueAvailabilityOptionalParams.initContext, getContext = queueAvailabilityOptionalParams.getContext;
                    headers = _Constants["default"].defaultHeaders;
                    if (authenticatedUserToken) {
                      headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                      headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                    }
                    data = initContext || {};
                    cachObj = {
                      "orgId": this.omnichannelConfiguration.orgId,
                      "widgetId": this.omnichannelConfiguration.widgetId
                    };
                    if (data && data.customContextData) {
                      tempArr = _CustomContextData.CustomContextData.sort(data.customContextData);
                      Object.assign(cachObj, {
                        "customContext": tempArr
                      });
                    }
                    if (data.portalcontactid) {
                      Object.assign(cachObj, {
                        "portalcontactid": data.portalcontactid
                      });
                    }
                    data.cacheKey = hash.createHash("sha256").update(JSON.stringify(cachObj)).digest("hex").toString();
                    if (!(getContext && !window.document)) {
                      _context11.next = 16;
                      break;
                    }
                    return _context11.abrupt("return", Promise.reject(new Error("getContext is only supported on web browsers")));
                  case 16:
                    if (getContext) {
                      data.browser = _BrowserInfo.BrowserInfo.getBrowserName();
                      data.device = _DeviceInfo.DeviceInfo.getDeviceType();
                      data.originurl = window.location.href;
                      data.os = _OSInfo.OSInfo.getOsType();
                    }
                    if (!data.locale) {
                      data.locale = _Constants["default"].defaultLocale;
                    }
                    if (!(data.locale && !_Locales["default"].supportedLocales.includes(data.locale))) {
                      _context11.next = 20;
                      break;
                    }
                    return _context11.abrupt("return", Promise.reject(new Error("Unsupported locale: '".concat(data.locale, "'"))));
                  case 20:
                    url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                    method = "POST";
                    options = {
                      data,
                      headers,
                      method,
                      url,
                      timeout: (_this$configuration$d6 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d6 !== void 0 ? _this$configuration$d6 : this.configuration.requestTimeoutConfig.getAgentAvailability
                    };
                    return _context11.abrupt("return", new Promise(function() {
                      var _ref5 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee10(resolve, reject) {
                        var response, elapsedTimeInMilliseconds, _data, _headers4, _elapsedTimeInMilliseconds5;
                        return _regenerator["default"].wrap(function _callee10$(_context10) {
                          while (1) {
                            switch (_context10.prev = _context10.next) {
                              case 0:
                                _context10.prev = 0;
                                _context10.next = 3;
                                return axiosInstance(options);
                              case 3:
                                response = _context10.sent;
                                elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                                _data = response.data, _headers4 = response.headers;
                                _this6.setAuthCodeNonce(_headers4);
                                if (_data) {
                                  _this6.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETAGENTAVAILABILITYSUCCEEDED, "Get agent availability succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);
                                  resolve(_data);
                                }
                                _context10.next = 16;
                                break;
                              case 10:
                                _context10.prev = 10;
                                _context10.t0 = _context10["catch"](0);
                                _elapsedTimeInMilliseconds5 = timer.milliSecondsElapsed;
                                _this6.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.GETAGENTAVAILABILITYFAILED, "Get agent availability failed", requestId, void 0, _elapsedTimeInMilliseconds5, requestPath, method, _context10.t0);
                                if (_context10.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                                  (0, _throwClientHTTPError["default"])();
                                }
                                reject(_context10.t0);
                              case 16:
                              case "end":
                                return _context10.stop();
                            }
                          }
                        }, _callee10, null, [[0, 10]]);
                      }));
                      return function(_x15, _x16) {
                        return _ref5.apply(this, arguments);
                      };
                    }()));
                  case 24:
                  case "end":
                    return _context11.stop();
                }
              }
            }, _callee11, this);
          }));
          function getAgentAvailability(_x14) {
            return _getAgentAvailability.apply(this, arguments);
          }
          return getAgentAvailability;
        }()
        /**
         * Starts a session to omnichannel.
         * @param requestId: RequestId to use for session init.
         * @param sessionInitOptionalParams: Optional parameters for session init.
         */
      }, {
        key: "sessionInit",
        value: function() {
          var _sessionInit = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee13(requestId) {
            var _this$configuration$d7, _this7 = this;
            var sessionInitOptionalParams, timer, axiosInstance, reconnectId, authenticatedUserToken, initContext, getContext, headers, requestPath, queryParams, data, url, method, options, _args13 = arguments;
            return _regenerator["default"].wrap(function _callee13$(_context13) {
              while (1) {
                switch (_context13.prev = _context13.next) {
                  case 0:
                    sessionInitOptionalParams = _args13.length > 1 && _args13[1] !== void 0 ? _args13[1] : {};
                    timer = _Timer.Timer.TIMER();
                    this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.SESSIONINITSTARTED, "Session Init Started", requestId);
                    axiosInstance = _axios["default"].create();
                    (0, _axiosRetry["default"])(axiosInstance, {
                      retries: this.configuration.maxRequestRetriesOnFailure,
                      shouldRetry: _SessionInitRetryHandler["default"],
                      headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce]
                    });
                    reconnectId = sessionInitOptionalParams.reconnectId, authenticatedUserToken = sessionInitOptionalParams.authenticatedUserToken, initContext = sessionInitOptionalParams.initContext, getContext = sessionInitOptionalParams.getContext;
                    headers = _Constants["default"].defaultHeaders;
                    requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatSessionInitPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId);
                    if (authenticatedUserToken) {
                      requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatAuthSessionInitPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId);
                      headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                      headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                    }
                    if (reconnectId) {
                      requestPath += "/".concat(reconnectId);
                    }
                    queryParams = "channelId=".concat(this.omnichannelConfiguration.channelId);
                    requestPath += "?".concat(queryParams);
                    data = initContext || {};
                    if (!(getContext && !window.document)) {
                      _context13.next = 15;
                      break;
                    }
                    return _context13.abrupt("return", Promise.reject(new Error("getContext is only supported on web browsers")));
                  case 15:
                    if (getContext) {
                      data.browser = _BrowserInfo.BrowserInfo.getBrowserName();
                      data.device = _DeviceInfo.DeviceInfo.getDeviceType();
                      data.originurl = window.location.href;
                      data.os = _OSInfo.OSInfo.getOsType();
                    }
                    if (!data.locale) {
                      data.locale = _Constants["default"].defaultLocale;
                    }
                    if (!(data.locale && !_Locales["default"].supportedLocales.includes(data.locale))) {
                      _context13.next = 19;
                      break;
                    }
                    return _context13.abrupt("return", Promise.reject(new Error("Unsupported locale: '".concat(data.locale, "'"))));
                  case 19:
                    url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                    method = "POST";
                    options = {
                      data,
                      headers,
                      method,
                      url,
                      timeout: (_this$configuration$d7 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d7 !== void 0 ? _this$configuration$d7 : this.configuration.requestTimeoutConfig.sessionInit
                    };
                    return _context13.abrupt("return", new Promise(function() {
                      var _ref6 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee12(resolve, reject) {
                        var response, elapsedTimeInMilliseconds, _headers5, _elapsedTimeInMilliseconds6;
                        return _regenerator["default"].wrap(function _callee12$(_context12) {
                          while (1) {
                            switch (_context12.prev = _context12.next) {
                              case 0:
                                _context12.prev = 0;
                                _context12.next = 3;
                                return axiosInstance(options);
                              case 3:
                                response = _context12.sent;
                                elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                                _headers5 = response.headers;
                                _this7.setAuthCodeNonce(_headers5);
                                _this7.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.SESSIONINITSUCCEEDED, "Session Init Succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method, void 0, data);
                                resolve();
                                _context12.next = 17;
                                break;
                              case 11:
                                _context12.prev = 11;
                                _context12.t0 = _context12["catch"](0);
                                _elapsedTimeInMilliseconds6 = timer.milliSecondsElapsed;
                                _this7.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.SESSIONINITFAILED, "Session Init failed", requestId, void 0, _elapsedTimeInMilliseconds6, requestPath, method, _context12.t0, data);
                                if (_context12.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                                  (0, _throwClientHTTPError["default"])();
                                }
                                reject(_context12.t0);
                              case 17:
                              case "end":
                                return _context12.stop();
                            }
                          }
                        }, _callee12, null, [[0, 11]]);
                      }));
                      return function(_x18, _x19) {
                        return _ref6.apply(this, arguments);
                      };
                    }()));
                  case 23:
                  case "end":
                    return _context13.stop();
                }
              }
            }, _callee13, this);
          }));
          function sessionInit(_x17) {
            return _sessionInit.apply(this, arguments);
          }
          return sessionInit;
        }()
        /**
         * Closes the omnichannel session.
         * @param requestId: RequestId to use for session close (same request id for session init).
         * @param sessionCloseOptionalParams: Optional parameters for session close.
         */
      }, {
        key: "sessionClose",
        value: function() {
          var _sessionClose = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee15(requestId) {
            var _this$configuration$d8, _this8 = this;
            var sessionCloseOptionalParams, timer, requestPath, axiosInstance, authenticatedUserToken, isReconnectChat, isPersistentChat, chatId, headers, data, url, method, options, _args15 = arguments;
            return _regenerator["default"].wrap(function _callee15$(_context15) {
              while (1) {
                switch (_context15.prev = _context15.next) {
                  case 0:
                    sessionCloseOptionalParams = _args15.length > 1 && _args15[1] !== void 0 ? _args15[1] : {};
                    timer = _Timer.Timer.TIMER();
                    this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.SESSIONCLOSESTARTED, "Session Close Started", requestId);
                    requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatSessionClosePath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                    axiosInstance = _axios["default"].create();
                    (0, _axiosRetry["default"])(axiosInstance, {
                      headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce],
                      retries: this.configuration.maxRequestRetriesOnFailure
                    });
                    authenticatedUserToken = sessionCloseOptionalParams.authenticatedUserToken, isReconnectChat = sessionCloseOptionalParams.isReconnectChat, isPersistentChat = sessionCloseOptionalParams.isPersistentChat, chatId = sessionCloseOptionalParams.chatId;
                    headers = _Constants["default"].defaultHeaders;
                    data = {};
                    data.chatId = chatId;
                    if (authenticatedUserToken) {
                      requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatAuthSessionClosePath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                      headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                      headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                    }
                    if (isReconnectChat) {
                      requestPath += "&isReconnectChat=true";
                    }
                    if (isPersistentChat) {
                      requestPath += "&isPersistentChat=true";
                    }
                    url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                    method = "POST";
                    options = {
                      data,
                      headers,
                      method,
                      url,
                      timeout: (_this$configuration$d8 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d8 !== void 0 ? _this$configuration$d8 : this.configuration.requestTimeoutConfig.sessionClose
                    };
                    return _context15.abrupt("return", new Promise(function() {
                      var _ref7 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee14(resolve, reject) {
                        var response, _headers6, elapsedTimeInMilliseconds, _elapsedTimeInMilliseconds7;
                        return _regenerator["default"].wrap(function _callee14$(_context14) {
                          while (1) {
                            switch (_context14.prev = _context14.next) {
                              case 0:
                                _context14.prev = 0;
                                _context14.next = 3;
                                return axiosInstance(options);
                              case 3:
                                response = _context14.sent;
                                _headers6 = response.headers;
                                _this8.setAuthCodeNonce(_headers6);
                                elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                                _this8.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.SESSIONCLOSESUCCEEDED, "Session Close succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);
                                resolve();
                                _context14.next = 17;
                                break;
                              case 11:
                                _context14.prev = 11;
                                _context14.t0 = _context14["catch"](0);
                                _elapsedTimeInMilliseconds7 = timer.milliSecondsElapsed;
                                _this8.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.SESSIONCLOSEFAILED, "Session close failed", requestId, void 0, _elapsedTimeInMilliseconds7, requestPath, method, _context14.t0);
                                if (_context14.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                                  (0, _throwClientHTTPError["default"])();
                                }
                                reject(_context14.t0);
                              case 17:
                              case "end":
                                return _context14.stop();
                            }
                          }
                        }, _callee14, null, [[0, 11]]);
                      }));
                      return function(_x21, _x22) {
                        return _ref7.apply(this, arguments);
                      };
                    }()));
                  case 17:
                  case "end":
                    return _context15.stop();
                }
              }
            }, _callee15, this);
          }));
          function sessionClose(_x20) {
            return _sessionClose.apply(this, arguments);
          }
          return sessionClose;
        }()
        /**
         * Validate the auth chat record exists in database.
         * @param requestId: RequestId for validateAuthChatRecord (same request id for session init).
         * @param validateAuthChatRecordOptionalParams: Optional parameters for validateAuthChatRecord.
         */
      }, {
        key: "validateAuthChatRecord",
        value: function() {
          var _validateAuthChatRecord = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee17(requestId, validateAuthChatRecordOptionalParams) {
            var _this$configuration$d9, _this9 = this;
            var timer, authenticatedUserToken, chatId, requestPath, axiosInstance, headers, url, method, options;
            return _regenerator["default"].wrap(function _callee17$(_context17) {
              while (1) {
                switch (_context17.prev = _context17.next) {
                  case 0:
                    timer = _Timer.Timer.TIMER();
                    this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.VALIDATEAUTHCHATRECORDSTARTED, "Validate Auth Chat Record Started", requestId);
                    authenticatedUserToken = validateAuthChatRecordOptionalParams.authenticatedUserToken, chatId = validateAuthChatRecordOptionalParams.chatId;
                    requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatValidateAuthChatMapRecordPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(chatId, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                    axiosInstance = _axios["default"].create();
                    (0, _axiosRetry["default"])(axiosInstance, {
                      headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce],
                      retries: this.configuration.maxRequestRetriesOnFailure
                    });
                    headers = _Constants["default"].defaultHeaders;
                    if (authenticatedUserToken) {
                      headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                      headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                    }
                    url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                    method = "GET";
                    options = {
                      headers,
                      method,
                      url,
                      timeout: (_this$configuration$d9 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d9 !== void 0 ? _this$configuration$d9 : this.configuration.requestTimeoutConfig.validateAuthChatRecordTimeout
                    };
                    return _context17.abrupt("return", new Promise(function() {
                      var _ref8 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee16(resolve, reject) {
                        var _response$data, response, _headers7, elapsedTimeInMilliseconds, _elapsedTimeInMilliseconds8;
                        return _regenerator["default"].wrap(function _callee16$(_context16) {
                          while (1) {
                            switch (_context16.prev = _context16.next) {
                              case 0:
                                _context16.prev = 0;
                                _context16.next = 3;
                                return axiosInstance(options);
                              case 3:
                                response = _context16.sent;
                                _headers7 = response.headers;
                                _this9.setAuthCodeNonce(_headers7);
                                elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                                if (((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.authChatExist) === true) {
                                  _this9.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.VALIDATEAUTHCHATRECORDSUCCEEDED, "Validate Auth Chat Record succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);
                                  resolve(response.data);
                                } else {
                                  _this9.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.VALIDATEAUTHCHATRECORDFAILED, "Validate Auth Chat Record Failed. Record is not found or request is not authorized", requestId, response, elapsedTimeInMilliseconds, requestPath, method);
                                  reject(new Error("Validate Auth Chat Record Failed. Record is not found or request is not authorized"));
                                }
                                _context16.next = 16;
                                break;
                              case 10:
                                _context16.prev = 10;
                                _context16.t0 = _context16["catch"](0);
                                _elapsedTimeInMilliseconds8 = timer.milliSecondsElapsed;
                                _this9.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.VALIDATEAUTHCHATRECORDFAILED, "Validate Auth Chat Record failed", requestId, void 0, _elapsedTimeInMilliseconds8, requestPath, method, _context16.t0);
                                if (_context16.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                                  (0, _throwClientHTTPError["default"])();
                                }
                                if (_context16.t0.toString() === "Error: Request failed with status code 404") {
                                  resolve({});
                                } else {
                                  reject(_context16.t0);
                                }
                              case 16:
                              case "end":
                                return _context16.stop();
                            }
                          }
                        }, _callee16, null, [[0, 10]]);
                      }));
                      return function(_x25, _x26) {
                        return _ref8.apply(this, arguments);
                      };
                    }()));
                  case 12:
                  case "end":
                    return _context17.stop();
                }
              }
            }, _callee17, this);
          }));
          function validateAuthChatRecord(_x23, _x24) {
            return _validateAuthChatRecord.apply(this, arguments);
          }
          return validateAuthChatRecord;
        }()
        /**
         * Submits post chat response.
         * @param requestId RequestId of the omnichannel session.
         * @param postChatResponse Post chat response to submit.
         * @param submitPostChatResponseOptionalParams: Optional parameters for submit post chat response.
         */
      }, {
        key: "submitPostChatResponse",
        value: function() {
          var _submitPostChatResponse = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee19(requestId, postChatResponse) {
            var _this$configuration$d10, _this10 = this;
            var submitPostChatResponseOptionalParams, timer, requestPath, axiosInstance, authenticatedUserToken, headers, url, method, options, _args19 = arguments;
            return _regenerator["default"].wrap(function _callee19$(_context19) {
              while (1) {
                switch (_context19.prev = _context19.next) {
                  case 0:
                    submitPostChatResponseOptionalParams = _args19.length > 2 && _args19[2] !== void 0 ? _args19[2] : {};
                    timer = _Timer.Timer.TIMER();
                    this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.SUBMITPOSTCHATSTARTED, "Submit Post Chat Started", requestId);
                    requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatSubmitPostChatPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                    axiosInstance = _axios["default"].create();
                    (0, _axiosRetry["default"])(axiosInstance, {
                      headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce],
                      retries: this.configuration.maxRequestRetriesOnFailure
                    });
                    authenticatedUserToken = submitPostChatResponseOptionalParams.authenticatedUserToken;
                    headers = _Constants["default"].defaultHeaders;
                    if (authenticatedUserToken) {
                      requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatAuthSubmitPostChatPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                      headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                      headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                    }
                    url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                    method = "POST";
                    options = {
                      data: JSON.stringify(postChatResponse),
                      headers,
                      method,
                      url,
                      timeout: (_this$configuration$d10 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d10 !== void 0 ? _this$configuration$d10 : this.configuration.requestTimeoutConfig.submitPostChatResponse
                    };
                    return _context19.abrupt("return", new Promise(function() {
                      var _ref9 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee18(resolve, reject) {
                        var response, _headers8, elapsedTimeInMilliseconds, _elapsedTimeInMilliseconds9;
                        return _regenerator["default"].wrap(function _callee18$(_context18) {
                          while (1) {
                            switch (_context18.prev = _context18.next) {
                              case 0:
                                _context18.prev = 0;
                                _context18.next = 3;
                                return axiosInstance(options);
                              case 3:
                                response = _context18.sent;
                                _headers8 = response.headers;
                                _this10.setAuthCodeNonce(_headers8);
                                elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                                _this10.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.SUBMITPOSTCHATSUCCEEDED, "Submit Post Chat succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);
                                resolve();
                                _context18.next = 17;
                                break;
                              case 11:
                                _context18.prev = 11;
                                _context18.t0 = _context18["catch"](0);
                                _elapsedTimeInMilliseconds9 = timer.milliSecondsElapsed;
                                _this10.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.SUBMITPOSTCHATFAILED, "Submit Post Chat Failed", requestId, void 0, _elapsedTimeInMilliseconds9, requestPath, method, _context18.t0);
                                if (_context18.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                                  (0, _throwClientHTTPError["default"])();
                                }
                                reject(_context18.t0);
                              case 17:
                              case "end":
                                return _context18.stop();
                            }
                          }
                        }, _callee18, null, [[0, 11]]);
                      }));
                      return function(_x29, _x30) {
                        return _ref9.apply(this, arguments);
                      };
                    }()));
                  case 13:
                  case "end":
                    return _context19.stop();
                }
              }
            }, _callee19, this);
          }));
          function submitPostChatResponse(_x27, _x28) {
            return _submitPostChatResponse.apply(this, arguments);
          }
          return submitPostChatResponse;
        }()
        /**
         * Submits post chat response.
         * @param requestId RequestId of the omnichannel session.
         * @param postChatResponse Post chat response to submit.
         * @param submitPostChatResponseOptionalParams: Optional parameters for submit post chat response.
         */
      }, {
        key: "getSurveyInviteLink",
        value: function() {
          var _getSurveyInviteLink = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee21(surveyOwnerId, surveyInviteAPIRequestBody) {
            var _this$configuration$d11, _this11 = this;
            var getsurveyInviteLinkOptionalParams, timer, requestPath, axiosInstance, authenticatedUserToken, requestId, headers, url, method, options, _args21 = arguments;
            return _regenerator["default"].wrap(function _callee21$(_context21) {
              while (1) {
                switch (_context21.prev = _context21.next) {
                  case 0:
                    getsurveyInviteLinkOptionalParams = _args21.length > 2 && _args21[2] !== void 0 ? _args21[2] : {};
                    timer = _Timer.Timer.TIMER();
                    if (this.logger) {
                      this.logger.log(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETSURVEYINVITELINKSTARTED, {
                        SurveyOwnerId: surveyOwnerId
                      }, "Get Survey Invite Link Started");
                    }
                    requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatGetSurveyInviteLinkPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(surveyOwnerId);
                    axiosInstance = _axios["default"].create();
                    (0, _axiosRetry["default"])(axiosInstance, {
                      headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce],
                      retries: this.configuration.maxRequestRetriesOnFailure
                    });
                    authenticatedUserToken = getsurveyInviteLinkOptionalParams.authenticatedUserToken, requestId = getsurveyInviteLinkOptionalParams.requestId;
                    headers = _Constants["default"].defaultHeaders;
                    if (authenticatedUserToken) {
                      requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatAuthGetSurveyInviteLinkPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(surveyOwnerId);
                      headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                      headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                      headers[_OmnichannelHTTPHeaders["default"].widgetAppId] = this.omnichannelConfiguration.widgetId;
                    }
                    if (requestId) {
                      headers[_OmnichannelHTTPHeaders["default"].requestId] = requestId;
                    }
                    url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                    method = "POST";
                    options = {
                      data: JSON.stringify(surveyInviteAPIRequestBody),
                      headers,
                      method,
                      url,
                      timeout: (_this$configuration$d11 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d11 !== void 0 ? _this$configuration$d11 : this.configuration.requestTimeoutConfig.getSurveyInviteLink
                    };
                    return _context21.abrupt("return", new Promise(function() {
                      var _ref10 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee20(resolve, reject) {
                        var response, data, _headers9, elapsedTimeInMilliseconds, _elapsedTimeInMilliseconds10;
                        return _regenerator["default"].wrap(function _callee20$(_context20) {
                          while (1) {
                            switch (_context20.prev = _context20.next) {
                              case 0:
                                _context20.prev = 0;
                                _context20.next = 3;
                                return axiosInstance(options);
                              case 3:
                                response = _context20.sent;
                                data = response.data, _headers9 = response.headers;
                                _this11.setAuthCodeNonce(_headers9);
                                elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                                _this11.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETSURVEYINVITELINKSUCCEEDED, "Get Survey Invite Link Succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);
                                resolve(data);
                                _context20.next = 17;
                                break;
                              case 11:
                                _context20.prev = 11;
                                _context20.t0 = _context20["catch"](0);
                                _elapsedTimeInMilliseconds10 = timer.milliSecondsElapsed;
                                _this11.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.GETSURVEYINVITELINKFAILED, "Get Survey Invite Link failed", requestId, void 0, _elapsedTimeInMilliseconds10, requestPath, method, _context20.t0);
                                if (_context20.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                                  (0, _throwClientHTTPError["default"])();
                                }
                                reject(_context20.t0);
                              case 17:
                              case "end":
                                return _context20.stop();
                            }
                          }
                        }, _callee20, null, [[0, 11]]);
                      }));
                      return function(_x33, _x34) {
                        return _ref10.apply(this, arguments);
                      };
                    }()));
                  case 14:
                  case "end":
                    return _context21.stop();
                }
              }
            }, _callee21, this);
          }));
          function getSurveyInviteLink(_x31, _x32) {
            return _getSurveyInviteLink.apply(this, arguments);
          }
          return getSurveyInviteLink;
        }()
        /**
         * Get chat transcripts for customer.
         * @param requestId RequestId of the omnichannel session.
         * @param chatId Chat thread Id.
         * @param token Skype token.
         * @param getChatTranscriptsOptionalParams Optional parameters for get chat transcripts.
         */
      }, {
        key: "getChatTranscripts",
        value: function() {
          var _getChatTranscripts = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee23(requestId, chatId, token) {
            var _this$configuration$d12, _this12 = this;
            var getChatTranscriptsOptionalParams, timer, requestPath, axiosInstance, authenticatedUserToken, currentLiveChatVersion, headers, url, method, options, _args23 = arguments;
            return _regenerator["default"].wrap(function _callee23$(_context23) {
              while (1) {
                switch (_context23.prev = _context23.next) {
                  case 0:
                    getChatTranscriptsOptionalParams = _args23.length > 3 && _args23[3] !== void 0 ? _args23[3] : {};
                    timer = _Timer.Timer.TIMER();
                    this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETCHATTRANSCRIPTSTARTED, "Get Chat Transcript Started", requestId);
                    requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatGetChatTranscriptPath, "/").concat(chatId, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                    axiosInstance = _axios["default"].create();
                    (0, _axiosRetry["default"])(axiosInstance, {
                      headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce],
                      retries: this.configuration.maxRequestRetriesOnFailure
                    });
                    authenticatedUserToken = getChatTranscriptsOptionalParams.authenticatedUserToken, currentLiveChatVersion = getChatTranscriptsOptionalParams.currentLiveChatVersion;
                    headers = _Constants["default"].defaultHeaders;
                    headers[_OmnichannelHTTPHeaders["default"].organizationId] = this.omnichannelConfiguration.orgId;
                    headers[_OmnichannelHTTPHeaders["default"].widgetAppId] = this.omnichannelConfiguration.widgetId;
                    headers[_OmnichannelHTTPHeaders["default"].authorization] = token;
                    if (this.liveChatVersion === _Enums.LiveChatVersion.V2 || currentLiveChatVersion && currentLiveChatVersion === _Enums.LiveChatVersion.V2) {
                      requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatv2GetChatTranscriptPath, "/").concat(chatId, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                      if (authenticatedUserToken) {
                        headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                        headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                        requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatv2AuthGetChatTranscriptPath, "/").concat(chatId, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                      }
                    } else if (authenticatedUserToken) {
                      headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                      headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                      requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatAuthGetChatTranscriptPath, "/").concat(chatId, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                    }
                    url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                    method = "GET";
                    options = {
                      headers,
                      method,
                      url,
                      timeout: (_this$configuration$d12 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d12 !== void 0 ? _this$configuration$d12 : this.configuration.requestTimeoutConfig.getChatTranscripts
                    };
                    return _context23.abrupt("return", new Promise(function() {
                      var _ref11 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee22(resolve, reject) {
                        var response, elapsedTimeInMilliseconds, data, _headers10, _elapsedTimeInMilliseconds11;
                        return _regenerator["default"].wrap(function _callee22$(_context22) {
                          while (1) {
                            switch (_context22.prev = _context22.next) {
                              case 0:
                                _context22.prev = 0;
                                _context22.next = 3;
                                return axiosInstance(options);
                              case 3:
                                response = _context22.sent;
                                elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                                data = response.data, _headers10 = response.headers;
                                _this12.setAuthCodeNonce(_headers10);
                                _this12.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETCHATTRANSCRIPTSUCCEEDED, "Get Chat Transcript succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);
                                resolve(data);
                                _context22.next = 17;
                                break;
                              case 11:
                                _context22.prev = 11;
                                _context22.t0 = _context22["catch"](0);
                                _elapsedTimeInMilliseconds11 = timer.milliSecondsElapsed;
                                _this12.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.GETCHATTRANSCRIPTFAILED, "Get Chat Transcript failed", requestId, void 0, _elapsedTimeInMilliseconds11, requestPath, method, _context22.t0);
                                if (_context22.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                                  (0, _throwClientHTTPError["default"])();
                                }
                                reject(_context22.t0);
                              case 17:
                              case "end":
                                return _context22.stop();
                            }
                          }
                        }, _callee22, null, [[0, 11]]);
                      }));
                      return function(_x38, _x39) {
                        return _ref11.apply(this, arguments);
                      };
                    }()));
                  case 16:
                  case "end":
                    return _context23.stop();
                }
              }
            }, _callee23, this);
          }));
          function getChatTranscripts(_x35, _x36, _x37) {
            return _getChatTranscripts.apply(this, arguments);
          }
          return getChatTranscripts;
        }()
        /**
         * Email transcript to customer.
         * @param requestId RequestId of the omnichannel session.
         * @param token Skype token.
         * @param emailRequestBody Email request body.
         * @param emailTranscriptOptionalParams Optional parameters for email transcript.
         */
      }, {
        key: "emailTranscript",
        value: function() {
          var _emailTranscript = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee25(requestId, token, emailRequestBody) {
            var _this$configuration$d13, _this13 = this;
            var emailTranscriptOptionalParams, timer, requestPath, axiosInstance, authenticatedUserToken, headers, url, method, options, _args25 = arguments;
            return _regenerator["default"].wrap(function _callee25$(_context25) {
              while (1) {
                switch (_context25.prev = _context25.next) {
                  case 0:
                    emailTranscriptOptionalParams = _args25.length > 3 && _args25[3] !== void 0 ? _args25[3] : {};
                    timer = _Timer.Timer.TIMER();
                    this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.EMAILTRANSCRIPTSTARTED, "Email Transcript Started", requestId);
                    requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatTranscriptEmailRequestPath, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                    axiosInstance = _axios["default"].create();
                    (0, _axiosRetry["default"])(axiosInstance, {
                      headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce],
                      retries: this.configuration.maxRequestRetriesOnFailure
                    });
                    authenticatedUserToken = emailTranscriptOptionalParams.authenticatedUserToken;
                    headers = _Constants["default"].defaultHeaders;
                    headers[_OmnichannelHTTPHeaders["default"].organizationId] = this.omnichannelConfiguration.orgId;
                    headers[_OmnichannelHTTPHeaders["default"].widgetAppId] = this.omnichannelConfiguration.widgetId;
                    headers[_OmnichannelHTTPHeaders["default"].authorization] = token;
                    if (authenticatedUserToken) {
                      headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                      headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                      requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatAuthTranscriptEmailRequestPath, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                    }
                    url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                    method = "POST";
                    options = {
                      data: JSON.stringify(emailRequestBody),
                      headers,
                      method,
                      url,
                      timeout: (_this$configuration$d13 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d13 !== void 0 ? _this$configuration$d13 : this.configuration.requestTimeoutConfig.emailTranscript
                    };
                    return _context25.abrupt("return", new Promise(function() {
                      var _ref12 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee24(resolve, reject) {
                        var response, _headers11, elapsedTimeInMilliseconds, _elapsedTimeInMilliseconds12;
                        return _regenerator["default"].wrap(function _callee24$(_context24) {
                          while (1) {
                            switch (_context24.prev = _context24.next) {
                              case 0:
                                _context24.prev = 0;
                                _context24.next = 3;
                                return axiosInstance(options);
                              case 3:
                                response = _context24.sent;
                                _headers11 = response.headers;
                                _this13.setAuthCodeNonce(_headers11);
                                elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                                _this13.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.EMAILTRANSCRIPTSUCCEEDED, "Email Transcript succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);
                                resolve();
                                _context24.next = 17;
                                break;
                              case 11:
                                _context24.prev = 11;
                                _context24.t0 = _context24["catch"](0);
                                _elapsedTimeInMilliseconds12 = timer.milliSecondsElapsed;
                                _this13.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.EMAILTRANSCRIPTFAILED, "Email Transcript Failed", requestId, void 0, _elapsedTimeInMilliseconds12, requestPath, method, _context24.t0);
                                if (_context24.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                                  (0, _throwClientHTTPError["default"])();
                                }
                                reject(_context24.t0);
                              case 17:
                              case "end":
                                return _context24.stop();
                            }
                          }
                        }, _callee24, null, [[0, 11]]);
                      }));
                      return function(_x43, _x44) {
                        return _ref12.apply(this, arguments);
                      };
                    }()));
                  case 16:
                  case "end":
                    return _context25.stop();
                }
              }
            }, _callee25, this);
          }));
          function emailTranscript(_x40, _x41, _x42) {
            return _emailTranscript.apply(this, arguments);
          }
          return emailTranscript;
        }()
        /**
         * Fetch data masking info of the org.
         * @param requestId RequestId of the omnichannel session (Optional).
         */
      }, {
        key: "fetchDataMaskingInfo",
        value: function() {
          var _fetchDataMaskingInfo = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee27(requestId) {
            var _this$configuration$d14, _this14 = this;
            var timer, requestPath, axiosInstance, headers, url, method, options;
            return _regenerator["default"].wrap(function _callee27$(_context27) {
              while (1) {
                switch (_context27.prev = _context27.next) {
                  case 0:
                    timer = _Timer.Timer.TIMER();
                    this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.FETCHDATAMASKINGSTARTED, "Fetch Data Masking Started", requestId);
                    if (!requestId) {
                      requestId = (0, _uuid.uuidv4)();
                    }
                    requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatFetchDataMaskingInfoPath, "/").concat(this.omnichannelConfiguration.orgId);
                    axiosInstance = _axios["default"].create();
                    (0, _axiosRetry["default"])(axiosInstance, {
                      retries: this.configuration.maxRequestRetriesOnFailure
                    });
                    headers = _Constants["default"].defaultHeaders;
                    headers[_OmnichannelHTTPHeaders["default"].organizationId] = this.omnichannelConfiguration.orgId;
                    headers[_OmnichannelHTTPHeaders["default"].requestId] = requestId;
                    url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                    method = "GET";
                    options = {
                      headers,
                      method,
                      url,
                      timeout: (_this$configuration$d14 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d14 !== void 0 ? _this$configuration$d14 : this.configuration.requestTimeoutConfig.fetchDataMaskingInfo
                    };
                    return _context27.abrupt("return", new Promise(function() {
                      var _ref13 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee26(resolve, reject) {
                        var response, elapsedTimeInMilliseconds, data, _elapsedTimeInMilliseconds13;
                        return _regenerator["default"].wrap(function _callee26$(_context26) {
                          while (1) {
                            switch (_context26.prev = _context26.next) {
                              case 0:
                                _context26.prev = 0;
                                _context26.next = 3;
                                return axiosInstance(options);
                              case 3:
                                response = _context26.sent;
                                elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                                data = response.data;
                                _this14.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.FETCHDATAMASKINGSUCCEEDED, "Fetch Data Masking succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);
                                resolve(data);
                                _context26.next = 16;
                                break;
                              case 10:
                                _context26.prev = 10;
                                _context26.t0 = _context26["catch"](0);
                                _elapsedTimeInMilliseconds13 = timer.milliSecondsElapsed;
                                _this14.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.FETCHDATAMASKINGFAILED, "Fetch Data Masking Failed", requestId, void 0, _elapsedTimeInMilliseconds13, requestPath, method, _context26.t0);
                                if (_context26.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                                  (0, _throwClientHTTPError["default"])();
                                }
                                reject(_context26.t0);
                              case 16:
                              case "end":
                                return _context26.stop();
                            }
                          }
                        }, _callee26, null, [[0, 10]]);
                      }));
                      return function(_x46, _x47) {
                        return _ref13.apply(this, arguments);
                      };
                    }()));
                  case 13:
                  case "end":
                    return _context27.stop();
                }
              }
            }, _callee27, this);
          }));
          function fetchDataMaskingInfo(_x45) {
            return _fetchDataMaskingInfo.apply(this, arguments);
          }
          return fetchDataMaskingInfo;
        }()
        /**
         * Makes a secondary channel event network call to Omnichannel.
         * @param requestId RequestId to use for secondary channel event
         * @param secondaryChannelEventRequestBody secondaryChannel event request body
         * @param secondaryChannelEventOptionalParams Optional parameters for secondary channel events.
         */
      }, {
        key: "makeSecondaryChannelEventRequest",
        value: function() {
          var _makeSecondaryChannelEventRequest = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee29(requestId, secondaryChannelEventRequestBody) {
            var _this$configuration$d15, _this15 = this;
            var secondaryChannelEventOptionalParams, timer, requestPath, axiosInstance, authenticatedUserToken, headers, url, method, options, _args29 = arguments;
            return _regenerator["default"].wrap(function _callee29$(_context29) {
              while (1) {
                switch (_context29.prev = _context29.next) {
                  case 0:
                    secondaryChannelEventOptionalParams = _args29.length > 2 && _args29[2] !== void 0 ? _args29[2] : {};
                    timer = _Timer.Timer.TIMER();
                    this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.SECONDARYCHANNELEVENTREQUESTSTARTED, "Secondary Channel Event Request Started", requestId);
                    requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatSecondaryChannelEventPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId);
                    axiosInstance = _axios["default"].create();
                    (0, _axiosRetry["default"])(axiosInstance, {
                      headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce],
                      retries: this.configuration.maxRequestRetriesOnFailure
                    });
                    authenticatedUserToken = secondaryChannelEventOptionalParams.authenticatedUserToken;
                    headers = _Constants["default"].defaultHeaders;
                    headers[_OmnichannelHTTPHeaders["default"].organizationId] = this.omnichannelConfiguration.orgId;
                    if (authenticatedUserToken) {
                      headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                      headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                      requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatAuthSecondaryChannelEventPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId);
                    }
                    requestPath += "?channelId=" + _Constants["default"].defaultChannelId;
                    url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                    method = "POST";
                    options = {
                      data: JSON.stringify(secondaryChannelEventRequestBody),
                      headers,
                      method,
                      url,
                      timeout: (_this$configuration$d15 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d15 !== void 0 ? _this$configuration$d15 : this.configuration.requestTimeoutConfig.makeSecondaryChannelEventRequest
                    };
                    return _context29.abrupt("return", new Promise(function() {
                      var _ref14 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee28(resolve, reject) {
                        var response, _headers12, elapsedTimeInMilliseconds, _elapsedTimeInMilliseconds14;
                        return _regenerator["default"].wrap(function _callee28$(_context28) {
                          while (1) {
                            switch (_context28.prev = _context28.next) {
                              case 0:
                                _context28.prev = 0;
                                _context28.next = 3;
                                return axiosInstance(options);
                              case 3:
                                response = _context28.sent;
                                _headers12 = response.headers;
                                _this15.setAuthCodeNonce(_headers12);
                                elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                                _this15.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.SECONDARYCHANNELEVENTREQUESTSUCCEEDED, "Secondary Channel Event Request Succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);
                                resolve();
                                _context28.next = 17;
                                break;
                              case 11:
                                _context28.prev = 11;
                                _context28.t0 = _context28["catch"](0);
                                _elapsedTimeInMilliseconds14 = timer.milliSecondsElapsed;
                                _this15.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.SECONDARYCHANNELEVENTREQUESTFAILED, "Secondary Channel Event Request Failed", requestId, void 0, _elapsedTimeInMilliseconds14, requestPath, method, _context28.t0);
                                if (_context28.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                                  (0, _throwClientHTTPError["default"])();
                                }
                                reject(_context28.t0);
                              case 17:
                              case "end":
                                return _context28.stop();
                            }
                          }
                        }, _callee28, null, [[0, 11]]);
                      }));
                      return function(_x50, _x51) {
                        return _ref14.apply(this, arguments);
                      };
                    }()));
                  case 15:
                  case "end":
                    return _context29.stop();
                }
              }
            }, _callee29, this);
          }));
          function makeSecondaryChannelEventRequest(_x48, _x49) {
            return _makeSecondaryChannelEventRequest.apply(this, arguments);
          }
          return makeSecondaryChannelEventRequest;
        }()
        /** Send typing indicator
         * @param requestId RequestId of the omnichannel session.
         */
      }, {
        key: "sendTypingIndicator",
        value: function() {
          var _sendTypingIndicator = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee31(requestId, currentLiveChatVersion) {
            var _this$configuration$d16, _this16 = this;
            var sendTypingIndicatorOptionalParams, timer, customerDisplayName, requestPath, axiosInstance, headers, url, method, options, _args31 = arguments;
            return _regenerator["default"].wrap(function _callee31$(_context31) {
              while (1) {
                switch (_context31.prev = _context31.next) {
                  case 0:
                    sendTypingIndicatorOptionalParams = _args31.length > 2 && _args31[2] !== void 0 ? _args31[2] : {};
                    if (!(!currentLiveChatVersion || currentLiveChatVersion !== _Enums.LiveChatVersion.V2)) {
                      _context31.next = 3;
                      break;
                    }
                    return _context31.abrupt("return", Promise.resolve());
                  case 3:
                    timer = _Timer.Timer.TIMER();
                    customerDisplayName = sendTypingIndicatorOptionalParams.customerDisplayName;
                    if (!(!currentLiveChatVersion || currentLiveChatVersion !== _Enums.LiveChatVersion.V2)) {
                      _context31.next = 7;
                      break;
                    }
                    throw new Error("Typing indicator is only supported on v2");
                  case 7:
                    requestPath = "/".concat(_OmnichannelEndpoints["default"].SendTypingIndicatorPath, "/").concat(requestId);
                    axiosInstance = _axios["default"].create();
                    headers = _Constants["default"].defaultHeaders;
                    headers[_OmnichannelHTTPHeaders["default"].organizationId] = this.omnichannelConfiguration.orgId;
                    if (customerDisplayName) {
                      headers[_Constants["default"].customerDisplayName] = customerDisplayName;
                    }
                    url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                    method = "POST";
                    options = {
                      headers,
                      method,
                      url,
                      timeout: (_this$configuration$d16 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d16 !== void 0 ? _this$configuration$d16 : this.configuration.requestTimeoutConfig.sendTypingIndicator
                    };
                    return _context31.abrupt("return", new Promise(function() {
                      var _ref15 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee30(resolve, reject) {
                        var response, elapsedTimeInMilliseconds, _elapsedTimeInMilliseconds15;
                        return _regenerator["default"].wrap(function _callee30$(_context30) {
                          while (1) {
                            switch (_context30.prev = _context30.next) {
                              case 0:
                                _context30.prev = 0;
                                _context30.next = 3;
                                return axiosInstance(options);
                              case 3:
                                response = _context30.sent;
                                elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                                _this16.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.SENDTYPINGINDICATORSUCCEEDED, "Send Typing Indicator Succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);
                                resolve();
                                _context30.next = 15;
                                break;
                              case 9:
                                _context30.prev = 9;
                                _context30.t0 = _context30["catch"](0);
                                _elapsedTimeInMilliseconds15 = timer.milliSecondsElapsed;
                                _this16.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.SENDTYPINGINDICATORFAILED, "Send Typing Indicator Failed", requestId, void 0, _elapsedTimeInMilliseconds15, requestPath, method, _context30.t0);
                                if (_context30.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                                  (0, _throwClientHTTPError["default"])();
                                }
                                reject(_context30.t0);
                              case 15:
                              case "end":
                                return _context30.stop();
                            }
                          }
                        }, _callee30, null, [[0, 9]]);
                      }));
                      return function(_x54, _x55) {
                        return _ref15.apply(this, arguments);
                      };
                    }()));
                  case 16:
                  case "end":
                    return _context31.stop();
                }
              }
            }, _callee31, this);
          }));
          function sendTypingIndicator(_x52, _x53) {
            return _sendTypingIndicator.apply(this, arguments);
          }
          return sendTypingIndicator;
        }()
        /**
         * Helper function for logging.
         *
         * @param logLevel Log level for logging.
         * @param telemetryEventType Telemetry event type in which event will be logged.
         * @param description Description of the event.
         * @param requestId Request ID
         * @param response Response
         * @param elapsedTimeInMilliseconds Elapsed time in ms
         * @param requestPath Request path
         * @param method Method
         * @param error Error
         * @param data Data
         */
      }, {
        key: "logWithLogger",
        value: function logWithLogger(logLevel, telemetryEventType, description, requestId, response, elapsedTimeInMilliseconds, requestPath, method, error, requestPayload) {
          var _response2;
          if (!this.logger) {
            return;
          }
          if (error) {
            _LoggingSanitizer.LoggingSanitizer.stripErrorSensitiveProperties(error);
          }
          var sanitizedRequestPayload = void 0;
          if (requestPayload) {
            sanitizedRequestPayload = _objectSpread({}, requestPayload);
            if (sanitizedRequestPayload.customContextData) {
              _LoggingSanitizer.LoggingSanitizer.stripCustomContextDataValues(sanitizedRequestPayload.customContextData);
            }
            if (sanitizedRequestPayload.preChatResponse) {
              _LoggingSanitizer.LoggingSanitizer.stripPreChatResponse(sanitizedRequestPayload.preChatResponse);
            }
            _LoggingSanitizer.LoggingSanitizer.stripGeolocation(sanitizedRequestPayload);
          }
          var customData = {
            RequestId: requestId,
            Region: response === null || response === void 0 ? void 0 : response.data.Region,
            ElapsedTimeInMilliseconds: elapsedTimeInMilliseconds,
            TransactionId: response === null || response === void 0 ? void 0 : response.headers[_Constants["default"].transactionid],
            RequestPath: requestPath,
            RequestMethod: method,
            ResponseStatusCode: response ? response.status : error ? (_response2 = error.response) === null || _response2 === void 0 ? void 0 : _response2.status : void 0,
            // eslint-disable-line @typescript-eslint/no-explicit-any
            ExceptionDetails: error,
            RequestPayload: sanitizedRequestPayload
          };
          this.logger.log(logLevel, telemetryEventType, customData, description);
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
      }]);
      return SDK2;
    }();
    exports["default"] = SDK;
    (0, _defineProperty2["default"])(SDK, "defaultRequestTimeoutConfig", {
      getChatConfig: 3e4,
      getLWIDetails: 15e3,
      getChatToken: 15e3,
      sessionInit: 15e3,
      sessionClose: 15e3,
      getReconnectableChats: 15e3,
      getReconnectAvailability: 15e3,
      submitPostChatResponse: 15e3,
      getSurveyInviteLink: 15e3,
      getChatTranscripts: 3e4,
      emailTranscript: 5e3,
      fetchDataMaskingInfo: 5e3,
      makeSecondaryChannelEventRequest: 15e3,
      getAgentAvailability: 15e3,
      sendTypingIndicator: 5e3,
      validateAuthChatRecordTimeout: 15e3
    });
    (0, _defineProperty2["default"])(SDK, "defaultConfiguration", {
      authCodeNonce: (0, _uuid.uuidv4)().substring(0, 8),
      getChatTokenRetryCount: 10,
      getChatTokenTimeBetweenRetriesOnFailure: 1e4,
      getChatTokenRetryOn429: false,
      maxRequestRetriesOnFailure: 3,
      defaultRequestTimeout: void 0,
      requestTimeoutConfig: SDK.defaultRequestTimeoutConfig
    });
  }
});

// node_modules/@microsoft/ocsdk/lib/SDKProvider.js
var require_SDKProvider = __commonJS({
  "node_modules/@microsoft/ocsdk/lib/SDKProvider.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _Constants = _interopRequireDefault(require_Constants());
    var _OCSDKLogger = _interopRequireDefault(require_OCSDKLogger());
    var _SDK = _interopRequireDefault(require_SDK());
    var SDKProvider = function() {
      function SDKProvider2() {
        (0, _classCallCheck2["default"])(this, SDKProvider2);
      }
      (0, _createClass2["default"])(SDKProvider2, null, [{
        key: "getSDK",
        value: function getSDK(omnichannelConfiguration, configuration, logger) {
          var ilogger = new _OCSDKLogger["default"](logger);
          return new _SDK["default"]({
            channelId: omnichannelConfiguration.channelId || _Constants["default"].defaultChannelId,
            orgId: omnichannelConfiguration.orgId,
            orgUrl: omnichannelConfiguration.orgUrl,
            widgetId: omnichannelConfiguration.widgetId
          }, configuration || {}, ilogger);
        }
      }]);
      return SDKProvider2;
    }();
    exports["default"] = SDKProvider;
  }
});

// node_modules/@microsoft/ocsdk/lib/Utils/EventManager.js
var require_EventManager = __commonJS({
  "node_modules/@microsoft/ocsdk/lib/Utils/EventManager.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var EventManager = function() {
      function EventManager2() {
        (0, _classCallCheck2["default"])(this, EventManager2);
      }
      (0, _createClass2["default"])(EventManager2, null, [{
        key: "raiseCustomEvent",
        value: function raiseCustomEvent(eventName, payload) {
          var event = EventManager2.createCustomEvent(eventName, payload);
          window.dispatchEvent(event);
        }
        /**
         * Creates a custom event based on the eventName and payload
         * The custom event is dispatch-compatible across browsers
         * @param {string} eventName: Name of the event.
         * @param {any} payload: The event payload.
         * @returns {CustomEvent}: CustomEvent instance.
         */
      }, {
        key: "createCustomEvent",
        value: function createCustomEvent(eventName, payload) {
          var eventDetails = payload ? {
            detail: payload
          } : void 0;
          var event = null;
          try {
            event = new CustomEvent(eventName, eventDetails);
          } catch (e) {
            event = document.createEvent("CustomEvent");
            event.initCustomEvent(eventName, true, true, eventDetails);
          }
          return event;
        }
      }]);
      return EventManager2;
    }();
    exports["default"] = EventManager;
  }
});

// node_modules/@microsoft/ocsdk/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/@microsoft/ocsdk/lib/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "SDKProvider", {
      enumerable: true,
      get: function get() {
        return _SDKProvider["default"];
      }
    });
    Object.defineProperty(exports, "uuidv4", {
      enumerable: true,
      get: function get() {
        return _uuid.uuidv4;
      }
    });
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _EventNames = _interopRequireDefault(require_EventNames());
    var _SDKProvider = _interopRequireDefault(require_SDKProvider());
    var _EventManager = _interopRequireDefault(require_EventManager());
    var _uuid = require_uuid();
    (function() {
      if (global.window === void 0) {
        global.window = global;
      }
      if ((typeof window === "undefined" ? "undefined" : (0, _typeof2["default"])(window)) === void 0) {
        throw new Error("window object not found");
      }
      if (!("Microsoft" in window)) {
        window.Microsoft = {};
      }
      if (!("CRM" in window.Microsoft)) {
        window.Microsoft.CRM = {};
      }
      if (!("Omnichannel" in window.Microsoft.CRM)) {
        window.Microsoft.CRM.Omnichannel = {};
      }
      if (!("SDK" in window.Microsoft.CRM.Omnichannel)) {
        window.Microsoft.CRM.Omnichannel.SDK = {
          SDKProvider: _SDKProvider["default"],
          Util: {
            uuidv4: _uuid.uuidv4
          }
        };
      }
      window.document && _EventManager["default"].raiseCustomEvent(_EventNames["default"].OCSDKLOAD);
    })();
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/utils/locale.js
var require_locale = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/utils/locale.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultLocaleString = exports.defaultLocaleId = exports.getLocaleIdFromString = exports.getLocaleStringFromId = void 0;
    var localeList = {
      "1025": "ar-sa",
      "1026": "bg-bg",
      "1027": "ca-es",
      "1029": "cs-cz",
      "1030": "da-dk",
      "1031": "de-de",
      "1032": "el-gr",
      "1033": "en-us",
      "3082": "es-es",
      "1061": "et-ee",
      "1069": "eu-es",
      "1035": "fi-fi",
      "1036": "fr-fr",
      "1110": "gl-es",
      "1037": "he-il",
      "1081": "hi-in",
      "1050": "hr-hr",
      "1038": "hu-hu",
      "1057": "id-id",
      "1040": "it-it",
      "1041": "ja-jp",
      "1087": "kk-kz",
      "1042": "ko-kr",
      "1063": "lt-lt",
      "1062": "lv-lv",
      "1086": "ms-my",
      "1044": "nb-no",
      "1043": "nl-nl",
      "1045": "pl-pl",
      "1046": "pt-br",
      "2070": "pt-pt",
      "1048": "ro-ro",
      "1049": "ru-ru",
      "1051": "sk-sk",
      "1060": "sl-si",
      "3098": "sr-cyrl-cs",
      "2074": "sr-latn-cs",
      "1053": "sv-se",
      "1054": "th-th",
      "1055": "tr-tr",
      "1058": "uk-ua",
      "1066": "vi-vn",
      "2052": "zh-cn",
      "3076": "zh-hk",
      "1028": "zh-tw"
    };
    exports.getLocaleStringFromId = function(id) {
      var localeId = Object.keys(localeList).find(function(key) {
        return key === id;
      });
      return localeId ? localeList[localeId] : exports.defaultLocaleString;
    };
    exports.getLocaleIdFromString = function(value) {
      var localeId = Object.keys(localeList).find(function(key) {
        return localeList[key] === value;
      });
      return localeId !== null && localeId !== void 0 ? localeId : exports.defaultLocaleId;
    };
    exports.defaultLocaleId = "1033";
    exports.defaultLocaleString = "en-us";
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/core/messaging/ACSParticipantDisplayName.js
var require_ACSParticipantDisplayName = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/core/messaging/ACSParticipantDisplayName.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ACSParticipantDisplayName;
    (function(ACSParticipantDisplayName2) {
      ACSParticipantDisplayName2["Customer"] = "Customer";
      ACSParticipantDisplayName2["Agent"] = "__agent__";
      ACSParticipantDisplayName2["System"] = "__system__";
    })(ACSParticipantDisplayName || (ACSParticipantDisplayName = {}));
    exports.default = ACSParticipantDisplayName;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/utils/utilities.js
var require_utilities = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/utils/utilities.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isClientIdNotFoundErrorMessage = exports.isCustomerMessage = exports.isSystemMessage = void 0;
    var ACSParticipantDisplayName_1 = require_ACSParticipantDisplayName();
    var MessageType_1 = require_MessageType();
    exports.isSystemMessage = function(message) {
      var messageType = message.messageType, properties = message.properties;
      var conditionV1 = messageType === MessageType_1.default.UserMessage && properties && properties.tags && properties.tags.includes("system");
      var conditionV2 = message.tags && message.tags.includes("system");
      return conditionV1 || conditionV2 || false;
    };
    exports.isCustomerMessage = function(message) {
      var sender = message.sender;
      var conditionV1 = sender && sender.id && sender.id.includes("contacts/8:");
      var conditionV2 = sender && sender.displayName && sender.displayName === ACSParticipantDisplayName_1.default.Customer;
      return conditionV1 || conditionV2 || false;
    };
    exports.isClientIdNotFoundErrorMessage = function(e) {
      var _a, _b, _c;
      return ((_a = e === null || e === void 0 ? void 0 : e.response) === null || _a === void 0 ? void 0 : _a.status) === 401 && ((_c = (_b = e === null || e === void 0 ? void 0 : e.response) === null || _b === void 0 ? void 0 : _b.headers) === null || _c === void 0 ? void 0 : _c.message) === "UserId not found";
    };
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/telemetry/ScenarioType.js
var require_ScenarioType = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/telemetry/ScenarioType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ScenarioType;
    (function(ScenarioType2) {
      ScenarioType2["EVENTS"] = "occhatsdk_events";
      ScenarioType2["IC3CLIENT"] = "occhatsdk_ic3clientevents";
      ScenarioType2["OCSDK"] = "occhatsdk_ocsdkevents";
      ScenarioType2["ACSCLIENT"] = "occhatsdk_acsclientevents";
      ScenarioType2["ACSADAPTER"] = "occhatsdk_acsadapterevents";
      ScenarioType2["CALLINGSDK"] = "occhatsdk_callingsdkevents";
      ScenarioType2["AMSCLIENT"] = "occhatsdk_amsclientevents";
      ScenarioType2["UNDEFINED"] = "undefined";
    })(ScenarioType || (ScenarioType = {}));
    exports.default = ScenarioType;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/telemetry/StopWatch.js
var require_StopWatch = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/telemetry/StopWatch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var StopWatch = (
      /** @class */
      function() {
        function StopWatch2() {
        }
        StopWatch2.prototype.start = function() {
          this.timeStart = (/* @__PURE__ */ new Date()).getTime();
        };
        StopWatch2.prototype.stop = function() {
          return (/* @__PURE__ */ new Date()).getTime() - this.timeStart;
        };
        return StopWatch2;
      }()
    );
    exports.default = StopWatch;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/telemetry/EventMarker.js
var require_EventMarker = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/telemetry/EventMarker.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.failEvent = exports.completeEvent = exports.startEvent = void 0;
    exports.startEvent = function(event) {
      return event + "Started";
    };
    exports.completeEvent = function(event) {
      return event + "Completed";
    };
    exports.failEvent = function(event) {
      return event + "Failed";
    };
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/telemetry/ScenarioMarker.js
var require_ScenarioMarker = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/telemetry/ScenarioMarker.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var ScenarioType_1 = require_ScenarioType();
    var StopWatch_1 = require_StopWatch();
    var EventMarker_1 = require_EventMarker();
    var ScenarioMarker = (
      /** @class */
      function() {
        function ScenarioMarker2(omnichannelConfig) {
          this.omnichannelConfig = omnichannelConfig;
          this.runtimeId = "";
          this.telemetry = null;
          this.debug = false;
          this.telemetryEvents = /* @__PURE__ */ new Map();
          this.scenarioType = ScenarioType_1.default.EVENTS;
        }
        ScenarioMarker2.prototype.setDebug = function(flag) {
          var _a;
          this.debug = flag;
          (_a = this.telemetry) === null || _a === void 0 ? void 0 : _a.setDebug(flag);
        };
        ScenarioMarker2.prototype.setScenarioType = function(scenarioType) {
          this.scenarioType = scenarioType;
        };
        ScenarioMarker2.prototype.setRuntimeId = function(runtimeId) {
          this.runtimeId = runtimeId;
        };
        ScenarioMarker2.prototype.useTelemetry = function(telemetry) {
          this.debug && console.log("[ScenarioMarker][useTelemetry]");
          this.telemetry = telemetry;
        };
        ScenarioMarker2.prototype.startScenario = function(event, additionalProperties) {
          var _a;
          if (additionalProperties === void 0) {
            additionalProperties = {};
          }
          this.debug && console.log("[ScenarioMarker][startScenario]");
          if (!this.telemetryEvents.has(event)) {
            var stopWatch = new StopWatch_1.default();
            stopWatch.start();
            this.telemetryEvents.set(event, stopWatch);
          }
          var properties = __assign({ ChatSDKRuntimeId: this.runtimeId, Event: EventMarker_1.startEvent(event), OrgId: this.omnichannelConfig.orgId, OrgUrl: this.omnichannelConfig.orgUrl, WidgetId: this.omnichannelConfig.widgetId }, additionalProperties);
          (_a = this.telemetry) === null || _a === void 0 ? void 0 : _a.info(properties, this.scenarioType);
        };
        ScenarioMarker2.prototype.failScenario = function(event, additionalProperties) {
          var _a;
          if (additionalProperties === void 0) {
            additionalProperties = {};
          }
          this.debug && console.log("[ScenarioMarker][failScenario]");
          if (!this.telemetryEvents.has(event)) {
            console.warn("'" + event + "' event has not started.");
            return;
          }
          var stopWatch = this.telemetryEvents.get(event);
          this.telemetryEvents.delete(event);
          var properties = __assign({ ChatSDKRuntimeId: this.runtimeId, Event: EventMarker_1.failEvent(event), OrgId: this.omnichannelConfig.orgId, OrgUrl: this.omnichannelConfig.orgUrl, WidgetId: this.omnichannelConfig.widgetId, ElapsedTimeInMilliseconds: stopWatch.stop() }, additionalProperties);
          (_a = this.telemetry) === null || _a === void 0 ? void 0 : _a.error(properties, this.scenarioType);
        };
        ScenarioMarker2.prototype.completeScenario = function(event, additionalProperties) {
          var _a;
          if (additionalProperties === void 0) {
            additionalProperties = {};
          }
          this.debug && console.log("[ScenarioMarker][completeScenario]");
          if (!this.telemetryEvents.has(event)) {
            console.warn("'" + event + "' event has not started.");
            return;
          }
          var stopWatch = this.telemetryEvents.get(event);
          this.telemetryEvents.delete(event);
          var properties = __assign({ ChatSDKRuntimeId: this.runtimeId, Event: EventMarker_1.completeEvent(event), OrgId: this.omnichannelConfig.orgId, OrgUrl: this.omnichannelConfig.orgUrl, WidgetId: this.omnichannelConfig.widgetId, ElapsedTimeInMilliseconds: stopWatch.stop() }, additionalProperties);
          (_a = this.telemetry) === null || _a === void 0 ? void 0 : _a.info(properties, this.scenarioType);
        };
        return ScenarioMarker2;
      }()
    );
    exports.default = ScenarioMarker;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/utils/loggers.js
var require_loggers = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/utils/loggers.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createAMSClientLogger = exports.createCallingSDKLogger = exports.createACSAdapterLogger = exports.createACSClientLogger = exports.createOCSDKLogger = exports.createIC3ClientLogger = exports.AMSClientLogger = exports.CallingSDKLogger = exports.ACSAdapterLogger = exports.ACSClientLogger = exports.OCSDKLogger = exports.IC3ClientLogger = void 0;
    var LogLevel_1 = require_LogLevel();
    var ScenarioType_1 = require_ScenarioType();
    var ScenarioMarker_1 = require_ScenarioMarker();
    var IC3ClientLogger = (
      /** @class */
      function() {
        function IC3ClientLogger2(omnichannelConfig) {
          this.omnichannelConfig = omnichannelConfig;
          this.debug = false;
          this.runtimeId = "";
          this.requestId = "";
          this.chatId = "";
          this.telemetry = null;
          this.debug = false;
        }
        IC3ClientLogger2.prototype.setDebug = function(flag) {
          this.debug = flag;
        };
        IC3ClientLogger2.prototype.setRuntimeId = function(runtimeId) {
          this.runtimeId = runtimeId;
        };
        IC3ClientLogger2.prototype.setRequestId = function(requestId) {
          this.requestId = requestId;
        };
        IC3ClientLogger2.prototype.setChatId = function(chatId) {
          this.chatId = chatId;
        };
        IC3ClientLogger2.prototype.useTelemetry = function(telemetry) {
          this.debug && console.log("[IC3ClientLogger][useTelemetry]");
          this.telemetry = telemetry;
        };
        IC3ClientLogger2.prototype.logClientSdkTelemetryEvent = function(logLevel, event) {
          var _a, _b, _c, _d;
          this.debug && console.log("[IC3ClientLogger][logClientSdkTelemetryEvent][" + logLevel + "]");
          this.debug && console.log(event);
          var baseProperties = {
            ChatSDKRuntimeId: this.runtimeId,
            OrgId: this.omnichannelConfig.orgId,
            OrgUrl: this.omnichannelConfig.orgUrl,
            WidgetId: this.omnichannelConfig.widgetId,
            RequestId: this.requestId,
            ChatId: this.chatId
          };
          var additionalProperties = __assign(__assign({}, event), { ExceptionDetails: event.ExceptionDetails ? JSON.stringify(event.ExceptionDetails) : "" });
          switch (logLevel) {
            case LogLevel_1.default.DEBUG:
              (_a = this.telemetry) === null || _a === void 0 ? void 0 : _a.debug(__assign(__assign({}, baseProperties), additionalProperties), ScenarioType_1.default.IC3CLIENT);
              break;
            case LogLevel_1.default.WARN:
              (_b = this.telemetry) === null || _b === void 0 ? void 0 : _b.warn(__assign(__assign({}, baseProperties), additionalProperties), ScenarioType_1.default.IC3CLIENT);
              break;
            case LogLevel_1.default.ERROR:
              (_c = this.telemetry) === null || _c === void 0 ? void 0 : _c.error(__assign(__assign({}, baseProperties), additionalProperties), ScenarioType_1.default.IC3CLIENT);
              break;
            case LogLevel_1.default.INFO:
            default:
              (_d = this.telemetry) === null || _d === void 0 ? void 0 : _d.info(__assign(__assign({}, baseProperties), additionalProperties), ScenarioType_1.default.IC3CLIENT);
              break;
          }
        };
        return IC3ClientLogger2;
      }()
    );
    exports.IC3ClientLogger = IC3ClientLogger;
    var OCSDKLogger = (
      /** @class */
      function() {
        function OCSDKLogger2(omnichannelConfig) {
          this.omnichannelConfig = omnichannelConfig;
          this.debug = false;
          this.runtimeId = "";
          this.requestId = "";
          this.chatId = "";
          this.telemetry = null;
          this.debug = false;
        }
        OCSDKLogger2.prototype.setDebug = function(flag) {
          this.debug = flag;
        };
        OCSDKLogger2.prototype.setRuntimeId = function(runtimeId) {
          this.runtimeId = runtimeId;
        };
        OCSDKLogger2.prototype.setRequestId = function(requestId) {
          this.requestId = requestId;
        };
        OCSDKLogger2.prototype.setChatId = function(chatId) {
          this.chatId = chatId;
        };
        OCSDKLogger2.prototype.useTelemetry = function(telemetry) {
          this.debug && console.log("[OCSDKLogger][useTelemetry]");
          this.telemetry = telemetry;
        };
        OCSDKLogger2.prototype.logClientSdkTelemetryEvent = function(logLevel, event) {
          var _a, _b, _c, _d;
          this.debug && console.log("[OCSDKLogger][logClientSdkTelemetryEvent][" + logLevel + "]");
          this.debug && console.log(event);
          var baseProperties = {
            ChatSDKRuntimeId: this.runtimeId,
            OrgId: this.omnichannelConfig.orgId,
            OrgUrl: this.omnichannelConfig.orgUrl,
            WidgetId: this.omnichannelConfig.widgetId,
            RequestId: this.requestId,
            ChatId: this.chatId
          };
          var additionalProperties = __assign(__assign({}, event), { ExceptionDetails: event.ExceptionDetails ? JSON.stringify(event.ExceptionDetails) : "" });
          switch (logLevel) {
            case LogLevel_1.default.DEBUG:
              (_a = this.telemetry) === null || _a === void 0 ? void 0 : _a.debug(__assign(__assign({}, baseProperties), additionalProperties), ScenarioType_1.default.OCSDK);
              break;
            case LogLevel_1.default.WARN:
              (_b = this.telemetry) === null || _b === void 0 ? void 0 : _b.warn(__assign(__assign({}, baseProperties), additionalProperties), ScenarioType_1.default.OCSDK);
              break;
            case LogLevel_1.default.ERROR:
              (_c = this.telemetry) === null || _c === void 0 ? void 0 : _c.error(__assign(__assign({}, baseProperties), additionalProperties), ScenarioType_1.default.OCSDK);
              break;
            case LogLevel_1.default.INFO:
            default:
              (_d = this.telemetry) === null || _d === void 0 ? void 0 : _d.info(__assign(__assign({}, baseProperties), additionalProperties), ScenarioType_1.default.OCSDK);
              break;
          }
        };
        return OCSDKLogger2;
      }()
    );
    exports.OCSDKLogger = OCSDKLogger;
    var ACSClientLogger = (
      /** @class */
      function() {
        function ACSClientLogger2(omnichannelConfig) {
          this.omnichannelConfig = omnichannelConfig;
          this.debug = false;
          this.runtimeId = "";
          this.requestId = "";
          this.chatId = "";
          this.telemetry = null;
          this.scenarioMarker = null;
          this.debug = false;
          this.scenarioMarker = new ScenarioMarker_1.default(omnichannelConfig);
          this.scenarioMarker.setScenarioType(ScenarioType_1.default.ACSCLIENT);
        }
        ACSClientLogger2.prototype.setDebug = function(flag) {
          var _a;
          this.debug = flag;
          (_a = this.scenarioMarker) === null || _a === void 0 ? void 0 : _a.setDebug(flag);
        };
        ACSClientLogger2.prototype.setRuntimeId = function(runtimeId) {
          var _a;
          this.runtimeId = runtimeId;
          (_a = this.scenarioMarker) === null || _a === void 0 ? void 0 : _a.setRuntimeId(runtimeId);
        };
        ACSClientLogger2.prototype.setRequestId = function(requestId) {
          this.requestId = requestId;
        };
        ACSClientLogger2.prototype.setChatId = function(chatId) {
          this.chatId = chatId;
        };
        ACSClientLogger2.prototype.useTelemetry = function(telemetry) {
          var _a;
          this.debug && console.log("[ACSClientLogger][useTelemetry]");
          this.telemetry = telemetry;
          (_a = this.scenarioMarker) === null || _a === void 0 ? void 0 : _a.useTelemetry(this.telemetry);
        };
        ACSClientLogger2.prototype.logClientSdkTelemetryEvent = function(logLevel, event) {
          var _a, _b, _c, _d;
          this.debug && console.log("[ACSClientLogger][logClientSdkTelemetryEvent][" + logLevel + "]");
          this.debug && console.log(event);
          var baseProperties = {
            ChatSDKRuntimeId: this.runtimeId,
            OrgId: this.omnichannelConfig.orgId,
            OrgUrl: this.omnichannelConfig.orgUrl,
            WidgetId: this.omnichannelConfig.widgetId,
            RequestId: this.requestId,
            ChatId: this.chatId
          };
          var additionalProperties = __assign(__assign({}, event), { ExceptionDetails: event.ExceptionDetails ? JSON.stringify(event.ExceptionDetails) : "" });
          switch (logLevel) {
            case LogLevel_1.default.DEBUG:
              (_a = this.telemetry) === null || _a === void 0 ? void 0 : _a.debug(__assign(__assign({}, baseProperties), additionalProperties), ScenarioType_1.default.ACSCLIENT);
              break;
            case LogLevel_1.default.WARN:
              (_b = this.telemetry) === null || _b === void 0 ? void 0 : _b.warn(__assign(__assign({}, baseProperties), additionalProperties), ScenarioType_1.default.ACSCLIENT);
              break;
            case LogLevel_1.default.ERROR:
              (_c = this.telemetry) === null || _c === void 0 ? void 0 : _c.error(__assign(__assign({}, baseProperties), additionalProperties), ScenarioType_1.default.ACSCLIENT);
              break;
            case LogLevel_1.default.INFO:
            default:
              (_d = this.telemetry) === null || _d === void 0 ? void 0 : _d.info(__assign(__assign({}, baseProperties), additionalProperties), ScenarioType_1.default.ACSCLIENT);
              break;
          }
        };
        ACSClientLogger2.prototype.startScenario = function(event, additionalProperties) {
          var _a;
          if (additionalProperties === void 0) {
            additionalProperties = {};
          }
          var baseProperties = {
            RequestId: this.requestId,
            ChatId: this.chatId
          };
          (_a = this.scenarioMarker) === null || _a === void 0 ? void 0 : _a.startScenario(event, __assign(__assign({}, baseProperties), additionalProperties));
        };
        ACSClientLogger2.prototype.failScenario = function(event, additionalProperties) {
          var _a;
          if (additionalProperties === void 0) {
            additionalProperties = {};
          }
          var baseProperties = {
            RequestId: this.requestId,
            ChatId: this.chatId
          };
          (_a = this.scenarioMarker) === null || _a === void 0 ? void 0 : _a.failScenario(event, __assign(__assign({}, baseProperties), additionalProperties));
        };
        ACSClientLogger2.prototype.completeScenario = function(event, additionalProperties) {
          var _a;
          if (additionalProperties === void 0) {
            additionalProperties = {};
          }
          var baseProperties = {
            RequestId: this.requestId,
            ChatId: this.chatId
          };
          (_a = this.scenarioMarker) === null || _a === void 0 ? void 0 : _a.completeScenario(event, __assign(__assign({}, baseProperties), additionalProperties));
        };
        return ACSClientLogger2;
      }()
    );
    exports.ACSClientLogger = ACSClientLogger;
    var ACSAdapterLogger = (
      /** @class */
      function() {
        function ACSAdapterLogger2(omnichannelConfig) {
          this.omnichannelConfig = omnichannelConfig;
          this.debug = false;
          this.runtimeId = "";
          this.requestId = "";
          this.chatId = "";
          this.telemetry = null;
          this.scenarioMarker = null;
          this.debug = false;
          this.scenarioMarker = new ScenarioMarker_1.default(omnichannelConfig);
          this.scenarioMarker.setScenarioType(ScenarioType_1.default.ACSADAPTER);
        }
        ACSAdapterLogger2.prototype.setDebug = function(flag) {
          var _a;
          this.debug = flag;
          (_a = this.scenarioMarker) === null || _a === void 0 ? void 0 : _a.setDebug(flag);
        };
        ACSAdapterLogger2.prototype.setRuntimeId = function(runtimeId) {
          var _a;
          this.runtimeId = runtimeId;
          (_a = this.scenarioMarker) === null || _a === void 0 ? void 0 : _a.setRuntimeId(this.runtimeId);
        };
        ACSAdapterLogger2.prototype.setRequestId = function(requestId) {
          this.requestId = requestId;
        };
        ACSAdapterLogger2.prototype.setChatId = function(chatId) {
          this.chatId = chatId;
        };
        ACSAdapterLogger2.prototype.useTelemetry = function(telemetry) {
          var _a;
          this.debug && console.log("[ACSAdapterLogger][useTelemetry]");
          this.telemetry = telemetry;
          (_a = this.scenarioMarker) === null || _a === void 0 ? void 0 : _a.useTelemetry(this.telemetry);
        };
        ACSAdapterLogger2.prototype.logEvent = function(logLevel, event) {
          var _a, _b, _c, _d;
          this.debug && console.log("[ACSAdapterLogger][logClientSdkTelemetryEvent][" + logLevel + "]");
          this.debug && console.log(event);
          var baseProperties = {
            ChatSDKRuntimeId: this.runtimeId,
            OrgId: this.omnichannelConfig.orgId,
            OrgUrl: this.omnichannelConfig.orgUrl,
            WidgetId: this.omnichannelConfig.widgetId,
            RequestId: this.requestId,
            ChatId: this.chatId
          };
          var additionalProperties = __assign(__assign({}, event), { ExceptionDetails: event.ExceptionDetails ? JSON.stringify(event.ExceptionDetails) : "" });
          switch (logLevel) {
            case LogLevel_1.default.DEBUG:
              (_a = this.telemetry) === null || _a === void 0 ? void 0 : _a.debug(__assign(__assign({}, baseProperties), additionalProperties), ScenarioType_1.default.ACSADAPTER);
              break;
            case LogLevel_1.default.WARN:
              (_b = this.telemetry) === null || _b === void 0 ? void 0 : _b.warn(__assign(__assign({}, baseProperties), additionalProperties), ScenarioType_1.default.ACSADAPTER);
              break;
            case LogLevel_1.default.ERROR:
              (_c = this.telemetry) === null || _c === void 0 ? void 0 : _c.error(__assign(__assign({}, baseProperties), additionalProperties), ScenarioType_1.default.ACSADAPTER);
              break;
            case LogLevel_1.default.INFO:
            default:
              (_d = this.telemetry) === null || _d === void 0 ? void 0 : _d.info(__assign(__assign({}, baseProperties), additionalProperties), ScenarioType_1.default.ACSADAPTER);
              break;
          }
        };
        ACSAdapterLogger2.prototype.startScenario = function(event, additionalProperties) {
          var _a;
          if (additionalProperties === void 0) {
            additionalProperties = {};
          }
          var baseProperties = {
            RequestId: this.requestId,
            ChatId: this.chatId
          };
          (_a = this.scenarioMarker) === null || _a === void 0 ? void 0 : _a.startScenario(event, __assign(__assign({}, baseProperties), additionalProperties));
        };
        ACSAdapterLogger2.prototype.failScenario = function(event, additionalProperties) {
          var _a;
          if (additionalProperties === void 0) {
            additionalProperties = {};
          }
          var baseProperties = {
            RequestId: this.requestId,
            ChatId: this.chatId
          };
          (_a = this.scenarioMarker) === null || _a === void 0 ? void 0 : _a.failScenario(event, __assign(__assign({}, baseProperties), additionalProperties));
        };
        ACSAdapterLogger2.prototype.completeScenario = function(event, additionalProperties) {
          var _a;
          if (additionalProperties === void 0) {
            additionalProperties = {};
          }
          var baseProperties = {
            RequestId: this.requestId,
            ChatId: this.chatId
          };
          (_a = this.scenarioMarker) === null || _a === void 0 ? void 0 : _a.completeScenario(event, __assign(__assign({}, baseProperties), additionalProperties));
        };
        return ACSAdapterLogger2;
      }()
    );
    exports.ACSAdapterLogger = ACSAdapterLogger;
    var CallingSDKLogger = (
      /** @class */
      function() {
        function CallingSDKLogger2(omnichannelConfig) {
          this.omnichannelConfig = omnichannelConfig;
          this.debug = false;
          this.runtimeId = "";
          this.requestId = "";
          this.chatId = "";
          this.telemetry = null;
          this.debug = false;
        }
        CallingSDKLogger2.prototype.setDebug = function(flag) {
          this.debug = flag;
        };
        CallingSDKLogger2.prototype.setRuntimeId = function(runtimeId) {
          this.runtimeId = runtimeId;
        };
        CallingSDKLogger2.prototype.setRequestId = function(requestId) {
          this.requestId = requestId;
        };
        CallingSDKLogger2.prototype.setChatId = function(chatId) {
          this.chatId = chatId;
        };
        CallingSDKLogger2.prototype.useTelemetry = function(telemetry) {
          this.debug && console.log("[CallingSDKLogger][useTelemetry]");
          this.telemetry = telemetry;
        };
        CallingSDKLogger2.prototype.logCallingSdkTelemetryEvent = function(logLevel, event) {
          var _a, _b, _c, _d;
          this.debug && console.log("[CallingSDKLogger][logClientSdkTelemetryEvent][" + logLevel + "]");
          this.debug && console.log(event);
          var baseProperties = {
            ChatSDKRuntimeId: this.runtimeId,
            OrgId: this.omnichannelConfig.orgId,
            OrgUrl: this.omnichannelConfig.orgUrl,
            WidgetId: this.omnichannelConfig.widgetId,
            RequestId: this.requestId,
            ChatId: this.chatId
          };
          var additionalProperties = __assign(__assign({}, event), { ExceptionDetails: event.ExceptionDetails ? JSON.stringify(event.ExceptionDetails) : "" });
          switch (logLevel) {
            case LogLevel_1.default.DEBUG:
              (_a = this.telemetry) === null || _a === void 0 ? void 0 : _a.debug(__assign(__assign({}, baseProperties), additionalProperties), ScenarioType_1.default.CALLINGSDK);
              break;
            case LogLevel_1.default.WARN:
              (_b = this.telemetry) === null || _b === void 0 ? void 0 : _b.warn(__assign(__assign({}, baseProperties), additionalProperties), ScenarioType_1.default.CALLINGSDK);
              break;
            case LogLevel_1.default.ERROR:
              (_c = this.telemetry) === null || _c === void 0 ? void 0 : _c.error(__assign(__assign({}, baseProperties), additionalProperties), ScenarioType_1.default.CALLINGSDK);
              break;
            case LogLevel_1.default.INFO:
            default:
              (_d = this.telemetry) === null || _d === void 0 ? void 0 : _d.info(__assign(__assign({}, baseProperties), additionalProperties), ScenarioType_1.default.CALLINGSDK);
              break;
          }
        };
        return CallingSDKLogger2;
      }()
    );
    exports.CallingSDKLogger = CallingSDKLogger;
    var AMSClientLogger = (
      /** @class */
      function() {
        function AMSClientLogger2(omnichannelConfig) {
          this.omnichannelConfig = omnichannelConfig;
          this.debug = false;
          this.runtimeId = "";
          this.requestId = "";
          this.chatId = "";
          this.telemetry = null;
          this.debug = false;
        }
        AMSClientLogger2.prototype.setDebug = function(flag) {
          this.debug = flag;
        };
        AMSClientLogger2.prototype.setRuntimeId = function(runtimeId) {
          this.runtimeId = runtimeId;
        };
        AMSClientLogger2.prototype.setRequestId = function(requestId) {
          this.requestId = requestId;
        };
        AMSClientLogger2.prototype.setChatId = function(chatId) {
          this.chatId = chatId;
        };
        AMSClientLogger2.prototype.useTelemetry = function(telemetry) {
          this.debug && console.log("[AMSClientLogger][useTelemetry]");
          this.telemetry = telemetry;
        };
        AMSClientLogger2.prototype.logClientSdkTelemetryEvent = function(logLevel, event) {
          var _a, _b, _c, _d;
          this.debug && console.log("[AMSClientLogger][logClientSdkTelemetryEvent][" + logLevel + "]");
          this.debug && console.log(event);
          var baseProperties = {
            ChatSDKRuntimeId: this.runtimeId,
            OrgId: this.omnichannelConfig.orgId,
            OrgUrl: this.omnichannelConfig.orgUrl,
            WidgetId: this.omnichannelConfig.widgetId,
            RequestId: this.requestId,
            ChatId: this.chatId
          };
          var additionalProperties = __assign(__assign({}, event), { ExceptionDetails: event.ExceptionDetails ? JSON.stringify(event.ExceptionDetails) : "" });
          switch (logLevel) {
            case LogLevel_1.default.DEBUG:
              (_a = this.telemetry) === null || _a === void 0 ? void 0 : _a.debug(__assign(__assign({}, baseProperties), additionalProperties), ScenarioType_1.default.AMSCLIENT);
              break;
            case LogLevel_1.default.WARN:
              (_b = this.telemetry) === null || _b === void 0 ? void 0 : _b.warn(__assign(__assign({}, baseProperties), additionalProperties), ScenarioType_1.default.AMSCLIENT);
              break;
            case LogLevel_1.default.ERROR:
              (_c = this.telemetry) === null || _c === void 0 ? void 0 : _c.error(__assign(__assign({}, baseProperties), additionalProperties), ScenarioType_1.default.AMSCLIENT);
              break;
            case LogLevel_1.default.INFO:
            default:
              (_d = this.telemetry) === null || _d === void 0 ? void 0 : _d.info(__assign(__assign({}, baseProperties), additionalProperties), ScenarioType_1.default.AMSCLIENT);
              break;
          }
        };
        return AMSClientLogger2;
      }()
    );
    exports.AMSClientLogger = AMSClientLogger;
    exports.createIC3ClientLogger = function(omnichannelConfig, debug) {
      if (debug === void 0) {
        debug = false;
      }
      var logger = new IC3ClientLogger(omnichannelConfig);
      logger.setDebug(debug);
      return logger;
    };
    exports.createOCSDKLogger = function(omnichannelConfig, debug) {
      if (debug === void 0) {
        debug = false;
      }
      var logger = new OCSDKLogger(omnichannelConfig);
      logger.setDebug(debug);
      return logger;
    };
    exports.createACSClientLogger = function(omnichannelConfig, debug) {
      if (debug === void 0) {
        debug = false;
      }
      var logger = new ACSClientLogger(omnichannelConfig);
      logger.setDebug(debug);
      return logger;
    };
    exports.createACSAdapterLogger = function(omnichannelConfig, debug) {
      if (debug === void 0) {
        debug = false;
      }
      var logger = new ACSAdapterLogger(omnichannelConfig);
      logger.setDebug(debug);
      return logger;
    };
    exports.createCallingSDKLogger = function(omnichannelConfig, debug) {
      if (debug === void 0) {
        debug = false;
      }
      var logger = new CallingSDKLogger(omnichannelConfig);
      logger.setDebug(debug);
      return logger;
    };
    exports.createAMSClientLogger = function(omnichannelConfig, debug) {
      if (debug === void 0) {
        debug = false;
      }
      var logger = new AMSClientLogger(omnichannelConfig);
      logger.setDebug(debug);
      return logger;
    };
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/core/messaging/ACSChatMessageType.js
var require_ACSChatMessageType = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/core/messaging/ACSChatMessageType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ACSChatMessageType;
    (function(ACSChatMessageType2) {
      ACSChatMessageType2["Text"] = "text";
      ACSChatMessageType2["TopicUpdated"] = "topicUpdated";
      ACSChatMessageType2["ParticipantAdded"] = "participantAdded";
      ACSChatMessageType2["ParticipantRemoved"] = "participantRemoved";
    })(ACSChatMessageType || (ACSChatMessageType = {}));
    exports.default = ACSChatMessageType;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/core/LiveChatVersion.js
var require_LiveChatVersion = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/core/LiveChatVersion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var LiveChatVersion;
    (function(LiveChatVersion2) {
      LiveChatVersion2[LiveChatVersion2["V1"] = 1] = "V1";
      LiveChatVersion2[LiveChatVersion2["V2"] = 2] = "V2";
    })(LiveChatVersion || (LiveChatVersion = {}));
    exports.default = LiveChatVersion;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/core/messaging/OmnichannelMessage.js
var require_OmnichannelMessage = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/core/messaging/OmnichannelMessage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ResourceType = exports.FileSharingProtocolType = exports.PersonType = exports.MessageType = exports.DeliveryMode = exports.MessageContentType = void 0;
    var MessageContentType = (
      /** @class */
      function() {
        function MessageContentType2() {
        }
        MessageContentType2.RichText = "RichText";
        MessageContentType2.Text = "Text";
        return MessageContentType2;
      }()
    );
    exports.MessageContentType = MessageContentType;
    var DeliveryMode = (
      /** @class */
      function() {
        function DeliveryMode2() {
        }
        DeliveryMode2.Bridged = "bridged";
        DeliveryMode2.Unbridged = "unbridged";
        return DeliveryMode2;
      }()
    );
    exports.DeliveryMode = DeliveryMode;
    var MessageType = (
      /** @class */
      function() {
        function MessageType2() {
        }
        MessageType2.UserMessage = "UserMessage";
        MessageType2.SwiftCard = "SwiftCard";
        MessageType2.Typing = "Control/Typing";
        MessageType2.ClearTyping = "Control/ClearTyping";
        MessageType2.LiveState = "Control/LiveState";
        return MessageType2;
      }()
    );
    exports.MessageType = MessageType;
    var PersonType;
    (function(PersonType2) {
      PersonType2[PersonType2["Unknown"] = 0] = "Unknown";
      PersonType2[PersonType2["User"] = 1] = "User";
      PersonType2[PersonType2["Bot"] = 2] = "Bot";
    })(PersonType = exports.PersonType || (exports.PersonType = {}));
    var FileSharingProtocolType;
    (function(FileSharingProtocolType2) {
      FileSharingProtocolType2[FileSharingProtocolType2["AmsBasedFileSharing"] = 0] = "AmsBasedFileSharing";
    })(FileSharingProtocolType = exports.FileSharingProtocolType || (exports.FileSharingProtocolType = {}));
    var ResourceType = (
      /** @class */
      function() {
        function ResourceType2() {
        }
        ResourceType2.NewMessage = "NewMessage";
        ResourceType2.MessageUpdate = "MessageUpdate";
        ResourceType2.UserPresence = "UserPresence";
        ResourceType2.ConversationUpdate = "ConversationUpdate";
        ResourceType2.ThreadUpdate = "ThreadUpdate";
        return ResourceType2;
      }()
    );
    exports.ResourceType = ResourceType;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/utils/createOmnichannelMessage.js
var require_createOmnichannelMessage = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/utils/createOmnichannelMessage.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var LiveChatVersion_1 = require_LiveChatVersion();
    var OmnichannelMessage_1 = require_OmnichannelMessage();
    var createOmnichannelMessage = function(message, optionalParams) {
      var omnichannelMessage = {};
      omnichannelMessage.liveChatVersion = optionalParams.liveChatVersion || LiveChatVersion_1.default.V1;
      optionalParams.debug && console.log(message);
      if (optionalParams.liveChatVersion === LiveChatVersion_1.default.V2) {
        var _a = message, id = _a.id, content = _a.content, metadata = _a.metadata, sender = _a.sender, senderDisplayName = _a.senderDisplayName, createdOn = _a.createdOn;
        omnichannelMessage.id = id;
        omnichannelMessage.messageid = void 0;
        omnichannelMessage.clientmessageid = void 0;
        omnichannelMessage.deliveryMode = void 0;
        omnichannelMessage.properties = {};
        omnichannelMessage.content = content || "";
        omnichannelMessage.properties.tags = metadata && metadata.tags ? metadata.tags : [];
        omnichannelMessage.tags = metadata && metadata.tags ? metadata.tags.replace(/\"/g, "").split(",").filter(function(tag) {
          return tag.length > 0;
        }) : [];
        omnichannelMessage.timestamp = createdOn;
        omnichannelMessage.messageType = OmnichannelMessage_1.MessageType.UserMessage;
        omnichannelMessage.sender = {
          id: sender.communicationUserId,
          displayName: senderDisplayName,
          type: OmnichannelMessage_1.PersonType.Bot
        };
        if (metadata && metadata.amsMetadata && metadata.amsReferences || metadata.amsreferences) {
          try {
            var data = JSON.parse(metadata.amsMetadata);
            var references = JSON.parse(metadata.amsreferences || metadata.amsReferences);
            var _b = data[0], fileName = _b.fileName, contentType = _b.contentType;
            omnichannelMessage.fileMetadata = {};
            omnichannelMessage.fileMetadata.fileSharingProtocolType = 0;
            omnichannelMessage.fileMetadata.id = references[0];
            omnichannelMessage.fileMetadata.name = fileName;
            omnichannelMessage.fileMetadata.size = 0;
            omnichannelMessage.fileMetadata.type = contentType;
            omnichannelMessage.fileMetadata.url = "";
          } catch (_c) {
          }
        }
      } else {
        var clientmessageid = message.clientmessageid;
        omnichannelMessage.id = clientmessageid;
        omnichannelMessage = __assign({}, message);
      }
      return omnichannelMessage;
    };
    exports.default = createOmnichannelMessage;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/core/messaging/MessageTags.js
var require_MessageTags = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/core/messaging/MessageTags.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultMessageTags = exports.customerMessageTag = exports.channelIdTag = void 0;
    exports.channelIdTag = "ChannelId-lcw";
    exports.customerMessageTag = "FromCustomer";
    exports.defaultMessageTags = [exports.channelIdTag, exports.customerMessageTag];
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/core/messaging/ACSClient.js
var require_ACSClient = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/core/messaging/ACSClient.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ACSConversation = void 0;
    var ACSChatMessageType_1 = require_ACSChatMessageType();
    var ACSParticipantDisplayName_1 = require_ACSParticipantDisplayName();
    var communication_chat_1 = (init_src2(), __toCommonJS(src_exports2));
    var communication_common_1 = (init_src(), __toCommonJS(src_exports));
    var createOmnichannelMessage_1 = require_createOmnichannelMessage();
    var MessageTags_1 = require_MessageTags();
    var DeliveryMode_1 = require_DeliveryMode();
    var LiveChatVersion_1 = require_LiveChatVersion();
    var ACSClientEvent;
    (function(ACSClientEvent2) {
      ACSClientEvent2["InitializeACSClient"] = "InitializeACSClient";
      ACSClientEvent2["InitializeACSConversation"] = "InitializeACSConversation";
      ACSClientEvent2["GetParticipants"] = "GetParticipants";
      ACSClientEvent2["RegisterOnNewMessage"] = "RegisterOnNewMessage";
      ACSClientEvent2["RegisterOnThreadUpdate"] = "RegisterOnThreadUpdate";
      ACSClientEvent2["OnTypingEvent"] = "OnTypingEvent";
      ACSClientEvent2["GetMessages"] = "GetMessages";
      ACSClientEvent2["SendMessage"] = "SendMessage";
      ACSClientEvent2["SendTyping"] = "SendTyping";
      ACSClientEvent2["Disconnect"] = "Disconnect";
    })(ACSClientEvent || (ACSClientEvent = {}));
    var ACSConversation = (
      /** @class */
      function() {
        function ACSConversation2(tokenCredential, chatClient, logger) {
          if (logger === void 0) {
            logger = null;
          }
          this.logger = null;
          this.logger = logger;
          this.tokenCredential = tokenCredential;
          this.chatClient = chatClient;
          this.eventListeners = {};
        }
        ACSConversation2.prototype.initialize = function(sessionInfo) {
          var _a, _b, _c, _d, _e;
          return __awaiter(this, void 0, void 0, function() {
            var _f, error_1, exceptionDetails, error_2, exceptionDetails;
            return __generator(this, function(_g) {
              switch (_g.label) {
                case 0:
                  (_a = this.logger) === null || _a === void 0 ? void 0 : _a.startScenario(ACSClientEvent.InitializeACSConversation);
                  this.sessionInfo = sessionInfo;
                  _g.label = 1;
                case 1:
                  _g.trys.push([1, 3, , 4]);
                  _f = this;
                  return [4, (_b = this.chatClient) === null || _b === void 0 ? void 0 : _b.getChatThreadClient(sessionInfo.threadId)];
                case 2:
                  _f.chatThreadClient = _g.sent();
                  return [3, 4];
                case 3:
                  error_1 = _g.sent();
                  exceptionDetails = {
                    response: "ChatClientGetChatThreadClientFailure",
                    errorObject: "" + error_1
                  };
                  (_c = this.logger) === null || _c === void 0 ? void 0 : _c.failScenario(ACSClientEvent.InitializeACSConversation, {
                    ExceptionDetails: JSON.stringify(exceptionDetails)
                  });
                  throw new Error("GetChatThreadClientFailed");
                case 4:
                  _g.trys.push([4, 6, , 7]);
                  return [4, this.chatClient.startRealtimeNotifications()];
                case 5:
                  _g.sent();
                  return [3, 7];
                case 6:
                  error_2 = _g.sent();
                  exceptionDetails = {
                    response: "StartRealtimeNotificationsFailed",
                    errorObject: "" + error_2
                  };
                  (_d = this.logger) === null || _d === void 0 ? void 0 : _d.failScenario(ACSClientEvent.InitializeACSConversation, {
                    ExceptionDetails: JSON.stringify(exceptionDetails)
                  });
                  throw new Error(exceptionDetails.response);
                case 7:
                  (_e = this.logger) === null || _e === void 0 ? void 0 : _e.completeScenario(ACSClientEvent.InitializeACSConversation);
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        ACSConversation2.prototype.getMessages = function() {
          var _a, _b, _c, _d, _e;
          return __awaiter(this, void 0, void 0, function() {
            var messages, pagedAsyncIterableIterator, nextMessage, chatMessage, omnichannelMessage, error_3, exceptionDetails;
            return __generator(this, function(_f) {
              switch (_f.label) {
                case 0:
                  (_a = this.logger) === null || _a === void 0 ? void 0 : _a.startScenario(ACSClientEvent.GetMessages);
                  messages = [];
                  _f.label = 1;
                case 1:
                  _f.trys.push([1, 9, , 10]);
                  return [4, this.chatThreadClient.listMessages()];
                case 2:
                  pagedAsyncIterableIterator = _f.sent();
                  return [4, pagedAsyncIterableIterator.next()];
                case 3:
                  nextMessage = _f.sent();
                  _f.label = 4;
                case 4:
                  if (!!nextMessage.done)
                    return [3, 8];
                  chatMessage = nextMessage.value;
                  if (!(chatMessage.type !== ACSChatMessageType_1.default.Text))
                    return [3, 6];
                  return [4, pagedAsyncIterableIterator.next()];
                case 5:
                  nextMessage = _f.sent();
                  return [3, 4];
                case 6:
                  if ((_b = chatMessage.content) === null || _b === void 0 ? void 0 : _b.message) {
                    Object.assign(chatMessage, { content: (_c = chatMessage.content) === null || _c === void 0 ? void 0 : _c.message });
                  }
                  omnichannelMessage = createOmnichannelMessage_1.default(chatMessage, {
                    liveChatVersion: LiveChatVersion_1.default.V2
                  });
                  messages.push(omnichannelMessage);
                  return [4, pagedAsyncIterableIterator.next()];
                case 7:
                  nextMessage = _f.sent();
                  return [3, 4];
                case 8:
                  (_d = this.logger) === null || _d === void 0 ? void 0 : _d.completeScenario(ACSClientEvent.GetMessages);
                  return [3, 10];
                case 9:
                  error_3 = _f.sent();
                  exceptionDetails = {
                    errorObject: "" + error_3
                  };
                  (_e = this.logger) === null || _e === void 0 ? void 0 : _e.failScenario(ACSClientEvent.GetMessages, {
                    ExceptionDetails: JSON.stringify(exceptionDetails)
                  });
                  throw new Error(ACSClientEvent.GetMessages);
                case 10:
                  return [2, messages];
              }
            });
          });
        };
        ACSConversation2.prototype.getParticipants = function() {
          var _a, _b, _c;
          return __awaiter(this, void 0, void 0, function() {
            var participants, pagedAsyncIterableIterator, next, user, error_4, exceptionDetails;
            return __generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  (_a = this.logger) === null || _a === void 0 ? void 0 : _a.startScenario(ACSClientEvent.GetParticipants);
                  participants = [];
                  _d.label = 1;
                case 1:
                  _d.trys.push([1, 7, , 8]);
                  return [4, this.chatThreadClient.listParticipants()];
                case 2:
                  pagedAsyncIterableIterator = _d.sent();
                  return [4, pagedAsyncIterableIterator.next()];
                case 3:
                  next = _d.sent();
                  _d.label = 4;
                case 4:
                  if (!!next.done)
                    return [3, 6];
                  user = next.value;
                  participants.push(user);
                  return [4, pagedAsyncIterableIterator.next()];
                case 5:
                  next = _d.sent();
                  return [3, 4];
                case 6:
                  (_b = this.logger) === null || _b === void 0 ? void 0 : _b.completeScenario(ACSClientEvent.GetParticipants);
                  return [3, 8];
                case 7:
                  error_4 = _d.sent();
                  exceptionDetails = {
                    errorObject: "" + error_4
                  };
                  (_c = this.logger) === null || _c === void 0 ? void 0 : _c.failScenario(ACSClientEvent.GetParticipants, {
                    ExceptionDetails: JSON.stringify(exceptionDetails)
                  });
                  throw new Error(ACSClientEvent.GetParticipants);
                case 8:
                  return [2, participants];
              }
            });
          });
        };
        ACSConversation2.prototype.registerOnNewMessage = function(onNewMessageCallback) {
          var _a, _b, _c, _d, _e;
          return __awaiter(this, void 0, void 0, function() {
            var isReceivingNotifications, postedMessageIds, pollForMessages_1, listener, error_5, exceptionDetails;
            var _this = this;
            return __generator(this, function(_f) {
              switch (_f.label) {
                case 0:
                  (_a = this.logger) === null || _a === void 0 ? void 0 : _a.startScenario(ACSClientEvent.RegisterOnNewMessage);
                  isReceivingNotifications = false;
                  postedMessageIds = /* @__PURE__ */ new Set();
                  _f.label = 1;
                case 1:
                  _f.trys.push([1, 3, , 4]);
                  pollForMessages_1 = function(delay) {
                    return __awaiter(_this, void 0, void 0, function() {
                      var messages, _i, _a2, message, id, sender, customerMessageCondition, _b2;
                      return __generator(this, function(_c2) {
                        switch (_c2.label) {
                          case 0:
                            if (isReceivingNotifications) {
                              return [
                                2
                                /*return*/
                              ];
                            }
                            _c2.label = 1;
                          case 1:
                            _c2.trys.push([1, 3, , 4]);
                            return [4, this.getMessages()];
                          case 2:
                            messages = _c2.sent();
                            for (_i = 0, _a2 = messages.reverse(); _i < _a2.length; _i++) {
                              message = _a2[_i];
                              id = message.id, sender = message.sender;
                              customerMessageCondition = sender.displayName === ACSParticipantDisplayName_1.default.Customer;
                              if (customerMessageCondition) {
                                continue;
                              }
                              if (!postedMessageIds.has(id)) {
                                onNewMessageCallback(message);
                                postedMessageIds.add(id);
                              }
                            }
                            return [3, 4];
                          case 3:
                            _b2 = _c2.sent();
                            return [3, 4];
                          case 4:
                            setTimeout(function() {
                              pollForMessages_1(delay);
                            }, delay);
                            return [
                              2
                              /*return*/
                            ];
                        }
                      });
                    });
                  };
                  return [4, pollForMessages_1((_b = this.sessionInfo) === null || _b === void 0 ? void 0 : _b.pollingInterval)];
                case 2:
                  _f.sent();
                  listener = function(event) {
                    var _a2;
                    isReceivingNotifications = true;
                    var id = event.id, sender = event.sender;
                    var customerMessageCondition = sender.communicationUserId === ((_a2 = _this.sessionInfo) === null || _a2 === void 0 ? void 0 : _a2.id);
                    if (customerMessageCondition) {
                      return;
                    }
                    if (postedMessageIds.has(id)) {
                      return;
                    }
                    if (event.message) {
                      Object.assign(event, { content: event.message });
                    }
                    onNewMessageCallback(event);
                    postedMessageIds.add(id);
                  };
                  (_c = this.chatClient) === null || _c === void 0 ? void 0 : _c.on("chatMessageReceived", listener);
                  this.trackListener("chatMessageReceived", listener);
                  (_d = this.logger) === null || _d === void 0 ? void 0 : _d.completeScenario(ACSClientEvent.RegisterOnNewMessage);
                  return [3, 4];
                case 3:
                  error_5 = _f.sent();
                  exceptionDetails = {
                    errorObject: "" + error_5
                  };
                  (_e = this.logger) === null || _e === void 0 ? void 0 : _e.failScenario(ACSClientEvent.RegisterOnNewMessage, {
                    ExceptionDetails: JSON.stringify(exceptionDetails)
                  });
                  throw new Error(ACSClientEvent.RegisterOnNewMessage);
                case 4:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        ACSConversation2.prototype.registerOnThreadUpdate = function(onThreadUpdateCallback) {
          var _a, _b, _c, _d;
          return __awaiter(this, void 0, void 0, function() {
            var listener;
            return __generator(this, function(_e) {
              (_a = this.logger) === null || _a === void 0 ? void 0 : _a.startScenario(ACSClientEvent.RegisterOnThreadUpdate);
              try {
                listener = function(event) {
                  onThreadUpdateCallback(event);
                };
                (_b = this.chatClient) === null || _b === void 0 ? void 0 : _b.on("participantsRemoved", listener);
                this.trackListener("participantsRemoved", listener);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.completeScenario(ACSClientEvent.RegisterOnThreadUpdate);
              } catch (error) {
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.failScenario(ACSClientEvent.RegisterOnThreadUpdate);
              }
              return [
                2
                /*return*/
              ];
            });
          });
        };
        ACSConversation2.prototype.onTypingEvent = function(onTypingEventCallback) {
          var _a, _b, _c, _d;
          return __awaiter(this, void 0, void 0, function() {
            var listener;
            return __generator(this, function(_e) {
              (_a = this.logger) === null || _a === void 0 ? void 0 : _a.startScenario(ACSClientEvent.OnTypingEvent);
              try {
                listener = function(event) {
                  var sender = event.sender, recipient = event.recipient;
                  if (sender.communicationUserId === recipient.communicationUserId) {
                    return;
                  }
                  onTypingEventCallback(event);
                };
                (_b = this.chatClient) === null || _b === void 0 ? void 0 : _b.on("typingIndicatorReceived", listener);
                this.trackListener("typingIndicatorReceived", listener);
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.completeScenario(ACSClientEvent.OnTypingEvent);
              } catch (error) {
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.failScenario(ACSClientEvent.OnTypingEvent);
              }
              return [
                2
                /*return*/
              ];
            });
          });
        };
        ACSConversation2.prototype.sendMessage = function(message) {
          var _a, _b, _c, _d;
          return __awaiter(this, void 0, void 0, function() {
            var sendMessageRequest, sendMessageOptions, error_6;
            return __generator(this, function(_e) {
              switch (_e.label) {
                case 0:
                  (_a = this.logger) === null || _a === void 0 ? void 0 : _a.startScenario(ACSClientEvent.SendMessage);
                  if (!message.metadata) {
                    message.metadata = {};
                  }
                  sendMessageRequest = {
                    content: message.content
                  };
                  sendMessageOptions = {
                    senderDisplayName: ACSParticipantDisplayName_1.default.Customer,
                    metadata: __assign({ deliveryMode: DeliveryMode_1.default.Bridged, tags: MessageTags_1.defaultMessageTags.join(",") }, message.metadata)
                  };
                  _e.label = 1;
                case 1:
                  _e.trys.push([1, 3, , 4]);
                  return [4, (_b = this.chatThreadClient) === null || _b === void 0 ? void 0 : _b.sendMessage(sendMessageRequest, sendMessageOptions)];
                case 2:
                  _e.sent();
                  (_c = this.logger) === null || _c === void 0 ? void 0 : _c.completeScenario(ACSClientEvent.SendMessage);
                  return [3, 4];
                case 3:
                  error_6 = _e.sent();
                  (_d = this.logger) === null || _d === void 0 ? void 0 : _d.failScenario(ACSClientEvent.SendMessage);
                  throw new Error("SendMessageFailed");
                case 4:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        ACSConversation2.prototype.sendTyping = function() {
          var _a, _b, _c, _d;
          return __awaiter(this, void 0, void 0, function() {
            var _e;
            return __generator(this, function(_f) {
              switch (_f.label) {
                case 0:
                  (_a = this.logger) === null || _a === void 0 ? void 0 : _a.startScenario(ACSClientEvent.SendTyping);
                  _f.label = 1;
                case 1:
                  _f.trys.push([1, 3, , 4]);
                  return [4, (_b = this.chatThreadClient) === null || _b === void 0 ? void 0 : _b.sendTypingNotification()];
                case 2:
                  _f.sent();
                  (_c = this.logger) === null || _c === void 0 ? void 0 : _c.completeScenario(ACSClientEvent.SendTyping);
                  return [3, 4];
                case 3:
                  _e = _f.sent();
                  (_d = this.logger) === null || _d === void 0 ? void 0 : _d.failScenario(ACSClientEvent.SendTyping);
                  throw new Error("SendTypingFailed");
                case 4:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        ACSConversation2.prototype.sendFileMessage = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              return [2, void 0];
            });
          });
        };
        ACSConversation2.prototype.sendFileData = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              return [2, void 0];
            });
          });
        };
        ACSConversation2.prototype.uploadFile = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              return [2, void 0];
            });
          });
        };
        ACSConversation2.prototype.downloadFile = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              return [2, void 0];
            });
          });
        };
        ACSConversation2.prototype.disconnect = function() {
          var _a, _b, _c;
          return __awaiter(this, void 0, void 0, function() {
            var _loop_1, _i, _d, _e, event_1, listeners;
            var _this = this;
            return __generator(this, function(_f) {
              (_a = this.logger) === null || _a === void 0 ? void 0 : _a.startScenario(ACSClientEvent.Disconnect);
              try {
                _loop_1 = function(event_12, listeners2) {
                  listeners2.forEach(function(listener) {
                    _this.chatClient.off(event_12, listener);
                  });
                };
                for (_i = 0, _d = Object.entries(this.eventListeners); _i < _d.length; _i++) {
                  _e = _d[_i], event_1 = _e[0], listeners = _e[1];
                  _loop_1(event_1, listeners);
                }
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.completeScenario(ACSClientEvent.Disconnect);
              } catch (_g) {
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.failScenario(ACSClientEvent.Disconnect);
              }
              return [
                2
                /*return*/
              ];
            });
          });
        };
        ACSConversation2.prototype.createParticipantsMapping = function() {
          return __awaiter(this, void 0, void 0, function() {
            var participants, participantsMapping, _i, participants_1, participant, id;
            var _a;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  return [4, this.getParticipants()];
                case 1:
                  participants = _b.sent();
                  participantsMapping = {};
                  for (_i = 0, participants_1 = participants; _i < participants_1.length; _i++) {
                    participant = participants_1[_i];
                    id = participant.id;
                    if (!Object.keys(participantsMapping).includes(id.communicationUserId)) {
                      Object.assign(participantsMapping, (_a = {}, _a[id.communicationUserId] = participant, _a));
                    }
                  }
                  return [2, participantsMapping];
              }
            });
          });
        };
        ACSConversation2.prototype.trackListener = function(event, listener) {
          if (!(event in this.eventListeners)) {
            this.eventListeners[event] = [];
          }
          this.eventListeners[event].push(listener);
        };
        return ACSConversation2;
      }()
    );
    exports.ACSConversation = ACSConversation;
    var ACSClient = (
      /** @class */
      function() {
        function ACSClient2(logger) {
          if (logger === void 0) {
            logger = null;
          }
          this.logger = null;
          this.tokenCredential = null;
          this.chatClient = null;
          this.logger = logger;
        }
        ACSClient2.prototype.initialize = function(acsClientConfig) {
          var _a, _b, _c, _d;
          return __awaiter(this, void 0, void 0, function() {
            var tokenRefresher, exceptionDetails, exceptionDetails;
            var _this = this;
            return __generator(this, function(_e) {
              (_a = this.logger) === null || _a === void 0 ? void 0 : _a.startScenario(ACSClientEvent.InitializeACSClient);
              tokenRefresher = function() {
                return __awaiter(_this, void 0, void 0, function() {
                  var token;
                  return __generator(this, function(_a2) {
                    switch (_a2.label) {
                      case 0:
                        if (!acsClientConfig.tokenRefresher)
                          return [3, 2];
                        return [4, acsClientConfig.tokenRefresher()];
                      case 1:
                        token = _a2.sent();
                        return [2, token];
                      case 2:
                        return [2, acsClientConfig.token];
                    }
                  });
                });
              };
              try {
                this.tokenCredential = new communication_common_1.AzureCommunicationTokenCredential({
                  token: acsClientConfig.token,
                  tokenRefresher,
                  refreshProactively: true
                  // Flag to whether refresh token 10 mins it expires
                });
              } catch (error) {
                exceptionDetails = {
                  response: "CreateTokenCredentialFailure",
                  errorObject: "" + error
                };
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.failScenario(ACSClientEvent.InitializeACSClient, {
                  ExceptionDetails: JSON.stringify(exceptionDetails)
                });
                throw new Error("CreateTokenCredentialFailed");
              }
              try {
                this.chatClient = new communication_chat_1.ChatClient(acsClientConfig.environmentUrl, this.tokenCredential);
              } catch (error) {
                exceptionDetails = {
                  response: "CreateChatClientFailure",
                  errorObject: "" + error
                };
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.failScenario(ACSClientEvent.InitializeACSClient, {
                  ExceptionDetails: JSON.stringify(exceptionDetails)
                });
                throw new Error("CreateChatClientFailed");
              }
              (_d = this.logger) === null || _d === void 0 ? void 0 : _d.completeScenario(ACSClientEvent.InitializeACSClient);
              return [
                2
                /*return*/
              ];
            });
          });
        };
        ACSClient2.prototype.joinConversation = function(sessionInfo) {
          return __awaiter(this, void 0, void 0, function() {
            var conversation;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  conversation = new ACSConversation(this.tokenCredential, this.chatClient, this.logger);
                  return [4, conversation.initialize(sessionInfo)];
                case 1:
                  _a.sent();
                  return [2, conversation];
              }
            });
          });
        };
        ACSClient2.prototype.getChatClient = function() {
          return this.chatClient;
        };
        return ACSClient2;
      }()
    );
    exports.default = ACSClient;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/telemetry/TelemetryEvent.js
var require_TelemetryEvent = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/telemetry/TelemetryEvent.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TelemetryEvent;
    (function(TelemetryEvent2) {
      TelemetryEvent2["ValidateOmnichannelConfig"] = "ValidateOmnichannelConfig";
      TelemetryEvent2["ValidateSDKConfig"] = "ValidateSDKConfig";
      TelemetryEvent2["InitializeChatSDK"] = "InitializeChatSDK";
      TelemetryEvent2["StartChat"] = "StartChat";
      TelemetryEvent2["EndChat"] = "EndChat";
      TelemetryEvent2["GetLiveChatConfig"] = "GetLiveChatConfig";
      TelemetryEvent2["GetAuthToken"] = "GetAuthToken";
      TelemetryEvent2["GetPreChatSurvey"] = "GetPreChatSurvey";
      TelemetryEvent2["GetChatToken"] = "GetChatToken";
      TelemetryEvent2["GetConversationDetails"] = "GetConversationDetails";
      TelemetryEvent2["GetCurrentLiveChatContext"] = "GetCurrentLiveChatContext";
      TelemetryEvent2["GetMessages"] = "GetMessages";
      TelemetryEvent2["SendMessages"] = "SendMessages";
      TelemetryEvent2["SendTypingEvent"] = "SendTypingEvent";
      TelemetryEvent2["OnAgentEndSession"] = "OnAgentEndSession";
      TelemetryEvent2["OnNewMessage"] = "OnNewMessage";
      TelemetryEvent2["OnTypingEvent"] = "OnTypingEvent";
      TelemetryEvent2["UploadFileAttachment"] = "UploadFileAttachment";
      TelemetryEvent2["DownloadFileAttachment"] = "DownloadFileAttachment";
      TelemetryEvent2["EmailLiveChatTranscript"] = "EmailLiveChatTranscript";
      TelemetryEvent2["GetLiveChatTranscript"] = "GetLiveChatTranscript";
      TelemetryEvent2["CreateIC3Adapter"] = "CreateChatAdapter";
      TelemetryEvent2["CreateACSAdapter"] = "CreateACSAdapter";
      TelemetryEvent2["CreateDirectLine"] = "CreateDirectLine";
      TelemetryEvent2["GetVoiceVideoCalling"] = "GetVoiceVideoCalling";
      TelemetryEvent2["GetIC3Client"] = "GetIC3Client";
      TelemetryEvent2["InitializeVoiceVideoCallingSDK"] = "InitializeVoiceVideoCallingSDK";
      TelemetryEvent2["AcceptVoiceCall"] = "AcceptVoiceCall";
      TelemetryEvent2["AcceptVideoCall"] = "AcceptVideoCall";
      TelemetryEvent2["RejectCall"] = "RejectCall";
      TelemetryEvent2["StopCall"] = "StopCall";
      TelemetryEvent2["OnCallDisconnected"] = "OnCallDisconnected";
      TelemetryEvent2["UpdateChatToken"] = "UpdateChatToken";
      TelemetryEvent2["GetChatReconnectContext"] = "GetChatReconnectContext";
      TelemetryEvent2["GetPostChatSurveyContext"] = "GetPostChatSurveyContext";
      TelemetryEvent2["GetAgentAvailability"] = "GetAgentAvailability";
      TelemetryEvent2["GetGeolocation"] = "GetGeolocation";
    })(TelemetryEvent || (TelemetryEvent = {}));
    exports.default = TelemetryEvent;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/utils/sleep.js
var require_sleep2 = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/utils/sleep.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var sleep = function(ms) {
      return new Promise(function(resolve) {
        return setTimeout(resolve, ms);
      });
    };
    exports.default = sleep;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/utils/WebUtils.js
var require_WebUtils = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/utils/WebUtils.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.removeElementById = exports.loadScript = void 0;
    var sleep_1 = require_sleep2();
    var defaultLoadScriptRetries = 3;
    var maxBackoffSeconds = 60;
    var loadScript = function(scriptUrl, callbackOnload, callbackError, retries, attempt) {
      if (callbackOnload === void 0) {
        callbackOnload = function() {
          return void 0;
        };
      }
      if (callbackError === void 0) {
        callbackError = function() {
          return void 0;
        };
      }
      if (retries === void 0) {
        retries = defaultLoadScriptRetries;
      }
      if (attempt === void 0) {
        attempt = 0;
      }
      return __awaiter(void 0, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, new Promise(function(resolve, reject) {
            return __awaiter(void 0, void 0, void 0, function() {
              var scriptElements, foundScriptElement, scriptElement;
              return __generator(this, function(_a2) {
                switch (_a2.label) {
                  case 0:
                    scriptElements = Array.from(document.getElementsByTagName("script"));
                    foundScriptElement = scriptElements.filter(function(scriptElement2) {
                      return scriptElement2.src == scriptUrl;
                    });
                    if (!foundScriptElement.length)
                      return [3, 2];
                    return [4, callbackOnload()];
                  case 1:
                    _a2.sent();
                    return [2, resolve()];
                  case 2:
                    scriptElement = document.createElement("script");
                    scriptElement.setAttribute("src", scriptUrl);
                    scriptElement.setAttribute("type", "text/javascript");
                    document.head.appendChild(scriptElement);
                    scriptElement.addEventListener("load", function() {
                      return __awaiter(void 0, void 0, void 0, function() {
                        return __generator(this, function(_a3) {
                          switch (_a3.label) {
                            case 0:
                              return [4, callbackOnload()];
                            case 1:
                              _a3.sent();
                              resolve();
                              return [
                                2
                                /*return*/
                              ];
                          }
                        });
                      });
                    });
                    scriptElement.addEventListener("error", function() {
                      return __awaiter(void 0, void 0, void 0, function() {
                        var exponentialBackoffWaitTime, e_1;
                        return __generator(this, function(_a3) {
                          switch (_a3.label) {
                            case 0:
                              if (!(++attempt >= retries))
                                return [3, 2];
                              return [4, callbackError()];
                            case 1:
                              _a3.sent();
                              return [2, reject(new Error("Resource failed to load, or can't be used."))];
                            case 2:
                              scriptElement.remove();
                              exponentialBackoffWaitTime = Math.min(Math.pow(2, attempt) + Math.random(), maxBackoffSeconds) * 1e3;
                              return [4, sleep_1.default(exponentialBackoffWaitTime)];
                            case 3:
                              _a3.sent();
                              _a3.label = 4;
                            case 4:
                              _a3.trys.push([4, 6, , 7]);
                              return [4, loadScript(scriptUrl, callbackOnload, callbackError, retries, attempt)];
                            case 5:
                              _a3.sent();
                              return [3, 7];
                            case 6:
                              e_1 = _a3.sent();
                              reject(e_1);
                              return [3, 7];
                            case 7:
                              return [
                                2
                                /*return*/
                              ];
                          }
                        });
                      });
                    });
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          })];
        });
      });
    };
    exports.loadScript = loadScript;
    var removeElementById = function(id) {
      var _a;
      (_a = document.getElementById(id)) === null || _a === void 0 ? void 0 : _a.remove();
    };
    exports.removeElementById = removeElementById;
    exports.default = {
      loadScript,
      removeElementById
    };
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/ACSAdapter/createChannelDataEgressMiddleware.js
var require_createChannelDataEgressMiddleware = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/ACSAdapter/createChannelDataEgressMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var MessageTags_1 = require_MessageTags();
    var OmnichannelMessage_1 = require_OmnichannelMessage();
    var createChannelDataEgressMiddleware = function(channelData) {
      var channelDataMiddleware = function() {
        return function(next) {
          return function(activity) {
            var applicable = activity && activity.channelData;
            if (applicable) {
              if (!activity.channelData.tags) {
                activity.channelData.tags = [];
              }
              if (!activity.channelData.tags.includes(MessageTags_1.channelIdTag)) {
                activity.channelData.tags.push(MessageTags_1.channelIdTag);
              }
              if (!activity.channelData.tags.includes(MessageTags_1.customerMessageTag)) {
                activity.channelData.tags.push(MessageTags_1.customerMessageTag);
              }
              if (!activity.channelData.metadata) {
                activity.channelData.metadata = {};
              }
              if (!activity.channelData.metadata.deliveryMode) {
                activity.channelData.metadata.deliveryMode = OmnichannelMessage_1.DeliveryMode.Bridged;
              }
              if (channelData.widgetId) {
                activity.channelData.metadata.widgetId = channelData.widgetId;
              }
            }
            return next(activity);
          };
        };
      };
      return channelDataMiddleware;
    };
    exports.default = createChannelDataEgressMiddleware;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/ACSAdapter/createFormatEgressTagsMiddleware.js
var require_createFormatEgressTagsMiddleware = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/ACSAdapter/createFormatEgressTagsMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var createFormatEgressTagsMiddleware = function() {
      var formatEgressTagsMiddleware = function() {
        return function(next) {
          return function(activity) {
            var patchedActivity = JSON.parse(JSON.stringify(activity));
            if (patchedActivity) {
              if (patchedActivity.channelData && patchedActivity.channelData.tags) {
                var tags = patchedActivity.channelData.tags;
                if (typeof tags === "string") {
                  return next(activity);
                } else if (tags instanceof Array) {
                  patchedActivity.channelData.tags = tags.toString();
                } else if (typeof patchedActivity.channelData.tags === "object") {
                  try {
                    patchedActivity.channelData.tags = JSON.stringify(tags);
                  } catch (error) {
                    console.error(error);
                  }
                }
              }
            }
            return next(patchedActivity);
          };
        };
      };
      return formatEgressTagsMiddleware;
    };
    exports.default = createFormatEgressTagsMiddleware;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/ACSAdapter/createFormatIngressTagsMiddleware.js
var require_createFormatIngressTagsMiddleware = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/ACSAdapter/createFormatIngressTagsMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var createFormatIngressTagsMiddleware = function() {
      var formatIngressTagsMiddleware = function() {
        return function(next) {
          return function(activity) {
            var patchedActivity = JSON.parse(JSON.stringify(activity));
            if (patchedActivity) {
              if (patchedActivity.channelData && patchedActivity.channelData.tags) {
                var tags = patchedActivity.channelData.tags;
                if (typeof tags === "string") {
                  try {
                    patchedActivity.channelData.tags = JSON.parse(tags);
                  } catch (_a) {
                    patchedActivity.channelData.tags = tags.split(",");
                  }
                }
              }
            }
            return next(patchedActivity);
          };
        };
      };
      return formatIngressTagsMiddleware;
    };
    exports.default = createFormatIngressTagsMiddleware;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/core/ChatSDKErrors.js
var require_ChatSDKErrors = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/core/ChatSDKErrors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ChatSDKErrors;
    (function(ChatSDKErrors2) {
      ChatSDKErrors2["ChatAdapterInitializationFailure"] = "ChatAdapterInitializationFailure";
      ChatSDKErrors2["UnsupportedLiveChatVersion"] = "UnsupportedLiveChatVersion";
      ChatSDKErrors2["OmnichannelClientInitializationFailure"] = "OmnichannelClientInitializationFailure";
      ChatSDKErrors2["MessagingClientCreationFailure"] = "MessagingClientCreationFailure";
      ChatSDKErrors2["ChatConfigRetrievalFailure"] = "ChatConfigRetrievalFailure";
      ChatSDKErrors2["UninitializedChatSDK"] = "UninitializedChatSDK";
      ChatSDKErrors2["ChatTokenRetrievalFailure"] = "ChatTokenRetrievalFailure";
      ChatSDKErrors2["ScriptLoadFailure"] = "ScriptLoadFailure";
      ChatSDKErrors2["UnsupportedPlatform"] = "UnsupportedPlatform";
      ChatSDKErrors2["FeatureDisabled"] = "FeatureDisabled";
      ChatSDKErrors2["ClosedConversation"] = "ClosedConversation";
      ChatSDKErrors2["InvalidConversation"] = "InvalidConversation";
      ChatSDKErrors2["AuthenticatedChatConversationRetrievalFailure"] = "AuthenticatedChatConversationRetrievalFailure";
      ChatSDKErrors2["PersistentChatConversationRetrievalFailure"] = "PersistentChatConversationRetrievalFailure";
      ChatSDKErrors2["WidgetUseOutsideOperatingHour"] = "WidgetUseOutsideOperatingHour";
      ChatSDKErrors2["ConversationInitializationFailure"] = "ConversationInitializationFailure";
      ChatSDKErrors2["ConversationClosureFailure"] = "ConversationClosureFailure";
      ChatSDKErrors2["MessagingClientInitializationFailure"] = "MessagingClientInitializationFailure";
      ChatSDKErrors2["MessagingClientConversationJoinFailure"] = "MessagingClientConversationJoinFailure";
      ChatSDKErrors2["LiveChatTranscriptRetrievalFailure"] = "LiveChatTranscriptRetrievalFailure";
      ChatSDKErrors2["ConversationDetailsRetrievalFailure"] = "ConversationDetailsRetrievalFailure";
      ChatSDKErrors2["AuthContactIdNotFoundFailure"] = "AuthContactIdNotFoundFailure";
    })(ChatSDKErrors || (ChatSDKErrors = {}));
    exports.default = ChatSDKErrors;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/utils/exceptionThrowers.js
var require_exceptionThrowers = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/utils/exceptionThrowers.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.throwAuthContactIdNotFoundFailure = exports.throwLiveChatTranscriptRetrievalFailure = exports.throwChatAdapterInitializationFailure = exports.throwMessagingClientConversationJoinFailure = exports.throwMessagingClientInitializationFailure = exports.throwConversationClosureFailure = exports.throwConversationInitializationFailure = exports.throwWidgetUseOutsideOperatingHour = exports.throwPersistentChatConversationRetrievalFailure = exports.throwAuthenticatedChatConversationRetrievalFailure = exports.throwClosedConversation = exports.throwInvalidConversation = exports.throwChatTokenRetrievalFailure = exports.throwUninitializedChatSDK = exports.throwMessagingClientCreationFailure = exports.throwUnsupportedLiveChatVersionFailure = exports.throwChatConfigRetrievalFailure = exports.throwOmnichannelClientInitializationFailure = exports.throwFeatureDisabled = exports.throwUnsupportedPlatform = exports.throwScriptLoadFailure = exports.throwChatSDKError = void 0;
    var ChatSDKErrors_1 = require_ChatSDKErrors();
    exports.throwChatSDKError = function(chatSDKError, e, scenarioMarker, telemetryEvent, telemetryData, message) {
      if (telemetryData === void 0) {
        telemetryData = {};
      }
      if (message === void 0) {
        message = "";
      }
      var exceptionDetails = {
        response: chatSDKError
      };
      if (e) {
        exceptionDetails.errorObject = "" + e;
      }
      scenarioMarker.failScenario(telemetryEvent, __assign(__assign({}, telemetryData), { ExceptionDetails: JSON.stringify(exceptionDetails) }));
      if (message) {
        exceptionDetails.message = message;
        console.error(message);
      }
      throw new Error(exceptionDetails.response);
    };
    exports.throwScriptLoadFailure = function(e, scenarioMarker, telemetryEvent) {
      exports.throwChatSDKError(ChatSDKErrors_1.default.ScriptLoadFailure, e, scenarioMarker, telemetryEvent);
    };
    exports.throwUnsupportedPlatform = function(scenarioMarker, telemetryEvent, message, telemetryData) {
      if (telemetryData === void 0) {
        telemetryData = {};
      }
      exports.throwChatSDKError(ChatSDKErrors_1.default.UnsupportedPlatform, void 0, scenarioMarker, telemetryEvent, telemetryData, message);
    };
    exports.throwFeatureDisabled = function(scenarioMarker, telemetryEvent, message) {
      exports.throwChatSDKError(ChatSDKErrors_1.default.FeatureDisabled, void 0, scenarioMarker, telemetryEvent, {}, message);
    };
    exports.throwOmnichannelClientInitializationFailure = function(e, scenarioMarker, telemetryEvent) {
      exports.throwChatSDKError(ChatSDKErrors_1.default.OmnichannelClientInitializationFailure, e, scenarioMarker, telemetryEvent);
    };
    exports.throwChatConfigRetrievalFailure = function(e, scenarioMarker, telemetryEvent) {
      exports.throwChatSDKError(ChatSDKErrors_1.default.ChatConfigRetrievalFailure, e, scenarioMarker, telemetryEvent);
    };
    exports.throwUnsupportedLiveChatVersionFailure = function(e, scenarioMarker, telemetryEvent) {
      exports.throwChatSDKError(ChatSDKErrors_1.default.UnsupportedLiveChatVersion, e, scenarioMarker, telemetryEvent);
    };
    exports.throwMessagingClientCreationFailure = function(e, scenarioMarker, telemetryEvent) {
      exports.throwChatSDKError(ChatSDKErrors_1.default.MessagingClientCreationFailure, e, scenarioMarker, telemetryEvent);
    };
    exports.throwUninitializedChatSDK = function(scenarioMarker, telemetryEvent) {
      exports.throwChatSDKError(ChatSDKErrors_1.default.UninitializedChatSDK, void 0, scenarioMarker, telemetryEvent);
    };
    exports.throwChatTokenRetrievalFailure = function(e, scenarioMarker, telemetryEvent, telemetryData) {
      exports.throwChatSDKError(ChatSDKErrors_1.default.ChatTokenRetrievalFailure, e, scenarioMarker, telemetryEvent, telemetryData);
    };
    exports.throwInvalidConversation = function(scenarioMarker, telemetryEvent, telemetryData) {
      var message = "Conversation not found";
      exports.throwChatSDKError(ChatSDKErrors_1.default.InvalidConversation, void 0, scenarioMarker, telemetryEvent, telemetryData, message);
    };
    exports.throwClosedConversation = function(scenarioMarker, telemetryEvent, telemetryData) {
      exports.throwChatSDKError(ChatSDKErrors_1.default.ClosedConversation, void 0, scenarioMarker, telemetryEvent, telemetryData);
    };
    exports.throwAuthenticatedChatConversationRetrievalFailure = function(e, scenarioMarker, telemetryEvent, telemetryData) {
      exports.throwChatSDKError(ChatSDKErrors_1.default.AuthenticatedChatConversationRetrievalFailure, e, scenarioMarker, telemetryEvent, telemetryData);
    };
    exports.throwPersistentChatConversationRetrievalFailure = function(e, scenarioMarker, telemetryEvent, telemetryData) {
      exports.throwChatSDKError(ChatSDKErrors_1.default.PersistentChatConversationRetrievalFailure, e, scenarioMarker, telemetryEvent, telemetryData);
    };
    exports.throwWidgetUseOutsideOperatingHour = function(e, scenarioMarker, telemetryEvent, telemetryData) {
      var message = "Widget used outside of operating hours";
      exports.throwChatSDKError(ChatSDKErrors_1.default.WidgetUseOutsideOperatingHour, e, scenarioMarker, telemetryEvent, telemetryData, message);
    };
    exports.throwConversationInitializationFailure = function(e, scenarioMarker, telemetryEvent, telemetryData) {
      exports.throwChatSDKError(ChatSDKErrors_1.default.ConversationInitializationFailure, e, scenarioMarker, telemetryEvent, telemetryData);
    };
    exports.throwConversationClosureFailure = function(e, scenarioMarker, telemetryEvent, telemetryData) {
      exports.throwChatSDKError(ChatSDKErrors_1.default.ConversationClosureFailure, e, scenarioMarker, telemetryEvent, telemetryData);
    };
    exports.throwMessagingClientInitializationFailure = function(e, scenarioMarker, telemetryEvent, telemetryData) {
      exports.throwChatSDKError(ChatSDKErrors_1.default.MessagingClientInitializationFailure, e, scenarioMarker, telemetryEvent, telemetryData);
    };
    exports.throwMessagingClientConversationJoinFailure = function(e, scenarioMarker, telemetryEvent, telemetryData) {
      exports.throwChatSDKError(ChatSDKErrors_1.default.MessagingClientConversationJoinFailure, e, scenarioMarker, telemetryEvent, telemetryData);
    };
    exports.throwChatAdapterInitializationFailure = function(e, scenarioMarker, telemetryEvent) {
      exports.throwChatSDKError(ChatSDKErrors_1.default.ChatAdapterInitializationFailure, e, scenarioMarker, telemetryEvent);
    };
    exports.throwLiveChatTranscriptRetrievalFailure = function(e, scenarioMarker, telemetryEvent, telemetryData) {
      exports.throwChatSDKError(ChatSDKErrors_1.default.LiveChatTranscriptRetrievalFailure, e, scenarioMarker, telemetryEvent, telemetryData);
    };
    exports.throwAuthContactIdNotFoundFailure = function(e, scenarioMarker, telemetryEvent, telemetryData) {
      exports.throwChatSDKError(ChatSDKErrors_1.default.AuthContactIdNotFoundFailure, e, scenarioMarker, telemetryEvent, telemetryData);
    };
    exports.default = {
      throwChatSDKError: exports.throwChatSDKError,
      throwScriptLoadFailure: exports.throwScriptLoadFailure,
      throwUnsupportedPlatform: exports.throwUnsupportedPlatform,
      throwFeatureDisabled: exports.throwFeatureDisabled,
      throwOmnichannelClientInitializationFailure: exports.throwOmnichannelClientInitializationFailure,
      throwUnsupportedLiveChatVersionFailure: exports.throwUnsupportedLiveChatVersionFailure,
      throwChatConfigRetrievalFailure: exports.throwChatConfigRetrievalFailure,
      throwMessagingClientCreationFailure: exports.throwMessagingClientCreationFailure,
      throwUninitializedChatSDK: exports.throwUninitializedChatSDK,
      throwChatTokenRetrievalFailure: exports.throwChatTokenRetrievalFailure,
      throwInvalidConversation: exports.throwInvalidConversation,
      throwClosedConversation: exports.throwClosedConversation,
      throwAuthenticatedChatConversationRetrievalFailure: exports.throwAuthenticatedChatConversationRetrievalFailure,
      throwPersistentChatConversationRetrievalFailure: exports.throwPersistentChatConversationRetrievalFailure,
      throwWidgetUseOutsideOperatingHour: exports.throwWidgetUseOutsideOperatingHour,
      throwConversationInitializationFailure: exports.throwConversationInitializationFailure,
      throwConversationClosureFailure: exports.throwConversationClosureFailure,
      throwMessagingClientInitializationFailure: exports.throwMessagingClientInitializationFailure,
      throwMessagingClientConversationJoinFailure: exports.throwMessagingClientConversationJoinFailure,
      throwChatAdapterInitializationFailure: exports.throwChatAdapterInitializationFailure,
      throwLiveChatTranscriptRetrievalFailure: exports.throwLiveChatTranscriptRetrievalFailure,
      throwAuthContactIdNotFoundFailure: exports.throwAuthContactIdNotFoundFailure
    };
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/core/messaging/ChatAdapterProtocols.js
var require_ChatAdapterProtocols = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/core/messaging/ChatAdapterProtocols.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var IC3 = "IC3";
    var DirectLine = "DirectLine";
    var ACS = "ACS";
    exports.default = {
      IC3,
      DirectLine,
      ACS
    };
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/config/settings.js
var require_settings = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/config/settings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ariaTelemetryKey = exports.webChatDirectLineVersion = exports.webChatACSAdapterVersion = exports.webChatIC3AdapterVersion = exports.ic3ClientVersion = void 0;
    var ic3ClientVersion = "2021.08.14.1";
    exports.ic3ClientVersion = ic3ClientVersion;
    var webChatIC3AdapterVersion = "0.1.0-master.2dba07b";
    exports.webChatIC3AdapterVersion = webChatIC3AdapterVersion;
    var webChatACSAdapterVersion = "0.0.35-beta.20";
    exports.webChatACSAdapterVersion = webChatACSAdapterVersion;
    var webChatDirectLineVersion = "0.15.1";
    exports.webChatDirectLineVersion = webChatDirectLineVersion;
    var ariaTelemetryKey = "c7655518acf1403f93ff6b9f77942f0a-d01a02fd-6b50-4de3-a566-62eda11f93bc-7083";
    exports.ariaTelemetryKey = ariaTelemetryKey;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/utils/libraries.js
var require_libraries = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/utils/libraries.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDirectLineCDNUrl = exports.getACSAdapterCDNUrl = exports.getIC3AdapterCDNUrl = exports.getIC3ClientCDNUrl = void 0;
    var settings_1 = require_settings();
    var getIC3ClientCDNUrl = function(version) {
      if (version === void 0) {
        version = settings_1.ic3ClientVersion;
      }
      var IC3ClientCDNUrl = "https://comms.omnichannelengagementhub.com/release/" + version + "/Scripts/SDK/SDK.min.js";
      return IC3ClientCDNUrl;
    };
    exports.getIC3ClientCDNUrl = getIC3ClientCDNUrl;
    var getIC3AdapterCDNUrl = function(version) {
      if (version === void 0) {
        version = settings_1.webChatIC3AdapterVersion;
      }
      var IC3AdapterCDNUrl = "https://webchatic3.blob.core.windows.net/webchat-ic3adapter/" + version + "/botframework-webchat-adapter-ic3.production.min.js";
      return IC3AdapterCDNUrl;
    };
    exports.getIC3AdapterCDNUrl = getIC3AdapterCDNUrl;
    var getACSAdapterCDNUrl = function(version) {
      if (version === void 0) {
        version = settings_1.webChatACSAdapterVersion;
      }
      var ACSAdapterCDNUrl = "https://unpkg.com/acs_webchat-chat-adapter@" + version + "/dist/chat-adapter.js";
      return ACSAdapterCDNUrl;
    };
    exports.getACSAdapterCDNUrl = getACSAdapterCDNUrl;
    var getDirectLineCDNUrl = function(version) {
      if (version === void 0) {
        version = settings_1.webChatDirectLineVersion;
      }
      var DirectLineCDNUrl = "https://unpkg.com/botframework-directlinejs@" + version + "/dist/directline.js";
      return DirectLineCDNUrl;
    };
    exports.getDirectLineCDNUrl = getDirectLineCDNUrl;
    exports.default = {
      getIC3ClientCDNUrl,
      getIC3AdapterCDNUrl,
      getACSAdapterCDNUrl,
      getDirectLineCDNUrl
    };
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/utils/urlResolvers.js
var require_urlResolvers = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/utils/urlResolvers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveChatAdapterUrl = exports.resolveIC3ClientUrl = void 0;
    var LiveChatVersion_1 = require_LiveChatVersion();
    var ChatAdapterProtocols_1 = require_ChatAdapterProtocols();
    var libraries_1 = require_libraries();
    var resolveIC3ClientUrl = function(chatSDKConfig) {
      if (chatSDKConfig.ic3Config && "ic3ClientCDNUrl" in chatSDKConfig.ic3Config) {
        return chatSDKConfig.ic3Config.ic3ClientCDNUrl;
      }
      if (chatSDKConfig.ic3Config && "ic3ClientVersion" in chatSDKConfig.ic3Config) {
        return libraries_1.default.getIC3ClientCDNUrl(chatSDKConfig.ic3Config.ic3ClientVersion);
      }
      return libraries_1.default.getIC3ClientCDNUrl();
    };
    exports.resolveIC3ClientUrl = resolveIC3ClientUrl;
    var resolveDirectLineCDNUrl = function(chatSDKConfig) {
      if (chatSDKConfig.chatAdapterConfig && "webChatDirectLineCDNUrl" in chatSDKConfig.chatAdapterConfig) {
        return chatSDKConfig.chatAdapterConfig.webChatDirectLineCDNUrl;
      }
      if (chatSDKConfig.chatAdapterConfig && "webChatDirectLineVersion" in chatSDKConfig.chatAdapterConfig) {
        return libraries_1.default.getDirectLineCDNUrl(chatSDKConfig.chatAdapterConfig.webChatDirectLineVersion);
      }
      return libraries_1.default.getDirectLineCDNUrl();
    };
    var resolveACSAdapterCDNUrl = function(chatSDKConfig) {
      if (chatSDKConfig.chatAdapterConfig && "webChatACSAdapterCDNUrl" in chatSDKConfig.chatAdapterConfig) {
        return chatSDKConfig.chatAdapterConfig.webChatACSAdapterCDNUrl;
      }
      if (chatSDKConfig.chatAdapterConfig && "webChatACSAdapterVersion" in chatSDKConfig.chatAdapterConfig) {
        return libraries_1.default.getACSAdapterCDNUrl(chatSDKConfig.chatAdapterConfig.webChatACSAdapterVersion);
      }
      return libraries_1.default.getACSAdapterCDNUrl();
    };
    var resolveIC3AdapterCDNUrl = function(chatSDKConfig) {
      if (chatSDKConfig.chatAdapterConfig && "webChatIC3AdapterCDNUrl" in chatSDKConfig.chatAdapterConfig) {
        return chatSDKConfig.chatAdapterConfig.webChatIC3AdapterCDNUrl;
      }
      if (chatSDKConfig.chatAdapterConfig && "webChatIC3AdapterVersion" in chatSDKConfig.chatAdapterConfig) {
        return libraries_1.default.getIC3AdapterCDNUrl(chatSDKConfig.chatAdapterConfig.webChatIC3AdapterVersion);
      }
      return libraries_1.default.getIC3AdapterCDNUrl();
    };
    var resolveChatAdapterUrl = function(chatSDKConfig, liveChatVersion, protocol) {
      var supportedChatAdapterProtocols = [ChatAdapterProtocols_1.default.ACS, ChatAdapterProtocols_1.default.IC3, ChatAdapterProtocols_1.default.DirectLine];
      if (protocol && !supportedChatAdapterProtocols.includes(protocol)) {
        throw new Error("ChatAdapter for protocol " + protocol + " currently not supported");
      }
      if (protocol === ChatAdapterProtocols_1.default.DirectLine) {
        return resolveDirectLineCDNUrl(chatSDKConfig);
      } else if (protocol === ChatAdapterProtocols_1.default.ACS || liveChatVersion === LiveChatVersion_1.default.V2) {
        return resolveACSAdapterCDNUrl(chatSDKConfig);
      } else if (protocol === ChatAdapterProtocols_1.default.IC3 || liveChatVersion === LiveChatVersion_1.default.V1) {
        return resolveIC3AdapterCDNUrl(chatSDKConfig);
      }
      return "";
    };
    exports.resolveChatAdapterUrl = resolveChatAdapterUrl;
    exports.default = {
      resolveIC3ClientUrl,
      resolveChatAdapterUrl
    };
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/utils/chatAdapterCreators.js
var require_chatAdapterCreators = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/utils/chatAdapterCreators.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __spreadArrays = exports && exports.__spreadArrays || function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createIC3Adapter = exports.createACSAdapter = exports.createDirectLine = void 0;
    var ACSParticipantDisplayName_1 = require_ACSParticipantDisplayName();
    var TelemetryEvent_1 = require_TelemetryEvent();
    var WebUtils_1 = require_WebUtils();
    var createChannelDataEgressMiddleware_1 = require_createChannelDataEgressMiddleware();
    var createFormatEgressTagsMiddleware_1 = require_createFormatEgressTagsMiddleware();
    var createFormatIngressTagsMiddleware_1 = require_createFormatIngressTagsMiddleware();
    var exceptionThrowers_1 = require_exceptionThrowers();
    var urlResolvers_1 = require_urlResolvers();
    var createDirectLine = function(optionalParams, chatSDKConfig, liveChatVersion, protocol, telemetry, scenarioMarker) {
      return __awaiter(void 0, void 0, void 0, function() {
        var options, directLineCDNUrl, error_1, DirectLine, adapter;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              options = optionalParams.DirectLine ? optionalParams.DirectLine.options : {};
              directLineCDNUrl = urlResolvers_1.default.resolveChatAdapterUrl(chatSDKConfig, liveChatVersion, protocol);
              telemetry === null || telemetry === void 0 ? void 0 : telemetry.setCDNPackages({
                DirectLine: directLineCDNUrl
              });
              scenarioMarker.startScenario(TelemetryEvent_1.default.CreateDirectLine);
              _a.label = 1;
            case 1:
              _a.trys.push([1, 3, , 4]);
              return [4, WebUtils_1.default.loadScript(directLineCDNUrl)];
            case 2:
              _a.sent();
              return [3, 4];
            case 3:
              error_1 = _a.sent();
              exceptionThrowers_1.default.throwScriptLoadFailure(error_1, scenarioMarker, TelemetryEvent_1.default.CreateDirectLine);
              return [3, 4];
            case 4:
              try {
                DirectLine = window.DirectLine;
                adapter = new DirectLine.DirectLine(__assign({}, options));
                scenarioMarker.completeScenario(TelemetryEvent_1.default.CreateDirectLine);
                return [2, adapter];
              } catch (error) {
                exceptionThrowers_1.default.throwChatAdapterInitializationFailure(error, scenarioMarker, TelemetryEvent_1.default.CreateDirectLine);
              }
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    exports.createDirectLine = createDirectLine;
    var createACSAdapter = function(optionalParams, chatSDKConfig, liveChatVersion, protocol, telemetry, scenarioMarker, omnichannelConfig, chatToken, fileManager, chatClient, logger) {
      return __awaiter(void 0, void 0, void 0, function() {
        var options, acsAdapterCDNUrl, defaultEgressMiddlewares, defaultIngressMiddlewares, egressMiddleware, ingressMiddleware, featuresOption, error_2, ChatAdapter, adapter;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              options = optionalParams.ACSAdapter ? optionalParams.ACSAdapter.options : {};
              acsAdapterCDNUrl = urlResolvers_1.default.resolveChatAdapterUrl(chatSDKConfig, liveChatVersion, protocol);
              telemetry === null || telemetry === void 0 ? void 0 : telemetry.setCDNPackages({
                ACSAdapter: acsAdapterCDNUrl
              });
              defaultEgressMiddlewares = [createChannelDataEgressMiddleware_1.default({ widgetId: omnichannelConfig.widgetId }), createFormatEgressTagsMiddleware_1.default()];
              defaultIngressMiddlewares = [createFormatIngressTagsMiddleware_1.default()];
              egressMiddleware = (options === null || options === void 0 ? void 0 : options.egressMiddleware) ? __spreadArrays(options.egressMiddleware, defaultEgressMiddlewares) : __spreadArrays(defaultEgressMiddlewares);
              ingressMiddleware = (options === null || options === void 0 ? void 0 : options.ingressMiddleware) ? __spreadArrays(options.ingressMiddleware, defaultIngressMiddlewares) : __spreadArrays(defaultIngressMiddlewares);
              featuresOption = __assign(__assign({ enableAdaptiveCards: true, enableThreadMemberUpdateNotification: true, enableLeaveThreadOnWindowClosed: false, enableSenderDisplayNameInTypingNotification: true }, options), {
                // overrides
                ingressMiddleware,
                egressMiddleware
              });
              scenarioMarker.startScenario(TelemetryEvent_1.default.CreateACSAdapter);
              _a.label = 1;
            case 1:
              _a.trys.push([1, 3, , 4]);
              return [4, WebUtils_1.default.loadScript(acsAdapterCDNUrl)];
            case 2:
              _a.sent();
              return [3, 4];
            case 3:
              error_2 = _a.sent();
              exceptionThrowers_1.default.throwScriptLoadFailure(error_2, scenarioMarker, TelemetryEvent_1.default.CreateACSAdapter);
              return [3, 4];
            case 4:
              try {
                ChatAdapter = window.ChatAdapter;
                adapter = ChatAdapter.createACSAdapter(
                  chatToken.token,
                  chatToken.visitorId || "teamsvisitor",
                  chatToken.chatId,
                  chatToken.acsEndpoint,
                  fileManager,
                  3e4,
                  // eslint-disable-next-line @typescript-eslint/no-empty-function
                  { notifyErrorEvent: function() {
                  } },
                  // Passing empty callback for now for backward compatibility
                  ACSParticipantDisplayName_1.default.Customer,
                  chatClient,
                  logger,
                  featuresOption
                );
                scenarioMarker.completeScenario(TelemetryEvent_1.default.CreateACSAdapter);
                return [2, adapter];
              } catch (error) {
                exceptionThrowers_1.default.throwChatAdapterInitializationFailure(error, scenarioMarker, TelemetryEvent_1.default.CreateACSAdapter);
              }
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    exports.createACSAdapter = createACSAdapter;
    var createIC3Adapter = function(optionalParams, chatSDKConfig, liveChatVersion, protocol, telemetry, scenarioMarker, chatToken, ic3Client, logger) {
      return __awaiter(void 0, void 0, void 0, function() {
        var options, ic3AdapterCDNUrl, error_3, adapterConfig, adapter;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              options = optionalParams.IC3Adapter ? optionalParams.IC3Adapter.options : {};
              ic3AdapterCDNUrl = urlResolvers_1.default.resolveChatAdapterUrl(chatSDKConfig, liveChatVersion, protocol);
              telemetry === null || telemetry === void 0 ? void 0 : telemetry.setCDNPackages({
                IC3Adapter: ic3AdapterCDNUrl
              });
              scenarioMarker.startScenario(TelemetryEvent_1.default.CreateIC3Adapter);
              _a.label = 1;
            case 1:
              _a.trys.push([1, 3, , 4]);
              return [4, WebUtils_1.default.loadScript(ic3AdapterCDNUrl)];
            case 2:
              _a.sent();
              return [3, 4];
            case 3:
              error_3 = _a.sent();
              exceptionThrowers_1.default.throwScriptLoadFailure(error_3, scenarioMarker, TelemetryEvent_1.default.CreateACSAdapter);
              return [3, 4];
            case 4:
              adapterConfig = __assign(
                { chatToken, userDisplayName: "Customer", userId: chatToken.visitorId || "teamsvisitor", sdkURL: urlResolvers_1.default.resolveIC3ClientUrl(chatSDKConfig), sdk: ic3Client },
                options
                // overrides
              );
              try {
                adapter = new window.Microsoft.BotFramework.WebChat.IC3Adapter(adapterConfig);
                adapter.logger = logger;
                scenarioMarker.completeScenario(TelemetryEvent_1.default.CreateIC3Adapter);
                return [2, adapter];
              } catch (error) {
                exceptionThrowers_1.default.throwChatAdapterInitializationFailure(error, scenarioMarker, TelemetryEvent_1.default.CreateIC3Adapter);
              }
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    exports.createIC3Adapter = createIC3Adapter;
    exports.default = {
      createDirectLine,
      createACSAdapter,
      createIC3Adapter
    };
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/utils/platform.js
var require_platform = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/utils/platform.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isReactNative = exports.isNode = exports.isBrowser = void 0;
    exports.isBrowser = function() {
      return typeof window !== "undefined" && typeof window.document !== "undefined";
    };
    exports.isNode = function() {
      return typeof process !== "undefined" && process.versions != null && process.versions.node != null;
    };
    exports.isReactNative = function() {
      return typeof navigator != "undefined" && navigator.product == "ReactNative";
    };
    exports.default = {
      isBrowser: exports.isBrowser,
      isNode: exports.isNode,
      isReactNative: exports.isReactNative
    };
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/validators/SDKConfigValidators.js
var require_SDKConfigValidators = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/validators/SDKConfigValidators.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultChatSDKConfig = void 0;
    var settings_1 = require_settings();
    var defaultChatSDKConfig = {
      dataMasking: {
        disable: false,
        maskingCharacter: "#"
      },
      telemetry: {
        disable: false,
        ariaTelemetryKey: settings_1.ariaTelemetryKey
      },
      persistentChat: {
        disable: true,
        tokenUpdateTime: 216e5
      },
      chatReconnect: {
        disable: true
      }
    };
    exports.defaultChatSDKConfig = defaultChatSDKConfig;
    var validateDataMaskingConfig = function(dataMaskingConfig) {
      if (typeof dataMaskingConfig.disable !== "boolean") {
        dataMaskingConfig.disable = defaultChatSDKConfig.dataMasking.disable;
      }
      if (typeof dataMaskingConfig.maskingCharacter !== "string" || dataMaskingConfig.maskingCharacter.length !== 1) {
        dataMaskingConfig.maskingCharacter = defaultChatSDKConfig.dataMasking.maskingCharacter;
      }
    };
    var validatePersistentChatConfig = function(persistentChatConfig) {
      if (typeof persistentChatConfig.tokenUpdateTime !== "number" || !persistentChatConfig.tokenUpdateTime) {
        persistentChatConfig.tokenUpdateTime = defaultChatSDKConfig.persistentChat.tokenUpdateTime;
      }
    };
    var validateSDKConfig = function(chatSDKConfig) {
      if (chatSDKConfig.dataMasking) {
        validateDataMaskingConfig(chatSDKConfig.dataMasking);
      }
      if (chatSDKConfig.persistentChat) {
        validatePersistentChatConfig(chatSDKConfig.persistentChat);
      }
    };
    exports.default = validateSDKConfig;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/ACSAdapter/AMSFileManager.js
var require_AMSFileManager = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/ACSAdapter/AMSFileManager.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var FilePermission;
    (function(FilePermission2) {
      FilePermission2[FilePermission2["READ"] = 0] = "READ";
      FilePermission2[FilePermission2["WRITE"] = 1] = "WRITE";
    })(FilePermission || (FilePermission = {}));
    var AMSFileManagerEvent;
    (function(AMSFileManagerEvent2) {
      AMSFileManagerEvent2["AMSUpload"] = "AMSUpload";
      AMSFileManagerEvent2["AMSDownload"] = "AMSDownload";
      AMSFileManagerEvent2["GetFileIds"] = "GetFileIds";
      AMSFileManagerEvent2["CreateFileIdProperty"] = "CreateFileIdProperty";
      AMSFileManagerEvent2["GetFileMetadata"] = "GetFileMetadata";
      AMSFileManagerEvent2["CreateFileMetadataProperty"] = "CreateFileMetadataProperty";
    })(AMSFileManagerEvent || (AMSFileManagerEvent = {}));
    var AMSFileManager = (
      /** @class */
      function() {
        function AMSFileManager2(amsClient, logger) {
          if (logger === void 0) {
            logger = null;
          }
          this.logger = logger;
          this.amsClient = amsClient;
        }
        AMSFileManager2.prototype.uploadFiles = function(files) {
          return __awaiter(this, void 0, void 0, function() {
            var _this = this;
            return __generator(this, function(_a) {
              return [2, Promise.all(files.map(function(file) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a2) {
                    return [2, this.uploadFileToAMS(file)];
                  });
                });
              }))];
            });
          });
        };
        AMSFileManager2.prototype.downloadFiles = function(files) {
          return __awaiter(this, void 0, void 0, function() {
            var _this = this;
            return __generator(this, function(_a) {
              return [2, Promise.all(files.map(function(file) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a2) {
                    return [2, this.downloadFileFromAMS(file)];
                  });
                });
              }))];
            });
          });
        };
        AMSFileManager2.prototype.updatePermissions = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              return [2, void 0];
            });
          });
        };
        AMSFileManager2.prototype.getFileIds = function(metadata) {
          var _a, _b, _c;
          if (!metadata) {
            return;
          }
          if (!metadata.amsReferences && !metadata.amsreferences) {
            return;
          }
          (_a = this.logger) === null || _a === void 0 ? void 0 : _a.startScenario(AMSFileManagerEvent.GetFileIds);
          try {
            var result = void 0;
            if (metadata === null || metadata === void 0 ? void 0 : metadata.amsReferences) {
              result = JSON.parse(metadata === null || metadata === void 0 ? void 0 : metadata.amsReferences);
            }
            if (metadata === null || metadata === void 0 ? void 0 : metadata.amsreferences) {
              result = JSON.parse(metadata === null || metadata === void 0 ? void 0 : metadata.amsreferences);
            }
            (_b = this.logger) === null || _b === void 0 ? void 0 : _b.completeScenario(AMSFileManagerEvent.GetFileIds);
            return result;
          } catch (error) {
            var exceptionDetails = {
              metadata: "" + metadata,
              errorObject: "" + error
            };
            (_c = this.logger) === null || _c === void 0 ? void 0 : _c.failScenario(AMSFileManagerEvent.GetFileIds, {
              ExceptionDetails: JSON.stringify(exceptionDetails)
            });
            return void 0;
          }
        };
        AMSFileManager2.prototype.createFileIdProperty = function(fileIds) {
          var _a, _b, _c;
          if (!fileIds) {
            return;
          }
          (_a = this.logger) === null || _a === void 0 ? void 0 : _a.startScenario(AMSFileManagerEvent.CreateFileIdProperty);
          try {
            var result = {
              amsReferences: JSON.stringify(fileIds),
              amsreferences: JSON.stringify(fileIds)
            };
            (_b = this.logger) === null || _b === void 0 ? void 0 : _b.completeScenario(AMSFileManagerEvent.CreateFileIdProperty);
            return result;
          } catch (error) {
            var exceptionDetails = {
              fileIds: "" + fileIds,
              errorObject: "" + error
            };
            (_c = this.logger) === null || _c === void 0 ? void 0 : _c.failScenario(AMSFileManagerEvent.CreateFileIdProperty, {
              ExceptionDetails: JSON.stringify(exceptionDetails)
            });
            return void 0;
          }
        };
        AMSFileManager2.prototype.getFileMetadata = function(metadata) {
          var _a, _b, _c;
          if (!metadata || !metadata.amsMetadata) {
            return;
          }
          (_a = this.logger) === null || _a === void 0 ? void 0 : _a.startScenario(AMSFileManagerEvent.GetFileMetadata);
          try {
            var result = JSON.parse(metadata === null || metadata === void 0 ? void 0 : metadata.amsMetadata);
            (_b = this.logger) === null || _b === void 0 ? void 0 : _b.completeScenario(AMSFileManagerEvent.GetFileMetadata);
            return result;
          } catch (error) {
            var exceptionDetails = {
              metadata: "" + metadata,
              errorObject: "" + error
            };
            (_c = this.logger) === null || _c === void 0 ? void 0 : _c.failScenario(AMSFileManagerEvent.GetFileMetadata, {
              ExceptionDetails: JSON.stringify(exceptionDetails)
            });
            return void 0;
          }
        };
        AMSFileManager2.prototype.createFileMetadataProperty = function(metadata) {
          var _a, _b, _c;
          if (!metadata) {
            return;
          }
          (_a = this.logger) === null || _a === void 0 ? void 0 : _a.startScenario(AMSFileManagerEvent.CreateFileMetadataProperty);
          try {
            var result = {
              amsMetadata: JSON.stringify(metadata)
            };
            (_b = this.logger) === null || _b === void 0 ? void 0 : _b.completeScenario(AMSFileManagerEvent.CreateFileMetadataProperty);
            return result;
          } catch (error) {
            var exceptionDetails = {
              metadata: "" + metadata,
              errorObject: "" + error
            };
            (_c = this.logger) === null || _c === void 0 ? void 0 : _c.failScenario(AMSFileManagerEvent.CreateFileMetadataProperty, {
              ExceptionDetails: JSON.stringify(exceptionDetails)
            });
            return void 0;
          }
        };
        AMSFileManager2.prototype.createBotAttachment = function(metadata) {
          if (!metadata || Object.keys(metadata).length === 0) {
            return null;
          }
          return null;
        };
        AMSFileManager2.prototype.uploadFileToAMS = function(fileToUpload) {
          var _a, _b, _c, _d, _e;
          return __awaiter(this, void 0, void 0, function() {
            var blob, error_1, exceptionDetails, file, response, error_2, exceptionDetails, error_3, exceptionDetails;
            return __generator(this, function(_f) {
              switch (_f.label) {
                case 0:
                  (_a = this.logger) === null || _a === void 0 ? void 0 : _a.startScenario(AMSFileManagerEvent.AMSUpload);
                  if (!(fileToUpload.contentUrl && fileToUpload.name))
                    return [3, 12];
                  blob = void 0;
                  _f.label = 1;
                case 1:
                  _f.trys.push([1, 3, , 4]);
                  return [4, this.amsClient.fetchBlob(fileToUpload.contentUrl)];
                case 2:
                  blob = _f.sent();
                  return [3, 4];
                case 3:
                  error_1 = _f.sent();
                  exceptionDetails = {
                    response: "AMSFetchBlobFailure",
                    errorObject: "" + error_1
                  };
                  (_b = this.logger) === null || _b === void 0 ? void 0 : _b.failScenario(AMSFileManagerEvent.AMSUpload, {
                    ExceptionDetails: JSON.stringify(exceptionDetails)
                  });
                  return [2, void 0];
                case 4:
                  file = new File([blob], fileToUpload.name, { type: fileToUpload.contentType });
                  response = void 0;
                  _f.label = 5;
                case 5:
                  _f.trys.push([5, 7, , 8]);
                  return [4, this.amsClient.createObject(this.amsClient.chatToken.chatId, file)];
                case 6:
                  response = _f.sent();
                  return [3, 8];
                case 7:
                  error_2 = _f.sent();
                  exceptionDetails = {
                    response: "AMSCreateObjectFailure",
                    errorObject: "" + error_2
                  };
                  (_c = this.logger) === null || _c === void 0 ? void 0 : _c.failScenario(AMSFileManagerEvent.AMSUpload, {
                    ExceptionDetails: JSON.stringify(exceptionDetails)
                  });
                  return [2, void 0];
                case 8:
                  _f.trys.push([8, 10, , 11]);
                  return [4, this.amsClient.uploadDocument(response.id, file)];
                case 9:
                  _f.sent();
                  return [3, 11];
                case 10:
                  error_3 = _f.sent();
                  exceptionDetails = {
                    response: "AMSUploadDocumentFailure",
                    errorObject: "" + error_3
                  };
                  (_d = this.logger) === null || _d === void 0 ? void 0 : _d.failScenario(AMSFileManagerEvent.AMSUpload, {
                    ExceptionDetails: JSON.stringify(exceptionDetails)
                  });
                  return [2, void 0];
                case 11:
                  (_e = this.logger) === null || _e === void 0 ? void 0 : _e.completeScenario(AMSFileManagerEvent.AMSUpload);
                  return [2, {
                    fileId: response.id,
                    metadata: {
                      contentType: fileToUpload.contentType,
                      fileName: fileToUpload.name
                    }
                  }];
                case 12:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        AMSFileManager2.prototype.downloadFileFromAMS = function(uploadedFile) {
          var _a, _b, _c, _d;
          return __awaiter(this, void 0, void 0, function() {
            var fileMetadata, response, error_4, exceptionDetails, view_location, blob, error_5, exceptionDetails, file;
            return __generator(this, function(_e) {
              switch (_e.label) {
                case 0:
                  (_a = this.logger) === null || _a === void 0 ? void 0 : _a.startScenario(AMSFileManagerEvent.AMSDownload);
                  if (!(uploadedFile.fileId && uploadedFile.metadata && uploadedFile.metadata.fileName))
                    return [3, 9];
                  fileMetadata = {
                    id: uploadedFile.fileId,
                    type: uploadedFile.metadata.contentType,
                    name: uploadedFile.metadata.fileName
                  };
                  response = void 0;
                  _e.label = 1;
                case 1:
                  _e.trys.push([1, 3, , 4]);
                  return [4, this.amsClient.getViewStatus(fileMetadata)];
                case 2:
                  response = _e.sent();
                  return [3, 4];
                case 3:
                  error_4 = _e.sent();
                  exceptionDetails = {
                    response: "AMSGetViewStatusFailure",
                    errorObject: "" + error_4
                  };
                  (_b = this.logger) === null || _b === void 0 ? void 0 : _b.failScenario(AMSFileManagerEvent.AMSDownload, {
                    ExceptionDetails: JSON.stringify(exceptionDetails)
                  });
                  return [2, void 0];
                case 4:
                  view_location = response.view_location;
                  blob = void 0;
                  _e.label = 5;
                case 5:
                  _e.trys.push([5, 7, , 8]);
                  return [4, this.amsClient.getView(fileMetadata, view_location)];
                case 6:
                  blob = _e.sent();
                  return [3, 8];
                case 7:
                  error_5 = _e.sent();
                  exceptionDetails = {
                    response: "AMSGetViewFailure",
                    errorObject: "" + error_5
                  };
                  (_c = this.logger) === null || _c === void 0 ? void 0 : _c.failScenario(AMSFileManagerEvent.AMSDownload, {
                    ExceptionDetails: JSON.stringify(exceptionDetails)
                  });
                  return [2, void 0];
                case 8:
                  file = new File([blob], uploadedFile.metadata.fileName, { type: uploadedFile.metadata.contentType });
                  (_d = this.logger) === null || _d === void 0 ? void 0 : _d.completeScenario(AMSFileManagerEvent.AMSDownload);
                  return [2, file];
                case 9:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        return AMSFileManager2;
      }()
    );
    exports.default = AMSFileManager;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/core/CallingOptionsOptionSetNumber.js
var require_CallingOptionsOptionSetNumber = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/core/CallingOptionsOptionSetNumber.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CallingOptionsOptionSetNumber;
    (function(CallingOptionsOptionSetNumber2) {
      CallingOptionsOptionSetNumber2[CallingOptionsOptionSetNumber2["NoCalling"] = 19235e4] = "NoCalling";
      CallingOptionsOptionSetNumber2[CallingOptionsOptionSetNumber2["VideoAndVoiceCalling"] = 192350001] = "VideoAndVoiceCalling";
      CallingOptionsOptionSetNumber2[CallingOptionsOptionSetNumber2["VoiceOnly"] = 192350002] = "VoiceOnly";
    })(CallingOptionsOptionSetNumber || (CallingOptionsOptionSetNumber = {}));
    exports.default = CallingOptionsOptionSetNumber;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/core/ConversationMode.js
var require_ConversationMode = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/core/ConversationMode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ConversationMode;
    (function(ConversationMode2) {
      ConversationMode2[ConversationMode2["LiveChat"] = 19235e4] = "LiveChat";
      ConversationMode2[ConversationMode2["PersistentChat"] = 192350001] = "PersistentChat";
    })(ConversationMode || (ConversationMode = {}));
    exports.default = ConversationMode;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/core/LiveWorkItemState.js
var require_LiveWorkItemState = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/core/LiveWorkItemState.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var LiveWorkItemState;
    (function(LiveWorkItemState2) {
      LiveWorkItemState2["Active"] = "Active";
      LiveWorkItemState2["Closed"] = "Closed";
      LiveWorkItemState2["Open"] = "Open";
      LiveWorkItemState2["Waiting"] = "Waiting";
      LiveWorkItemState2["WrapUp"] = "WrapUp";
    })(LiveWorkItemState || (LiveWorkItemState = {}));
    exports.default = LiveWorkItemState;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/core/OmnichannelErrorCodes.js
var require_OmnichannelErrorCodes = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/core/OmnichannelErrorCodes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var OmnichannelErrorCodes;
    (function(OmnichannelErrorCodes2) {
      OmnichannelErrorCodes2[OmnichannelErrorCodes2["WidgetUseOutsideOperatingHour"] = 705] = "WidgetUseOutsideOperatingHour";
    })(OmnichannelErrorCodes || (OmnichannelErrorCodes = {}));
    exports.default = OmnichannelErrorCodes;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/common/Enums.js
var require_Enums2 = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/common/Enums.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AWTPropertyType;
    (function(AWTPropertyType2) {
      AWTPropertyType2[AWTPropertyType2["Unspecified"] = 0] = "Unspecified";
      AWTPropertyType2[AWTPropertyType2["String"] = 1] = "String";
      AWTPropertyType2[AWTPropertyType2["Int64"] = 2] = "Int64";
      AWTPropertyType2[AWTPropertyType2["Double"] = 3] = "Double";
      AWTPropertyType2[AWTPropertyType2["Boolean"] = 4] = "Boolean";
      AWTPropertyType2[AWTPropertyType2["Date"] = 5] = "Date";
    })(AWTPropertyType = exports.AWTPropertyType || (exports.AWTPropertyType = {}));
    var AWTPiiKind;
    (function(AWTPiiKind2) {
      AWTPiiKind2[AWTPiiKind2["NotSet"] = 0] = "NotSet";
      AWTPiiKind2[AWTPiiKind2["DistinguishedName"] = 1] = "DistinguishedName";
      AWTPiiKind2[AWTPiiKind2["GenericData"] = 2] = "GenericData";
      AWTPiiKind2[AWTPiiKind2["IPV4Address"] = 3] = "IPV4Address";
      AWTPiiKind2[AWTPiiKind2["IPv6Address"] = 4] = "IPv6Address";
      AWTPiiKind2[AWTPiiKind2["MailSubject"] = 5] = "MailSubject";
      AWTPiiKind2[AWTPiiKind2["PhoneNumber"] = 6] = "PhoneNumber";
      AWTPiiKind2[AWTPiiKind2["QueryString"] = 7] = "QueryString";
      AWTPiiKind2[AWTPiiKind2["SipAddress"] = 8] = "SipAddress";
      AWTPiiKind2[AWTPiiKind2["SmtpAddress"] = 9] = "SmtpAddress";
      AWTPiiKind2[AWTPiiKind2["Identity"] = 10] = "Identity";
      AWTPiiKind2[AWTPiiKind2["Uri"] = 11] = "Uri";
      AWTPiiKind2[AWTPiiKind2["Fqdn"] = 12] = "Fqdn";
      AWTPiiKind2[AWTPiiKind2["IPV4AddressLegacy"] = 13] = "IPV4AddressLegacy";
    })(AWTPiiKind = exports.AWTPiiKind || (exports.AWTPiiKind = {}));
    var AWTCustomerContentKind;
    (function(AWTCustomerContentKind2) {
      AWTCustomerContentKind2[AWTCustomerContentKind2["NotSet"] = 0] = "NotSet";
      AWTCustomerContentKind2[AWTCustomerContentKind2["GenericContent"] = 1] = "GenericContent";
    })(AWTCustomerContentKind = exports.AWTCustomerContentKind || (exports.AWTCustomerContentKind = {}));
    var AWTEventPriority;
    (function(AWTEventPriority2) {
      AWTEventPriority2[AWTEventPriority2["Low"] = 1] = "Low";
      AWTEventPriority2[AWTEventPriority2["Normal"] = 2] = "Normal";
      AWTEventPriority2[AWTEventPriority2["High"] = 3] = "High";
      AWTEventPriority2[AWTEventPriority2["Immediate_sync"] = 5] = "Immediate_sync";
    })(AWTEventPriority = exports.AWTEventPriority || (exports.AWTEventPriority = {}));
    var AWTEventsDroppedReason;
    (function(AWTEventsDroppedReason2) {
      AWTEventsDroppedReason2[AWTEventsDroppedReason2["NonRetryableStatus"] = 1] = "NonRetryableStatus";
      AWTEventsDroppedReason2[AWTEventsDroppedReason2["QueueFull"] = 3] = "QueueFull";
      AWTEventsDroppedReason2[AWTEventsDroppedReason2["MaxRetryLimit"] = 4] = "MaxRetryLimit";
    })(AWTEventsDroppedReason = exports.AWTEventsDroppedReason || (exports.AWTEventsDroppedReason = {}));
    var AWTEventsRejectedReason;
    (function(AWTEventsRejectedReason2) {
      AWTEventsRejectedReason2[AWTEventsRejectedReason2["InvalidEvent"] = 1] = "InvalidEvent";
      AWTEventsRejectedReason2[AWTEventsRejectedReason2["SizeLimitExceeded"] = 2] = "SizeLimitExceeded";
      AWTEventsRejectedReason2[AWTEventsRejectedReason2["KillSwitch"] = 3] = "KillSwitch";
    })(AWTEventsRejectedReason = exports.AWTEventsRejectedReason || (exports.AWTEventsRejectedReason = {}));
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/webjs/Enums.js
var require_Enums3 = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/webjs/Enums.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AWTUserIdType;
    (function(AWTUserIdType2) {
      AWTUserIdType2[AWTUserIdType2["Unknown"] = 0] = "Unknown";
      AWTUserIdType2[AWTUserIdType2["MSACID"] = 1] = "MSACID";
      AWTUserIdType2[AWTUserIdType2["MSAPUID"] = 2] = "MSAPUID";
      AWTUserIdType2[AWTUserIdType2["ANID"] = 3] = "ANID";
      AWTUserIdType2[AWTUserIdType2["OrgIdCID"] = 4] = "OrgIdCID";
      AWTUserIdType2[AWTUserIdType2["OrgIdPUID"] = 5] = "OrgIdPUID";
      AWTUserIdType2[AWTUserIdType2["UserObjectId"] = 6] = "UserObjectId";
      AWTUserIdType2[AWTUserIdType2["Skype"] = 7] = "Skype";
      AWTUserIdType2[AWTUserIdType2["Yammer"] = 8] = "Yammer";
      AWTUserIdType2[AWTUserIdType2["EmailAddress"] = 9] = "EmailAddress";
      AWTUserIdType2[AWTUserIdType2["PhoneNumber"] = 10] = "PhoneNumber";
      AWTUserIdType2[AWTUserIdType2["SipAddress"] = 11] = "SipAddress";
      AWTUserIdType2[AWTUserIdType2["MUID"] = 12] = "MUID";
    })(AWTUserIdType = exports.AWTUserIdType || (exports.AWTUserIdType = {}));
    var AWTSessionState;
    (function(AWTSessionState2) {
      AWTSessionState2[AWTSessionState2["Started"] = 0] = "Started";
      AWTSessionState2[AWTSessionState2["Ended"] = 1] = "Ended";
    })(AWTSessionState = exports.AWTSessionState || (exports.AWTSessionState = {}));
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/webjs/DataModels.js
var require_DataModels = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/webjs/DataModels.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AWT_REAL_TIME = "REAL_TIME";
    exports.AWT_NEAR_REAL_TIME = "NEAR_REAL_TIME";
    exports.AWT_BEST_EFFORT = "BEST_EFFORT";
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/bond/microsoft.bond.primitives.js
var require_microsoft_bond_primitives = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/bond/microsoft.bond.primitives.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Int64 = (
      /** @class */
      function() {
        function Int642(numberStr) {
          this.low = 0;
          this.high = 0;
          this.low = parseInt(numberStr, 10);
          if (this.low < 0) {
            this.high = -1;
          }
        }
        Int642.prototype._Equals = function(numberStr) {
          var tmp = new Int642(numberStr);
          return this.low === tmp.low && this.high === tmp.high;
        };
        return Int642;
      }()
    );
    exports.Int64 = Int64;
    var UInt64 = (
      /** @class */
      function() {
        function UInt642(numberStr) {
          this.low = 0;
          this.high = 0;
          this.low = parseInt(numberStr, 10);
        }
        UInt642.prototype._Equals = function(numberStr) {
          var tmp = new UInt642(numberStr);
          return this.low === tmp.low && this.high === tmp.high;
        };
        return UInt642;
      }()
    );
    exports.UInt64 = UInt64;
    var Number = (
      /** @class */
      function() {
        function Number2() {
        }
        Number2._ToByte = function(value) {
          return this._ToUInt8(value);
        };
        Number2._ToUInt8 = function(value) {
          return value & 255;
        };
        Number2._ToInt32 = function(value) {
          var signMask = value & 2147483648;
          return value & 2147483647 | signMask;
        };
        Number2._ToUInt32 = function(value) {
          return value & 4294967295;
        };
        return Number2;
      }()
    );
    exports.Number = Number;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/common/Utils.js
var require_Utils = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/common/Utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var microsoft_bond_primitives_1 = require_microsoft_bond_primitives();
    var Enums_1 = require_Enums2();
    var GuidRegex = /[xy]/g;
    var MSTillUnixEpoch = 621355968e5;
    var MSToTicksMultiplier = 1e4;
    var NullValue = null;
    exports.EventNameAndTypeRegex = /^[a-zA-Z]([a-zA-Z0-9]|_){2,98}[a-zA-Z0-9]$/;
    exports.EventNameDotRegex = /\./g;
    exports.PropertyNameRegex = /^[a-zA-Z](([a-zA-Z0-9|_|\.]){0,98}[a-zA-Z0-9])?$/;
    exports.StatsApiKey = "a387cfcf60114a43a7699f9fbb49289e-9bceb9fe-1c06-460f-96c5-6a0b247358bc-7238";
    var beaconsSupported = NullValue;
    var uInt8ArraySupported = NullValue;
    var useXDR = NullValue;
    function numberToBondInt64(value) {
      var bond_value = new microsoft_bond_primitives_1.Int64("0");
      bond_value.low = value & 4294967295;
      bond_value.high = Math.floor(value / 4294967296);
      return bond_value;
    }
    exports.numberToBondInt64 = numberToBondInt64;
    function newGuid() {
      return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(GuidRegex, function(c) {
        var r = Math.random() * 16 | 0, v = c === "x" ? r : r & 3 | 8;
        return v.toString(16);
      });
    }
    exports.newGuid = newGuid;
    function isString(value) {
      return typeof value === "string";
    }
    exports.isString = isString;
    function isNumber(value) {
      return typeof value === "number";
    }
    exports.isNumber = isNumber;
    function isBoolean(value) {
      return typeof value === "boolean";
    }
    exports.isBoolean = isBoolean;
    function isDate(value) {
      return value instanceof Date;
    }
    exports.isDate = isDate;
    function msToTicks(timeInMs) {
      return (timeInMs + MSTillUnixEpoch) * MSToTicksMultiplier;
    }
    exports.msToTicks = msToTicks;
    function getTenantId(apiKey) {
      var indexTenantId = apiKey.indexOf("-");
      if (indexTenantId > -1) {
        return apiKey.substring(0, indexTenantId);
      }
      return "";
    }
    exports.getTenantId = getTenantId;
    function isBeaconsSupported() {
      if (beaconsSupported === NullValue) {
        beaconsSupported = typeof navigator !== "undefined" && Boolean(navigator.sendBeacon);
      }
      return beaconsSupported;
    }
    exports.isBeaconsSupported = isBeaconsSupported;
    function isUint8ArrayAvailable() {
      if (uInt8ArraySupported === NullValue) {
        uInt8ArraySupported = typeof Uint8Array !== "undefined" && !isSafariOrFirefox() && !isReactNative();
      }
      return uInt8ArraySupported;
    }
    exports.isUint8ArrayAvailable = isUint8ArrayAvailable;
    function isPriority(value) {
      if (isNumber(value) && (value >= 1 && value <= 3 || value === 5)) {
        return true;
      }
      return false;
    }
    exports.isPriority = isPriority;
    function sanitizeProperty(name, property) {
      if (!exports.PropertyNameRegex.test(name) || isNotDefined(property)) {
        return NullValue;
      }
      if (isNotDefined(property.value)) {
        property = { value: property, type: Enums_1.AWTPropertyType.Unspecified };
      }
      property.type = sanitizePropertyType(property.value, property.type);
      if (!property.type) {
        return NullValue;
      }
      if (isDate(property.value)) {
        property.value = msToTicks(property.value.getTime());
      }
      if (property.pii > 0 && property.cc > 0) {
        return NullValue;
      }
      if (property.pii) {
        return isPii(property.pii) ? property : NullValue;
      }
      if (property.cc) {
        return isCustomerContent(property.cc) ? property : NullValue;
      }
      return property;
    }
    exports.sanitizeProperty = sanitizeProperty;
    function getISOString(date) {
      return date.getUTCFullYear() + "-" + twoDigit(date.getUTCMonth() + 1) + "-" + twoDigit(date.getUTCDate()) + "T" + twoDigit(date.getUTCHours()) + ":" + twoDigit(date.getUTCMinutes()) + ":" + twoDigit(date.getUTCSeconds()) + "." + threeDigit(date.getUTCMilliseconds()) + "Z";
    }
    exports.getISOString = getISOString;
    function useXDomainRequest() {
      if (useXDR === NullValue) {
        var conn = new XMLHttpRequest();
        if (typeof conn.withCredentials === "undefined" && typeof XDomainRequest !== "undefined") {
          useXDR = true;
        } else {
          useXDR = false;
        }
      }
      return useXDR;
    }
    exports.useXDomainRequest = useXDomainRequest;
    function useFetchRequest() {
      return isReactNative() || isServiceWorkerGlobalScope();
    }
    exports.useFetchRequest = useFetchRequest;
    function isReactNative() {
      if (typeof navigator !== "undefined" && navigator.product) {
        return navigator.product === "ReactNative";
      }
      return false;
    }
    exports.isReactNative = isReactNative;
    function isServiceWorkerGlobalScope() {
      if (typeof self === "object") {
        return self.constructor.name === "ServiceWorkerGlobalScope";
      }
      return false;
    }
    exports.isServiceWorkerGlobalScope = isServiceWorkerGlobalScope;
    function twoDigit(n) {
      return n < 10 ? "0" + n : n.toString();
    }
    function threeDigit(n) {
      if (n < 10) {
        return "00" + n;
      } else if (n < 100) {
        return "0" + n;
      }
      return n.toString();
    }
    function sanitizePropertyType(value, type) {
      type = !isPropertyType(type) ? Enums_1.AWTPropertyType.Unspecified : type;
      switch (type) {
        case Enums_1.AWTPropertyType.Unspecified:
          return getCorrectType(value);
        case Enums_1.AWTPropertyType.String:
          return isString(value) ? type : NullValue;
        case Enums_1.AWTPropertyType.Boolean:
          return isBoolean(value) ? type : NullValue;
        case Enums_1.AWTPropertyType.Date:
          return isDate(value) && value.getTime() !== NaN ? type : NullValue;
        case Enums_1.AWTPropertyType.Int64:
          return isNumber(value) && value % 1 === 0 ? type : NullValue;
        case Enums_1.AWTPropertyType.Double:
          return isNumber(value) ? type : NullValue;
      }
      return NullValue;
    }
    function getCorrectType(value) {
      switch (typeof value) {
        case "string":
          return Enums_1.AWTPropertyType.String;
        case "boolean":
          return Enums_1.AWTPropertyType.Boolean;
        case "number":
          return Enums_1.AWTPropertyType.Double;
        case "object":
          return isDate(value) ? Enums_1.AWTPropertyType.Date : NullValue;
      }
      return NullValue;
    }
    function isPii(value) {
      if (isNumber(value) && value >= 0 && value <= 13) {
        return true;
      }
      return false;
    }
    function isCustomerContent(value) {
      if (isNumber(value) && value >= 0 && value <= 1) {
        return true;
      }
      return false;
    }
    function isPropertyType(value) {
      if (isNumber(value) && value >= 0 && value <= 4) {
        return true;
      }
      return false;
    }
    function isSafariOrFirefox() {
      if (typeof navigator !== "undefined" && navigator.userAgent) {
        var ua = navigator.userAgent.toLowerCase();
        if ((ua.indexOf("safari") >= 0 || ua.indexOf("firefox") >= 0) && ua.indexOf("chrome") < 0) {
          return true;
        }
      }
      return false;
    }
    function isNotDefined(value) {
      return value === void 0 || value === NullValue || value === "";
    }
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/webjs/AWTEventProperties.js
var require_AWTEventProperties = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/webjs/AWTEventProperties.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Utils = require_Utils();
    var Enums_1 = require_Enums2();
    var AWTEventProperties = (
      /** @class */
      function() {
        function AWTEventProperties2(name) {
          this._event = { name: "", properties: {} };
          if (name) {
            this.setName(name);
          }
        }
        AWTEventProperties2.prototype.setName = function(name) {
          this._event.name = name;
        };
        AWTEventProperties2.prototype.getName = function() {
          return this._event.name;
        };
        AWTEventProperties2.prototype.setType = function(type) {
          this._event.type = type;
        };
        AWTEventProperties2.prototype.getType = function() {
          return this._event.type;
        };
        AWTEventProperties2.prototype.setTimestamp = function(timestampInEpochMillis) {
          this._event.timestamp = timestampInEpochMillis;
        };
        AWTEventProperties2.prototype.getTimestamp = function() {
          return this._event.timestamp;
        };
        AWTEventProperties2.prototype.setEventPriority = function(priority) {
          this._event.priority = priority;
        };
        AWTEventProperties2.prototype.getEventPriority = function() {
          return this._event.priority;
        };
        AWTEventProperties2.prototype.setProperty = function(name, value, type) {
          if (type === void 0) {
            type = Enums_1.AWTPropertyType.Unspecified;
          }
          var property = { value, type, pii: Enums_1.AWTPiiKind.NotSet, cc: Enums_1.AWTCustomerContentKind.NotSet };
          property = Utils.sanitizeProperty(name, property);
          if (property === null) {
            delete this._event.properties[name];
            return;
          }
          this._event.properties[name] = property;
        };
        AWTEventProperties2.prototype.setPropertyWithPii = function(name, value, pii, type) {
          if (type === void 0) {
            type = Enums_1.AWTPropertyType.Unspecified;
          }
          var property = { value, type, pii, cc: Enums_1.AWTCustomerContentKind.NotSet };
          property = Utils.sanitizeProperty(name, property);
          if (property === null) {
            delete this._event.properties[name];
            return;
          }
          this._event.properties[name] = property;
        };
        AWTEventProperties2.prototype.setPropertyWithCustomerContent = function(name, value, customerContent, type) {
          if (type === void 0) {
            type = Enums_1.AWTPropertyType.Unspecified;
          }
          var property = { value, type, pii: Enums_1.AWTPiiKind.NotSet, cc: customerContent };
          property = Utils.sanitizeProperty(name, property);
          if (property === null) {
            delete this._event.properties[name];
            return;
          }
          this._event.properties[name] = property;
        };
        AWTEventProperties2.prototype.getPropertyMap = function() {
          return this._event.properties;
        };
        AWTEventProperties2.prototype.getEvent = function() {
          return this._event;
        };
        return AWTEventProperties2;
      }()
    );
    exports.default = AWTEventProperties;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/common/AWTNotificationManager.js
var require_AWTNotificationManager = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/common/AWTNotificationManager.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AWTNotificationManager = (
      /** @class */
      function() {
        function AWTNotificationManager2() {
        }
        AWTNotificationManager2.addNotificationListener = function(listener) {
          this.listeners.push(listener);
        };
        AWTNotificationManager2.removeNotificationListener = function(listener) {
          var index = this.listeners.indexOf(listener);
          while (index > -1) {
            this.listeners.splice(index, 1);
            index = this.listeners.indexOf(listener);
          }
        };
        AWTNotificationManager2.eventsSent = function(events) {
          var _this = this;
          var _loop_1 = function(i2) {
            if (this_1.listeners[i2].eventsSent) {
              setTimeout(function() {
                return _this.listeners[i2].eventsSent(events);
              }, 0);
            }
          };
          var this_1 = this;
          for (var i = 0; i < this.listeners.length; ++i) {
            _loop_1(i);
          }
        };
        AWTNotificationManager2.eventsDropped = function(events, reason) {
          var _this = this;
          var _loop_2 = function(i2) {
            if (this_2.listeners[i2].eventsDropped) {
              setTimeout(function() {
                return _this.listeners[i2].eventsDropped(events, reason);
              }, 0);
            }
          };
          var this_2 = this;
          for (var i = 0; i < this.listeners.length; ++i) {
            _loop_2(i);
          }
        };
        AWTNotificationManager2.eventsRetrying = function(events) {
          var _this = this;
          var _loop_3 = function(i2) {
            if (this_3.listeners[i2].eventsRetrying) {
              setTimeout(function() {
                return _this.listeners[i2].eventsRetrying(events);
              }, 0);
            }
          };
          var this_3 = this;
          for (var i = 0; i < this.listeners.length; ++i) {
            _loop_3(i);
          }
        };
        AWTNotificationManager2.eventsRejected = function(events, reason) {
          var _this = this;
          var _loop_4 = function(i2) {
            if (this_4.listeners[i2].eventsRejected) {
              setTimeout(function() {
                return _this.listeners[i2].eventsRejected(events, reason);
              }, 0);
            }
          };
          var this_4 = this;
          for (var i = 0; i < this.listeners.length; ++i) {
            _loop_4(i);
          }
        };
        AWTNotificationManager2.listeners = [];
        return AWTNotificationManager2;
      }()
    );
    exports.default = AWTNotificationManager;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/common/AWTStatsManager.js
var require_AWTStatsManager = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/common/AWTStatsManager.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Utils = require_Utils();
    var AWTNotificationManager_1 = require_AWTNotificationManager();
    var Enums_1 = require_Enums2();
    var StatsTimer = 6e4;
    var AWTStatsManager = (
      /** @class */
      function() {
        function AWTStatsManager2() {
        }
        AWTStatsManager2.initialize = function(sendStats) {
          var _this = this;
          this._sendStats = sendStats;
          this._isInitalized = true;
          AWTNotificationManager_1.default.addNotificationListener({
            eventsSent: function(events) {
              _this._addStat("records_sent_count", events.length, events[0].apiKey);
            },
            eventsDropped: function(events, reason) {
              switch (reason) {
                case Enums_1.AWTEventsDroppedReason.NonRetryableStatus:
                  _this._addStat("d_send_fail", events.length, events[0].apiKey);
                  _this._addStat("records_dropped_count", events.length, events[0].apiKey);
                  break;
                case Enums_1.AWTEventsDroppedReason.MaxRetryLimit:
                  _this._addStat("d_retry_limit", events.length, events[0].apiKey);
                  _this._addStat("records_dropped_count", events.length, events[0].apiKey);
                  break;
                case Enums_1.AWTEventsDroppedReason.QueueFull:
                  _this._addStat("d_queue_full", events.length, events[0].apiKey);
                  break;
              }
            },
            eventsRejected: function(events, reason) {
              switch (reason) {
                case Enums_1.AWTEventsRejectedReason.InvalidEvent:
                  _this._addStat("r_inv", events.length, events[0].apiKey);
                  break;
                case Enums_1.AWTEventsRejectedReason.KillSwitch:
                  _this._addStat("r_kl", events.length, events[0].apiKey);
                  break;
                case Enums_1.AWTEventsRejectedReason.SizeLimitExceeded:
                  _this._addStat("r_size", events.length, events[0].apiKey);
                  break;
              }
              _this._addStat("r_count", events.length, events[0].apiKey);
            },
            eventsRetrying: null
          });
          setTimeout(function() {
            return _this.flush();
          }, StatsTimer);
        };
        AWTStatsManager2.teardown = function() {
          if (this._isInitalized) {
            this.flush();
            this._isInitalized = false;
          }
        };
        AWTStatsManager2.eventReceived = function(apiKey) {
          AWTStatsManager2._addStat("records_received_count", 1, apiKey);
        };
        AWTStatsManager2.flush = function() {
          var _this = this;
          if (this._isInitalized) {
            for (var tenantId in this._stats) {
              if (this._stats.hasOwnProperty(tenantId)) {
                this._sendStats(this._stats[tenantId], tenantId);
              }
            }
            this._stats = {};
            setTimeout(function() {
              return _this.flush();
            }, StatsTimer);
          }
        };
        AWTStatsManager2._addStat = function(statName, value, apiKey) {
          if (this._isInitalized && apiKey !== Utils.StatsApiKey) {
            var tenantId = Utils.getTenantId(apiKey);
            if (!this._stats[tenantId]) {
              this._stats[tenantId] = {};
            }
            if (!this._stats[tenantId][statName]) {
              this._stats[tenantId][statName] = value;
            } else {
              this._stats[tenantId][statName] = this._stats[tenantId][statName] + value;
            }
          }
        };
        AWTStatsManager2._isInitalized = false;
        AWTStatsManager2._stats = {};
        return AWTStatsManager2;
      }()
    );
    exports.default = AWTStatsManager;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/bond/bond_const.js
var require_bond_const = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/bond/bond_const.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var _BondDataType;
    (function(_BondDataType2) {
      _BondDataType2[_BondDataType2["_BT_STOP"] = 0] = "_BT_STOP";
      _BondDataType2[_BondDataType2["_BT_STOP_BASE"] = 1] = "_BT_STOP_BASE";
      _BondDataType2[_BondDataType2["_BT_BOOL"] = 2] = "_BT_BOOL";
      _BondDataType2[_BondDataType2["_BT_DOUBLE"] = 8] = "_BT_DOUBLE";
      _BondDataType2[_BondDataType2["_BT_STRING"] = 9] = "_BT_STRING";
      _BondDataType2[_BondDataType2["_BT_STRUCT"] = 10] = "_BT_STRUCT";
      _BondDataType2[_BondDataType2["_BT_LIST"] = 11] = "_BT_LIST";
      _BondDataType2[_BondDataType2["_BT_MAP"] = 13] = "_BT_MAP";
      _BondDataType2[_BondDataType2["_BT_INT32"] = 16] = "_BT_INT32";
      _BondDataType2[_BondDataType2["_BT_INT64"] = 17] = "_BT_INT64";
    })(_BondDataType = exports._BondDataType || (exports._BondDataType = {}));
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/bond/microsoft.bond.floatutils.js
var require_microsoft_bond_floatutils = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/bond/microsoft.bond.floatutils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var FloatUtils = (
      /** @class */
      function() {
        function FloatUtils2() {
        }
        FloatUtils2._ConvertNumberToArray = function(num, isDouble) {
          if (!num) {
            return isDouble ? this._doubleZero : this._floatZero;
          }
          var exponentBits = isDouble ? 11 : 8;
          var precisionBits = isDouble ? 52 : 23;
          var bias = (1 << exponentBits - 1) - 1;
          var minExponent = 1 - bias;
          var maxExponent = bias;
          var sign = num < 0 ? 1 : 0;
          num = Math.abs(num);
          var intPart = Math.floor(num);
          var floatPart = num - intPart;
          var len = 2 * (bias + 2) + precisionBits;
          var buffer = new Array(len);
          var i = 0;
          while (i < len) {
            buffer[i++] = 0;
          }
          i = bias + 2;
          while (i && intPart) {
            buffer[--i] = intPart % 2;
            intPart = Math.floor(intPart / 2);
          }
          i = bias + 1;
          while (i < len - 1 && floatPart > 0) {
            floatPart *= 2;
            if (floatPart >= 1) {
              buffer[++i] = 1;
              --floatPart;
            } else {
              buffer[++i] = 0;
            }
          }
          var firstBit = 0;
          while (firstBit < len && !buffer[firstBit]) {
            firstBit++;
          }
          var exponent = bias + 1 - firstBit;
          var lastBit = firstBit + precisionBits;
          if (buffer[lastBit + 1]) {
            for (i = lastBit; i > firstBit; --i) {
              buffer[i] = 1 - buffer[i];
              if (buffer) {
                break;
              }
            }
            if (i === firstBit) {
              ++exponent;
            }
          }
          if (exponent > maxExponent || intPart) {
            if (sign) {
              return isDouble ? this._doubleNegInifinity : this._floatNegInifinity;
            } else {
              return isDouble ? this._doubleInifinity : this._floatInifinity;
            }
          } else if (exponent < minExponent) {
            return isDouble ? this._doubleZero : this._floatZero;
          }
          if (isDouble) {
            var high = 0;
            for (i = 0; i < 20; ++i) {
              high = high << 1 | buffer[++firstBit];
            }
            var low = 0;
            for (; i < 52; ++i) {
              low = low << 1 | buffer[++firstBit];
            }
            high |= exponent + bias << 20;
            high = sign << 31 | high & 2147483647;
            var resArray = [
              low & 255,
              low >> 8 & 255,
              low >> 16 & 255,
              low >>> 24,
              high & 255,
              high >> 8 & 255,
              high >> 16 & 255,
              high >>> 24
            ];
            return resArray;
          } else {
            var result = 0;
            for (i = 0; i < 23; ++i) {
              result = result << 1 | buffer[++firstBit];
            }
            result |= exponent + bias << 23;
            result = sign << 31 | result & 2147483647;
            var resArray = [result & 255, result >> 8 & 255, result >> 16 & 255, result >>> 24];
            return resArray;
          }
        };
        FloatUtils2._floatZero = [0, 0, 0, 0];
        FloatUtils2._doubleZero = [0, 0, 0, 0, 0, 0, 0, 0];
        FloatUtils2._floatInifinity = [0, 0, 128, 127];
        FloatUtils2._floatNegInifinity = [0, 0, 128, 255];
        FloatUtils2._doubleInifinity = [0, 0, 0, 0, 0, 0, 240, 127];
        FloatUtils2._doubleNegInifinity = [0, 0, 0, 0, 0, 0, 240, 255];
        return FloatUtils2;
      }()
    );
    exports.FloatUtils = FloatUtils;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/bond/microsoft.bond.utils.js
var require_microsoft_bond_utils = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/bond/microsoft.bond.utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var BrowserChecker = (
      /** @class */
      function() {
        function BrowserChecker2() {
        }
        BrowserChecker2._IsDataViewSupport = function() {
          return typeof ArrayBuffer !== "undefined" && typeof DataView !== "undefined";
        };
        return BrowserChecker2;
      }()
    );
    exports.BrowserChecker = BrowserChecker;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/bond/microsoft.bond.encoding.js
var require_microsoft_bond_encoding = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/bond/microsoft.bond.encoding.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var microsoft_bond_primitives_1 = require_microsoft_bond_primitives();
    var microsoft_bond_floatutils_1 = require_microsoft_bond_floatutils();
    var microsoft_bond_utils_1 = require_microsoft_bond_utils();
    function _Utf8_GetBytes(value) {
      var array = [];
      for (var i = 0; i < value.length; ++i) {
        var char = value.charCodeAt(i);
        if (char < 128) {
          array.push(char);
        } else if (char < 2048) {
          array.push(192 | char >> 6, 128 | char & 63);
        } else if (char < 55296 || char >= 57344) {
          array.push(224 | char >> 12, 128 | char >> 6 & 63, 128 | char & 63);
        } else {
          char = 65536 + ((char & 1023) << 10 | value.charCodeAt(++i) & 1023);
          array.push(240 | char >> 18, 128 | char >> 12 & 63, 128 | char >> 6 & 63, 128 | char & 63);
        }
      }
      return array;
    }
    exports._Utf8_GetBytes = _Utf8_GetBytes;
    function _Base64_GetString(inArray) {
      var lookup = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      var output = [];
      var paddingBytes = inArray.length % 3;
      var toBase64 = function(num) {
        return [
          lookup.charAt(num >> 18 & 63),
          lookup.charAt(num >> 12 & 63),
          lookup.charAt(num >> 6 & 63),
          lookup.charAt(num & 63)
        ].join("");
      };
      for (var i = 0, length_1 = inArray.length - paddingBytes; i < length_1; i += 3) {
        var temp = (inArray[i] << 16) + (inArray[i + 1] << 8) + inArray[i + 2];
        output.push(toBase64(temp));
      }
      switch (paddingBytes) {
        case 1:
          var temp = inArray[inArray.length - 1];
          output.push(lookup.charAt(temp >> 2));
          output.push(lookup.charAt(temp << 4 & 63));
          output.push("==");
          break;
        case 2:
          var temp2 = (inArray[inArray.length - 2] << 8) + inArray[inArray.length - 1];
          output.push(lookup.charAt(temp2 >> 10));
          output.push(lookup.charAt(temp2 >> 4 & 63));
          output.push(lookup.charAt(temp2 << 2 & 63));
          output.push("=");
          break;
      }
      return output.join("");
    }
    exports._Base64_GetString = _Base64_GetString;
    function _Varint_GetBytes(value) {
      var array = [];
      while (value & 4294967168) {
        array.push(value & 127 | 128);
        value >>>= 7;
      }
      array.push(value & 127);
      return array;
    }
    exports._Varint_GetBytes = _Varint_GetBytes;
    function _Varint64_GetBytes(value) {
      var low = value.low;
      var high = value.high;
      var array = [];
      while (high || 4294967168 & low) {
        array.push(low & 127 | 128);
        low = (high & 127) << 25 | low >>> 7;
        high >>>= 7;
      }
      array.push(low & 127);
      return array;
    }
    exports._Varint64_GetBytes = _Varint64_GetBytes;
    function _Double_GetBytes(value) {
      if (microsoft_bond_utils_1.BrowserChecker._IsDataViewSupport()) {
        var view = new DataView(new ArrayBuffer(8));
        view.setFloat64(
          0,
          value,
          true
          /*littleEndian*/
        );
        var array = [];
        for (var i = 0; i < 8; ++i) {
          array.push(view.getUint8(i));
        }
        return array;
      } else {
        return microsoft_bond_floatutils_1.FloatUtils._ConvertNumberToArray(
          value,
          true
          /*isDouble*/
        );
      }
    }
    exports._Double_GetBytes = _Double_GetBytes;
    function _Zigzag_EncodeZigzag32(value) {
      value = microsoft_bond_primitives_1.Number._ToInt32(value);
      return value << 1 ^ value >> 4 * 8 - 1;
    }
    exports._Zigzag_EncodeZigzag32 = _Zigzag_EncodeZigzag32;
    function _Zigzag_EncodeZigzag64(value) {
      var low = value.low;
      var high = value.high;
      var tmpH = high << 1 | low >>> 31;
      var tmpL = low << 1;
      if (high & 2147483648) {
        tmpH = ~tmpH;
        tmpL = ~tmpL;
      }
      var res = new microsoft_bond_primitives_1.UInt64("0");
      res.low = tmpL;
      res.high = tmpH;
      return res;
    }
    exports._Zigzag_EncodeZigzag64 = _Zigzag_EncodeZigzag64;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/bond/microsoft.bond.io.js
var require_microsoft_bond_io = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/bond/microsoft.bond.io.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var microsoft_bond_primitives_1 = require_microsoft_bond_primitives();
    var MemoryStream = (
      /** @class */
      function() {
        function MemoryStream2() {
          this._buffer = [];
        }
        MemoryStream2.prototype._WriteByte = function(byte) {
          this._buffer.push(microsoft_bond_primitives_1.Number._ToByte(byte));
        };
        MemoryStream2.prototype._Write = function(buffer, offset, count) {
          while (count--) {
            this._WriteByte(buffer[offset++]);
          }
        };
        MemoryStream2.prototype._GetBuffer = function() {
          return this._buffer;
        };
        return MemoryStream2;
      }()
    );
    exports.MemoryStream = MemoryStream;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/bond/microsoft.bond.js
var require_microsoft_bond = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/bond/microsoft.bond.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var bond_const_1 = require_bond_const();
    exports._BondDataType = bond_const_1._BondDataType;
    var _Encoding = require_microsoft_bond_encoding();
    exports._Encoding = _Encoding;
    var IO = require_microsoft_bond_io();
    exports.IO = IO;
    var microsoft_bond_primitives_1 = require_microsoft_bond_primitives();
    exports.Int64 = microsoft_bond_primitives_1.Int64;
    exports.UInt64 = microsoft_bond_primitives_1.UInt64;
    exports.Number = microsoft_bond_primitives_1.Number;
    var CompactBinaryProtocolWriter = (
      /** @class */
      function() {
        function CompactBinaryProtocolWriter2(stream) {
          this._stream = stream;
        }
        CompactBinaryProtocolWriter2.prototype._WriteBlob = function(blob) {
          this._stream._Write(blob, 0, blob.length);
        };
        CompactBinaryProtocolWriter2.prototype._WriteBool = function(value) {
          this._stream._WriteByte(value ? 1 : 0);
        };
        CompactBinaryProtocolWriter2.prototype._WriteContainerBegin = function(size, elementType) {
          this._WriteUInt8(elementType);
          this._WriteUInt32(size);
        };
        CompactBinaryProtocolWriter2.prototype._WriteMapContainerBegin = function(size, keyType, valueType) {
          this._WriteUInt8(keyType);
          this._WriteUInt8(valueType);
          this._WriteUInt32(size);
        };
        CompactBinaryProtocolWriter2.prototype._WriteDouble = function(value) {
          var array = _Encoding._Double_GetBytes(value);
          this._stream._Write(array, 0, array.length);
        };
        CompactBinaryProtocolWriter2.prototype._WriteFieldBegin = function(type, id, metadata) {
          if (id <= 5) {
            this._stream._WriteByte(type | id << 5);
          } else if (id <= 255) {
            this._stream._WriteByte(type | 6 << 5);
            this._stream._WriteByte(id);
          } else {
            this._stream._WriteByte(type | 7 << 5);
            this._stream._WriteByte(id);
            this._stream._WriteByte(id >> 8);
          }
        };
        CompactBinaryProtocolWriter2.prototype._WriteInt32 = function(value) {
          value = _Encoding._Zigzag_EncodeZigzag32(value);
          this._WriteUInt32(value);
        };
        CompactBinaryProtocolWriter2.prototype._WriteInt64 = function(value) {
          this._WriteUInt64(_Encoding._Zigzag_EncodeZigzag64(value));
        };
        CompactBinaryProtocolWriter2.prototype._WriteString = function(value) {
          if (value === "") {
            this._WriteUInt32(
              0
              /*length*/
            );
          } else {
            var array = _Encoding._Utf8_GetBytes(value);
            this._WriteUInt32(array.length);
            this._stream._Write(array, 0, array.length);
          }
        };
        CompactBinaryProtocolWriter2.prototype._WriteStructEnd = function(isBase) {
          this._WriteUInt8(isBase ? bond_const_1._BondDataType._BT_STOP_BASE : bond_const_1._BondDataType._BT_STOP);
        };
        CompactBinaryProtocolWriter2.prototype._WriteUInt32 = function(value) {
          var array = _Encoding._Varint_GetBytes(microsoft_bond_primitives_1.Number._ToUInt32(value));
          this._stream._Write(array, 0, array.length);
        };
        CompactBinaryProtocolWriter2.prototype._WriteUInt64 = function(value) {
          var array = _Encoding._Varint64_GetBytes(value);
          this._stream._Write(array, 0, array.length);
        };
        CompactBinaryProtocolWriter2.prototype._WriteUInt8 = function(value) {
          this._stream._WriteByte(microsoft_bond_primitives_1.Number._ToUInt8(value));
        };
        return CompactBinaryProtocolWriter2;
      }()
    );
    exports.CompactBinaryProtocolWriter = CompactBinaryProtocolWriter;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/common/AWTSerializer.js
var require_AWTSerializer = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/common/AWTSerializer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Bond = require_microsoft_bond();
    var Enums_1 = require_Enums2();
    var AWTNotificationManager_1 = require_AWTNotificationManager();
    var Utils = require_Utils();
    var RequestSizeLimitBytes = 2936012;
    var AWTSerializer = (
      /** @class */
      function() {
        function AWTSerializer2() {
        }
        AWTSerializer2.getPayloadBlob = function(requestDictionary, tokenCount) {
          var requestFull = false;
          var remainingRequest;
          var stream = new Bond.IO.MemoryStream();
          var writer = new Bond.CompactBinaryProtocolWriter(stream);
          writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 3, null);
          writer._WriteMapContainerBegin(tokenCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_LIST);
          for (var token in requestDictionary) {
            if (!requestFull) {
              if (requestDictionary.hasOwnProperty(token)) {
                writer._WriteString(token);
                var dataPackage = requestDictionary[token];
                writer._WriteContainerBegin(1, Bond._BondDataType._BT_STRUCT);
                writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 2, null);
                writer._WriteString("act_default_source");
                writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 5, null);
                writer._WriteString(Utils.newGuid());
                writer._WriteFieldBegin(Bond._BondDataType._BT_INT64, 6, null);
                writer._WriteInt64(Utils.numberToBondInt64(Date.now()));
                writer._WriteFieldBegin(Bond._BondDataType._BT_LIST, 8, null);
                var dpSizePos = stream._GetBuffer().length + 1;
                writer._WriteContainerBegin(requestDictionary[token].length, Bond._BondDataType._BT_STRUCT);
                var dpSizeSerialized = stream._GetBuffer().length - dpSizePos;
                for (var i = 0; i < dataPackage.length; ++i) {
                  var currentStreamPos = stream._GetBuffer().length;
                  this.writeEvent(dataPackage[i], writer);
                  if (stream._GetBuffer().length - currentStreamPos > RequestSizeLimitBytes) {
                    AWTNotificationManager_1.default.eventsRejected([dataPackage[i]], Enums_1.AWTEventsRejectedReason.SizeLimitExceeded);
                    dataPackage.splice(i--, 1);
                    stream._GetBuffer().splice(currentStreamPos);
                    this._addNewDataPackageSize(dataPackage.length, stream, dpSizeSerialized, dpSizePos);
                    continue;
                  }
                  if (stream._GetBuffer().length > RequestSizeLimitBytes) {
                    stream._GetBuffer().splice(currentStreamPos);
                    if (!remainingRequest) {
                      remainingRequest = {};
                    }
                    requestDictionary[token] = dataPackage.splice(0, i);
                    remainingRequest[token] = dataPackage;
                    this._addNewDataPackageSize(requestDictionary[token].length, stream, dpSizeSerialized, dpSizePos);
                    requestFull = true;
                    break;
                  }
                }
                writer._WriteStructEnd(false);
              }
            } else {
              if (!remainingRequest) {
                remainingRequest = {};
              }
              remainingRequest[token] = requestDictionary[token];
              delete requestDictionary[token];
            }
          }
          writer._WriteStructEnd(false);
          return { payloadBlob: stream._GetBuffer(), remainingRequest };
        };
        AWTSerializer2._addNewDataPackageSize = function(size, stream, oldDpSize, streamPos) {
          var newRecordCountSerialized = Bond._Encoding._Varint_GetBytes(Bond.Number._ToUInt32(size));
          for (var j = 0; j < oldDpSize; ++j) {
            if (j < newRecordCountSerialized.length) {
              stream._GetBuffer()[streamPos + j] = newRecordCountSerialized[j];
            } else {
              stream._GetBuffer().slice(streamPos + j, oldDpSize - j);
              break;
            }
          }
        };
        AWTSerializer2.writeEvent = function(eventData, writer) {
          writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 1, null);
          writer._WriteString(eventData.id);
          writer._WriteFieldBegin(Bond._BondDataType._BT_INT64, 3, null);
          writer._WriteInt64(Utils.numberToBondInt64(eventData.timestamp));
          writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 5, null);
          writer._WriteString(eventData.type);
          writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 6, null);
          writer._WriteString(eventData.name);
          var propsString = {};
          var propStringCount = 0;
          var propsInt64 = {};
          var propInt64Count = 0;
          var propsDouble = {};
          var propDoubleCount = 0;
          var propsBool = {};
          var propBoolCount = 0;
          var propsDate = {};
          var propDateCount = 0;
          var piiProps = {};
          var piiPropCount = 0;
          var ccProps = {};
          var ccPropCount = 0;
          for (var key in eventData.properties) {
            if (eventData.properties.hasOwnProperty(key)) {
              var property = eventData.properties[key];
              if (property.cc > 0) {
                ccProps[key] = property;
                ccPropCount++;
              } else if (property.pii > 0) {
                piiProps[key] = property;
                piiPropCount++;
              } else {
                switch (property.type) {
                  case Enums_1.AWTPropertyType.String:
                    propsString[key] = property.value;
                    propStringCount++;
                    break;
                  case Enums_1.AWTPropertyType.Int64:
                    propsInt64[key] = property.value;
                    propInt64Count++;
                    break;
                  case Enums_1.AWTPropertyType.Double:
                    propsDouble[key] = property.value;
                    propDoubleCount++;
                    break;
                  case Enums_1.AWTPropertyType.Boolean:
                    propsBool[key] = property.value;
                    propBoolCount++;
                    break;
                  case Enums_1.AWTPropertyType.Date:
                    propsDate[key] = property.value;
                    propDateCount++;
                    break;
                }
              }
            }
          }
          if (propStringCount) {
            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 13, null);
            writer._WriteMapContainerBegin(propStringCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_STRING);
            for (var key in propsString) {
              if (propsString.hasOwnProperty(key)) {
                var value = propsString[key];
                writer._WriteString(key);
                writer._WriteString(value.toString());
              }
            }
          }
          if (piiPropCount) {
            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 30, null);
            writer._WriteMapContainerBegin(piiPropCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_STRUCT);
            for (var key in piiProps) {
              if (piiProps.hasOwnProperty(key)) {
                var property = piiProps[key];
                writer._WriteString(key);
                writer._WriteFieldBegin(Bond._BondDataType._BT_INT32, 1, null);
                writer._WriteInt32(1);
                writer._WriteFieldBegin(Bond._BondDataType._BT_INT32, 2, null);
                writer._WriteInt32(property.pii);
                writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 3, null);
                writer._WriteString(property.value.toString());
                writer._WriteStructEnd(false);
              }
            }
          }
          if (propBoolCount) {
            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 31, null);
            writer._WriteMapContainerBegin(propBoolCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_BOOL);
            for (var key in propsBool) {
              if (propsBool.hasOwnProperty(key)) {
                var value = propsBool[key];
                writer._WriteString(key);
                writer._WriteBool(value);
              }
            }
          }
          if (propDateCount) {
            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 32, null);
            writer._WriteMapContainerBegin(propDateCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_INT64);
            for (var key in propsDate) {
              if (propsDate.hasOwnProperty(key)) {
                var value = propsDate[key];
                writer._WriteString(key);
                writer._WriteInt64(Utils.numberToBondInt64(value));
              }
            }
          }
          if (propInt64Count) {
            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 33, null);
            writer._WriteMapContainerBegin(propInt64Count, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_INT64);
            for (var key in propsInt64) {
              if (propsInt64.hasOwnProperty(key)) {
                var value = propsInt64[key];
                writer._WriteString(key);
                writer._WriteInt64(Utils.numberToBondInt64(value));
              }
            }
          }
          if (propDoubleCount) {
            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 34, null);
            writer._WriteMapContainerBegin(propDoubleCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_DOUBLE);
            for (var key in propsDouble) {
              if (propsDouble.hasOwnProperty(key)) {
                var value = propsDouble[key];
                writer._WriteString(key);
                writer._WriteDouble(value);
              }
            }
          }
          if (ccPropCount) {
            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 36, null);
            writer._WriteMapContainerBegin(ccPropCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_STRUCT);
            for (var key in ccProps) {
              if (ccProps.hasOwnProperty(key)) {
                var property = ccProps[key];
                writer._WriteString(key);
                writer._WriteFieldBegin(Bond._BondDataType._BT_INT32, 1, null);
                writer._WriteInt32(property.cc);
                writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 2, null);
                writer._WriteString(property.value.toString());
                writer._WriteStructEnd(false);
              }
            }
          }
          writer._WriteStructEnd(false);
        };
        AWTSerializer2.base64Encode = function(data) {
          return Bond._Encoding._Base64_GetString(data);
        };
        return AWTSerializer2;
      }()
    );
    exports.default = AWTSerializer;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/common/AWTRetryPolicy.js
var require_AWTRetryPolicy = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/common/AWTRetryPolicy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var RandomizationLowerThreshold = 0.8;
    var RandomizationUpperThreshold = 1.2;
    var BaseBackoff = 3e3;
    var MaxBackoff = 12e4;
    var AWTRetryPolicy = (
      /** @class */
      function() {
        function AWTRetryPolicy2() {
        }
        AWTRetryPolicy2.shouldRetryForStatus = function(httpStatusCode) {
          return !(httpStatusCode >= 300 && httpStatusCode < 500 && httpStatusCode !== 408 || httpStatusCode === 501 || httpStatusCode === 505);
        };
        AWTRetryPolicy2.getMillisToBackoffForRetry = function(retriesSoFar) {
          var waitDuration = 0;
          var minBackoff = BaseBackoff * RandomizationLowerThreshold;
          var maxBackoff = BaseBackoff * RandomizationUpperThreshold;
          var randomBackoff = Math.floor(Math.random() * (maxBackoff - minBackoff)) + minBackoff;
          waitDuration = Math.pow(4, retriesSoFar) * randomBackoff;
          return Math.min(waitDuration, MaxBackoff);
        };
        return AWTRetryPolicy2;
      }()
    );
    exports.default = AWTRetryPolicy;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/common/AWTKillSwitch.js
var require_AWTKillSwitch = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/common/AWTKillSwitch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var SecToMsMultiplier = 1e3;
    var AWTKillSwitch = (
      /** @class */
      function() {
        function AWTKillSwitch2() {
          this._killedTokenDictionary = {};
        }
        AWTKillSwitch2.prototype.setKillSwitchTenants = function(killTokens, killDuration) {
          if (killTokens && killDuration) {
            try {
              var killedTokens = killTokens.split(",");
              if (killDuration === "this-request-only") {
                return killedTokens;
              }
              var durationMs = parseInt(killDuration, 10) * SecToMsMultiplier;
              for (var i = 0; i < killedTokens.length; ++i) {
                this._killedTokenDictionary[killedTokens[i]] = Date.now() + durationMs;
              }
            } catch (ex) {
              return [];
            }
          }
          return [];
        };
        AWTKillSwitch2.prototype.isTenantKilled = function(tenantToken) {
          if (this._killedTokenDictionary[tenantToken] !== void 0 && this._killedTokenDictionary[tenantToken] > Date.now()) {
            return true;
          }
          delete this._killedTokenDictionary[tenantToken];
          return false;
        };
        return AWTKillSwitch2;
      }()
    );
    exports.default = AWTKillSwitch;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/common/AWTClockSkewManager.js
var require_AWTClockSkewManager = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/common/AWTClockSkewManager.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AWTClockSkewManager = (
      /** @class */
      function() {
        function AWTClockSkewManager2(clockSkewRefreshDurationInMins) {
          this.clockSkewRefreshDurationInMins = clockSkewRefreshDurationInMins;
          this._reset();
        }
        AWTClockSkewManager2.prototype.allowRequestSending = function() {
          if (this._isFirstRequest && !this._clockSkewSet) {
            this._isFirstRequest = false;
            this._allowRequestSending = false;
            return true;
          }
          return this._allowRequestSending;
        };
        AWTClockSkewManager2.prototype.shouldAddClockSkewHeaders = function() {
          return this._shouldAddClockSkewHeaders;
        };
        AWTClockSkewManager2.prototype.getClockSkewHeaderValue = function() {
          return this._clockSkewHeaderValue;
        };
        AWTClockSkewManager2.prototype.setClockSkew = function(timeDeltaInMillis) {
          if (!this._clockSkewSet) {
            if (timeDeltaInMillis) {
              this._clockSkewHeaderValue = timeDeltaInMillis;
            } else {
              this._shouldAddClockSkewHeaders = false;
            }
            this._clockSkewSet = true;
            this._allowRequestSending = true;
          }
        };
        AWTClockSkewManager2.prototype._reset = function() {
          var _this = this;
          this._isFirstRequest = true;
          this._clockSkewSet = false;
          this._allowRequestSending = true;
          this._shouldAddClockSkewHeaders = true;
          this._clockSkewHeaderValue = "use-collector-delta";
          if (this.clockSkewRefreshDurationInMins > 0) {
            setTimeout(function() {
              return _this._reset();
            }, this.clockSkewRefreshDurationInMins * 6e4);
          }
        };
        return AWTClockSkewManager2;
      }()
    );
    exports.default = AWTClockSkewManager;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/webjs/Version.js
var require_Version = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/webjs/Version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Version = "1.8.7";
    exports.FullVersionString = "AWT-Web-JS-" + exports.Version;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/webjs/AWTHttpManager.js
var require_AWTHttpManager = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/webjs/AWTHttpManager.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Enums_1 = require_Enums2();
    var AWTSerializer_1 = require_AWTSerializer();
    var AWTRetryPolicy_1 = require_AWTRetryPolicy();
    var AWTKillSwitch_1 = require_AWTKillSwitch();
    var AWTClockSkewManager_1 = require_AWTClockSkewManager();
    var Version = require_Version();
    var Utils = require_Utils();
    var AWTNotificationManager_1 = require_AWTNotificationManager();
    var AWTTransmissionManagerCore_1 = require_AWTTransmissionManagerCore();
    var MaxConnections = 2;
    var MaxRetries = 1;
    var Method = "POST";
    var AWTHttpManager = (
      /** @class */
      function() {
        function AWTHttpManager2(_requestQueue, collectorUrl, _queueManager, _httpInterface, clockSkewRefreshDurationInMins) {
          var _this = this;
          this._requestQueue = _requestQueue;
          this._queueManager = _queueManager;
          this._httpInterface = _httpInterface;
          this._urlString = "?qsp=true&content-type=application%2Fbond-compact-binary&client-id=NO_AUTH&sdk-version=" + Version.FullVersionString;
          this._killSwitch = new AWTKillSwitch_1.default();
          this._paused = false;
          this._useBeacons = false;
          this._activeConnections = 0;
          this._clockSkewManager = new AWTClockSkewManager_1.default(clockSkewRefreshDurationInMins);
          if (!Utils.isUint8ArrayAvailable()) {
            this._urlString += "&content-encoding=base64";
          }
          this._urlString = collectorUrl + this._urlString;
          if (!this._httpInterface) {
            this._useBeacons = !Utils.isReactNative();
            this._httpInterface = {
              sendPOST: function(urlString, data, ontimeout, onerror, onload, sync) {
                try {
                  if (Utils.useFetchRequest()) {
                    fetch(urlString, {
                      body: data,
                      method: Method
                    }).then(function(response) {
                      var headerMap = {};
                      if (response.headers) {
                        response.headers.forEach(function(value, name) {
                          headerMap[name] = value;
                        });
                      }
                      onload(response.status, headerMap);
                    }).catch(function(error) {
                      onerror(0, {});
                    });
                  } else if (Utils.useXDomainRequest()) {
                    var xdr = new XDomainRequest();
                    xdr.open(Method, urlString);
                    xdr.onload = function() {
                      onload(200, null);
                    };
                    xdr.onerror = function() {
                      onerror(400, null);
                    };
                    xdr.ontimeout = function() {
                      ontimeout(500, null);
                    };
                    xdr.send(data);
                  } else {
                    var xhr_1 = new XMLHttpRequest();
                    xhr_1.open(Method, urlString, !sync);
                    xhr_1.onload = function() {
                      onload(xhr_1.status, _this._convertAllHeadersToMap(xhr_1.getAllResponseHeaders()));
                    };
                    xhr_1.onerror = function() {
                      onerror(xhr_1.status, _this._convertAllHeadersToMap(xhr_1.getAllResponseHeaders()));
                    };
                    xhr_1.ontimeout = function() {
                      ontimeout(xhr_1.status, _this._convertAllHeadersToMap(xhr_1.getAllResponseHeaders()));
                    };
                    xhr_1.send(data);
                  }
                } catch (e) {
                  onerror(400, null);
                }
              }
            };
          }
        }
        AWTHttpManager2.prototype.hasIdleConnection = function() {
          return this._activeConnections < MaxConnections;
        };
        AWTHttpManager2.prototype.sendQueuedRequests = function() {
          while (this.hasIdleConnection() && !this._paused && this._requestQueue.length > 0 && this._clockSkewManager.allowRequestSending()) {
            this._activeConnections++;
            this._sendRequest(this._requestQueue.shift(), 0, false);
          }
          if (this.hasIdleConnection()) {
            AWTTransmissionManagerCore_1.default.scheduleTimer();
          }
        };
        AWTHttpManager2.prototype.isCompletelyIdle = function() {
          return this._activeConnections === 0;
        };
        AWTHttpManager2.prototype.teardown = function() {
          while (this._requestQueue.length > 0) {
            this._sendRequest(this._requestQueue.shift(), 0, true);
          }
        };
        AWTHttpManager2.prototype.pause = function() {
          this._paused = true;
        };
        AWTHttpManager2.prototype.resume = function() {
          this._paused = false;
          this.sendQueuedRequests();
        };
        AWTHttpManager2.prototype.removeQueuedRequests = function() {
          this._requestQueue.length = 0;
        };
        AWTHttpManager2.prototype.sendSynchronousRequest = function(request, token) {
          if (this._paused) {
            request[token][0].priority = Enums_1.AWTEventPriority.High;
          }
          this._activeConnections++;
          this._sendRequest(request, 0, false, true);
        };
        AWTHttpManager2.prototype._sendRequest = function(request, retryCount, isTeardown, isSynchronous) {
          var _this = this;
          if (isSynchronous === void 0) {
            isSynchronous = false;
          }
          try {
            if (this._paused) {
              this._activeConnections--;
              this._queueManager.addBackRequest(request);
              return;
            }
            var tokenCount_1 = 0;
            var apikey_1 = "";
            for (var token in request) {
              if (request.hasOwnProperty(token)) {
                if (!this._killSwitch.isTenantKilled(token)) {
                  if (apikey_1.length > 0) {
                    apikey_1 += ",";
                  }
                  apikey_1 += token;
                  tokenCount_1++;
                } else {
                  AWTNotificationManager_1.default.eventsRejected(request[token], Enums_1.AWTEventsRejectedReason.KillSwitch);
                  delete request[token];
                }
              }
            }
            if (tokenCount_1 > 0) {
              var payloadResult = AWTSerializer_1.default.getPayloadBlob(request, tokenCount_1);
              if (payloadResult.remainingRequest) {
                this._requestQueue.push(payloadResult.remainingRequest);
              }
              var urlString = this._urlString + "&x-apikey=" + apikey_1 + "&client-time-epoch-millis=" + Date.now().toString();
              if (this._clockSkewManager.shouldAddClockSkewHeaders()) {
                urlString = urlString + "&time-delta-to-apply-millis=" + this._clockSkewManager.getClockSkewHeaderValue();
              }
              var data = void 0;
              if (!Utils.isUint8ArrayAvailable()) {
                data = AWTSerializer_1.default.base64Encode(payloadResult.payloadBlob);
              } else {
                data = new Uint8Array(payloadResult.payloadBlob);
              }
              for (var token in request) {
                if (request.hasOwnProperty(token)) {
                  for (var i = 0; i < request[token].length; ++i) {
                    request[token][i].sendAttempt > 0 ? request[token][i].sendAttempt++ : request[token][i].sendAttempt = 1;
                  }
                }
              }
              if (this._useBeacons && isTeardown && Utils.isBeaconsSupported()) {
                if (navigator.sendBeacon(urlString, data)) {
                  return;
                }
              }
              this._httpInterface.sendPOST(urlString, data, function(status, headers) {
                _this._retryRequestIfNeeded(status, headers, request, tokenCount_1, apikey_1, retryCount, isTeardown, isSynchronous);
              }, function(status, headers) {
                _this._retryRequestIfNeeded(status, headers, request, tokenCount_1, apikey_1, retryCount, isTeardown, isSynchronous);
              }, function(status, headers) {
                _this._retryRequestIfNeeded(status, headers, request, tokenCount_1, apikey_1, retryCount, isTeardown, isSynchronous);
              }, isTeardown || isSynchronous);
            } else if (!isTeardown) {
              this._handleRequestFinished(false, {}, isTeardown, isSynchronous);
            }
          } catch (e) {
            this._handleRequestFinished(false, {}, isTeardown, isSynchronous);
          }
        };
        AWTHttpManager2.prototype._retryRequestIfNeeded = function(status, headers, request, tokenCount, apikey, retryCount, isTeardown, isSynchronous) {
          var _this = this;
          var shouldRetry = true;
          if (typeof status !== "undefined") {
            if (headers) {
              var killedTokens = this._killSwitch.setKillSwitchTenants(headers["kill-tokens"], headers["kill-duration-seconds"]);
              this._clockSkewManager.setClockSkew(headers["time-delta-millis"]);
              for (var i = 0; i < killedTokens.length; ++i) {
                AWTNotificationManager_1.default.eventsRejected(request[killedTokens[i]], Enums_1.AWTEventsRejectedReason.KillSwitch);
                delete request[killedTokens[i]];
                tokenCount--;
              }
            } else {
              this._clockSkewManager.setClockSkew(null);
            }
            if (status === 200) {
              this._handleRequestFinished(true, request, isTeardown, isSynchronous);
              return;
            }
            if (!AWTRetryPolicy_1.default.shouldRetryForStatus(status) || tokenCount <= 0) {
              shouldRetry = false;
            }
          }
          if (shouldRetry) {
            if (isSynchronous) {
              this._activeConnections--;
              request[apikey][0].priority = Enums_1.AWTEventPriority.High;
              this._queueManager.addBackRequest(request);
            } else if (retryCount < MaxRetries) {
              for (var token in request) {
                if (request.hasOwnProperty(token)) {
                  AWTNotificationManager_1.default.eventsRetrying(request[token]);
                }
              }
              setTimeout(function() {
                return _this._sendRequest(request, retryCount + 1, false);
              }, AWTRetryPolicy_1.default.getMillisToBackoffForRetry(retryCount));
            } else {
              this._activeConnections--;
              AWTTransmissionManagerCore_1.default.backOffTransmission();
              this._queueManager.addBackRequest(request);
            }
          } else {
            this._handleRequestFinished(false, request, isTeardown, isSynchronous);
          }
        };
        AWTHttpManager2.prototype._handleRequestFinished = function(success, request, isTeardown, isSynchronous) {
          if (success) {
            AWTTransmissionManagerCore_1.default.clearBackOff();
          }
          for (var token in request) {
            if (request.hasOwnProperty(token)) {
              if (success) {
                AWTNotificationManager_1.default.eventsSent(request[token]);
              } else {
                AWTNotificationManager_1.default.eventsDropped(request[token], Enums_1.AWTEventsDroppedReason.NonRetryableStatus);
              }
            }
          }
          this._activeConnections--;
          if (!isSynchronous && !isTeardown) {
            this.sendQueuedRequests();
          }
        };
        AWTHttpManager2.prototype._convertAllHeadersToMap = function(headersString) {
          var headers = {};
          if (headersString) {
            var headersArray = headersString.split("\n");
            for (var i = 0; i < headersArray.length; ++i) {
              var header = headersArray[i].split(": ");
              headers[header[0]] = header[1];
            }
          }
          return headers;
        };
        return AWTHttpManager2;
      }()
    );
    exports.default = AWTHttpManager;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/common/AWTRecordBatcher.js
var require_AWTRecordBatcher = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/common/AWTRecordBatcher.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Enums_1 = require_Enums2();
    var AWTRecordBatcher = (
      /** @class */
      function() {
        function AWTRecordBatcher2(_outboundQueue, _maxNumberOfEvents) {
          this._outboundQueue = _outboundQueue;
          this._maxNumberOfEvents = _maxNumberOfEvents;
          this._currentBatch = {};
          this._currentNumEventsInBatch = 0;
        }
        AWTRecordBatcher2.prototype.addEventToBatch = function(event) {
          if (event.priority === Enums_1.AWTEventPriority.Immediate_sync) {
            var immediateBatch = {};
            immediateBatch[event.apiKey] = [event];
            return immediateBatch;
          } else {
            if (this._currentNumEventsInBatch >= this._maxNumberOfEvents) {
              this.flushBatch();
            }
            if (this._currentBatch[event.apiKey] === void 0) {
              this._currentBatch[event.apiKey] = [];
            }
            this._currentBatch[event.apiKey].push(event);
            this._currentNumEventsInBatch++;
          }
          return null;
        };
        AWTRecordBatcher2.prototype.flushBatch = function() {
          if (this._currentNumEventsInBatch > 0) {
            this._outboundQueue.push(this._currentBatch);
            this._currentBatch = {};
            this._currentNumEventsInBatch = 0;
          }
        };
        AWTRecordBatcher2.prototype.hasBatch = function() {
          return this._currentNumEventsInBatch > 0;
        };
        return AWTRecordBatcher2;
      }()
    );
    exports.default = AWTRecordBatcher;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/webjs/AWTQueueManager.js
var require_AWTQueueManager = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/webjs/AWTQueueManager.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Enums_1 = require_Enums2();
    var AWTHttpManager_1 = require_AWTHttpManager();
    var AWTTransmissionManagerCore_1 = require_AWTTransmissionManagerCore();
    var AWTRecordBatcher_1 = require_AWTRecordBatcher();
    var AWTNotificationManager_1 = require_AWTNotificationManager();
    var Utils = require_Utils();
    var UploadNowCheckTimer = 250;
    var MaxNumberEventPerBatch = 500;
    var MaxSendAttempts = 6;
    var AWTQueueManager = (
      /** @class */
      function() {
        function AWTQueueManager2(collectorUrl, _queueSizeLimit, xhrOverride, clockSkewRefreshDurationInMins) {
          this._queueSizeLimit = _queueSizeLimit;
          this._isCurrentlyUploadingNow = false;
          this._uploadNowQueue = [];
          this._shouldDropEventsOnPause = false;
          this._paused = false;
          this._queueSize = 0;
          this._outboundQueue = [];
          this._inboundQueues = {};
          this._inboundQueues[Enums_1.AWTEventPriority.High] = [];
          this._inboundQueues[Enums_1.AWTEventPriority.Normal] = [];
          this._inboundQueues[Enums_1.AWTEventPriority.Low] = [];
          this._addEmptyQueues();
          this._batcher = new AWTRecordBatcher_1.default(this._outboundQueue, MaxNumberEventPerBatch);
          this._httpManager = new AWTHttpManager_1.default(this._outboundQueue, collectorUrl, this, xhrOverride, clockSkewRefreshDurationInMins);
        }
        AWTQueueManager2.prototype.addEvent = function(event) {
          if (!Utils.isPriority(event.priority)) {
            event.priority = Enums_1.AWTEventPriority.Normal;
          }
          if (event.priority === Enums_1.AWTEventPriority.Immediate_sync) {
            this._httpManager.sendSynchronousRequest(this._batcher.addEventToBatch(event), event.apiKey);
          } else if (this._queueSize < this._queueSizeLimit) {
            this._addEventToProperQueue(event);
          } else {
            if (this._dropEventWithPriorityOrLess(event.priority)) {
              this._addEventToProperQueue(event);
            } else {
              AWTNotificationManager_1.default.eventsDropped([event], Enums_1.AWTEventsDroppedReason.QueueFull);
            }
          }
        };
        AWTQueueManager2.prototype.sendEventsForPriorityAndAbove = function(priority) {
          this._batchEvents(priority);
          this._httpManager.sendQueuedRequests();
        };
        AWTQueueManager2.prototype.hasEvents = function() {
          return (this._inboundQueues[Enums_1.AWTEventPriority.High][0].length > 0 || this._inboundQueues[Enums_1.AWTEventPriority.Normal][0].length > 0 || this._inboundQueues[Enums_1.AWTEventPriority.Low][0].length > 0 || this._batcher.hasBatch()) && this._httpManager.hasIdleConnection();
        };
        AWTQueueManager2.prototype.addBackRequest = function(request) {
          if (!this._paused || !this._shouldDropEventsOnPause) {
            for (var token in request) {
              if (request.hasOwnProperty(token)) {
                for (var i = 0; i < request[token].length; ++i) {
                  if (request[token][i].sendAttempt < MaxSendAttempts) {
                    this.addEvent(request[token][i]);
                  } else {
                    AWTNotificationManager_1.default.eventsDropped([request[token][i]], Enums_1.AWTEventsDroppedReason.MaxRetryLimit);
                  }
                }
              }
            }
            AWTTransmissionManagerCore_1.default.scheduleTimer();
          }
        };
        AWTQueueManager2.prototype.teardown = function() {
          if (!this._paused) {
            this._batchEvents(Enums_1.AWTEventPriority.Low);
            this._httpManager.teardown();
          }
        };
        AWTQueueManager2.prototype.uploadNow = function(callback) {
          var _this = this;
          this._addEmptyQueues();
          if (!this._isCurrentlyUploadingNow) {
            this._isCurrentlyUploadingNow = true;
            setTimeout(function() {
              return _this._uploadNow(callback);
            }, 0);
          } else {
            this._uploadNowQueue.push(callback);
          }
        };
        AWTQueueManager2.prototype.pauseTransmission = function() {
          this._paused = true;
          this._httpManager.pause();
          if (this._shouldDropEventsOnPause) {
            this._queueSize -= this._inboundQueues[Enums_1.AWTEventPriority.High][0].length + this._inboundQueues[Enums_1.AWTEventPriority.Normal][0].length + this._inboundQueues[Enums_1.AWTEventPriority.Low][0].length;
            this._inboundQueues[Enums_1.AWTEventPriority.High][0] = [];
            this._inboundQueues[Enums_1.AWTEventPriority.Normal][0] = [];
            this._inboundQueues[Enums_1.AWTEventPriority.Low][0] = [];
            this._httpManager.removeQueuedRequests();
          }
        };
        AWTQueueManager2.prototype.resumeTransmission = function() {
          this._paused = false;
          this._httpManager.resume();
        };
        AWTQueueManager2.prototype.shouldDropEventsOnPause = function(shouldDropEventsOnPause) {
          this._shouldDropEventsOnPause = shouldDropEventsOnPause;
        };
        AWTQueueManager2.prototype._removeFirstQueues = function() {
          this._inboundQueues[Enums_1.AWTEventPriority.High].shift();
          this._inboundQueues[Enums_1.AWTEventPriority.Normal].shift();
          this._inboundQueues[Enums_1.AWTEventPriority.Low].shift();
        };
        AWTQueueManager2.prototype._addEmptyQueues = function() {
          this._inboundQueues[Enums_1.AWTEventPriority.High].push([]);
          this._inboundQueues[Enums_1.AWTEventPriority.Normal].push([]);
          this._inboundQueues[Enums_1.AWTEventPriority.Low].push([]);
        };
        AWTQueueManager2.prototype._addEventToProperQueue = function(event) {
          if (!this._paused || !this._shouldDropEventsOnPause) {
            this._queueSize++;
            this._inboundQueues[event.priority][this._inboundQueues[event.priority].length - 1].push(event);
          }
        };
        AWTQueueManager2.prototype._dropEventWithPriorityOrLess = function(priority) {
          var currentPriority = Enums_1.AWTEventPriority.Low;
          while (currentPriority <= priority) {
            if (this._inboundQueues[currentPriority][this._inboundQueues[currentPriority].length - 1].length > 0) {
              AWTNotificationManager_1.default.eventsDropped([this._inboundQueues[currentPriority][this._inboundQueues[currentPriority].length - 1].shift()], Enums_1.AWTEventsDroppedReason.QueueFull);
              return true;
            }
            currentPriority++;
          }
          return false;
        };
        AWTQueueManager2.prototype._batchEvents = function(priority) {
          var priorityToProcess = Enums_1.AWTEventPriority.High;
          while (priorityToProcess >= priority) {
            while (this._inboundQueues[priorityToProcess][0].length > 0) {
              var event_1 = this._inboundQueues[priorityToProcess][0].pop();
              this._queueSize--;
              this._batcher.addEventToBatch(event_1);
            }
            priorityToProcess--;
          }
          this._batcher.flushBatch();
        };
        AWTQueueManager2.prototype._uploadNow = function(callback) {
          var _this = this;
          if (this.hasEvents()) {
            this.sendEventsForPriorityAndAbove(Enums_1.AWTEventPriority.Low);
          }
          this._checkOutboundQueueEmptyAndSent(function() {
            _this._removeFirstQueues();
            if (callback !== null && callback !== void 0) {
              callback();
            }
            if (_this._uploadNowQueue.length > 0) {
              setTimeout(function() {
                return _this._uploadNow(_this._uploadNowQueue.shift());
              }, 0);
            } else {
              _this._isCurrentlyUploadingNow = false;
              if (_this.hasEvents()) {
                AWTTransmissionManagerCore_1.default.scheduleTimer();
              }
            }
          });
        };
        AWTQueueManager2.prototype._checkOutboundQueueEmptyAndSent = function(callback) {
          var _this = this;
          if (this._httpManager.isCompletelyIdle()) {
            callback();
          } else {
            setTimeout(function() {
              return _this._checkOutboundQueueEmptyAndSent(callback);
            }, UploadNowCheckTimer);
          }
        };
        return AWTQueueManager2;
      }()
    );
    exports.default = AWTQueueManager;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/webjs/AWTAutoCollection.js
var require_AWTAutoCollection = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/webjs/AWTAutoCollection.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Utils = require_Utils();
    var DEVICE_ID_COOKIE = "MicrosoftApplicationsTelemetryDeviceId";
    var FIRSTLAUNCHTIME_COOKIE = "MicrosoftApplicationsTelemetryFirstLaunchTime";
    var BROWSERS = {
      MSIE: "MSIE",
      CHROME: "Chrome",
      FIREFOX: "Firefox",
      SAFARI: "Safari",
      EDGE: "Edge",
      ELECTRON: "Electron",
      SKYPE_SHELL: "SkypeShell",
      PHANTOMJS: "PhantomJS",
      OPERA: "Opera"
    };
    var OPERATING_SYSTEMS = {
      WINDOWS: "Windows",
      MACOSX: "Mac OS X",
      WINDOWS_PHONE: "Windows Phone",
      WINDOWS_RT: "Windows RT",
      IOS: "iOS",
      ANDROID: "Android",
      LINUX: "Linux",
      CROS: "Chrome OS",
      UNKNOWN: "Unknown"
    };
    var OSNAMEREGEX = {
      WIN: /(windows|win32)/i,
      WINRT: / arm;/i,
      WINPHONE: /windows\sphone\s\d+\.\d+/i,
      OSX: /(macintosh|mac os x)/i,
      IOS: /(iPad|iPhone|iPod)(?=.*like Mac OS X)/i,
      LINUX: /(linux|joli|[kxln]?ubuntu|debian|[open]*suse|gentoo|arch|slackware|fedora|mandriva|centos|pclinuxos|redhat|zenwalk)/i,
      ANDROID: /android/i,
      CROS: /CrOS/i
    };
    var VERSION_MAPPINGS = {
      "5.1": "XP",
      "6.0": "Vista",
      "6.1": "7",
      "6.2": "8",
      "6.3": "8.1",
      "10.0": "10"
    };
    var REGEX_VERSION = "([\\d,.]+)";
    var REGEX_VERSION_MAC = "([\\d,_,.]+)";
    var UNKNOWN = "Unknown";
    var UNDEFINED = "undefined";
    var AWTAutoCollection = (
      /** @class */
      function() {
        function AWTAutoCollection2() {
        }
        AWTAutoCollection2.addPropertyStorageOverride = function(propertyStorage) {
          if (propertyStorage) {
            this._propertyStorage = propertyStorage;
            return true;
          }
          return false;
        };
        AWTAutoCollection2.autoCollect = function(semanticContext, disableCookies, userAgent) {
          this._semanticContext = semanticContext;
          this._disableCookies = disableCookies;
          this._autoCollect();
          if (!userAgent && typeof navigator !== UNDEFINED) {
            userAgent = navigator.userAgent || "";
          }
          this._autoCollectFromUserAgent(userAgent);
          if (this._disableCookies && !this._propertyStorage) {
            this._deleteCookie(DEVICE_ID_COOKIE);
            this._deleteCookie(FIRSTLAUNCHTIME_COOKIE);
            return;
          }
          if (this._propertyStorage || this._areCookiesAvailable && !this._disableCookies) {
            this._autoCollectDeviceId();
          }
        };
        AWTAutoCollection2.checkAndSaveDeviceId = function(deviceId) {
          if (deviceId) {
            var oldDeviceId = this._getData(DEVICE_ID_COOKIE);
            var flt = this._getData(FIRSTLAUNCHTIME_COOKIE);
            if (oldDeviceId !== deviceId) {
              flt = Utils.getISOString(/* @__PURE__ */ new Date());
            }
            this._saveData(DEVICE_ID_COOKIE, deviceId);
            this._saveData(FIRSTLAUNCHTIME_COOKIE, flt);
            this._setFirstLaunchTime(flt);
          }
        };
        AWTAutoCollection2._autoCollectDeviceId = function() {
          var deviceId = this._getData(DEVICE_ID_COOKIE);
          if (!deviceId) {
            deviceId = Utils.newGuid();
          }
          this._semanticContext.setDeviceId(deviceId);
        };
        AWTAutoCollection2._autoCollect = function() {
          if (typeof document !== UNDEFINED && document.documentElement) {
            this._semanticContext.setAppLanguage(document.documentElement.lang);
          }
          if (typeof navigator !== UNDEFINED) {
            this._semanticContext.setUserLanguage(navigator.userLanguage || navigator.language);
          }
          var timeZone = (/* @__PURE__ */ new Date()).getTimezoneOffset();
          var minutes = timeZone % 60;
          var hours = (timeZone - minutes) / 60;
          var timeZonePrefix = "+";
          if (hours > 0) {
            timeZonePrefix = "-";
          }
          hours = Math.abs(hours);
          minutes = Math.abs(minutes);
          this._semanticContext.setUserTimeZone(timeZonePrefix + (hours < 10 ? "0" + hours : hours.toString()) + ":" + (minutes < 10 ? "0" + minutes : minutes.toString()));
        };
        AWTAutoCollection2._autoCollectFromUserAgent = function(userAgent) {
          if (userAgent) {
            var browserName = this._getBrowserName(userAgent);
            this._semanticContext.setDeviceBrowserName(browserName);
            this._semanticContext.setDeviceBrowserVersion(this._getBrowserVersion(userAgent, browserName));
            var osName = this._getOsName(userAgent);
            this._semanticContext.setDeviceOsName(osName);
            this._semanticContext.setDeviceOsVersion(this._getOsVersion(userAgent, osName));
          }
        };
        AWTAutoCollection2._getBrowserName = function(userAgent) {
          if (this._userAgentContainsString("OPR/", userAgent)) {
            return BROWSERS.OPERA;
          }
          if (this._userAgentContainsString(BROWSERS.PHANTOMJS, userAgent)) {
            return BROWSERS.PHANTOMJS;
          }
          if (this._userAgentContainsString(BROWSERS.EDGE, userAgent) || this._userAgentContainsString("Edg", userAgent)) {
            return BROWSERS.EDGE;
          }
          if (this._userAgentContainsString(BROWSERS.ELECTRON, userAgent)) {
            return BROWSERS.ELECTRON;
          }
          if (this._userAgentContainsString(BROWSERS.CHROME, userAgent)) {
            return BROWSERS.CHROME;
          }
          if (this._userAgentContainsString("Trident", userAgent)) {
            return BROWSERS.MSIE;
          }
          if (this._userAgentContainsString(BROWSERS.FIREFOX, userAgent)) {
            return BROWSERS.FIREFOX;
          }
          if (this._userAgentContainsString(BROWSERS.SAFARI, userAgent)) {
            return BROWSERS.SAFARI;
          }
          if (this._userAgentContainsString(BROWSERS.SKYPE_SHELL, userAgent)) {
            return BROWSERS.SKYPE_SHELL;
          }
          return UNKNOWN;
        };
        AWTAutoCollection2._setFirstLaunchTime = function(flt) {
          if (!isNaN(flt)) {
            var fltDate = /* @__PURE__ */ new Date();
            fltDate.setTime(parseInt(flt, 10));
            flt = Utils.getISOString(fltDate);
          }
          this.firstLaunchTime = flt;
        };
        AWTAutoCollection2._userAgentContainsString = function(searchString, userAgent) {
          return userAgent.indexOf(searchString) > -1;
        };
        AWTAutoCollection2._getBrowserVersion = function(userAgent, browserName) {
          if (browserName === BROWSERS.MSIE) {
            return this._getIeVersion(userAgent);
          } else if (browserName === BROWSERS.EDGE) {
            var version = this._getOtherVersion(browserName, userAgent);
            if (version === UNKNOWN) {
              return this._getOtherVersion("Edg", userAgent);
            }
            return version;
          } else {
            return this._getOtherVersion(browserName, userAgent);
          }
        };
        AWTAutoCollection2._getIeVersion = function(userAgent) {
          var classicIeVersionMatches = userAgent.match(new RegExp(BROWSERS.MSIE + " " + REGEX_VERSION));
          if (classicIeVersionMatches) {
            return classicIeVersionMatches[1];
          } else {
            var ieVersionMatches = userAgent.match(new RegExp("rv:" + REGEX_VERSION));
            if (ieVersionMatches) {
              return ieVersionMatches[1];
            }
          }
        };
        AWTAutoCollection2._getOtherVersion = function(browserString, userAgent) {
          if (browserString === BROWSERS.SAFARI) {
            browserString = "Version";
          }
          var matches = userAgent.match(new RegExp(browserString + "/" + REGEX_VERSION));
          if (matches) {
            return matches[1];
          }
          return UNKNOWN;
        };
        AWTAutoCollection2._getOsName = function(userAgent) {
          if (userAgent.match(OSNAMEREGEX.WINPHONE)) {
            return OPERATING_SYSTEMS.WINDOWS_PHONE;
          }
          if (userAgent.match(OSNAMEREGEX.WINRT)) {
            return OPERATING_SYSTEMS.WINDOWS_RT;
          }
          if (userAgent.match(OSNAMEREGEX.IOS)) {
            return OPERATING_SYSTEMS.IOS;
          }
          if (userAgent.match(OSNAMEREGEX.ANDROID)) {
            return OPERATING_SYSTEMS.ANDROID;
          }
          if (userAgent.match(OSNAMEREGEX.LINUX)) {
            return OPERATING_SYSTEMS.LINUX;
          }
          if (userAgent.match(OSNAMEREGEX.OSX)) {
            return OPERATING_SYSTEMS.MACOSX;
          }
          if (userAgent.match(OSNAMEREGEX.WIN)) {
            return OPERATING_SYSTEMS.WINDOWS;
          }
          if (userAgent.match(OSNAMEREGEX.CROS)) {
            return OPERATING_SYSTEMS.CROS;
          }
          return UNKNOWN;
        };
        AWTAutoCollection2._getOsVersion = function(userAgent, osName) {
          if (osName === OPERATING_SYSTEMS.WINDOWS) {
            return this._getGenericOsVersion(userAgent, "Windows NT");
          }
          if (osName === OPERATING_SYSTEMS.ANDROID) {
            return this._getGenericOsVersion(userAgent, osName);
          }
          if (osName === OPERATING_SYSTEMS.MACOSX) {
            return this._getMacOsxVersion(userAgent);
          }
          return UNKNOWN;
        };
        AWTAutoCollection2._getGenericOsVersion = function(userAgent, osName) {
          var ntVersionMatches = userAgent.match(new RegExp(osName + " " + REGEX_VERSION));
          if (ntVersionMatches) {
            if (VERSION_MAPPINGS[ntVersionMatches[1]]) {
              return VERSION_MAPPINGS[ntVersionMatches[1]];
            }
            return ntVersionMatches[1];
          }
          return UNKNOWN;
        };
        AWTAutoCollection2._getMacOsxVersion = function(userAgent) {
          var macOsxVersionInUserAgentMatches = userAgent.match(new RegExp(OPERATING_SYSTEMS.MACOSX + " " + REGEX_VERSION_MAC));
          if (macOsxVersionInUserAgentMatches) {
            var versionString = macOsxVersionInUserAgentMatches[1].replace(/_/g, ".");
            if (versionString) {
              var delimiter = this._getDelimiter(versionString);
              if (delimiter) {
                var components = versionString.split(delimiter);
                return components[0];
              } else {
                return versionString;
              }
            }
          }
          return UNKNOWN;
        };
        AWTAutoCollection2._getDelimiter = function(versionString) {
          if (versionString.indexOf(".") > -1) {
            return ".";
          }
          if (versionString.indexOf("_") > -1) {
            return "_";
          }
          return null;
        };
        AWTAutoCollection2._saveData = function(name, value) {
          if (this._propertyStorage) {
            this._propertyStorage.setProperty(name, value);
          } else if (this._areCookiesAvailable) {
            var date = /* @__PURE__ */ new Date();
            date.setTime(
              date.getTime() + 31536e6
              /*365 days in milliseconds*/
            );
            var expires = "expires=" + date.toUTCString();
            document.cookie = name + "=" + value + "; " + expires;
          }
        };
        AWTAutoCollection2._getData = function(name) {
          if (this._propertyStorage) {
            return this._propertyStorage.getProperty(name) || "";
          } else if (this._areCookiesAvailable) {
            name = name + "=";
            var ca = document.cookie.split(";");
            for (var i = 0; i < ca.length; i++) {
              var c = ca[i];
              var j = 0;
              while (c.charAt(j) === " ") {
                j++;
              }
              c = c.substring(j);
              if (c.indexOf(name) === 0) {
                return c.substring(name.length, c.length);
              }
            }
          }
          return "";
        };
        AWTAutoCollection2._deleteCookie = function(name) {
          if (this._areCookiesAvailable) {
            document.cookie = name + "=;expires=Thu, 01 Jan 1970 00:00:01 GMT;";
          }
        };
        AWTAutoCollection2._disableCookies = false;
        AWTAutoCollection2._areCookiesAvailable = typeof document !== UNDEFINED && typeof document.cookie !== UNDEFINED;
        return AWTAutoCollection2;
      }()
    );
    exports.default = AWTAutoCollection;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/webjs/AWTSemanticContext.js
var require_AWTSemanticContext = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/webjs/AWTSemanticContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AWTAutoCollection_1 = require_AWTAutoCollection();
    var Enums_1 = require_Enums2();
    var Enums_2 = require_Enums3();
    var UI_IDTYPE = "UserInfo.IdType";
    var AWTSemanticContext = (
      /** @class */
      function() {
        function AWTSemanticContext2(_allowDeviceFields, _properties) {
          this._allowDeviceFields = _allowDeviceFields;
          this._properties = _properties;
        }
        AWTSemanticContext2.prototype.setAppId = function(appId) {
          this._addContext("AppInfo.Id", appId);
        };
        AWTSemanticContext2.prototype.setAppVersion = function(appVersion) {
          this._addContext("AppInfo.Version", appVersion);
        };
        AWTSemanticContext2.prototype.setAppLanguage = function(appLanguage) {
          this._addContext("AppInfo.Language", appLanguage);
        };
        AWTSemanticContext2.prototype.setDeviceId = function(deviceId) {
          if (this._allowDeviceFields) {
            AWTAutoCollection_1.default.checkAndSaveDeviceId(deviceId);
            this._addContext("DeviceInfo.Id", deviceId);
          }
        };
        AWTSemanticContext2.prototype.setDeviceOsName = function(deviceOsName) {
          if (this._allowDeviceFields) {
            this._addContext("DeviceInfo.OsName", deviceOsName);
          }
        };
        AWTSemanticContext2.prototype.setDeviceOsVersion = function(deviceOsVersion) {
          if (this._allowDeviceFields) {
            this._addContext("DeviceInfo.OsVersion", deviceOsVersion);
          }
        };
        AWTSemanticContext2.prototype.setDeviceBrowserName = function(deviceBrowserName) {
          if (this._allowDeviceFields) {
            this._addContext("DeviceInfo.BrowserName", deviceBrowserName);
          }
        };
        AWTSemanticContext2.prototype.setDeviceBrowserVersion = function(deviceBrowserVersion) {
          if (this._allowDeviceFields) {
            this._addContext("DeviceInfo.BrowserVersion", deviceBrowserVersion);
          }
        };
        AWTSemanticContext2.prototype.setDeviceMake = function(deviceMake) {
          if (this._allowDeviceFields) {
            this._addContext("DeviceInfo.Make", deviceMake);
          }
        };
        AWTSemanticContext2.prototype.setDeviceModel = function(deviceModel) {
          if (this._allowDeviceFields) {
            this._addContext("DeviceInfo.Model", deviceModel);
          }
        };
        AWTSemanticContext2.prototype.setUserId = function(userId, pii, userIdType) {
          if (!isNaN(userIdType) && userIdType !== null && userIdType >= 0 && userIdType <= 12) {
            this._addContext(UI_IDTYPE, userIdType.toString());
          } else {
            var inferredUserIdType = void 0;
            switch (pii) {
              case Enums_1.AWTPiiKind.SipAddress:
                inferredUserIdType = Enums_2.AWTUserIdType.SipAddress;
                break;
              case Enums_1.AWTPiiKind.PhoneNumber:
                inferredUserIdType = Enums_2.AWTUserIdType.PhoneNumber;
                break;
              case Enums_1.AWTPiiKind.SmtpAddress:
                inferredUserIdType = Enums_2.AWTUserIdType.EmailAddress;
                break;
              default:
                inferredUserIdType = Enums_2.AWTUserIdType.Unknown;
                break;
            }
            this._addContext(UI_IDTYPE, inferredUserIdType.toString());
          }
          if (isNaN(pii) || pii === null || pii === Enums_1.AWTPiiKind.NotSet || pii > 13) {
            switch (userIdType) {
              case Enums_2.AWTUserIdType.Skype:
                pii = Enums_1.AWTPiiKind.Identity;
                break;
              case Enums_2.AWTUserIdType.EmailAddress:
                pii = Enums_1.AWTPiiKind.SmtpAddress;
                break;
              case Enums_2.AWTUserIdType.PhoneNumber:
                pii = Enums_1.AWTPiiKind.PhoneNumber;
                break;
              case Enums_2.AWTUserIdType.SipAddress:
                pii = Enums_1.AWTPiiKind.SipAddress;
                break;
              default:
                pii = Enums_1.AWTPiiKind.NotSet;
                break;
            }
          }
          this._addContextWithPii("UserInfo.Id", userId, pii);
        };
        AWTSemanticContext2.prototype.setUserAdvertisingId = function(userAdvertisingId) {
          this._addContext("UserInfo.AdvertisingId", userAdvertisingId);
        };
        AWTSemanticContext2.prototype.setUserTimeZone = function(userTimeZone) {
          this._addContext("UserInfo.TimeZone", userTimeZone);
        };
        AWTSemanticContext2.prototype.setUserLanguage = function(userLanguage) {
          this._addContext("UserInfo.Language", userLanguage);
        };
        AWTSemanticContext2.prototype._addContext = function(key, value) {
          if (typeof value === "string") {
            this._properties.setProperty(key, value);
          }
        };
        AWTSemanticContext2.prototype._addContextWithPii = function(key, value, pii) {
          if (typeof value === "string") {
            this._properties.setPropertyWithPii(key, value, pii);
          }
        };
        return AWTSemanticContext2;
      }()
    );
    exports.default = AWTSemanticContext;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/webjs/AWTLogManagerSettings.js
var require_AWTLogManagerSettings = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/webjs/AWTLogManagerSettings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AWTEventProperties_1 = require_AWTEventProperties();
    var AWTSemanticContext_1 = require_AWTSemanticContext();
    var AWTLogManagerSettings = (
      /** @class */
      function() {
        function AWTLogManagerSettings2() {
        }
        AWTLogManagerSettings2.logManagerContext = new AWTEventProperties_1.default();
        AWTLogManagerSettings2.sessionEnabled = true;
        AWTLogManagerSettings2.loggingEnabled = false;
        AWTLogManagerSettings2.defaultTenantToken = "";
        AWTLogManagerSettings2.semanticContext = new AWTSemanticContext_1.default(true, AWTLogManagerSettings2.logManagerContext);
        return AWTLogManagerSettings2;
      }()
    );
    exports.default = AWTLogManagerSettings;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/webjs/AWTLogManager.js
var require_AWTLogManager = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/webjs/AWTLogManager.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Enums_1 = require_Enums2();
    var Enums_2 = require_Enums3();
    var AWTLogManagerSettings_1 = require_AWTLogManagerSettings();
    var AWTLogger_1 = require_AWTLogger();
    var AWTTransmissionManagerCore_1 = require_AWTTransmissionManagerCore();
    var AWTNotificationManager_1 = require_AWTNotificationManager();
    var AWTAutoCollection_1 = require_AWTAutoCollection();
    var AWTLogManager = (
      /** @class */
      function() {
        function AWTLogManager2() {
        }
        AWTLogManager2.initialize = function(tenantToken, configuration) {
          if (configuration === void 0) {
            configuration = {};
          }
          if (this._isInitialized) {
            return;
          }
          this._isInitialized = true;
          AWTLogManagerSettings_1.default.defaultTenantToken = tenantToken;
          this._overrideValuesFromConfig(configuration);
          if (this._config.disableCookiesUsage && !this._config.propertyStorageOverride) {
            AWTLogManagerSettings_1.default.sessionEnabled = false;
          }
          AWTAutoCollection_1.default.addPropertyStorageOverride(this._config.propertyStorageOverride);
          AWTAutoCollection_1.default.autoCollect(AWTLogManagerSettings_1.default.semanticContext, this._config.disableCookiesUsage, this._config.userAgent);
          AWTTransmissionManagerCore_1.default.initialize(this._config);
          AWTLogManagerSettings_1.default.loggingEnabled = true;
          if (this._config.enableAutoUserSession) {
            this.getLogger().logSession(Enums_2.AWTSessionState.Started);
            window.addEventListener("beforeunload", this.flushAndTeardown);
          }
          return this.getLogger();
        };
        AWTLogManager2.getSemanticContext = function() {
          return AWTLogManagerSettings_1.default.semanticContext;
        };
        AWTLogManager2.flush = function(callback) {
          if (this._isInitialized && !this._isDestroyed) {
            AWTTransmissionManagerCore_1.default.flush(callback);
          }
        };
        AWTLogManager2.flushAndTeardown = function() {
          if (this._isInitialized && !this._isDestroyed) {
            if (this._config.enableAutoUserSession) {
              this.getLogger().logSession(Enums_2.AWTSessionState.Ended);
            }
            AWTTransmissionManagerCore_1.default.flushAndTeardown();
            AWTLogManagerSettings_1.default.loggingEnabled = false;
            this._isDestroyed = true;
          }
        };
        AWTLogManager2.pauseTransmission = function() {
          if (this._isInitialized && !this._isDestroyed) {
            AWTTransmissionManagerCore_1.default.pauseTransmission();
          }
        };
        AWTLogManager2.resumeTransmision = function() {
          if (this._isInitialized && !this._isDestroyed) {
            AWTTransmissionManagerCore_1.default.resumeTransmision();
          }
        };
        AWTLogManager2.setTransmitProfile = function(profileName) {
          if (this._isInitialized && !this._isDestroyed) {
            AWTTransmissionManagerCore_1.default.setTransmitProfile(profileName);
          }
        };
        AWTLogManager2.loadTransmitProfiles = function(profiles) {
          if (this._isInitialized && !this._isDestroyed) {
            AWTTransmissionManagerCore_1.default.loadTransmitProfiles(profiles);
          }
        };
        AWTLogManager2.setContext = function(name, value, type) {
          if (type === void 0) {
            type = Enums_1.AWTPropertyType.Unspecified;
          }
          AWTLogManagerSettings_1.default.logManagerContext.setProperty(name, value, type);
        };
        AWTLogManager2.setContextWithPii = function(name, value, pii, type) {
          if (type === void 0) {
            type = Enums_1.AWTPropertyType.Unspecified;
          }
          AWTLogManagerSettings_1.default.logManagerContext.setPropertyWithPii(name, value, pii, type);
        };
        AWTLogManager2.setContextWithCustomerContent = function(name, value, customerContent, type) {
          if (type === void 0) {
            type = Enums_1.AWTPropertyType.Unspecified;
          }
          AWTLogManagerSettings_1.default.logManagerContext.setPropertyWithCustomerContent(name, value, customerContent, type);
        };
        AWTLogManager2.getLogger = function(tenantToken) {
          var key = tenantToken;
          if (!key || key === AWTLogManagerSettings_1.default.defaultTenantToken) {
            key = "";
          }
          if (!this._loggers[key]) {
            this._loggers[key] = new AWTLogger_1.default(key);
          }
          return this._loggers[key];
        };
        AWTLogManager2.addNotificationListener = function(listener) {
          AWTNotificationManager_1.default.addNotificationListener(listener);
        };
        AWTLogManager2.removeNotificationListener = function(listener) {
          AWTNotificationManager_1.default.removeNotificationListener(listener);
        };
        AWTLogManager2._overrideValuesFromConfig = function(config) {
          if (config.collectorUri) {
            this._config.collectorUri = config.collectorUri;
          }
          if (config.cacheMemorySizeLimitInNumberOfEvents > 0) {
            this._config.cacheMemorySizeLimitInNumberOfEvents = config.cacheMemorySizeLimitInNumberOfEvents;
          }
          if (config.httpXHROverride && config.httpXHROverride.sendPOST) {
            this._config.httpXHROverride = config.httpXHROverride;
          }
          if (config.propertyStorageOverride && config.propertyStorageOverride.getProperty && config.propertyStorageOverride.setProperty) {
            this._config.propertyStorageOverride = config.propertyStorageOverride;
          }
          if (config.userAgent) {
            this._config.userAgent = config.userAgent;
          }
          if (config.disableCookiesUsage) {
            this._config.disableCookiesUsage = config.disableCookiesUsage;
          }
          if (config.canSendStatEvent) {
            this._config.canSendStatEvent = config.canSendStatEvent;
          }
          if (config.enableAutoUserSession && typeof window !== "undefined" && window.addEventListener) {
            this._config.enableAutoUserSession = config.enableAutoUserSession;
          }
          if (config.clockSkewRefreshDurationInMins > 0) {
            this._config.clockSkewRefreshDurationInMins = config.clockSkewRefreshDurationInMins;
          }
        };
        AWTLogManager2._loggers = {};
        AWTLogManager2._isInitialized = false;
        AWTLogManager2._isDestroyed = false;
        AWTLogManager2._config = {
          collectorUri: "https://browser.pipe.aria.microsoft.com/Collector/3.0/",
          cacheMemorySizeLimitInNumberOfEvents: 1e4,
          disableCookiesUsage: false,
          canSendStatEvent: function(eventName) {
            return true;
          },
          clockSkewRefreshDurationInMins: 0
        };
        return AWTLogManager2;
      }()
    );
    exports.default = AWTLogManager;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/webjs/AWTTransmissionManagerCore.js
var require_AWTTransmissionManagerCore = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/webjs/AWTTransmissionManagerCore.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DataModels_1 = require_DataModels();
    var Enums_1 = require_Enums2();
    var AWTQueueManager_1 = require_AWTQueueManager();
    var AWTStatsManager_1 = require_AWTStatsManager();
    var AWTEventProperties_1 = require_AWTEventProperties();
    var AWTLogManager_1 = require_AWTLogManager();
    var Utils = require_Utils();
    var MaxBackoffCount = 4;
    var MinDurationBetweenUploadNow = 3e4;
    var StatName = "awt_stats";
    var AWTTransmissionManagerCore = (
      /** @class */
      function() {
        function AWTTransmissionManagerCore2() {
        }
        AWTTransmissionManagerCore2.setEventsHandler = function(eventsHandler) {
          this._eventHandler = eventsHandler;
        };
        AWTTransmissionManagerCore2.getEventsHandler = function() {
          return this._eventHandler;
        };
        AWTTransmissionManagerCore2.scheduleTimer = function() {
          var _this = this;
          var timer = this._profiles[this._currentProfile][2];
          if (this._timeout < 0 && timer >= 0 && !this._paused) {
            if (this._eventHandler.hasEvents()) {
              if (timer === 0 && this._currentBackoffCount > 0) {
                timer = 1;
              }
              this._timeout = setTimeout(function() {
                return _this._batchAndSendEvents();
              }, timer * (1 << this._currentBackoffCount) * 1e3);
            } else {
              this._timerCount = 0;
            }
          }
        };
        AWTTransmissionManagerCore2.initialize = function(config) {
          var _this = this;
          this._newEventsAllowed = true;
          this._config = config;
          this._eventHandler = new AWTQueueManager_1.default(config.collectorUri, config.cacheMemorySizeLimitInNumberOfEvents, config.httpXHROverride, config.clockSkewRefreshDurationInMins);
          this._initializeProfiles();
          AWTStatsManager_1.default.initialize(function(stats, tenantId) {
            if (_this._config.canSendStatEvent(StatName)) {
              var event_1 = new AWTEventProperties_1.default(StatName);
              event_1.setEventPriority(Enums_1.AWTEventPriority.High);
              event_1.setProperty("TenantId", tenantId);
              for (var statKey in stats) {
                if (stats.hasOwnProperty(statKey)) {
                  event_1.setProperty(statKey, stats[statKey].toString());
                }
              }
              AWTLogManager_1.default.getLogger(Utils.StatsApiKey).logEvent(event_1);
            }
          });
        };
        AWTTransmissionManagerCore2.setTransmitProfile = function(profileName) {
          if (this._currentProfile !== profileName && this._profiles[profileName] !== void 0) {
            this.clearTimeout();
            this._currentProfile = profileName;
            this.scheduleTimer();
          }
        };
        AWTTransmissionManagerCore2.loadTransmitProfiles = function(profiles) {
          this._resetTransmitProfiles();
          for (var profileName in profiles) {
            if (profiles.hasOwnProperty(profileName)) {
              if (profiles[profileName].length !== 3) {
                continue;
              }
              for (var i = 2; i >= 0; --i) {
                if (profiles[profileName][i] < 0) {
                  for (var j = i; j >= 0; --j) {
                    profiles[profileName][j] = -1;
                  }
                  break;
                }
              }
              for (var i = 2; i > 0; --i) {
                if (profiles[profileName][i] > 0 && profiles[profileName][i - 1] > 0) {
                  var timerMultiplier = profiles[profileName][i - 1] / profiles[profileName][i];
                  profiles[profileName][i - 1] = Math.ceil(timerMultiplier) * profiles[profileName][i];
                }
              }
              this._profiles[profileName] = profiles[profileName];
            }
          }
        };
        AWTTransmissionManagerCore2.sendEvent = function(event) {
          if (this._newEventsAllowed) {
            if (this._currentBackoffCount > 0 && event.priority === Enums_1.AWTEventPriority.Immediate_sync) {
              event.priority = Enums_1.AWTEventPriority.High;
            }
            this._eventHandler.addEvent(event);
            this.scheduleTimer();
          }
        };
        AWTTransmissionManagerCore2.flush = function(callback) {
          var currentTime = (/* @__PURE__ */ new Date()).getTime();
          if (!this._paused && this._lastUploadNowCall + MinDurationBetweenUploadNow < currentTime) {
            this._lastUploadNowCall = currentTime;
            if (this._timeout > -1) {
              clearTimeout(this._timeout);
              this._timeout = -1;
            }
            this._eventHandler.uploadNow(callback);
          }
        };
        AWTTransmissionManagerCore2.pauseTransmission = function() {
          if (!this._paused) {
            this.clearTimeout();
            this._eventHandler.pauseTransmission();
            this._paused = true;
          }
        };
        AWTTransmissionManagerCore2.resumeTransmision = function() {
          if (this._paused) {
            this._paused = false;
            this._eventHandler.resumeTransmission();
            this.scheduleTimer();
          }
        };
        AWTTransmissionManagerCore2.flushAndTeardown = function() {
          AWTStatsManager_1.default.teardown();
          this._newEventsAllowed = false;
          this.clearTimeout();
          this._eventHandler.teardown();
        };
        AWTTransmissionManagerCore2.backOffTransmission = function() {
          if (this._currentBackoffCount < MaxBackoffCount) {
            this._currentBackoffCount++;
            this.clearTimeout();
            this.scheduleTimer();
          }
        };
        AWTTransmissionManagerCore2.clearBackOff = function() {
          if (this._currentBackoffCount > 0) {
            this._currentBackoffCount = 0;
            this.clearTimeout();
            this.scheduleTimer();
          }
        };
        AWTTransmissionManagerCore2._resetTransmitProfiles = function() {
          this.clearTimeout();
          this._initializeProfiles();
          this._currentProfile = DataModels_1.AWT_REAL_TIME;
          this.scheduleTimer();
        };
        AWTTransmissionManagerCore2.clearTimeout = function() {
          if (this._timeout > 0) {
            clearTimeout(this._timeout);
            this._timeout = -1;
            this._timerCount = 0;
          }
        };
        AWTTransmissionManagerCore2._batchAndSendEvents = function() {
          var priority = Enums_1.AWTEventPriority.High;
          this._timerCount++;
          if (this._timerCount * this._profiles[this._currentProfile][2] === this._profiles[this._currentProfile][0]) {
            priority = Enums_1.AWTEventPriority.Low;
            this._timerCount = 0;
          } else if (this._timerCount * this._profiles[this._currentProfile][2] === this._profiles[this._currentProfile][1]) {
            priority = Enums_1.AWTEventPriority.Normal;
          }
          this._eventHandler.sendEventsForPriorityAndAbove(priority);
          this._timeout = -1;
          this.scheduleTimer();
        };
        AWTTransmissionManagerCore2._initializeProfiles = function() {
          this._profiles = {};
          this._profiles[DataModels_1.AWT_REAL_TIME] = [4, 2, 1];
          this._profiles[DataModels_1.AWT_NEAR_REAL_TIME] = [12, 6, 3];
          this._profiles[DataModels_1.AWT_BEST_EFFORT] = [36, 18, 9];
        };
        AWTTransmissionManagerCore2._newEventsAllowed = false;
        AWTTransmissionManagerCore2._currentProfile = DataModels_1.AWT_REAL_TIME;
        AWTTransmissionManagerCore2._timeout = -1;
        AWTTransmissionManagerCore2._currentBackoffCount = 0;
        AWTTransmissionManagerCore2._paused = false;
        AWTTransmissionManagerCore2._timerCount = 0;
        AWTTransmissionManagerCore2._lastUploadNowCall = 0;
        return AWTTransmissionManagerCore2;
      }()
    );
    exports.default = AWTTransmissionManagerCore;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/webjs/AWTLogger.js
var require_AWTLogger = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/webjs/AWTLogger.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Enums_1 = require_Enums2();
    var Enums_2 = require_Enums3();
    var AWTEventProperties_1 = require_AWTEventProperties();
    var Utils = require_Utils();
    var AWTStatsManager_1 = require_AWTStatsManager();
    var AWTNotificationManager_1 = require_AWTNotificationManager();
    var AWTTransmissionManagerCore_1 = require_AWTTransmissionManagerCore();
    var AWTLogManagerSettings_1 = require_AWTLogManagerSettings();
    var Version = require_Version();
    var AWTSemanticContext_1 = require_AWTSemanticContext();
    var AWTAutoCollection_1 = require_AWTAutoCollection();
    var AWTLogger = (
      /** @class */
      function() {
        function AWTLogger2(_apiKey) {
          this._apiKey = _apiKey;
          this._contextProperties = new AWTEventProperties_1.default();
          this._semanticContext = new AWTSemanticContext_1.default(false, this._contextProperties);
          this._sessionStartTime = 0;
          this._createInitId();
        }
        AWTLogger2.prototype.setContext = function(name, value, type) {
          if (type === void 0) {
            type = Enums_1.AWTPropertyType.Unspecified;
          }
          this._contextProperties.setProperty(name, value, type);
        };
        AWTLogger2.prototype.setContextWithPii = function(name, value, pii, type) {
          if (type === void 0) {
            type = Enums_1.AWTPropertyType.Unspecified;
          }
          this._contextProperties.setPropertyWithPii(name, value, pii, type);
        };
        AWTLogger2.prototype.setContextWithCustomerContent = function(name, value, customerContent, type) {
          if (type === void 0) {
            type = Enums_1.AWTPropertyType.Unspecified;
          }
          this._contextProperties.setPropertyWithCustomerContent(name, value, customerContent, type);
        };
        AWTLogger2.prototype.getSemanticContext = function() {
          return this._semanticContext;
        };
        AWTLogger2.prototype.logEvent = function(event) {
          if (AWTLogManagerSettings_1.default.loggingEnabled) {
            if (!this._apiKey) {
              this._apiKey = AWTLogManagerSettings_1.default.defaultTenantToken;
              this._createInitId();
            }
            var sanitizeProperties = true;
            if (Utils.isString(event)) {
              event = {
                name: event
              };
            } else if (event instanceof AWTEventProperties_1.default) {
              event = event.getEvent();
              sanitizeProperties = false;
            }
            AWTStatsManager_1.default.eventReceived(this._apiKey);
            AWTLogger2._logEvent(AWTLogger2._getInternalEvent(event, this._apiKey, sanitizeProperties), this._contextProperties);
          }
        };
        AWTLogger2.prototype.logSession = function(state, properties) {
          if (AWTLogManagerSettings_1.default.sessionEnabled) {
            var sessionEvent = {
              name: "session",
              type: "session",
              properties: {}
            };
            AWTLogger2._addPropertiesToEvent(sessionEvent, properties);
            sessionEvent.priority = Enums_1.AWTEventPriority.High;
            if (state === Enums_2.AWTSessionState.Started) {
              if (this._sessionStartTime > 0) {
                return;
              }
              this._sessionStartTime = (/* @__PURE__ */ new Date()).getTime();
              this._sessionId = Utils.newGuid();
              this.setContext("Session.Id", this._sessionId);
              sessionEvent.properties["Session.State"] = "Started";
            } else if (state === Enums_2.AWTSessionState.Ended) {
              if (this._sessionStartTime === 0) {
                return;
              }
              var sessionDurationSec = Math.floor(((/* @__PURE__ */ new Date()).getTime() - this._sessionStartTime) / 1e3);
              sessionEvent.properties["Session.Id"] = this._sessionId;
              sessionEvent.properties["Session.State"] = "Ended";
              sessionEvent.properties["Session.Duration"] = sessionDurationSec.toString();
              sessionEvent.properties["Session.DurationBucket"] = AWTLogger2._getSessionDurationFromTime(sessionDurationSec);
              this._sessionStartTime = 0;
              this.setContext("Session.Id", null);
              this._sessionId = void 0;
            } else {
              return;
            }
            sessionEvent.properties["Session.FirstLaunchTime"] = AWTAutoCollection_1.default.firstLaunchTime;
            this.logEvent(sessionEvent);
          }
        };
        AWTLogger2.prototype.getSessionId = function() {
          return this._sessionId;
        };
        AWTLogger2.prototype.logFailure = function(signature, detail, category, id, properties) {
          if (!signature || !detail) {
            return;
          }
          var failureEvent = {
            name: "failure",
            type: "failure",
            properties: {}
          };
          AWTLogger2._addPropertiesToEvent(failureEvent, properties);
          failureEvent.properties["Failure.Signature"] = signature;
          failureEvent.properties["Failure.Detail"] = detail;
          if (category) {
            failureEvent.properties["Failure.Category"] = category;
          }
          if (id) {
            failureEvent.properties["Failure.Id"] = id;
          }
          failureEvent.priority = Enums_1.AWTEventPriority.High;
          this.logEvent(failureEvent);
        };
        AWTLogger2.prototype.logPageView = function(id, pageName, category, uri, referrerUri, properties) {
          if (!id || !pageName) {
            return;
          }
          var pageViewEvent = {
            name: "pageview",
            type: "pageview",
            properties: {}
          };
          AWTLogger2._addPropertiesToEvent(pageViewEvent, properties);
          pageViewEvent.properties["PageView.Id"] = id;
          pageViewEvent.properties["PageView.Name"] = pageName;
          if (category) {
            pageViewEvent.properties["PageView.Category"] = category;
          }
          if (uri) {
            pageViewEvent.properties["PageView.Uri"] = uri;
          }
          if (referrerUri) {
            pageViewEvent.properties["PageView.ReferrerUri"] = referrerUri;
          }
          this.logEvent(pageViewEvent);
        };
        AWTLogger2.prototype._createInitId = function() {
          if (!AWTLogger2._initIdMap[this._apiKey] && this._apiKey) {
            AWTLogger2._initIdMap[this._apiKey] = Utils.newGuid();
          }
        };
        AWTLogger2._addPropertiesToEvent = function(event, propertiesEvent) {
          if (propertiesEvent) {
            if (propertiesEvent instanceof AWTEventProperties_1.default) {
              propertiesEvent = propertiesEvent.getEvent();
            }
            if (propertiesEvent.name) {
              event.name = propertiesEvent.name;
            }
            if (propertiesEvent.priority) {
              event.priority = propertiesEvent.priority;
            }
            for (var name_1 in propertiesEvent.properties) {
              if (propertiesEvent.properties.hasOwnProperty(name_1)) {
                event.properties[name_1] = propertiesEvent.properties[name_1];
              }
            }
          }
        };
        AWTLogger2._getSessionDurationFromTime = function(timeInSec) {
          if (timeInSec < 0) {
            return "Undefined";
          } else if (timeInSec <= 3) {
            return "UpTo3Sec";
          } else if (timeInSec <= 10) {
            return "UpTo10Sec";
          } else if (timeInSec <= 30) {
            return "UpTo30Sec";
          } else if (timeInSec <= 60) {
            return "UpTo60Sec";
          } else if (timeInSec <= 180) {
            return "UpTo3Min";
          } else if (timeInSec <= 600) {
            return "UpTo10Min";
          } else if (timeInSec <= 1800) {
            return "UpTo30Min";
          }
          return "Above30Min";
        };
        AWTLogger2._logEvent = function(eventWithMetaData, contextProperties) {
          if (!eventWithMetaData.name || !Utils.isString(eventWithMetaData.name)) {
            AWTNotificationManager_1.default.eventsRejected([eventWithMetaData], Enums_1.AWTEventsRejectedReason.InvalidEvent);
            return;
          }
          eventWithMetaData.name = eventWithMetaData.name.toLowerCase();
          eventWithMetaData.name = eventWithMetaData.name.replace(Utils.EventNameDotRegex, "_");
          if (!eventWithMetaData.type || !Utils.isString(eventWithMetaData.type)) {
            eventWithMetaData.type = "custom";
          } else {
            eventWithMetaData.type = eventWithMetaData.type.toLowerCase();
          }
          if (!Utils.EventNameAndTypeRegex.test(eventWithMetaData.name) || !Utils.EventNameAndTypeRegex.test(eventWithMetaData.type)) {
            AWTNotificationManager_1.default.eventsRejected([eventWithMetaData], Enums_1.AWTEventsRejectedReason.InvalidEvent);
            return;
          }
          if (!Utils.isNumber(eventWithMetaData.timestamp) || eventWithMetaData.timestamp < 0) {
            eventWithMetaData.timestamp = (/* @__PURE__ */ new Date()).getTime();
          }
          if (!eventWithMetaData.properties) {
            eventWithMetaData.properties = {};
          }
          this._addContextIfAbsent(eventWithMetaData, contextProperties.getPropertyMap());
          this._addContextIfAbsent(eventWithMetaData, AWTLogManagerSettings_1.default.logManagerContext.getPropertyMap());
          this._setDefaultProperty(eventWithMetaData, "EventInfo.InitId", this._getInitId(eventWithMetaData.apiKey));
          this._setDefaultProperty(eventWithMetaData, "EventInfo.Sequence", this._getSequenceId(eventWithMetaData.apiKey));
          this._setDefaultProperty(eventWithMetaData, "EventInfo.SdkVersion", Version.FullVersionString);
          this._setDefaultProperty(eventWithMetaData, "EventInfo.Name", eventWithMetaData.name);
          this._setDefaultProperty(eventWithMetaData, "EventInfo.Time", new Date(eventWithMetaData.timestamp).toISOString());
          if (!Utils.isPriority(eventWithMetaData.priority)) {
            eventWithMetaData.priority = Enums_1.AWTEventPriority.Normal;
          }
          this._sendEvent(eventWithMetaData);
        };
        AWTLogger2._addContextIfAbsent = function(event, contextProperties) {
          if (contextProperties) {
            for (var name_2 in contextProperties) {
              if (contextProperties.hasOwnProperty(name_2)) {
                if (!event.properties[name_2]) {
                  event.properties[name_2] = contextProperties[name_2];
                }
              }
            }
          }
        };
        AWTLogger2._setDefaultProperty = function(event, name, value) {
          event.properties[name] = { value, pii: Enums_1.AWTPiiKind.NotSet, type: Enums_1.AWTPropertyType.String };
        };
        AWTLogger2._sendEvent = function(event) {
          AWTTransmissionManagerCore_1.default.sendEvent(event);
        };
        AWTLogger2._getInternalEvent = function(event, apiKey, sanitizeProperties) {
          event.properties = event.properties || {};
          if (sanitizeProperties) {
            for (var name_3 in event.properties) {
              if (event.properties.hasOwnProperty(name_3)) {
                event.properties[name_3] = Utils.sanitizeProperty(name_3, event.properties[name_3]);
                if (event.properties[name_3] === null) {
                  delete event.properties[name_3];
                }
              }
            }
          }
          var internalEvent = event;
          internalEvent.id = Utils.newGuid();
          internalEvent.apiKey = apiKey;
          return internalEvent;
        };
        AWTLogger2._getInitId = function(apiKey) {
          return AWTLogger2._initIdMap[apiKey];
        };
        AWTLogger2._getSequenceId = function(apiKey) {
          if (AWTLogger2._sequenceIdMap[apiKey] === void 0) {
            AWTLogger2._sequenceIdMap[apiKey] = 0;
          }
          return (++AWTLogger2._sequenceIdMap[apiKey]).toString();
        };
        AWTLogger2._sequenceIdMap = {};
        AWTLogger2._initIdMap = {};
        return AWTLogger2;
      }()
    );
    exports.default = AWTLogger;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/webjs/AWTTransmissionManager.js
var require_AWTTransmissionManager = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/webjs/AWTTransmissionManager.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AWTTransmissionManagerCore_1 = require_AWTTransmissionManagerCore();
    var AWTTransmissionManager = (
      /** @class */
      function() {
        function AWTTransmissionManager2() {
        }
        AWTTransmissionManager2.setEventsHandler = function(eventsHandler) {
          AWTTransmissionManagerCore_1.default.setEventsHandler(eventsHandler);
        };
        AWTTransmissionManager2.getEventsHandler = function() {
          return AWTTransmissionManagerCore_1.default.getEventsHandler();
        };
        AWTTransmissionManager2.scheduleTimer = function() {
          AWTTransmissionManagerCore_1.default.scheduleTimer();
        };
        return AWTTransmissionManager2;
      }()
    );
    exports.default = AWTTransmissionManager;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/webjs/AriaSDK.js
var require_AriaSDK = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/external/aria/webjs/AriaSDK.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Enums_1 = require_Enums2();
    exports.AWTPropertyType = Enums_1.AWTPropertyType;
    exports.AWTPiiKind = Enums_1.AWTPiiKind;
    exports.AWTEventPriority = Enums_1.AWTEventPriority;
    exports.AWTEventsDroppedReason = Enums_1.AWTEventsDroppedReason;
    exports.AWTEventsRejectedReason = Enums_1.AWTEventsRejectedReason;
    exports.AWTCustomerContentKind = Enums_1.AWTCustomerContentKind;
    var Enums_2 = require_Enums3();
    exports.AWTUserIdType = Enums_2.AWTUserIdType;
    exports.AWTSessionState = Enums_2.AWTSessionState;
    var DataModels_1 = require_DataModels();
    exports.AWT_BEST_EFFORT = DataModels_1.AWT_BEST_EFFORT;
    exports.AWT_NEAR_REAL_TIME = DataModels_1.AWT_NEAR_REAL_TIME;
    exports.AWT_REAL_TIME = DataModels_1.AWT_REAL_TIME;
    var AWTEventProperties_1 = require_AWTEventProperties();
    exports.AWTEventProperties = AWTEventProperties_1.default;
    var AWTLogger_1 = require_AWTLogger();
    exports.AWTLogger = AWTLogger_1.default;
    var AWTLogManager_1 = require_AWTLogManager();
    exports.AWTLogManager = AWTLogManager_1.default;
    var AWTTransmissionManager_1 = require_AWTTransmissionManager();
    exports.AWTTransmissionManager = AWTTransmissionManager_1.default;
    var AWTSerializer_1 = require_AWTSerializer();
    exports.AWTSerializer = AWTSerializer_1.default;
    var AWTSemanticContext_1 = require_AWTSemanticContext();
    exports.AWTSemanticContext = AWTSemanticContext_1.default;
    exports.AWT_COLLECTOR_URL_UNITED_STATES = "https://us.pipe.aria.microsoft.com/Collector/3.0/";
    exports.AWT_COLLECTOR_URL_GERMANY = "https://de.pipe.aria.microsoft.com/Collector/3.0/";
    exports.AWT_COLLECTOR_URL_JAPAN = "https://jp.pipe.aria.microsoft.com/Collector/3.0/";
    exports.AWT_COLLECTOR_URL_AUSTRALIA = "https://au.pipe.aria.microsoft.com/Collector/3.0/";
    exports.AWT_COLLECTOR_URL_EUROPE = "https://eu.pipe.aria.microsoft.com/Collector/3.0/";
    exports.AWT_COLLECTOR_URL_USGOV_DOD = "https://pf.pipe.aria.microsoft.com/Collector/3.0";
    exports.AWT_COLLECTOR_URL_USGOV_DOJ = "https://tb.pipe.aria.microsoft.com/Collector/3.0";
  }
});

// node_modules/@microsoft/ocsdk/package.json
var require_package5 = __commonJS({
  "node_modules/@microsoft/ocsdk/package.json"(exports, module) {
    module.exports = {
      name: "@microsoft/ocsdk",
      version: "0.4.0",
      description: "Microsoft Omnichannel SDK",
      files: [
        "dist/**/*",
        "lib/**/*"
      ],
      main: "lib/index.js",
      types: "lib/index.d.ts",
      scripts: {
        test: "karma start karma.conf.js",
        start: "webpack-dev-server",
        watch: "webpack --watch --config webpack.config.js --mode development",
        "build:tsc": "tsc --project tsconfig.json",
        "build:babel": "babel src --extensions .js,.ts --out-dir lib --verbose",
        "build:dev": "webpack --config webpack.config.js --mode development",
        "build:prod": "npm run build:tsc && npm run build:babel && webpack --config webpack.config.js --mode production",
        format: 'prettier --write "src/**/*.ts" "src/**/*.js"',
        lint: "eslint src --ext .ts"
      },
      repository: {
        type: "git",
        url: "https://github.com/microsoft/omnichannel-sdk.git"
      },
      keywords: [],
      author: "Microsoft Corporation",
      license: "MIT",
      devDependencies: {
        "@babel/cli": "^7.15.7",
        "@babel/core": "^7.15.5",
        "@babel/plugin-proposal-class-properties": "^7.14.5",
        "@babel/plugin-transform-runtime": "^7.15.0",
        "@babel/preset-env": "^7.15.6",
        "@babel/preset-typescript": "^7.15.0",
        "@dhigroup/karma-vsts-reporter": "^1.3.0",
        "@types/jasmine": "^3.9.1",
        "@typescript-eslint/eslint-plugin": "^3.10.1",
        "@typescript-eslint/parser": "^3.10.1",
        eslint: "^7.32.0",
        "eslint-plugin-security": "^1.4.0",
        "istanbul-instrumenter-loader": "^3.0.1",
        jasmine: "^3.9.0",
        karma: "^6.3.16",
        "karma-chrome-launcher": "^3.1.0",
        "karma-cli": "^2.0.0",
        "karma-coverage-istanbul-reporter": "^2.1.1",
        "karma-jasmine": "^2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "^4.0.2",
        prettier: "^1.19.1",
        "ts-loader": "^6.2.2",
        typescript: "^3.9.10",
        webpack: "^4.46.0",
        "webpack-cli": "^3.3.12",
        "webpack-dev-server": "^3.11.2",
        "webpack-merge": "^4.2.2"
      },
      dependencies: {
        "@babel/runtime": "^7.15.4",
        "@types/node": "^12.20.26",
        axios: "^0.21.4"
      }
    };
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/package.json
var require_package6 = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/package.json"(exports, module) {
    module.exports = {
      name: "@microsoft/omnichannel-chat-sdk",
      version: "1.4.7-main.8e2093b",
      description: "Microsoft Omnichannel Chat SDK",
      files: [
        "lib/**/*"
      ],
      main: "lib/index.js",
      types: "lib/index.d.ts",
      scripts: {
        "build:tsc": "tsc && cp -r src/external/aria lib/external/",
        test: "jest",
        lint: "eslint src --ext .ts"
      },
      author: "Microsoft Corporation",
      license: "MIT",
      repository: {
        type: "git",
        url: "https://github.com/microsoft/omnichannel-chat-sdk"
      },
      homepage: "https://github.com/microsoft/omnichannel-chat-sdk#readme",
      keywords: [
        "SDK",
        "chat",
        "livechat",
        "support",
        "bot",
        "headless",
        "customer"
      ],
      devDependencies: {
        "@types/core-js": "^2.5.5",
        "@types/jest": "^27.0.1",
        "@typescript-eslint/eslint-plugin": "^4.30.0",
        "@typescript-eslint/parser": "^4.30.0",
        eslint: "^7.32.0",
        jest: "^27.1.0",
        "ts-jest": "^27.0.5",
        typescript: "^3.9.10"
      },
      dependencies: {
        "@azure/communication-chat": "1.1.1",
        "@azure/communication-common": "1.1.0",
        "@microsoft/ocsdk": "^0.4.0",
        "@microsoft/omnichannel-amsclient": "^0.1.4",
        "@microsoft/omnichannel-ic3core": "^0.1.2"
      }
    };
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/telemetry/AriaTelemetry.js
var require_AriaTelemetry = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/telemetry/AriaTelemetry.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var settings_1 = require_settings();
    var Enums_1 = require_Enums2();
    var AriaSDK_1 = require_AriaSDK();
    var LogLevel_1 = require_LogLevel();
    var ScenarioType_1 = require_ScenarioType();
    var settings_2 = require_settings();
    var platform_1 = require_platform();
    var Renderer;
    (function(Renderer2) {
      Renderer2["ReactNative"] = "ReactNative";
    })(Renderer || (Renderer = {}));
    var AriaTelemetry = (
      /** @class */
      function() {
        function AriaTelemetry2() {
        }
        AriaTelemetry2.initialize = function(key) {
          this._debug && console.log("[AriaTelemetry][logger][initialize][custom]");
          AriaTelemetry2._logger = AriaSDK_1.AWTLogManager.initialize(key);
        };
        AriaTelemetry2.setDebug = function(flag) {
          AriaTelemetry2._debug = flag;
        };
        AriaTelemetry2.disable = function() {
          this._debug && console.log("[AriaTelemetry][disable]");
          AriaTelemetry2._disable = true;
        };
        AriaTelemetry2.setCDNPackages = function(packages) {
          AriaTelemetry2._CDNPackagesInfo = __assign(__assign({}, AriaTelemetry2._CDNPackagesInfo), packages);
        };
        AriaTelemetry2.info = function(properties, scenarioType) {
          var _a;
          if (scenarioType === void 0) {
            scenarioType = ScenarioType_1.default.EVENTS;
          }
          var event = {
            name: ScenarioType_1.default.EVENTS,
            properties: __assign(__assign(__assign(__assign(__assign({}, AriaTelemetry2.populateBaseProperties()), AriaTelemetry2.fillWebPlatformData()), AriaTelemetry2.fillMobilePlatformData()), properties), { LogLevel: LogLevel_1.default.INFO }),
            priority: Enums_1.AWTEventPriority.High
          };
          if (scenarioType == ScenarioType_1.default.IC3CLIENT) {
            event = {
              name: ScenarioType_1.default.IC3CLIENT,
              properties: __assign(__assign(__assign({}, AriaTelemetry2.populateIC3ClientBaseProperties()), properties), { LogLevel: LogLevel_1.default.INFO }),
              priority: Enums_1.AWTEventPriority.High
            };
          }
          if (scenarioType == ScenarioType_1.default.OCSDK) {
            event = {
              name: ScenarioType_1.default.OCSDK,
              properties: __assign(__assign(__assign({}, AriaTelemetry2.populateOCSDKBaseProperties()), properties), { LogLevel: LogLevel_1.default.INFO }),
              priority: Enums_1.AWTEventPriority.High
            };
          }
          if (scenarioType == ScenarioType_1.default.ACSCLIENT) {
            event = {
              name: ScenarioType_1.default.ACSCLIENT,
              properties: __assign(__assign(__assign({}, AriaTelemetry2.populateACSClientBaseProperties()), properties), { LogLevel: LogLevel_1.default.INFO }),
              priority: Enums_1.AWTEventPriority.High
            };
          }
          if (scenarioType == ScenarioType_1.default.ACSADAPTER) {
            event = {
              name: ScenarioType_1.default.ACSADAPTER,
              properties: __assign(__assign(__assign({}, AriaTelemetry2.populateACSAdapterBaseProperties()), properties), { LogLevel: LogLevel_1.default.INFO }),
              priority: Enums_1.AWTEventPriority.High
            };
          }
          if (scenarioType == ScenarioType_1.default.CALLINGSDK) {
            event = {
              name: ScenarioType_1.default.CALLINGSDK,
              properties: __assign(__assign(__assign({}, AriaTelemetry2.populateCallingSDKBaseProperties()), properties), { LogLevel: LogLevel_1.default.INFO }),
              priority: Enums_1.AWTEventPriority.High
            };
          }
          if (scenarioType == ScenarioType_1.default.AMSCLIENT) {
            event = {
              name: ScenarioType_1.default.AMSCLIENT,
              properties: __assign(__assign(__assign({}, AriaTelemetry2.populateAMSClientBaseProperties()), properties), { LogLevel: LogLevel_1.default.INFO }),
              priority: Enums_1.AWTEventPriority.High
            };
          }
          this._debug && console.log("[AriaTelemetry][info] " + scenarioType);
          this._debug && console.log(event);
          this._debug && console.log(event.properties.Event);
          !AriaTelemetry2._disable && ((_a = AriaTelemetry2.logger) === null || _a === void 0 ? void 0 : _a.logEvent(event));
        };
        AriaTelemetry2.debug = function(properties, scenarioType) {
          var _a;
          if (scenarioType === void 0) {
            scenarioType = ScenarioType_1.default.EVENTS;
          }
          var event = {
            name: ScenarioType_1.default.EVENTS,
            properties: __assign(__assign(__assign(__assign(__assign({}, AriaTelemetry2.populateBaseProperties()), AriaTelemetry2.fillWebPlatformData()), AriaTelemetry2.fillMobilePlatformData()), properties), { LogLevel: LogLevel_1.default.DEBUG }),
            priority: Enums_1.AWTEventPriority.High
          };
          if (scenarioType == ScenarioType_1.default.IC3CLIENT) {
            event = {
              name: ScenarioType_1.default.IC3CLIENT,
              properties: __assign(__assign(__assign({}, AriaTelemetry2.populateIC3ClientBaseProperties()), properties), { LogLevel: LogLevel_1.default.DEBUG }),
              priority: Enums_1.AWTEventPriority.High
            };
          }
          if (scenarioType == ScenarioType_1.default.OCSDK) {
            event = {
              name: ScenarioType_1.default.OCSDK,
              properties: __assign(__assign(__assign({}, AriaTelemetry2.populateOCSDKBaseProperties()), properties), { LogLevel: LogLevel_1.default.DEBUG }),
              priority: Enums_1.AWTEventPriority.High
            };
          }
          if (scenarioType == ScenarioType_1.default.ACSCLIENT) {
            event = {
              name: ScenarioType_1.default.ACSCLIENT,
              properties: __assign(__assign(__assign({}, AriaTelemetry2.populateACSClientBaseProperties()), properties), { LogLevel: LogLevel_1.default.DEBUG }),
              priority: Enums_1.AWTEventPriority.High
            };
          }
          if (scenarioType == ScenarioType_1.default.ACSADAPTER) {
            event = {
              name: ScenarioType_1.default.ACSADAPTER,
              properties: __assign(__assign(__assign({}, AriaTelemetry2.populateACSAdapterBaseProperties()), properties), { LogLevel: LogLevel_1.default.DEBUG }),
              priority: Enums_1.AWTEventPriority.High
            };
          }
          if (scenarioType == ScenarioType_1.default.CALLINGSDK) {
            event = {
              name: ScenarioType_1.default.CALLINGSDK,
              properties: __assign(__assign(__assign({}, AriaTelemetry2.populateCallingSDKBaseProperties()), properties), { LogLevel: LogLevel_1.default.DEBUG }),
              priority: Enums_1.AWTEventPriority.High
            };
          }
          if (scenarioType == ScenarioType_1.default.AMSCLIENT) {
            event = {
              name: ScenarioType_1.default.AMSCLIENT,
              properties: __assign(__assign(__assign({}, AriaTelemetry2.populateAMSClientBaseProperties()), properties), { LogLevel: LogLevel_1.default.DEBUG }),
              priority: Enums_1.AWTEventPriority.High
            };
          }
          this._debug && console.log("[AriaTelemetry][debug] " + scenarioType);
          this._debug && console.log(event);
          this._debug && console.log(event.properties.Event);
          !AriaTelemetry2._disable && ((_a = AriaTelemetry2.logger) === null || _a === void 0 ? void 0 : _a.logEvent(event));
        };
        AriaTelemetry2.warn = function(properties, scenarioType) {
          var _a;
          if (scenarioType === void 0) {
            scenarioType = ScenarioType_1.default.EVENTS;
          }
          var event = {
            name: ScenarioType_1.default.EVENTS,
            properties: __assign(__assign(__assign(__assign(__assign({}, AriaTelemetry2.populateBaseProperties()), AriaTelemetry2.fillWebPlatformData()), AriaTelemetry2.fillMobilePlatformData()), properties), { LogLevel: LogLevel_1.default.WARN }),
            priority: Enums_1.AWTEventPriority.High
          };
          if (scenarioType == ScenarioType_1.default.IC3CLIENT) {
            event = {
              name: ScenarioType_1.default.IC3CLIENT,
              properties: __assign(__assign(__assign({}, AriaTelemetry2.populateIC3ClientBaseProperties()), properties), { LogLevel: LogLevel_1.default.WARN }),
              priority: Enums_1.AWTEventPriority.High
            };
          }
          if (scenarioType == ScenarioType_1.default.OCSDK) {
            event = {
              name: ScenarioType_1.default.OCSDK,
              properties: __assign(__assign(__assign({}, AriaTelemetry2.populateOCSDKBaseProperties()), properties), { LogLevel: LogLevel_1.default.WARN }),
              priority: Enums_1.AWTEventPriority.High
            };
          }
          if (scenarioType == ScenarioType_1.default.ACSCLIENT) {
            event = {
              name: ScenarioType_1.default.ACSCLIENT,
              properties: __assign(__assign(__assign({}, AriaTelemetry2.populateACSClientBaseProperties()), properties), { LogLevel: LogLevel_1.default.WARN }),
              priority: Enums_1.AWTEventPriority.High
            };
          }
          if (scenarioType == ScenarioType_1.default.ACSADAPTER) {
            event = {
              name: ScenarioType_1.default.ACSADAPTER,
              properties: __assign(__assign(__assign({}, AriaTelemetry2.populateACSAdapterBaseProperties()), properties), { LogLevel: LogLevel_1.default.WARN }),
              priority: Enums_1.AWTEventPriority.High
            };
          }
          if (scenarioType == ScenarioType_1.default.CALLINGSDK) {
            event = {
              name: ScenarioType_1.default.CALLINGSDK,
              properties: __assign(__assign(__assign({}, AriaTelemetry2.populateCallingSDKBaseProperties()), properties), { LogLevel: LogLevel_1.default.WARN }),
              priority: Enums_1.AWTEventPriority.High
            };
          }
          if (scenarioType == ScenarioType_1.default.AMSCLIENT) {
            event = {
              name: ScenarioType_1.default.AMSCLIENT,
              properties: __assign(__assign(__assign({}, AriaTelemetry2.populateAMSClientBaseProperties()), properties), { LogLevel: LogLevel_1.default.WARN }),
              priority: Enums_1.AWTEventPriority.High
            };
          }
          this._debug && console.log("[AriaTelemetry][warn] " + scenarioType);
          this._debug && console.log(event);
          this._debug && console.log(event.properties.Event);
          !AriaTelemetry2._disable && ((_a = AriaTelemetry2.logger) === null || _a === void 0 ? void 0 : _a.logEvent(event));
        };
        AriaTelemetry2.error = function(properties, scenarioType) {
          var _a;
          if (scenarioType === void 0) {
            scenarioType = ScenarioType_1.default.EVENTS;
          }
          var event = {
            name: ScenarioType_1.default.EVENTS,
            properties: __assign(__assign(__assign(__assign(__assign({}, AriaTelemetry2.populateBaseProperties()), AriaTelemetry2.fillWebPlatformData()), AriaTelemetry2.fillMobilePlatformData()), properties), { LogLevel: LogLevel_1.default.ERROR }),
            priority: Enums_1.AWTEventPriority.High
          };
          if (scenarioType == ScenarioType_1.default.IC3CLIENT) {
            event = {
              name: ScenarioType_1.default.IC3CLIENT,
              properties: __assign(__assign(__assign({}, AriaTelemetry2.populateIC3ClientBaseProperties()), properties), { LogLevel: LogLevel_1.default.ERROR }),
              priority: Enums_1.AWTEventPriority.High
            };
          }
          if (scenarioType == ScenarioType_1.default.OCSDK) {
            event = {
              name: ScenarioType_1.default.OCSDK,
              properties: __assign(__assign(__assign({}, AriaTelemetry2.populateOCSDKBaseProperties()), properties), { LogLevel: LogLevel_1.default.ERROR }),
              priority: Enums_1.AWTEventPriority.High
            };
          }
          if (scenarioType == ScenarioType_1.default.ACSCLIENT) {
            event = {
              name: ScenarioType_1.default.ACSCLIENT,
              properties: __assign(__assign(__assign({}, AriaTelemetry2.populateACSClientBaseProperties()), properties), { LogLevel: LogLevel_1.default.ERROR }),
              priority: Enums_1.AWTEventPriority.High
            };
          }
          if (scenarioType == ScenarioType_1.default.ACSADAPTER) {
            event = {
              name: ScenarioType_1.default.ACSADAPTER,
              properties: __assign(__assign(__assign({}, AriaTelemetry2.populateACSAdapterBaseProperties()), properties), { LogLevel: LogLevel_1.default.ERROR }),
              priority: Enums_1.AWTEventPriority.High
            };
          }
          if (scenarioType == ScenarioType_1.default.CALLINGSDK) {
            event = {
              name: ScenarioType_1.default.CALLINGSDK,
              properties: __assign(__assign(__assign({}, AriaTelemetry2.populateCallingSDKBaseProperties()), properties), { LogLevel: LogLevel_1.default.ERROR }),
              priority: Enums_1.AWTEventPriority.High
            };
          }
          if (scenarioType == ScenarioType_1.default.AMSCLIENT) {
            event = {
              name: ScenarioType_1.default.AMSCLIENT,
              properties: __assign(__assign(__assign({}, AriaTelemetry2.populateAMSClientBaseProperties()), properties), { LogLevel: LogLevel_1.default.ERROR }),
              priority: Enums_1.AWTEventPriority.High
            };
          }
          this._debug && console.log("[AriaTelemetry][error] " + scenarioType);
          this._debug && console.log(event);
          this._debug && console.log(event.properties.Event);
          !AriaTelemetry2._disable && ((_a = AriaTelemetry2.logger) === null || _a === void 0 ? void 0 : _a.logEvent(event));
        };
        AriaTelemetry2.log = function(properties, scenarioType) {
          var _a;
          if (scenarioType === void 0) {
            scenarioType = ScenarioType_1.default.EVENTS;
          }
          var event = {
            name: ScenarioType_1.default.EVENTS,
            properties: __assign(__assign(__assign(__assign(__assign({}, AriaTelemetry2.populateBaseProperties()), AriaTelemetry2.fillWebPlatformData()), AriaTelemetry2.fillMobilePlatformData()), properties), { LogLevel: LogLevel_1.default.LOG }),
            priority: Enums_1.AWTEventPriority.High
          };
          if (scenarioType == ScenarioType_1.default.IC3CLIENT) {
            event = {
              name: ScenarioType_1.default.IC3CLIENT,
              properties: __assign(__assign(__assign({}, AriaTelemetry2.populateIC3ClientBaseProperties()), properties), { LogLevel: LogLevel_1.default.LOG }),
              priority: Enums_1.AWTEventPriority.High
            };
          }
          if (scenarioType == ScenarioType_1.default.OCSDK) {
            event = {
              name: ScenarioType_1.default.OCSDK,
              properties: __assign(__assign(__assign({}, AriaTelemetry2.populateOCSDKBaseProperties()), properties), { LogLevel: LogLevel_1.default.LOG }),
              priority: Enums_1.AWTEventPriority.High
            };
          }
          if (scenarioType == ScenarioType_1.default.ACSCLIENT) {
            event = {
              name: ScenarioType_1.default.ACSCLIENT,
              properties: __assign(__assign(__assign({}, AriaTelemetry2.populateACSClientBaseProperties()), properties), { LogLevel: LogLevel_1.default.LOG }),
              priority: Enums_1.AWTEventPriority.High
            };
          }
          if (scenarioType == ScenarioType_1.default.ACSADAPTER) {
            event = {
              name: ScenarioType_1.default.ACSADAPTER,
              properties: __assign(__assign(__assign({}, AriaTelemetry2.populateACSAdapterBaseProperties()), properties), { LogLevel: LogLevel_1.default.LOG }),
              priority: Enums_1.AWTEventPriority.High
            };
          }
          if (scenarioType == ScenarioType_1.default.CALLINGSDK) {
            event = {
              name: ScenarioType_1.default.CALLINGSDK,
              properties: __assign(__assign(__assign({}, AriaTelemetry2.populateCallingSDKBaseProperties()), properties), { LogLevel: LogLevel_1.default.LOG }),
              priority: Enums_1.AWTEventPriority.High
            };
          }
          if (scenarioType == ScenarioType_1.default.AMSCLIENT) {
            event = {
              name: ScenarioType_1.default.AMSCLIENT,
              properties: __assign(__assign(__assign({}, AriaTelemetry2.populateAMSClientBaseProperties()), properties), { LogLevel: LogLevel_1.default.LOG }),
              priority: Enums_1.AWTEventPriority.High
            };
          }
          this._debug && console.log("[AriaTelemetry][log]");
          this._debug && console.log(event);
          this._debug && console.log(event.properties.Event);
          !AriaTelemetry2._disable && ((_a = AriaTelemetry2.logger) === null || _a === void 0 ? void 0 : _a.logEvent(event));
        };
        Object.defineProperty(AriaTelemetry2, "logger", {
          get: function() {
            if (!AriaTelemetry2._logger) {
              this._debug && console.log("[AriaTelemetry][logger][initialize]");
              AriaTelemetry2._logger = AriaSDK_1.AWTLogManager.initialize(settings_1.ariaTelemetryKey);
            }
            return AriaTelemetry2._logger;
          },
          enumerable: false,
          configurable: true
        });
        AriaTelemetry2.populateBaseProperties = function() {
          var packagesInfo = {
            OCSDK: require_package5().version,
            IC3Core: require_package().version,
            ACSChat: require_package2().version,
            ACSCommon: require_package3().version,
            AMSClient: require_package4().version
          };
          return {
            ChatSDKRuntimeId: "",
            OrgId: "",
            OrgUrl: "",
            WidgetId: "",
            RequestId: "",
            ChatId: "",
            CallId: "",
            Domain: "",
            ExceptionDetails: "",
            ElapsedTimeInMilliseconds: "",
            ChatSDKVersion: require_package6().version,
            NPMPackagesInfo: JSON.stringify(packagesInfo),
            CDNPackagesInfo: JSON.stringify(AriaTelemetry2._CDNPackagesInfo),
            PlatformDetails: ""
          };
        };
        AriaTelemetry2.fillMobilePlatformData = function() {
          var platformData = {};
          var platformDetails = {};
          if (!platform_1.isReactNative()) {
            return platformData;
          }
          try {
            var ReactNative = __require("react-native");
            var Platform = ReactNative.Platform;
            platformDetails.Renderer = Renderer.ReactNative;
            platformData.DeviceInfo_OsVersion = Platform.Version;
            platformDetails.DeviceInfo_OsVersion = Platform.Version;
            if (Platform.OS.toLowerCase() === "android") {
              platformData.DeviceInfo_OsName = "Android";
              platformDetails.DeviceInfo_OsName = "Android";
            } else if (Platform.OS.toLowerCase() === "ios") {
              platformData.DeviceInfo_OsName = "iOS";
              platformDetails.DeviceInfo_OsName = "iOS";
            } else {
              platformData.DeviceInfo_OsName = "" + Platform.OS;
              platformDetails.DeviceInfo_OsName = "" + Platform.OS;
            }
            this._debug && console.log("[AriaTelemetry][fillMobilePlatformData][" + platformData.DeviceInfo_OsName + "]");
          } catch (_a) {
            this._debug && console.log("[AriaTelemetry][fillMobilePlatformData][Web]");
          }
          platformData.PlatformDetails = JSON.stringify(platformDetails);
          return platformData;
        };
        AriaTelemetry2.fillWebPlatformData = function() {
          var platformData = {};
          if (!platform_1.isBrowser()) {
            return platformData;
          }
          try {
            platformData.Domain = window.location.origin || "";
            this._debug && console.log("[AriaTelemetry][fillWebPlatformData]");
          } catch (_a) {
            this._debug && console.log("[AriaTelemetry][fillWebPlatformData][Error]");
          }
          return platformData;
        };
        AriaTelemetry2.populateIC3ClientBaseProperties = function() {
          return {
            ChatSDKRuntimeId: "",
            OrgId: "",
            OrgUrl: "",
            WidgetId: "",
            RequestId: "",
            ChatId: "",
            Event: "",
            Description: "",
            SubscriptionId: "",
            EndpointId: "",
            EndpointUrl: "",
            ErrorCode: "",
            ExceptionDetails: "",
            ElapsedTimeInMilliseconds: "",
            IC3ClientVersion: settings_2.ic3ClientVersion
          };
        };
        AriaTelemetry2.populateOCSDKBaseProperties = function() {
          return {
            ChatSDKRuntimeId: "",
            OrgId: "",
            OrgUrl: "",
            WidgetId: "",
            RequestId: "",
            ChatId: "",
            TransactionId: "",
            Event: "",
            ExceptionDetails: "",
            ElapsedTimeInMilliseconds: "",
            OCSDKVersion: require_package5().version
            // eslint-disable-line @typescript-eslint/no-var-requires
          };
        };
        AriaTelemetry2.populateACSClientBaseProperties = function() {
          return {
            ChatSDKRuntimeId: "",
            OrgId: "",
            OrgUrl: "",
            WidgetId: "",
            RequestId: "",
            ChatId: "",
            Event: "",
            ExceptionDetails: "",
            ElapsedTimeInMilliseconds: "",
            ACSChatVersion: require_package2().version
            // eslint-disable-line @typescript-eslint/no-var-requires
          };
        };
        AriaTelemetry2.populateACSAdapterBaseProperties = function() {
          return {
            ChatSDKRuntimeId: "",
            OrgId: "",
            OrgUrl: "",
            WidgetId: "",
            RequestId: "",
            ChatId: "",
            Event: "",
            ExceptionDetails: "",
            ElapsedTimeInMilliseconds: "",
            ACSAdapterVersion: settings_2.webChatACSAdapterVersion
          };
        };
        AriaTelemetry2.populateCallingSDKBaseProperties = function() {
          return {
            ChatSDKRuntimeId: "",
            OrgId: "",
            OrgUrl: "",
            WidgetId: "",
            RequestId: "",
            ChatId: "",
            CallId: "",
            Event: "",
            Description: "",
            ExceptionDetails: "",
            ElapsedTimeInMilliseconds: ""
          };
        };
        AriaTelemetry2.populateAMSClientBaseProperties = function() {
          return {
            ChatSDKRuntimeId: "",
            OrgId: "",
            OrgUrl: "",
            WidgetId: "",
            RequestId: "",
            ChatId: "",
            Event: "",
            ExceptionDetails: "",
            ElapsedTimeInMilliseconds: "",
            AMSClientVersion: require_package4().version
            // eslint-disable-line @typescript-eslint/no-var-requires
          };
        };
        AriaTelemetry2._debug = false;
        AriaTelemetry2._disable = false;
        return AriaTelemetry2;
      }()
    );
    exports.default = AriaTelemetry;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/utils/createTelemetry.js
var require_createTelemetry = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/utils/createTelemetry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AriaTelemetry_1 = require_AriaTelemetry();
    var createTelemetry = function(debug) {
      if (debug === void 0) {
        debug = false;
      }
      AriaTelemetry_1.default.setDebug(debug);
      return AriaTelemetry_1.default;
    };
    exports.default = createTelemetry;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/api/createVoiceVideoCalling.js
var require_createVoiceVideoCalling = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/api/createVoiceVideoCalling.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VoiceVideoCallingProxy = void 0;
    var TelemetryEvent_1 = require_TelemetryEvent();
    var SecondaryChannelType;
    (function(SecondaryChannelType2) {
      SecondaryChannelType2[SecondaryChannelType2["Voice"] = 19237e4] = "Voice";
      SecondaryChannelType2[SecondaryChannelType2["Video"] = 19238e4] = "Video";
      SecondaryChannelType2[SecondaryChannelType2["Cobrowse"] = 19239e4] = "Cobrowse";
    })(SecondaryChannelType || (SecondaryChannelType = {}));
    var SecondaryChannelEvents;
    (function(SecondaryChannelEvents2) {
      SecondaryChannelEvents2["Accept"] = "accept";
      SecondaryChannelEvents2["Reject"] = "reject";
      SecondaryChannelEvents2["Connect"] = "connect";
      SecondaryChannelEvents2["End"] = "end";
    })(SecondaryChannelEvents || (SecondaryChannelEvents = {}));
    var CallingEvents;
    (function(CallingEvents2) {
      CallingEvents2["CallAdded"] = "callAdded";
      CallingEvents2["LocalVideoStreamAdded"] = "localVideoStreamAdded";
      CallingEvents2["LocalVideoStreamRemoved"] = "localVideoStreamRemoved";
      CallingEvents2["RemoteVideoStreamAdded"] = "remoteVideoStreamAdded";
      CallingEvents2["RemoteVideoStreamRemoved"] = "remoteVideoStreamRemoved";
      CallingEvents2["CallDisconnected"] = "callDisconnected";
      CallingEvents2["ParticipantDisconnected"] = "participantDisconnected";
      CallingEvents2["IncomingCallEnded"] = "incomingCallEnded";
    })(CallingEvents || (CallingEvents = {}));
    var VoiceVideoCallingProxy = (
      /** @class */
      function() {
        function VoiceVideoCallingProxy2() {
          this.debug = false;
          this.callClientName = "ElevateToVoiceVideo";
          this.proxy = window["Microsoft.Omnichannel.Calling.SDK"].VoiceVideoCalling;
          this.proxyInstance = this.proxy.getInstance();
        }
        VoiceVideoCallingProxy2.getInstance = function() {
          if (!this._instance) {
            this._instance = new VoiceVideoCallingProxy2();
          }
          return this._instance;
        };
        VoiceVideoCallingProxy2.prototype.setDebug = function(flag) {
          this.debug = flag;
        };
        VoiceVideoCallingProxy2.prototype.useScenarioMarker = function(scenarioMarker) {
          this.scenarioMarker = scenarioMarker;
        };
        VoiceVideoCallingProxy2.prototype.load = function(params) {
          if (params === void 0) {
            params = {};
          }
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              if (params.logger) {
                this.logger = params.logger;
              }
              this.proxyInstance.load(params);
              return [
                2
                /*return*/
              ];
            });
          });
        };
        VoiceVideoCallingProxy2.prototype.isInitialized = function() {
          return this.proxyInstance.isInitialized();
        };
        VoiceVideoCallingProxy2.prototype.initialize = function(params) {
          var _a, _b, _c, _d, _e, _f, _g, _h;
          return __awaiter(this, void 0, void 0, function() {
            var error_1;
            return __generator(this, function(_j) {
              switch (_j.label) {
                case 0:
                  this.debug && console.debug("[VoiceVideoCallingProxy] VoiceVideoCallingParams: " + JSON.stringify(params));
                  this.callingParams = params;
                  (_a = this.scenarioMarker) === null || _a === void 0 ? void 0 : _a.startScenario(TelemetryEvent_1.default.InitializeVoiceVideoCallingSDK);
                  this.debug && console.debug("[VoiceVideoCallingProxy][initialize] _isLoaded: " + this.proxyInstance._isLoaded);
                  if (!!this.proxyInstance._isLoaded)
                    return [3, 2];
                  return [4, this.proxyInstance.load({
                    logger: this.logger || void 0
                  })];
                case 1:
                  _j.sent();
                  _j.label = 2;
                case 2:
                  _j.trys.push([2, 4, , 5]);
                  return [4, this.proxyInstance.initialize({
                    callClientName: this.callClientName,
                    accesstoken: ((_c = (_b = this.callingParams) === null || _b === void 0 ? void 0 : _b.chatToken.voiceVideoCallToken) === null || _c === void 0 ? void 0 : _c.Token) || ((_d = this.callingParams) === null || _d === void 0 ? void 0 : _d.chatToken.token),
                    selfVideoHTMLElementId: (_e = this.callingParams) === null || _e === void 0 ? void 0 : _e.selfVideoHTMLElementId,
                    remoteVideoHTMLElementId: (_f = this.callingParams) === null || _f === void 0 ? void 0 : _f.remoteVideoHTMLElementId
                  })];
                case 3:
                  _j.sent();
                  (_g = this.scenarioMarker) === null || _g === void 0 ? void 0 : _g.completeScenario(TelemetryEvent_1.default.InitializeVoiceVideoCallingSDK);
                  return [3, 5];
                case 4:
                  error_1 = _j.sent();
                  console.log(error_1);
                  (_h = this.scenarioMarker) === null || _h === void 0 ? void 0 : _h.failScenario(TelemetryEvent_1.default.InitializeVoiceVideoCallingSDK);
                  return [3, 5];
                case 5:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        VoiceVideoCallingProxy2.prototype.addEventListener = function(eventName, callback) {
          var _this = this;
          this.proxyInstance.registerEvent(eventName, function(params) {
            var callId = params.callId;
            if (eventName === CallingEvents.CallAdded) {
              _this.callId = callId;
            }
            _this.debug && console.debug("[VoiceVideoCallingProxy][" + eventName + "] callId: " + callId);
            if (callId !== _this.callId) {
              return;
            }
            callback(params);
          });
        };
        VoiceVideoCallingProxy2.prototype.isMicrophoneMuted = function() {
          var _a = this, callClientName = _a.callClientName, callId = _a.callId;
          return this.proxyInstance.isMicrophoneMuted({ callClientName, callId });
        };
        VoiceVideoCallingProxy2.prototype.acceptCall = function(params) {
          var _a, _b, _c, _d, _e, _f;
          if (params === void 0) {
            params = {};
          }
          return __awaiter(this, void 0, void 0, function() {
            var _g, callClientName, callId, _h, exceptionDetails, body, exceptionDetails;
            return __generator(this, function(_j) {
              switch (_j.label) {
                case 0:
                  _g = this, callClientName = _g.callClientName, callId = _g.callId;
                  (_a = this.scenarioMarker) === null || _a === void 0 ? void 0 : _a.startScenario(params.withVideo ? TelemetryEvent_1.default.AcceptVideoCall : TelemetryEvent_1.default.AcceptVoiceCall, {
                    CallId: callId || ""
                  });
                  this.debug && console.debug("[VoiceVideoCallingProxy][acceptCall] callId: " + callId);
                  this.debug && console.debug(params);
                  _j.label = 1;
                case 1:
                  _j.trys.push([1, 3, , 4]);
                  return [4, this.proxyInstance.acceptCall({ callClientName, callId, withVideo: params.withVideo || false })];
                case 2:
                  _j.sent();
                  return [3, 4];
                case 3:
                  _h = _j.sent();
                  exceptionDetails = {
                    response: params.withVideo ? "AcceptVideoCallFailed" : "AcceptVoiceCallFailed"
                  };
                  (_b = this.scenarioMarker) === null || _b === void 0 ? void 0 : _b.failScenario(params.withVideo ? TelemetryEvent_1.default.AcceptVideoCall : TelemetryEvent_1.default.AcceptVoiceCall, {
                    CallId: callId || "",
                    ExceptionDetails: JSON.stringify(exceptionDetails)
                  });
                  return [3, 4];
                case 4:
                  body = {
                    SecondaryChannelType: params.withVideo ? SecondaryChannelType.Video : SecondaryChannelType.Voice,
                    SecondaryChannelEventType: SecondaryChannelEvents.Accept
                  };
                  try {
                    (_c = this.callingParams) === null || _c === void 0 ? void 0 : _c.OCClient.makeSecondaryChannelEventRequest((_d = this.callingParams) === null || _d === void 0 ? void 0 : _d.chatToken.requestId, body);
                    (_e = this.scenarioMarker) === null || _e === void 0 ? void 0 : _e.completeScenario(params.withVideo ? TelemetryEvent_1.default.AcceptVideoCall : TelemetryEvent_1.default.AcceptVoiceCall, {
                      CallId: callId || ""
                    });
                    this.debug && console.debug("[VoiceVideoCallingProxy][acceptCall][makeSecondaryChannelEventRequest]");
                  } catch (e) {
                    exceptionDetails = {
                      response: "OCClientMakeSecondaryChannelEventRequestFailed"
                    };
                    (_f = this.scenarioMarker) === null || _f === void 0 ? void 0 : _f.failScenario(params.withVideo ? TelemetryEvent_1.default.AcceptVideoCall : TelemetryEvent_1.default.AcceptVoiceCall, {
                      CallId: callId || "",
                      ExceptionDetails: JSON.stringify(exceptionDetails)
                    });
                    console.error("[VoiceVideoCallingProxy][acceptCall][makeSecondaryChannelEventRequest] Failure " + e);
                  }
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        VoiceVideoCallingProxy2.prototype.rejectCall = function() {
          var _a, _b, _c, _d, _e, _f;
          return __awaiter(this, void 0, void 0, function() {
            var _g, callClientName, callId, _h, exceptionDetails, body, exceptionDetails;
            return __generator(this, function(_j) {
              switch (_j.label) {
                case 0:
                  _g = this, callClientName = _g.callClientName, callId = _g.callId;
                  (_a = this.scenarioMarker) === null || _a === void 0 ? void 0 : _a.startScenario(TelemetryEvent_1.default.RejectCall, {
                    CallId: callId || ""
                  });
                  this.debug && console.debug("[VoiceVideoCallingProxy][rejectCall] callId: " + callId);
                  _j.label = 1;
                case 1:
                  _j.trys.push([1, 3, , 4]);
                  return [4, this.proxyInstance.rejectCall({ callClientName, callId })];
                case 2:
                  _j.sent();
                  (_b = this.scenarioMarker) === null || _b === void 0 ? void 0 : _b.completeScenario(TelemetryEvent_1.default.RejectCall, {
                    CallId: callId || ""
                  });
                  return [3, 4];
                case 3:
                  _h = _j.sent();
                  exceptionDetails = {
                    response: "RejectCallFailed"
                  };
                  (_c = this.scenarioMarker) === null || _c === void 0 ? void 0 : _c.failScenario(TelemetryEvent_1.default.RejectCall, {
                    CallId: callId || "",
                    ExceptionDetails: JSON.stringify(exceptionDetails)
                  });
                  return [3, 4];
                case 4:
                  body = {
                    SecondaryChannelType: this.isRemoteVideoEnabled() ? SecondaryChannelType.Video : SecondaryChannelType.Voice,
                    SecondaryChannelEventType: SecondaryChannelEvents.Reject
                  };
                  try {
                    (_d = this.callingParams) === null || _d === void 0 ? void 0 : _d.OCClient.makeSecondaryChannelEventRequest((_e = this.callingParams) === null || _e === void 0 ? void 0 : _e.chatToken.requestId, body);
                    this.debug && console.debug("[VoiceVideoCallingProxy][rejectCall][makeSecondaryChannelEventRequest]");
                  } catch (e) {
                    exceptionDetails = {
                      response: "OCClientMakeSecondaryChannelEventRequestFailed"
                    };
                    (_f = this.scenarioMarker) === null || _f === void 0 ? void 0 : _f.failScenario(TelemetryEvent_1.default.RejectCall, {
                      CallId: callId || "",
                      ExceptionDetails: JSON.stringify(exceptionDetails)
                    });
                    console.error("[VoiceVideoCallingProxy][rejectCall][makeSecondaryChannelEventRequest] Failure " + e);
                  }
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        VoiceVideoCallingProxy2.prototype.stopCall = function() {
          var _a, _b, _c, _d, _e;
          return __awaiter(this, void 0, void 0, function() {
            var _f, callClientName, callId, forEveryone, _g;
            return __generator(this, function(_h) {
              switch (_h.label) {
                case 0:
                  _f = this, callClientName = _f.callClientName, callId = _f.callId;
                  (_a = this.scenarioMarker) === null || _a === void 0 ? void 0 : _a.startScenario(TelemetryEvent_1.default.StopCall, {
                    CallId: callId || ""
                  });
                  this.debug && console.debug("[VoiceVideoCallingProxy][stopCall] callId: " + callId);
                  forEveryone = ((_c = (_b = this.callingParams) === null || _b === void 0 ? void 0 : _b.chatToken.voiceVideoCallToken) === null || _c === void 0 ? void 0 : _c.Token) ? true : false;
                  _h.label = 1;
                case 1:
                  _h.trys.push([1, 3, , 4]);
                  return [4, this.proxyInstance.stopCall({ callClientName, callId, forEveryone })];
                case 2:
                  _h.sent();
                  (_d = this.scenarioMarker) === null || _d === void 0 ? void 0 : _d.completeScenario(TelemetryEvent_1.default.StopCall, {
                    CallId: callId || ""
                  });
                  return [3, 4];
                case 3:
                  _g = _h.sent();
                  (_e = this.scenarioMarker) === null || _e === void 0 ? void 0 : _e.failScenario(TelemetryEvent_1.default.StopCall, {
                    CallId: callId || ""
                  });
                  return [3, 4];
                case 4:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        VoiceVideoCallingProxy2.prototype.toggleMute = function() {
          return __awaiter(this, void 0, void 0, function() {
            var _a, callClientName, callId;
            return __generator(this, function(_b) {
              _a = this, callClientName = _a.callClientName, callId = _a.callId;
              return [2, this.proxyInstance.toggleMute({ callClientName, callId })];
            });
          });
        };
        VoiceVideoCallingProxy2.prototype.isRemoteVideoEnabled = function() {
          var _a = this, callClientName = _a.callClientName, callId = _a.callId;
          return this.proxyInstance.isRemoteVideoEnabled({ callClientName, callId });
        };
        VoiceVideoCallingProxy2.prototype.isLocalVideoEnabled = function() {
          var _a = this, callClientName = _a.callClientName, callId = _a.callId;
          return this.proxyInstance.isLocalVideoEnabled({ callClientName, callId });
        };
        VoiceVideoCallingProxy2.prototype.toggleLocalVideo = function() {
          return __awaiter(this, void 0, void 0, function() {
            var _a, callClientName, callId;
            return __generator(this, function(_b) {
              _a = this, callClientName = _a.callClientName, callId = _a.callId;
              return [2, this.proxyInstance.toggleLocalVideo({ callClientName, callId })];
            });
          });
        };
        VoiceVideoCallingProxy2.prototype.isInACall = function() {
          var _a = this, callClientName = _a.callClientName, callId = _a.callId;
          return this.proxyInstance.isInACall({ callClientName, callId });
        };
        VoiceVideoCallingProxy2.prototype.renderVideoStreams = function() {
          var _a = this, callClientName = _a.callClientName, callId = _a.callId;
          return this.proxyInstance.renderVideoStreams({ callClientName, callId });
        };
        VoiceVideoCallingProxy2.prototype.disposeVideoRenderers = function() {
          var _a = this, callClientName = _a.callClientName, callId = _a.callId;
          return this.proxyInstance.disposeVideoRenderers({ callClientName, callId });
        };
        VoiceVideoCallingProxy2.prototype.close = function() {
          this.debug && console.debug("[VoiceVideoCallingProxy][close]");
          this.proxyInstance.dispose();
          this.callingParams = void 0;
          this.callId = void 0;
        };
        VoiceVideoCallingProxy2.prototype.onCallAdded = function(callback) {
          var eventName = CallingEvents.CallAdded;
          this.debug && console.debug("[VoiceVideoCallingProxy][" + eventName + "]");
          this.addEventListener(eventName, callback);
        };
        VoiceVideoCallingProxy2.prototype.onLocalVideoStreamAdded = function(callback) {
          var eventName = CallingEvents.LocalVideoStreamAdded;
          this.debug && console.debug("[VoiceVideoCallingProxy][" + eventName + "]");
          this.addEventListener(eventName, callback);
        };
        VoiceVideoCallingProxy2.prototype.onLocalVideoStreamRemoved = function(callback) {
          var eventName = CallingEvents.LocalVideoStreamRemoved;
          this.debug && console.debug("[VoiceVideoCallingProxy][" + eventName + "]");
          this.addEventListener(eventName, callback);
        };
        VoiceVideoCallingProxy2.prototype.onRemoteVideoStreamAdded = function(callback) {
          var eventName = CallingEvents.RemoteVideoStreamAdded;
          this.debug && console.debug("[VoiceVideoCallingProxy][" + eventName + "]");
          this.addEventListener(eventName, callback);
        };
        VoiceVideoCallingProxy2.prototype.onRemoteVideoStreamRemoved = function(callback) {
          var eventName = CallingEvents.RemoteVideoStreamRemoved;
          this.debug && console.debug("[VoiceVideoCallingProxy][" + eventName + "]");
          this.addEventListener(eventName, callback);
        };
        VoiceVideoCallingProxy2.prototype.onCallDisconnected = function(callback) {
          var _this = this;
          var eventName = CallingEvents.CallDisconnected;
          this.debug && console.debug("[VoiceVideoCallingProxy][" + eventName + "]");
          this.addEventListener(eventName, function(params) {
            return __awaiter(_this, void 0, void 0, function() {
              var body, exceptionDetails;
              var _a, _b, _c, _d, _e;
              return __generator(this, function(_f) {
                body = {
                  SecondaryChannelType: SecondaryChannelType.Voice,
                  SecondaryChannelEventType: SecondaryChannelEvents.End
                };
                (_a = this.scenarioMarker) === null || _a === void 0 ? void 0 : _a.startScenario(TelemetryEvent_1.default.OnCallDisconnected, {
                  CallId: this.callId || ""
                });
                try {
                  (_b = this.callingParams) === null || _b === void 0 ? void 0 : _b.OCClient.makeSecondaryChannelEventRequest((_c = this.callingParams) === null || _c === void 0 ? void 0 : _c.chatToken.requestId, body);
                  this.debug && console.debug("[VoiceVideoCallingProxy][onCallDisconnected][makeSecondaryChannelEventRequest]");
                  (_d = this.scenarioMarker) === null || _d === void 0 ? void 0 : _d.completeScenario(TelemetryEvent_1.default.OnCallDisconnected, {
                    CallId: this.callId || ""
                  });
                } catch (e) {
                  console.error("[VoiceVideoCallingProxy][onCallDisconnected][makeSecondaryChannelEventRequest] Failure " + e);
                  exceptionDetails = {
                    response: "OCClientMakeSecondaryChannelEventRequestFailed"
                  };
                  (_e = this.scenarioMarker) === null || _e === void 0 ? void 0 : _e.failScenario(TelemetryEvent_1.default.OnCallDisconnected, {
                    CallId: this.callId || "",
                    ExceptionDetails: JSON.stringify(exceptionDetails)
                  });
                }
                this.clearRemoteVideoElementChildren();
                callback(params);
                return [
                  2
                  /*return*/
                ];
              });
            });
          });
        };
        VoiceVideoCallingProxy2.prototype.clearRemoteVideoElementChildren = function() {
          var _a, _b;
          if ((_a = this.callingParams) === null || _a === void 0 ? void 0 : _a.remoteVideoHTMLElementId) {
            var remoteVideoElement = document.getElementById((_b = this.callingParams) === null || _b === void 0 ? void 0 : _b.remoteVideoHTMLElementId);
            while (remoteVideoElement === null || remoteVideoElement === void 0 ? void 0 : remoteVideoElement.firstChild) {
              this.debug && console.debug("[VoiceVideoCallingProxy][clearRemoteVideoElement]");
              remoteVideoElement.firstChild.remove();
            }
          }
        };
        return VoiceVideoCallingProxy2;
      }()
    );
    exports.VoiceVideoCallingProxy = VoiceVideoCallingProxy;
    var createVoiceVideoCalling = function(params) {
      if (params === void 0) {
        params = {};
      }
      return __awaiter(void 0, void 0, void 0, function() {
        var proxy;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              proxy = VoiceVideoCallingProxy.getInstance();
              return [4, proxy.load({
                logger: params.logger || void 0
              })];
            case 1:
              _a.sent();
              return [2, Promise.resolve(proxy)];
          }
        });
      });
    };
    exports.default = createVoiceVideoCalling;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/utils/exceptionSuppressors.js
var require_exceptionSuppressors = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/utils/exceptionSuppressors.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.suppressConversationDetailsRetrievalFailure = exports.suppressChatSDKError = void 0;
    var ChatSDKErrors_1 = require_ChatSDKErrors();
    exports.suppressChatSDKError = function(chatSDKError, e, scenarioMarker, telemetryEvent, telemetryData, message) {
      if (telemetryData === void 0) {
        telemetryData = {};
      }
      if (message === void 0) {
        message = "";
      }
      var exceptionDetails = {
        response: chatSDKError
      };
      if (e) {
        exceptionDetails.errorObject = "" + e;
      }
      scenarioMarker.failScenario(telemetryEvent, __assign(__assign({}, telemetryData), { ExceptionDetails: JSON.stringify(exceptionDetails) }));
      if (message) {
        exceptionDetails.message = message;
        console.error(message);
      }
    };
    exports.suppressConversationDetailsRetrievalFailure = function(e, scenarioMarker, telemetryEvent, telemetryData) {
      if (telemetryData === void 0) {
        telemetryData = {};
      }
      exports.suppressChatSDKError(ChatSDKErrors_1.default.ConversationDetailsRetrievalFailure, e, scenarioMarker, telemetryEvent, telemetryData);
    };
    exports.default = {
      suppressChatSDKError: exports.suppressChatSDKError,
      suppressConversationDetailsRetrievalFailure: exports.suppressConversationDetailsRetrievalFailure
    };
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/utils/location.js
var require_location = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/utils/location.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLocationInfo = void 0;
    var TelemetryEvent_1 = require_TelemetryEvent();
    var platform_1 = require_platform();
    exports.getLocationInfo = function(scenarioMarker, chatId, requestId) {
      return __awaiter(void 0, void 0, void 0, function() {
        var reportLocationError;
        return __generator(this, function(_a) {
          reportLocationError = function(response, error) {
            console.error(response, error);
            var exceptionDetails;
            try {
              exceptionDetails = JSON.stringify({ Response: response, ExceptionalDetails: error });
            } catch (_a2) {
              exceptionDetails = JSON.stringify({ Response: response });
            }
            scenarioMarker.failScenario(TelemetryEvent_1.default.GetGeolocation, {
              RequestId: requestId,
              ChatId: chatId,
              ExceptionDetails: exceptionDetails
            });
          };
          return [2, new Promise(function(resolve, reject) {
            scenarioMarker.startScenario(TelemetryEvent_1.default.GetGeolocation, {
              RequestId: requestId
            });
            var location = {
              latitude: "",
              longitude: ""
            };
            if (platform_1.default.isNode() || platform_1.default.isReactNative() || !navigator.geolocation) {
              reportLocationError("Unsupported");
              resolve(location);
            }
            var onSuccess = function(position) {
              try {
                location.latitude = position.coords.latitude.toString();
                location.longitude = position.coords.longitude.toString();
                scenarioMarker.completeScenario(TelemetryEvent_1.default.GetGeolocation, {
                  RequestId: requestId,
                  ChatId: chatId
                });
                resolve(location);
              } catch (ex) {
                reportLocationError("GetGeolocationFailed", ex);
                resolve(location);
              }
            };
            var onError = function(ex) {
              reportLocationError("GetGeolocationFailed", ex);
              resolve(location);
            };
            navigator.geolocation.getCurrentPosition(onSuccess, onError);
          })];
        });
      });
    };
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/validators/OmnichannelConfigValidator.js
var require_OmnichannelConfigValidator = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/validators/OmnichannelConfigValidator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var requiredOmnichannelConfigParams = ["orgUrl", "orgId", "widgetId"];
    var validateOmnichannelConfig = function(omnichannelConfig) {
      if (!omnichannelConfig) {
        throw new Error("OmnichannelConfiguration not found");
      }
      for (var _i = 0, requiredOmnichannelConfigParams_1 = requiredOmnichannelConfigParams; _i < requiredOmnichannelConfigParams_1.length; _i++) {
        var key = requiredOmnichannelConfigParams_1[_i];
        var isPresent = Reflect.has(omnichannelConfig, key);
        if (!isPresent) {
          throw new Error("Missing '" + key + "' in OmnichannelConfiguration");
        }
        var propertyValue = Reflect.get(omnichannelConfig, key);
        if (!propertyValue || typeof propertyValue === "string" && propertyValue.trim().length === 0 || propertyValue.length === 0) {
          throw new Error("Empty '" + key + "' in OmnichannelConfiguration");
        }
      }
    };
    exports.default = validateOmnichannelConfig;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/OmnichannelChatSDK.js
var require_OmnichannelChatSDK = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/OmnichannelChatSDK.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __spreadArrays = exports && exports.__spreadArrays || function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var loggers_1 = require_loggers();
    var ACSClient_1 = require_ACSClient();
    var ocsdk_1 = require_lib3();
    var chatAdapterCreators_1 = require_chatAdapterCreators();
    var locale_1 = require_locale();
    var utilities_1 = require_utilities();
    var WebUtils_1 = require_WebUtils();
    var platform_1 = require_platform();
    var SDKConfigValidators_1 = require_SDKConfigValidators();
    var ACSParticipantDisplayName_1 = require_ACSParticipantDisplayName();
    var AMSFileManager_1 = require_AMSFileManager();
    var CallingOptionsOptionSetNumber_1 = require_CallingOptionsOptionSetNumber();
    var ChatAdapterProtocols_1 = require_ChatAdapterProtocols();
    var ChatSDKErrors_1 = require_ChatSDKErrors();
    var ConversationMode_1 = require_ConversationMode();
    var DeliveryMode_1 = require_DeliveryMode();
    var FileSharingProtocolType_1 = require_FileSharingProtocolType();
    var HostType_1 = require_HostType();
    var omnichannel_ic3core_1 = require_lib();
    var LiveChatVersion_1 = require_LiveChatVersion();
    var LiveWorkItemState_1 = require_LiveWorkItemState();
    var MessageContentType_1 = require_MessageContentType();
    var MessageType_1 = require_MessageType();
    var OmnichannelErrorCodes_1 = require_OmnichannelErrorCodes();
    var PersonType_1 = require_PersonType();
    var ProtocoleType_1 = require_ProtocoleType();
    var ScenarioMarker_1 = require_ScenarioMarker();
    var TelemetryEvent_1 = require_TelemetryEvent();
    var omnichannel_amsclient_1 = require_lib2();
    var createOmnichannelMessage_1 = require_createOmnichannelMessage();
    var createTelemetry_1 = require_createTelemetry();
    var createVoiceVideoCalling_1 = require_createVoiceVideoCalling();
    var MessageTags_1 = require_MessageTags();
    var exceptionThrowers_1 = require_exceptionThrowers();
    var exceptionSuppressors_1 = require_exceptionSuppressors();
    var location_1 = require_location();
    var urlResolvers_1 = require_urlResolvers();
    var OmnichannelConfigValidator_1 = require_OmnichannelConfigValidator();
    var OmnichannelChatSDK = (
      /** @class */
      function() {
        function OmnichannelChatSDK2(omnichannelConfig, chatSDKConfig) {
          var _this = this;
          if (chatSDKConfig === void 0) {
            chatSDKConfig = SDKConfigValidators_1.defaultChatSDKConfig;
          }
          var _a, _b, _c, _d, _e, _f, _g, _h, _j;
          this.ACSClient = null;
          this.AMSClient = null;
          this.authSettings = null;
          this.authenticatedUserToken = null;
          this.conversation = null;
          this.callingOption = CallingOptionsOptionSetNumber_1.default.NoCalling;
          this.telemetry = null;
          this.ic3ClientLogger = null;
          this.ocSdkLogger = null;
          this.acsClientLogger = null;
          this.acsAdapterLogger = null;
          this.callingSdkLogger = null;
          this.amsClientLogger = null;
          this.isPersistentChat = false;
          this.isChatReconnect = false;
          this.reconnectId = null;
          this.refreshTokenTimer = null;
          this.populateInitChatOptionalParam = function(requestOptionalParams, optionalParams, telemetryEvent) {
            requestOptionalParams.initContext.locale = locale_1.getLocaleStringFromId(_this.localeId);
            if (optionalParams.customContext) {
              var context = optionalParams.customContext;
              if (typeof context === "object") {
                for (var key in context) {
                  if (context[key].value === null || context[key].value === void 0 || context[key].value === "") {
                    delete context[key];
                  }
                }
              }
              requestOptionalParams.initContext.customContextData = optionalParams.customContext;
            }
            if (optionalParams.browser) {
              requestOptionalParams.initContext.browser = optionalParams.browser;
            }
            if (optionalParams.os) {
              requestOptionalParams.initContext.os = optionalParams.os;
            }
            if (optionalParams.locale) {
              requestOptionalParams.initContext.locale = optionalParams.locale;
            }
            if (optionalParams.device) {
              requestOptionalParams.initContext.device = optionalParams.device;
            }
            if (optionalParams.preChatResponse) {
              requestOptionalParams.initContext.preChatResponse = optionalParams.preChatResponse;
            }
            if (optionalParams.portalContactId) {
              requestOptionalParams.initContext.portalcontactid = optionalParams.portalContactId;
            }
            if (optionalParams.sendDefaultInitContext) {
              if (platform_1.default.isNode() || platform_1.default.isReactNative()) {
                var message = "sendDefaultInitContext is only supported on browser";
                var telemetryData = {
                  RequestId: _this.requestId,
                  ChatId: _this.chatToken.chatId
                };
                exceptionThrowers_1.default.throwUnsupportedPlatform(_this.scenarioMarker, telemetryEvent, message, telemetryData);
              }
              requestOptionalParams.getContext = true;
            }
            if (optionalParams.initContext) {
              requestOptionalParams.initContext = optionalParams.initContext;
            }
            if (_this.authenticatedUserToken) {
              requestOptionalParams.authenticatedUserToken = _this.authenticatedUserToken;
            }
            if (_this.chatToken.chatId) {
              requestOptionalParams.initContext.chatId = _this.chatToken.chatId;
            }
            return requestOptionalParams;
          };
          this.debug = false;
          this.runtimeId = ocsdk_1.uuidv4();
          this.omnichannelConfig = omnichannelConfig;
          this.chatSDKConfig = __assign(
            __assign({}, SDKConfigValidators_1.defaultChatSDKConfig),
            chatSDKConfig
            // overrides
          );
          this.isInitialized = false;
          this.liveChatVersion = LiveChatVersion_1.default.V2;
          this.localeId = locale_1.defaultLocaleId;
          this.requestId = ocsdk_1.uuidv4();
          this.chatToken = {};
          this.liveChatConfig = {};
          this.dataMaskingRules = {};
          this.authSettings = null;
          this.preChatSurvey = null;
          this.telemetry = createTelemetry_1.default(this.debug);
          this.scenarioMarker = new ScenarioMarker_1.default(this.omnichannelConfig);
          this.ic3ClientLogger = loggers_1.createIC3ClientLogger(this.omnichannelConfig);
          this.ocSdkLogger = loggers_1.createOCSDKLogger(this.omnichannelConfig);
          this.acsClientLogger = loggers_1.createACSClientLogger(this.omnichannelConfig);
          this.acsAdapterLogger = loggers_1.createACSAdapterLogger(this.omnichannelConfig);
          this.callingSdkLogger = loggers_1.createCallingSDKLogger(this.omnichannelConfig);
          this.amsClientLogger = loggers_1.createAMSClientLogger(this.omnichannelConfig);
          this.scenarioMarker.useTelemetry(this.telemetry);
          this.ic3ClientLogger.useTelemetry(this.telemetry);
          this.ocSdkLogger.useTelemetry(this.telemetry);
          this.acsClientLogger.useTelemetry(this.telemetry);
          this.acsAdapterLogger.useTelemetry(this.telemetry);
          this.callingSdkLogger.useTelemetry(this.telemetry);
          this.amsClientLogger.useTelemetry(this.telemetry);
          this.scenarioMarker.setRuntimeId(this.runtimeId);
          this.ic3ClientLogger.setRuntimeId(this.runtimeId);
          this.ocSdkLogger.setRuntimeId(this.runtimeId);
          this.acsClientLogger.setRuntimeId(this.runtimeId);
          this.acsAdapterLogger.setRuntimeId(this.runtimeId);
          this.callingSdkLogger.setRuntimeId(this.runtimeId);
          this.amsClientLogger.setRuntimeId(this.runtimeId);
          OmnichannelConfigValidator_1.default(omnichannelConfig);
          SDKConfigValidators_1.default(chatSDKConfig);
          ((_a = this.chatSDKConfig.telemetry) === null || _a === void 0 ? void 0 : _a.disable) && ((_b = this.telemetry) === null || _b === void 0 ? void 0 : _b.disable());
          if ((_c = this.chatSDKConfig.telemetry) === null || _c === void 0 ? void 0 : _c.ariaTelemetryKey) {
            this.telemetry.initialize(this.chatSDKConfig.telemetry.ariaTelemetryKey);
          }
          (_d = this.ic3ClientLogger) === null || _d === void 0 ? void 0 : _d.setRequestId(this.requestId);
          (_e = this.ocSdkLogger) === null || _e === void 0 ? void 0 : _e.setRequestId(this.requestId);
          (_f = this.acsClientLogger) === null || _f === void 0 ? void 0 : _f.setRequestId(this.requestId);
          (_g = this.acsAdapterLogger) === null || _g === void 0 ? void 0 : _g.setRequestId(this.requestId);
          (_h = this.callingSdkLogger) === null || _h === void 0 ? void 0 : _h.setRequestId(this.requestId);
          (_j = this.amsClientLogger) === null || _j === void 0 ? void 0 : _j.setRequestId(this.requestId);
        }
        OmnichannelChatSDK2.prototype.setDebug = function(flag) {
          var _a, _b, _c, _d, _e, _f, _g, _h;
          this.debug = flag;
          (_a = this.AMSClient) === null || _a === void 0 ? void 0 : _a.setDebug(flag);
          (_b = this.telemetry) === null || _b === void 0 ? void 0 : _b.setDebug(flag);
          this.scenarioMarker.setDebug(flag);
          (_c = this.ic3ClientLogger) === null || _c === void 0 ? void 0 : _c.setDebug(flag);
          (_d = this.ocSdkLogger) === null || _d === void 0 ? void 0 : _d.setDebug(flag);
          (_e = this.acsClientLogger) === null || _e === void 0 ? void 0 : _e.setDebug(flag);
          (_f = this.acsAdapterLogger) === null || _f === void 0 ? void 0 : _f.setDebug(flag);
          (_g = this.callingSdkLogger) === null || _g === void 0 ? void 0 : _g.setDebug(flag);
          (_h = this.amsClientLogger) === null || _h === void 0 ? void 0 : _h.setDebug(flag);
        };
        OmnichannelChatSDK2.prototype.initialize = function(optionalParams) {
          if (optionalParams === void 0) {
            optionalParams = {};
          }
          return __awaiter(this, void 0, void 0, function() {
            var ocSDKConfiguration, _a, e_1, getLiveChatConfigOptionalParams, e_2, supportedLiveChatVersions, _b, _c, e_3;
            return __generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  this.scenarioMarker.startScenario(TelemetryEvent_1.default.InitializeChatSDK);
                  if (this.isInitialized) {
                    this.scenarioMarker.completeScenario(TelemetryEvent_1.default.InitializeChatSDK);
                    return [2, this.liveChatConfig];
                  }
                  ocSDKConfiguration = {
                    getChatTokenRetryCount: 2,
                    getChatTokenTimeBetweenRetriesOnFailure: 2e3,
                    getChatTokenRetryOn429: false
                  };
                  _d.label = 1;
                case 1:
                  _d.trys.push([1, 3, , 4]);
                  this.OCSDKProvider = ocsdk_1.SDKProvider;
                  _a = this;
                  return [4, ocsdk_1.SDKProvider.getSDK(this.omnichannelConfig, ocSDKConfiguration, this.ocSdkLogger)];
                case 2:
                  _a.OCClient = _d.sent();
                  return [3, 4];
                case 3:
                  e_1 = _d.sent();
                  exceptionThrowers_1.default.throwOmnichannelClientInitializationFailure(e_1, this.scenarioMarker, TelemetryEvent_1.default.InitializeChatSDK);
                  return [3, 4];
                case 4:
                  _d.trys.push([4, 6, , 7]);
                  getLiveChatConfigOptionalParams = optionalParams.getLiveChatConfigOptionalParams;
                  return [4, this.getChatConfig(getLiveChatConfigOptionalParams || {})];
                case 5:
                  _d.sent();
                  return [3, 7];
                case 6:
                  e_2 = _d.sent();
                  exceptionThrowers_1.default.throwChatConfigRetrievalFailure(e_2, this.scenarioMarker, TelemetryEvent_1.default.InitializeChatSDK);
                  return [3, 7];
                case 7:
                  supportedLiveChatVersions = [LiveChatVersion_1.default.V1, LiveChatVersion_1.default.V2];
                  if (!supportedLiveChatVersions.includes(this.liveChatVersion)) {
                    exceptionThrowers_1.default.throwUnsupportedLiveChatVersionFailure(new Error(ChatSDKErrors_1.default.UnsupportedLiveChatVersion), this.scenarioMarker, TelemetryEvent_1.default.InitializeChatSDK);
                  }
                  _d.label = 8;
                case 8:
                  _d.trys.push([8, 13, , 14]);
                  if (!(this.liveChatVersion === LiveChatVersion_1.default.V2))
                    return [3, 10];
                  this.ACSClient = new ACSClient_1.default(this.acsClientLogger);
                  _b = this;
                  return [4, omnichannel_amsclient_1.default({
                    framedMode: platform_1.isBrowser(),
                    multiClient: true,
                    debug: false,
                    logger: this.amsClientLogger
                  })];
                case 9:
                  _b.AMSClient = _d.sent();
                  return [3, 12];
                case 10:
                  if (!(this.liveChatVersion === LiveChatVersion_1.default.V1))
                    return [3, 12];
                  _c = this;
                  return [4, this.getIC3Client()];
                case 11:
                  _c.IC3Client = _d.sent();
                  _d.label = 12;
                case 12:
                  this.isInitialized = true;
                  this.scenarioMarker.completeScenario(TelemetryEvent_1.default.InitializeChatSDK);
                  return [3, 14];
                case 13:
                  e_3 = _d.sent();
                  exceptionThrowers_1.default.throwMessagingClientCreationFailure(e_3, this.scenarioMarker, TelemetryEvent_1.default.InitializeChatSDK);
                  return [3, 14];
                case 14:
                  return [2, this.liveChatConfig];
              }
            });
          });
        };
        OmnichannelChatSDK2.prototype.getChatReconnectContext = function(optionalParams) {
          if (optionalParams === void 0) {
            optionalParams = {};
          }
          return __awaiter(this, void 0, void 0, function() {
            var context, reconnectableChatsParams, reconnectableChatsResponse, error_1, exceptionDetails, telemetryData, reconnectAvailabilityResponse, error_2, exceptionDetails;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  this.scenarioMarker.startScenario(TelemetryEvent_1.default.GetChatReconnectContext, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  context = {
                    reconnectId: null,
                    redirectURL: null
                  };
                  if (!this.authenticatedUserToken)
                    return [3, 5];
                  _a.label = 1;
                case 1:
                  _a.trys.push([1, 3, , 4]);
                  reconnectableChatsParams = {
                    authenticatedUserToken: this.authenticatedUserToken
                  };
                  return [4, this.OCClient.getReconnectableChats(reconnectableChatsParams)];
                case 2:
                  reconnectableChatsResponse = _a.sent();
                  if (reconnectableChatsResponse && reconnectableChatsResponse.reconnectid) {
                    context.reconnectId = reconnectableChatsResponse.reconnectid;
                  }
                  this.scenarioMarker.completeScenario(TelemetryEvent_1.default.GetChatReconnectContext, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  return [3, 4];
                case 3:
                  error_1 = _a.sent();
                  exceptionDetails = {
                    response: "OCClientGetReconnectableChatsFailed"
                  };
                  telemetryData = {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId,
                    ExceptionDetails: JSON.stringify(exceptionDetails)
                  };
                  if (utilities_1.isClientIdNotFoundErrorMessage(error_1)) {
                    exceptionThrowers_1.default.throwAuthContactIdNotFoundFailure(error_1, this.scenarioMarker, TelemetryEvent_1.default.GetChatReconnectContext, telemetryData);
                  }
                  this.scenarioMarker.failScenario(TelemetryEvent_1.default.GetChatReconnectContext, telemetryData);
                  console.error("OmnichannelChatSDK/GetChatReconnectContext/error " + error_1);
                  return [3, 4];
                case 4:
                  return [3, 9];
                case 5:
                  if (!optionalParams.reconnectId)
                    return [3, 9];
                  _a.label = 6;
                case 6:
                  _a.trys.push([6, 8, , 9]);
                  return [4, this.OCClient.getReconnectAvailability(optionalParams.reconnectId)];
                case 7:
                  reconnectAvailabilityResponse = _a.sent();
                  if (reconnectAvailabilityResponse && !reconnectAvailabilityResponse.isReconnectAvailable) {
                    if (reconnectAvailabilityResponse.reconnectRedirectionURL) {
                      context.redirectURL = reconnectAvailabilityResponse.reconnectRedirectionURL;
                    }
                  } else {
                    context.reconnectId = optionalParams.reconnectId;
                  }
                  this.scenarioMarker.completeScenario(TelemetryEvent_1.default.GetChatReconnectContext, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  return [3, 9];
                case 8:
                  error_2 = _a.sent();
                  exceptionDetails = {
                    response: "OCClientGetReconnectAvailabilityFailed"
                  };
                  this.scenarioMarker.failScenario(TelemetryEvent_1.default.GetChatReconnectContext, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId,
                    ExceptionDetails: JSON.stringify(exceptionDetails)
                  });
                  console.error("OmnichannelChatSDK/GetChatReconnectContext/error " + error_2);
                  return [3, 9];
                case 9:
                  return [2, context];
              }
            });
          });
        };
        OmnichannelChatSDK2.prototype.startChat = function(optionalParams) {
          var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
          if (optionalParams === void 0) {
            optionalParams = {};
          }
          return __awaiter(this, void 0, void 0, function() {
            var shouldReinitIC3Client, _q, reconnectableChatsParams, reconnectableChatsResponse, e_4, telemetryData, conversationDetails, telemetryData, telemetryData, e_5, telemetryData, sessionInitOptionalParams, location_2, sessionInitPromise, messagingClientPromise, attachmentClientPromise;
            var _this = this;
            return __generator(this, function(_r) {
              switch (_r.label) {
                case 0:
                  this.scenarioMarker.startScenario(TelemetryEvent_1.default.StartChat, {
                    RequestId: this.requestId
                  });
                  if (!this.isInitialized) {
                    exceptionThrowers_1.default.throwUninitializedChatSDK(this.scenarioMarker, TelemetryEvent_1.default.StartChat);
                  }
                  shouldReinitIC3Client = !platform_1.default.isNode() && !platform_1.default.isReactNative() && !this.IC3Client && this.liveChatVersion === LiveChatVersion_1.default.V1;
                  if (!shouldReinitIC3Client)
                    return [3, 2];
                  _q = this;
                  return [4, this.getIC3Client()];
                case 1:
                  _q.IC3Client = _r.sent();
                  _r.label = 2;
                case 2:
                  if (this.isChatReconnect && !((_a = this.chatSDKConfig.chatReconnect) === null || _a === void 0 ? void 0 : _a.disable) && !this.isPersistentChat && optionalParams.reconnectId) {
                    this.reconnectId = optionalParams.reconnectId;
                  }
                  if (!(this.isPersistentChat && !((_b = this.chatSDKConfig.persistentChat) === null || _b === void 0 ? void 0 : _b.disable)))
                    return [3, 6];
                  _r.label = 3;
                case 3:
                  _r.trys.push([3, 5, , 6]);
                  reconnectableChatsParams = {
                    authenticatedUserToken: this.authenticatedUserToken
                  };
                  return [4, this.OCClient.getReconnectableChats(reconnectableChatsParams)];
                case 4:
                  reconnectableChatsResponse = _r.sent();
                  if (reconnectableChatsResponse && reconnectableChatsResponse.reconnectid) {
                    this.reconnectId = reconnectableChatsResponse.reconnectid;
                  }
                  return [3, 6];
                case 5:
                  e_4 = _r.sent();
                  telemetryData = {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  };
                  exceptionThrowers_1.default.throwPersistentChatConversationRetrievalFailure(e_4, this.scenarioMarker, TelemetryEvent_1.default.StartChat, telemetryData);
                  return [3, 6];
                case 6:
                  if (!(optionalParams.liveChatContext && Object.keys(optionalParams.liveChatContext).length > 0 && !this.reconnectId))
                    return [3, 8];
                  this.chatToken = optionalParams.liveChatContext.chatToken || {};
                  this.requestId = optionalParams.liveChatContext.requestId || ocsdk_1.uuidv4();
                  return [4, this.getConversationDetails()];
                case 7:
                  conversationDetails = _r.sent();
                  if (Object.keys(conversationDetails).length === 0) {
                    telemetryData = {
                      RequestId: this.requestId,
                      ChatId: this.chatToken.chatId
                    };
                    exceptionThrowers_1.default.throwInvalidConversation(this.scenarioMarker, TelemetryEvent_1.default.StartChat, telemetryData);
                  }
                  if (conversationDetails.state === LiveWorkItemState_1.default.WrapUp || conversationDetails.state === LiveWorkItemState_1.default.Closed) {
                    console.error("Unable to join conversation that's in '" + conversationDetails.state + "' state");
                    telemetryData = {
                      RequestId: this.requestId,
                      ChatId: this.chatToken.chatId
                    };
                    exceptionThrowers_1.default.throwClosedConversation(this.scenarioMarker, TelemetryEvent_1.default.StartChat, telemetryData);
                  }
                  _r.label = 8;
                case 8:
                  if (!this.authSettings)
                    return [3, 14];
                  if (!!this.authenticatedUserToken)
                    return [3, 10];
                  return [4, this.setAuthTokenProvider(this.chatSDKConfig.getAuthToken)];
                case 9:
                  _r.sent();
                  _r.label = 10;
                case 10:
                  if (!(optionalParams.liveChatContext && Object.keys(optionalParams.liveChatContext).length > 0))
                    return [3, 14];
                  this.chatToken = optionalParams.liveChatContext.chatToken || {};
                  this.requestId = optionalParams.liveChatContext.requestId || ocsdk_1.uuidv4();
                  _r.label = 11;
                case 11:
                  _r.trys.push([11, 13, , 14]);
                  return [4, this.OCClient.validateAuthChatRecord(this.requestId, {
                    authenticatedUserToken: this.authenticatedUserToken,
                    chatId: this.chatToken.chatId
                  })];
                case 12:
                  _r.sent();
                  return [3, 14];
                case 13:
                  e_5 = _r.sent();
                  telemetryData = {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  };
                  exceptionThrowers_1.default.throwAuthenticatedChatConversationRetrievalFailure(e_5, this.scenarioMarker, TelemetryEvent_1.default.StartChat, telemetryData);
                  return [3, 14];
                case 14:
                  if (!(this.chatToken && Object.keys(this.chatToken).length === 0))
                    return [3, 16];
                  return [4, this.getChatToken(false)];
                case 15:
                  _r.sent();
                  _r.label = 16;
                case 16:
                  (_c = this.ic3ClientLogger) === null || _c === void 0 ? void 0 : _c.setChatId(this.chatToken.chatId || "");
                  (_d = this.ocSdkLogger) === null || _d === void 0 ? void 0 : _d.setChatId(this.chatToken.chatId || "");
                  (_e = this.acsClientLogger) === null || _e === void 0 ? void 0 : _e.setChatId(this.chatToken.chatId || "");
                  (_f = this.acsAdapterLogger) === null || _f === void 0 ? void 0 : _f.setChatId(this.chatToken.chatId || "");
                  (_g = this.callingSdkLogger) === null || _g === void 0 ? void 0 : _g.setChatId(this.chatToken.chatId || "");
                  (_h = this.amsClientLogger) === null || _h === void 0 ? void 0 : _h.setChatId(this.chatToken.chatId || "");
                  sessionInitOptionalParams = {
                    initContext: {}
                  };
                  sessionInitOptionalParams = this.populateInitChatOptionalParam(sessionInitOptionalParams, optionalParams, TelemetryEvent_1.default.StartChat);
                  sessionInitOptionalParams.initContext.isProactiveChat = !!optionalParams.isProactiveChat;
                  if (this.isPersistentChat && !((_j = this.chatSDKConfig.persistentChat) === null || _j === void 0 ? void 0 : _j.disable)) {
                    sessionInitOptionalParams.reconnectId = this.reconnectId;
                  } else if (this.isChatReconnect && !((_k = this.chatSDKConfig.chatReconnect) === null || _k === void 0 ? void 0 : _k.disable) && !this.isPersistentChat) {
                    sessionInitOptionalParams.reconnectId = this.reconnectId;
                  }
                  if (!(((_m = (_l = this.liveChatConfig) === null || _l === void 0 ? void 0 : _l.LiveWSAndLiveChatEngJoin) === null || _m === void 0 ? void 0 : _m.msdyn_requestvisitorlocation) === "true"))
                    return [3, 18];
                  return [4, location_1.getLocationInfo(this.scenarioMarker, this.chatToken.chatId, this.requestId)];
                case 17:
                  location_2 = _r.sent();
                  sessionInitOptionalParams.initContext.latitude = location_2.latitude;
                  sessionInitOptionalParams.initContext.longitude = location_2.longitude;
                  _r.label = 18;
                case 18:
                  sessionInitPromise = function() {
                    return __awaiter(_this, void 0, void 0, function() {
                      var error_3, telemetryData2;
                      var _a2, _b2, _c2, _d2;
                      return __generator(this, function(_e2) {
                        switch (_e2.label) {
                          case 0:
                            if (!!optionalParams.liveChatContext)
                              return [3, 4];
                            _e2.label = 1;
                          case 1:
                            _e2.trys.push([1, 3, , 4]);
                            return [4, this.OCClient.sessionInit(this.requestId, sessionInitOptionalParams)];
                          case 2:
                            _e2.sent();
                            return [3, 4];
                          case 3:
                            error_3 = _e2.sent();
                            telemetryData2 = {
                              RequestId: this.requestId,
                              ChatId: this.chatToken.chatId
                            };
                            if (((_a2 = error_3) === null || _a2 === void 0 ? void 0 : _a2.isAxiosError) && ((_d2 = (_c2 = (_b2 = error_3.response) === null || _b2 === void 0 ? void 0 : _b2.headers) === null || _c2 === void 0 ? void 0 : _c2.errorcode) === null || _d2 === void 0 ? void 0 : _d2.toString()) === OmnichannelErrorCodes_1.default.WidgetUseOutsideOperatingHour.toString()) {
                              exceptionThrowers_1.default.throwWidgetUseOutsideOperatingHour(error_3, this.scenarioMarker, TelemetryEvent_1.default.StartChat, telemetryData2);
                            }
                            exceptionThrowers_1.default.throwConversationInitializationFailure(error_3, this.scenarioMarker, TelemetryEvent_1.default.StartChat, telemetryData2);
                            return [3, 4];
                          case 4:
                            return [
                              2
                              /*return*/
                            ];
                        }
                      });
                    });
                  };
                  messagingClientPromise = function() {
                    return __awaiter(_this, void 0, void 0, function() {
                      var chatAdapterConfig, tokenRefresher, error_4, telemetryData2, _a2, error_5, telemetryData2, error_6, telemetryData2, _b2, error_7, telemetryData2;
                      var _this2 = this;
                      var _c2, _d2;
                      return __generator(this, function(_e2) {
                        switch (_e2.label) {
                          case 0:
                            if (!(this.liveChatVersion === LiveChatVersion_1.default.V2))
                              return [3, 8];
                            chatAdapterConfig = {
                              token: this.chatToken.token,
                              id: this.chatToken.visitorId || "teamsvisitor",
                              threadId: this.chatToken.chatId,
                              environmentUrl: this.chatToken.acsEndpoint,
                              pollingInterval: 3e4
                            };
                            tokenRefresher = function() {
                              return __awaiter(_this2, void 0, void 0, function() {
                                var _a3;
                                return __generator(this, function(_b3) {
                                  switch (_b3.label) {
                                    case 0:
                                      return [4, this.getChatToken(false, { refreshToken: true })];
                                    case 1:
                                      _b3.sent();
                                      return [4, (_a3 = this.AMSClient) === null || _a3 === void 0 ? void 0 : _a3.initialize({ chatToken: this.chatToken })];
                                    case 2:
                                      _b3.sent();
                                      return [2, this.chatToken.token];
                                  }
                                });
                              });
                            };
                            _e2.label = 1;
                          case 1:
                            _e2.trys.push([1, 3, , 4]);
                            return [4, (_c2 = this.ACSClient) === null || _c2 === void 0 ? void 0 : _c2.initialize({
                              token: chatAdapterConfig.token,
                              environmentUrl: chatAdapterConfig.environmentUrl,
                              tokenRefresher
                            })];
                          case 2:
                            _e2.sent();
                            return [3, 4];
                          case 3:
                            error_4 = _e2.sent();
                            telemetryData2 = {
                              RequestId: this.requestId,
                              ChatId: this.chatToken.chatId
                            };
                            exceptionThrowers_1.default.throwMessagingClientInitializationFailure(error_4, this.scenarioMarker, TelemetryEvent_1.default.StartChat, telemetryData2);
                            return [3, 4];
                          case 4:
                            _e2.trys.push([4, 6, , 7]);
                            _a2 = this;
                            return [4, (_d2 = this.ACSClient) === null || _d2 === void 0 ? void 0 : _d2.joinConversation({
                              id: chatAdapterConfig.id,
                              threadId: chatAdapterConfig.threadId,
                              pollingInterval: chatAdapterConfig.pollingInterval
                            })];
                          case 5:
                            _a2.conversation = _e2.sent();
                            this.scenarioMarker.completeScenario(TelemetryEvent_1.default.StartChat, {
                              RequestId: this.requestId,
                              ChatId: this.chatToken.chatId
                            });
                            return [3, 7];
                          case 6:
                            error_5 = _e2.sent();
                            telemetryData2 = {
                              RequestId: this.requestId,
                              ChatId: this.chatToken.chatId
                            };
                            exceptionThrowers_1.default.throwMessagingClientConversationJoinFailure(error_5, this.scenarioMarker, TelemetryEvent_1.default.StartChat, telemetryData2);
                            return [3, 7];
                          case 7:
                            return [3, 14];
                          case 8:
                            _e2.trys.push([8, 10, , 11]);
                            return [4, this.IC3Client.initialize({
                              token: this.chatToken.token,
                              regionGtms: this.chatToken.regionGTMS,
                              visitor: true
                            })];
                          case 9:
                            _e2.sent();
                            return [3, 11];
                          case 10:
                            error_6 = _e2.sent();
                            telemetryData2 = {
                              RequestId: this.requestId,
                              ChatId: this.chatToken.chatId
                            };
                            exceptionThrowers_1.default.throwMessagingClientInitializationFailure(error_6, this.scenarioMarker, TelemetryEvent_1.default.StartChat, telemetryData2);
                            return [3, 11];
                          case 11:
                            _e2.trys.push([11, 13, , 14]);
                            _b2 = this;
                            return [4, this.IC3Client.joinConversation(this.chatToken.chatId)];
                          case 12:
                            _b2.conversation = _e2.sent();
                            this.scenarioMarker.completeScenario(TelemetryEvent_1.default.StartChat, {
                              RequestId: this.requestId,
                              ChatId: this.chatToken.chatId
                            });
                            return [3, 14];
                          case 13:
                            error_7 = _e2.sent();
                            telemetryData2 = {
                              RequestId: this.requestId,
                              ChatId: this.chatToken.chatId
                            };
                            exceptionThrowers_1.default.throwMessagingClientConversationJoinFailure(error_7, this.scenarioMarker, TelemetryEvent_1.default.StartChat, telemetryData2);
                            return [3, 14];
                          case 14:
                            return [
                              2
                              /*return*/
                            ];
                        }
                      });
                    });
                  };
                  attachmentClientPromise = function() {
                    return __awaiter(_this, void 0, void 0, function() {
                      var error_8, telemetryData2;
                      var _a2;
                      return __generator(this, function(_b2) {
                        switch (_b2.label) {
                          case 0:
                            _b2.trys.push([0, 3, , 4]);
                            if (!(this.liveChatVersion === LiveChatVersion_1.default.V2))
                              return [3, 2];
                            return [4, (_a2 = this.AMSClient) === null || _a2 === void 0 ? void 0 : _a2.initialize({ chatToken: this.chatToken })];
                          case 1:
                            _b2.sent();
                            _b2.label = 2;
                          case 2:
                            return [3, 4];
                          case 3:
                            error_8 = _b2.sent();
                            telemetryData2 = {
                              RequestId: this.requestId,
                              ChatId: this.chatToken.chatId
                            };
                            exceptionThrowers_1.default.throwMessagingClientInitializationFailure(error_8, this.scenarioMarker, TelemetryEvent_1.default.StartChat, telemetryData2);
                            return [3, 4];
                          case 4:
                            return [
                              2
                              /*return*/
                            ];
                        }
                      });
                    });
                  };
                  return [4, Promise.all([sessionInitPromise(), messagingClientPromise(), attachmentClientPromise()])];
                case 19:
                  _r.sent();
                  if (this.isPersistentChat && !((_o = this.chatSDKConfig.persistentChat) === null || _o === void 0 ? void 0 : _o.disable)) {
                    this.refreshTokenTimer = setInterval(function() {
                      return __awaiter(_this, void 0, void 0, function() {
                        return __generator(this, function(_a2) {
                          switch (_a2.label) {
                            case 0:
                              return [4, this.getChatToken(false)];
                            case 1:
                              _a2.sent();
                              this.updateChatToken(this.chatToken.token, this.chatToken.regionGTMS);
                              return [
                                2
                                /*return*/
                              ];
                          }
                        });
                      });
                    }, (_p = this.chatSDKConfig.persistentChat) === null || _p === void 0 ? void 0 : _p.tokenUpdateTime);
                  }
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        OmnichannelChatSDK2.prototype.endChat = function() {
          var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
          return __awaiter(this, void 0, void 0, function() {
            var sessionCloseOptionalParams, isReconnectChat, isChatReconnect, error_9, telemetryData;
            return __generator(this, function(_r) {
              switch (_r.label) {
                case 0:
                  this.scenarioMarker.startScenario(TelemetryEvent_1.default.EndChat, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  sessionCloseOptionalParams = {};
                  if (this.isPersistentChat && !((_a = this.chatSDKConfig.persistentChat) === null || _a === void 0 ? void 0 : _a.disable)) {
                    isReconnectChat = this.reconnectId !== null ? true : false;
                    sessionCloseOptionalParams.isPersistentChat = this.isPersistentChat;
                    sessionCloseOptionalParams.isReconnectChat = isReconnectChat;
                  }
                  if (this.isChatReconnect && !((_b = this.chatSDKConfig.chatReconnect) === null || _b === void 0 ? void 0 : _b.disable) && !this.isPersistentChat) {
                    isChatReconnect = this.reconnectId !== null ? true : false;
                    this.requestId = isChatReconnect ? this.reconnectId : this.requestId;
                    sessionCloseOptionalParams.isReconnectChat = isChatReconnect;
                  }
                  if (this.authenticatedUserToken) {
                    sessionCloseOptionalParams.authenticatedUserToken = this.authenticatedUserToken;
                  }
                  _r.label = 1;
                case 1:
                  _r.trys.push([1, 3, , 4]);
                  return [4, this.OCClient.sessionClose(this.requestId, sessionCloseOptionalParams)];
                case 2:
                  _r.sent();
                  this.scenarioMarker.completeScenario(TelemetryEvent_1.default.EndChat, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  (_c = this.conversation) === null || _c === void 0 ? void 0 : _c.disconnect();
                  this.conversation = null;
                  this.requestId = ocsdk_1.uuidv4();
                  this.chatToken = {};
                  this.reconnectId = null;
                  if (this.IC3Client) {
                    this.IC3Client.dispose();
                    !platform_1.default.isNode() && !platform_1.default.isReactNative() && WebUtils_1.removeElementById(this.IC3Client.id);
                    this.IC3Client = null;
                  }
                  (_d = this.ic3ClientLogger) === null || _d === void 0 ? void 0 : _d.setRequestId(this.requestId);
                  (_e = this.ic3ClientLogger) === null || _e === void 0 ? void 0 : _e.setChatId("");
                  (_f = this.ocSdkLogger) === null || _f === void 0 ? void 0 : _f.setRequestId(this.requestId);
                  (_g = this.ocSdkLogger) === null || _g === void 0 ? void 0 : _g.setChatId("");
                  (_h = this.acsClientLogger) === null || _h === void 0 ? void 0 : _h.setRequestId(this.requestId);
                  (_j = this.acsClientLogger) === null || _j === void 0 ? void 0 : _j.setChatId("");
                  (_k = this.acsAdapterLogger) === null || _k === void 0 ? void 0 : _k.setRequestId(this.requestId);
                  (_l = this.acsAdapterLogger) === null || _l === void 0 ? void 0 : _l.setChatId("");
                  (_m = this.callingSdkLogger) === null || _m === void 0 ? void 0 : _m.setRequestId(this.requestId);
                  (_o = this.callingSdkLogger) === null || _o === void 0 ? void 0 : _o.setChatId("");
                  (_p = this.amsClientLogger) === null || _p === void 0 ? void 0 : _p.setRequestId(this.requestId);
                  (_q = this.amsClientLogger) === null || _q === void 0 ? void 0 : _q.setChatId("");
                  return [3, 4];
                case 3:
                  error_9 = _r.sent();
                  telemetryData = {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  };
                  exceptionThrowers_1.default.throwConversationClosureFailure(error_9, this.scenarioMarker, TelemetryEvent_1.default.EndChat, telemetryData);
                  return [3, 4];
                case 4:
                  if (this.refreshTokenTimer !== null) {
                    clearInterval(this.refreshTokenTimer);
                    this.refreshTokenTimer = null;
                  }
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        OmnichannelChatSDK2.prototype.getCurrentLiveChatContext = function() {
          return __awaiter(this, void 0, void 0, function() {
            var chatToken, requestId, chatSession;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, this.getChatToken()];
                case 1:
                  chatToken = _a.sent();
                  requestId = this.requestId;
                  this.scenarioMarker.startScenario(TelemetryEvent_1.default.GetCurrentLiveChatContext, {
                    RequestId: requestId,
                    ChatId: chatToken.chatId
                  });
                  chatSession = {
                    chatToken,
                    requestId
                  };
                  if (Object.keys(chatSession.chatToken).length === 0) {
                    return [2, {}];
                  }
                  if (this.reconnectId) {
                    chatSession.reconnectId = this.reconnectId;
                  }
                  this.scenarioMarker.completeScenario(TelemetryEvent_1.default.GetCurrentLiveChatContext, {
                    RequestId: requestId,
                    ChatId: chatToken.chatId
                  });
                  return [2, chatSession];
              }
            });
          });
        };
        OmnichannelChatSDK2.prototype.getConversationDetails = function(optionalParams) {
          var _a, _b, _c;
          if (optionalParams === void 0) {
            optionalParams = {};
          }
          return __awaiter(this, void 0, void 0, function() {
            var requestId, chatToken, chatId, reconnectId, getLWIDetailsOptionalParams, lwiDetails, state, conversationId, agentAcceptedOn, canRenderPostChat, participantType, liveWorkItemDetails, error_10, telemetryData;
            return __generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  requestId = this.requestId;
                  chatToken = this.chatToken;
                  chatId = chatToken.chatId;
                  reconnectId = this.reconnectId;
                  if (optionalParams.liveChatContext) {
                    requestId = optionalParams.liveChatContext.requestId;
                    chatToken = optionalParams.liveChatContext.chatToken;
                    chatId = chatToken.chatId;
                  }
                  if ((_a = optionalParams.liveChatContext) === null || _a === void 0 ? void 0 : _a.reconnectId) {
                    reconnectId = optionalParams.liveChatContext.reconnectId;
                  }
                  this.scenarioMarker.startScenario(TelemetryEvent_1.default.GetConversationDetails, {
                    RequestId: requestId,
                    ChatId: chatId || ""
                  });
                  getLWIDetailsOptionalParams = {};
                  if (this.isPersistentChat && !((_b = this.chatSDKConfig.persistentChat) === null || _b === void 0 ? void 0 : _b.disable) && reconnectId) {
                    getLWIDetailsOptionalParams.reconnectId = reconnectId;
                  }
                  if (this.isChatReconnect && !((_c = this.chatSDKConfig.chatReconnect) === null || _c === void 0 ? void 0 : _c.disable) && !this.isPersistentChat && reconnectId) {
                    getLWIDetailsOptionalParams.reconnectId = reconnectId;
                  }
                  if (this.authenticatedUserToken) {
                    getLWIDetailsOptionalParams.authenticatedUserToken = this.authenticatedUserToken;
                  }
                  _d.label = 1;
                case 1:
                  _d.trys.push([1, 3, , 4]);
                  return [4, this.OCClient.getLWIDetails(requestId, getLWIDetailsOptionalParams)];
                case 2:
                  lwiDetails = _d.sent();
                  state = lwiDetails.State, conversationId = lwiDetails.ConversationId, agentAcceptedOn = lwiDetails.AgentAcceptedOn, canRenderPostChat = lwiDetails.CanRenderPostChat, participantType = lwiDetails.ParticipantType;
                  liveWorkItemDetails = {
                    state,
                    conversationId
                  };
                  if (agentAcceptedOn) {
                    liveWorkItemDetails.agentAcceptedOn = agentAcceptedOn;
                  }
                  if (canRenderPostChat) {
                    liveWorkItemDetails.canRenderPostChat = canRenderPostChat;
                  }
                  if (participantType) {
                    liveWorkItemDetails.participantType = participantType;
                  }
                  this.scenarioMarker.completeScenario(TelemetryEvent_1.default.GetConversationDetails, {
                    RequestId: requestId,
                    ChatId: chatId || ""
                  });
                  return [2, liveWorkItemDetails];
                case 3:
                  error_10 = _d.sent();
                  telemetryData = {
                    RequestId: requestId,
                    ChatId: chatId || ""
                  };
                  if (utilities_1.isClientIdNotFoundErrorMessage(error_10)) {
                    exceptionThrowers_1.default.throwAuthContactIdNotFoundFailure(error_10, this.scenarioMarker, TelemetryEvent_1.default.GetConversationDetails, telemetryData);
                  }
                  exceptionSuppressors_1.default.suppressConversationDetailsRetrievalFailure(error_10, this.scenarioMarker, TelemetryEvent_1.default.GetConversationDetails, telemetryData);
                  return [3, 4];
                case 4:
                  return [2, {}];
              }
            });
          });
        };
        OmnichannelChatSDK2.prototype.getPreChatSurvey = function(parse) {
          if (parse === void 0) {
            parse = true;
          }
          return __awaiter(this, void 0, void 0, function() {
            var result;
            return __generator(this, function(_a) {
              this.scenarioMarker.startScenario(TelemetryEvent_1.default.GetPreChatSurvey);
              try {
                result = parse ? JSON.parse(this.preChatSurvey) : this.preChatSurvey;
                this.scenarioMarker.completeScenario(TelemetryEvent_1.default.GetPreChatSurvey);
                return [2, result];
              } catch (_b) {
                this.scenarioMarker.failScenario(TelemetryEvent_1.default.GetPreChatSurvey);
              }
              return [
                2
                /*return*/
              ];
            });
          });
        };
        OmnichannelChatSDK2.prototype.getLiveChatConfig = function(optionalParams) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              if (!optionalParams || optionalParams.useRuntimeCache === true) {
                return [2, this.liveChatConfig];
              }
              return [2, this.getChatConfig({ sendCacheHeaders: (optionalParams === null || optionalParams === void 0 ? void 0 : optionalParams.sendCacheHeaders) || false })];
            });
          });
        };
        OmnichannelChatSDK2.prototype.getChatToken = function(cached, optionalParams) {
          var _a, _b, _c;
          if (cached === void 0) {
            cached = true;
          }
          return __awaiter(this, void 0, void 0, function() {
            var getChatTokenOptionalParams, chatToken, chatId, token, regionGtms, expiresIn, visitorId, voiceVideoCallToken, acsEndpoint, attachmentConfiguration, error_11, telemetryData;
            return __generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  this.scenarioMarker.startScenario(TelemetryEvent_1.default.GetChatToken, {
                    RequestId: this.requestId
                  });
                  if (!!cached)
                    return [3, 5];
                  _d.label = 1;
                case 1:
                  _d.trys.push([1, 3, , 4]);
                  getChatTokenOptionalParams = {};
                  if (this.authenticatedUserToken) {
                    getChatTokenOptionalParams.authenticatedUserToken = this.authenticatedUserToken;
                  }
                  if (this.isPersistentChat && !((_a = this.chatSDKConfig.persistentChat) === null || _a === void 0 ? void 0 : _a.disable)) {
                    getChatTokenOptionalParams.reconnectId = this.reconnectId;
                  }
                  if (this.isChatReconnect && !((_b = this.chatSDKConfig.chatReconnect) === null || _b === void 0 ? void 0 : _b.disable) && !this.isPersistentChat) {
                    getChatTokenOptionalParams.reconnectId = this.reconnectId;
                  }
                  if ((optionalParams === null || optionalParams === void 0 ? void 0 : optionalParams.refreshToken) === true) {
                    getChatTokenOptionalParams.refreshToken = optionalParams === null || optionalParams === void 0 ? void 0 : optionalParams.refreshToken;
                  }
                  return [4, this.OCClient.getChatToken(this.requestId, getChatTokenOptionalParams)];
                case 2:
                  chatToken = _d.sent();
                  chatId = chatToken.ChatId, token = chatToken.Token, regionGtms = chatToken.RegionGtms, expiresIn = chatToken.ExpiresIn, visitorId = chatToken.VisitorId, voiceVideoCallToken = chatToken.VoiceVideoCallToken, acsEndpoint = chatToken.ACSEndpoint, attachmentConfiguration = chatToken.AttachmentConfiguration;
                  this.chatToken = {
                    chatId,
                    regionGTMS: JSON.parse(regionGtms),
                    requestId: this.requestId,
                    token,
                    expiresIn,
                    visitorId,
                    voiceVideoCallToken,
                    acsEndpoint
                  };
                  if (attachmentConfiguration && attachmentConfiguration.AttachmentServiceEndpoint) {
                    this.chatToken.amsEndpoint = attachmentConfiguration.AttachmentServiceEndpoint;
                  }
                  this.scenarioMarker.completeScenario(TelemetryEvent_1.default.GetChatToken, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  return [3, 4];
                case 3:
                  error_11 = _d.sent();
                  telemetryData = {
                    RequestId: this.requestId,
                    ChatId: (_c = this.chatToken) === null || _c === void 0 ? void 0 : _c.chatId
                  };
                  if (utilities_1.isClientIdNotFoundErrorMessage(error_11)) {
                    exceptionThrowers_1.default.throwAuthContactIdNotFoundFailure(error_11, this.scenarioMarker, TelemetryEvent_1.default.GetChatToken, telemetryData);
                  } else {
                    exceptionThrowers_1.default.throwChatTokenRetrievalFailure(error_11, this.scenarioMarker, TelemetryEvent_1.default.GetChatToken, telemetryData);
                  }
                  return [3, 4];
                case 4:
                  return [3, 6];
                case 5:
                  this.scenarioMarker.completeScenario(TelemetryEvent_1.default.GetChatToken, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  _d.label = 6;
                case 6:
                  return [2, this.chatToken];
              }
            });
          });
        };
        OmnichannelChatSDK2.prototype.getCallingToken = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              if (this.chatToken && Object.keys(this.chatToken).length === 0) {
                return [2, ""];
              }
              if (this.chatToken.voiceVideoCallToken) {
                this.debug && console.log("calling:acs");
                return [2, this.chatToken.voiceVideoCallToken.Token];
              } else {
                this.debug && console.log("calling:skype");
                return [2, this.chatToken.token];
              }
              return [
                2
                /*return*/
              ];
            });
          });
        };
        OmnichannelChatSDK2.prototype.getMessages = function() {
          var _a;
          return __awaiter(this, void 0, void 0, function() {
            var messages, _b;
            return __generator(this, function(_c) {
              switch (_c.label) {
                case 0:
                  this.scenarioMarker.startScenario(TelemetryEvent_1.default.GetMessages, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  _c.label = 1;
                case 1:
                  _c.trys.push([1, 3, , 4]);
                  return [4, (_a = this.conversation) === null || _a === void 0 ? void 0 : _a.getMessages()];
                case 2:
                  messages = _c.sent();
                  this.scenarioMarker.completeScenario(TelemetryEvent_1.default.GetMessages, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  return [2, messages];
                case 3:
                  _b = _c.sent();
                  this.scenarioMarker.failScenario(TelemetryEvent_1.default.GetMessages, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  return [3, 4];
                case 4:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        OmnichannelChatSDK2.prototype.getDataMaskingRules = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              return [2, this.dataMaskingRules];
            });
          });
        };
        OmnichannelChatSDK2.prototype.sendMessage = function(message) {
          var _a;
          return __awaiter(this, void 0, void 0, function() {
            var _b, disable, maskingCharacter, content, _i, _c, maskingRule, regex, match, replaceStr, sendMessageRequest, error_12, messageToSend, _d;
            return __generator(this, function(_e) {
              switch (_e.label) {
                case 0:
                  this.scenarioMarker.startScenario(TelemetryEvent_1.default.SendMessages, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  _b = this.chatSDKConfig.dataMasking, disable = _b.disable, maskingCharacter = _b.maskingCharacter;
                  content = message.content;
                  if (Object.keys(this.dataMaskingRules).length > 0 && !disable) {
                    for (_i = 0, _c = Object.values(this.dataMaskingRules); _i < _c.length; _i++) {
                      maskingRule = _c[_i];
                      regex = new RegExp(maskingRule, "g");
                      match = void 0;
                      while (match = regex.exec(content)) {
                        replaceStr = match[0].replace(/./g, maskingCharacter);
                        content = content.replace(match[0], replaceStr);
                      }
                    }
                  }
                  message.content = content;
                  if (!(this.liveChatVersion === LiveChatVersion_1.default.V2))
                    return [3, 5];
                  sendMessageRequest = {
                    content: message.content
                  };
                  sendMessageRequest.metadata = {
                    widgetId: this.omnichannelConfig.widgetId,
                    clientMessageId: Date.now().toString()
                  };
                  if (message.metadata) {
                    sendMessageRequest.metadata = __assign(__assign({}, sendMessageRequest.metadata), message.metadata);
                  }
                  _e.label = 1;
                case 1:
                  _e.trys.push([1, 3, , 4]);
                  return [4, (_a = this.conversation) === null || _a === void 0 ? void 0 : _a.sendMessage(sendMessageRequest)];
                case 2:
                  _e.sent();
                  this.scenarioMarker.completeScenario(TelemetryEvent_1.default.SendMessages, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  return [3, 4];
                case 3:
                  error_12 = _e.sent();
                  this.scenarioMarker.failScenario(TelemetryEvent_1.default.SendMessages, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  throw new Error("ChatSDKSendMessageFailed");
                case 4:
                  return [3, 9];
                case 5:
                  messageToSend = {
                    content: message.content,
                    timestamp: /* @__PURE__ */ new Date(),
                    contentType: MessageContentType_1.default.Text,
                    deliveryMode: DeliveryMode_1.default.Bridged,
                    messageType: MessageType_1.default.UserMessage,
                    properties: void 0,
                    tags: __spreadArrays(MessageTags_1.defaultMessageTags),
                    sender: {
                      displayName: "Customer",
                      id: "customer",
                      type: PersonType_1.default.User
                    }
                  };
                  if (message.tags) {
                    messageToSend.tags = message.tags;
                  }
                  if (message.timestamp) {
                    messageToSend.timestamp = message.timestamp;
                  }
                  _e.label = 6;
                case 6:
                  _e.trys.push([6, 8, , 9]);
                  return [4, this.conversation.sendMessage(messageToSend)];
                case 7:
                  _e.sent();
                  this.scenarioMarker.completeScenario(TelemetryEvent_1.default.SendMessages, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  return [3, 9];
                case 8:
                  _d = _e.sent();
                  this.scenarioMarker.failScenario(TelemetryEvent_1.default.SendMessages, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  throw new Error("ChatSDKSendMessageFailed");
                case 9:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        OmnichannelChatSDK2.prototype.onNewMessage = function(onNewMessageCallback, optionalParams) {
          var _a, _b;
          if (optionalParams === void 0) {
            optionalParams = {};
          }
          return __awaiter(this, void 0, void 0, function() {
            var postedMessages_1, messages, _i, _c, message, id, postedMessages_2, messages, _d, _e, message, clientmessageid, omnichannelMessage;
            var _this = this;
            return __generator(this, function(_f) {
              switch (_f.label) {
                case 0:
                  this.scenarioMarker.startScenario(TelemetryEvent_1.default.OnNewMessage, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  if (!(this.liveChatVersion === LiveChatVersion_1.default.V2))
                    return [3, 3];
                  postedMessages_1 = /* @__PURE__ */ new Set();
                  if (!optionalParams.rehydrate)
                    return [3, 2];
                  this.debug && console.log("[OmnichannelChatSDK][onNewMessage] rehydrate");
                  return [4, this.getMessages()];
                case 1:
                  messages = _f.sent();
                  for (_i = 0, _c = messages.reverse(); _i < _c.length; _i++) {
                    message = _c[_i];
                    id = message.id;
                    if (postedMessages_1.has(id)) {
                      continue;
                    }
                    postedMessages_1.add(id);
                    onNewMessageCallback(message);
                  }
                  _f.label = 2;
                case 2:
                  try {
                    (_a = this.conversation) === null || _a === void 0 ? void 0 : _a.registerOnNewMessage(function(event) {
                      var id2 = event.id;
                      var omnichannelMessage2 = createOmnichannelMessage_1.default(event, {
                        liveChatVersion: _this.liveChatVersion,
                        debug: _this.debug
                      });
                      if (!postedMessages_1.has(id2)) {
                        onNewMessageCallback(omnichannelMessage2);
                        postedMessages_1.add(id2);
                      }
                    });
                    this.scenarioMarker.completeScenario(TelemetryEvent_1.default.OnNewMessage, {
                      RequestId: this.requestId,
                      ChatId: this.chatToken.chatId
                    });
                  } catch (_g) {
                    this.scenarioMarker.failScenario(TelemetryEvent_1.default.OnNewMessage, {
                      RequestId: this.requestId,
                      ChatId: this.chatToken.chatId
                    });
                  }
                  return [3, 6];
                case 3:
                  postedMessages_2 = /* @__PURE__ */ new Set();
                  if (!optionalParams.rehydrate)
                    return [3, 5];
                  this.debug && console.log("[OmnichannelChatSDK][onNewMessage] rehydrate");
                  return [4, this.getMessages()];
                case 4:
                  messages = _f.sent();
                  if (messages) {
                    for (_d = 0, _e = messages.reverse(); _d < _e.length; _d++) {
                      message = _e[_d];
                      clientmessageid = message.clientmessageid;
                      if (postedMessages_2.has(clientmessageid)) {
                        continue;
                      }
                      postedMessages_2.add(clientmessageid);
                      omnichannelMessage = createOmnichannelMessage_1.default(message, {
                        liveChatVersion: this.liveChatVersion,
                        debug: this.debug
                      });
                      onNewMessageCallback(omnichannelMessage);
                    }
                  }
                  _f.label = 5;
                case 5:
                  try {
                    (_b = this.conversation) === null || _b === void 0 ? void 0 : _b.registerOnNewMessage(function(message2) {
                      var clientmessageid2 = message2.clientmessageid, messageType = message2.messageType;
                      if (utilities_1.isCustomerMessage(message2)) {
                        return;
                      }
                      if (postedMessages_2.has(clientmessageid2)) {
                        return;
                      }
                      if (messageType !== MessageType_1.default.Typing) {
                        var omnichannelMessage2 = createOmnichannelMessage_1.default(message2, {
                          liveChatVersion: _this.liveChatVersion,
                          debug: _this.debug
                        });
                        onNewMessageCallback(omnichannelMessage2);
                      }
                    });
                    this.scenarioMarker.completeScenario(TelemetryEvent_1.default.OnNewMessage, {
                      RequestId: this.requestId,
                      ChatId: this.chatToken.chatId
                    });
                  } catch (_h) {
                    this.scenarioMarker.failScenario(TelemetryEvent_1.default.OnNewMessage, {
                      RequestId: this.requestId,
                      ChatId: this.chatToken.chatId
                    });
                  }
                  _f.label = 6;
                case 6:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        OmnichannelChatSDK2.prototype.sendTypingEvent = function() {
          return __awaiter(this, void 0, void 0, function() {
            var error_13, typingPayload, members, botMembers, error_14;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  this.scenarioMarker.startScenario(TelemetryEvent_1.default.SendTypingEvent, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  if (!(this.liveChatVersion === LiveChatVersion_1.default.V2))
                    return [3, 6];
                  _a.label = 1;
                case 1:
                  _a.trys.push([1, 4, , 5]);
                  return [4, this.OCClient.sendTypingIndicator(this.requestId, LiveChatVersion_1.default.V2, {
                    customerDisplayName: ACSParticipantDisplayName_1.default.Customer
                  })];
                case 2:
                  _a.sent();
                  return [4, this.conversation.sendTyping()];
                case 3:
                  _a.sent();
                  this.scenarioMarker.completeScenario(TelemetryEvent_1.default.SendTypingEvent, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  return [3, 5];
                case 4:
                  error_13 = _a.sent();
                  this.scenarioMarker.failScenario(TelemetryEvent_1.default.SendTypingEvent, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  throw new Error("SendTypingFailure");
                case 5:
                  return [3, 12];
                case 6:
                  typingPayload = "{isTyping: 0}";
                  _a.label = 7;
                case 7:
                  _a.trys.push([7, 11, , 12]);
                  return [4, this.conversation.indicateTypingStatus(0)];
                case 8:
                  _a.sent();
                  return [4, this.conversation.getMembers()];
                case 9:
                  members = _a.sent();
                  botMembers = members.filter(function(member) {
                    return member.type === PersonType_1.default.Bot;
                  });
                  return [4, this.conversation.sendMessageToBot(botMembers[0].id, { payload: typingPayload })];
                case 10:
                  _a.sent();
                  this.scenarioMarker.completeScenario(TelemetryEvent_1.default.SendTypingEvent, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  return [3, 12];
                case 11:
                  error_14 = _a.sent();
                  this.scenarioMarker.failScenario(TelemetryEvent_1.default.SendTypingEvent, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  throw new Error("SendTypingFailure");
                case 12:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        OmnichannelChatSDK2.prototype.onTypingEvent = function(onTypingEventCallback) {
          var _a;
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_b) {
              this.scenarioMarker.startScenario(TelemetryEvent_1.default.OnTypingEvent, {
                RequestId: this.requestId,
                ChatId: this.chatToken.chatId
              });
              if (this.liveChatVersion === LiveChatVersion_1.default.V2) {
                try {
                  this.conversation.onTypingEvent(onTypingEventCallback);
                  this.scenarioMarker.completeScenario(TelemetryEvent_1.default.OnTypingEvent, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                } catch (_c) {
                  this.scenarioMarker.failScenario(TelemetryEvent_1.default.OnTypingEvent, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                }
              } else {
                try {
                  (_a = this.conversation) === null || _a === void 0 ? void 0 : _a.registerOnNewMessage(function(message) {
                    var messageType = message.messageType;
                    if (utilities_1.isCustomerMessage(message)) {
                      return;
                    }
                    if (messageType === MessageType_1.default.Typing) {
                      onTypingEventCallback(message);
                    }
                  });
                  this.scenarioMarker.completeScenario(TelemetryEvent_1.default.OnTypingEvent, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                } catch (_d) {
                  this.scenarioMarker.failScenario(TelemetryEvent_1.default.OnTypingEvent, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                }
              }
              return [
                2
                /*return*/
              ];
            });
          });
        };
        OmnichannelChatSDK2.prototype.onAgentEndSession = function(onAgentEndSessionCallback) {
          var _a;
          return __awaiter(this, void 0, void 0, function() {
            var _this = this;
            return __generator(this, function(_b) {
              this.scenarioMarker.startScenario(TelemetryEvent_1.default.OnAgentEndSession, {
                RequestId: this.requestId,
                ChatId: this.chatToken.chatId
              });
              if (this.liveChatVersion === LiveChatVersion_1.default.V2) {
                try {
                  this.conversation.registerOnThreadUpdate(function(event) {
                    onAgentEndSessionCallback(event);
                  });
                  this.scenarioMarker.completeScenario(TelemetryEvent_1.default.OnAgentEndSession, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                } catch (error) {
                  this.scenarioMarker.failScenario(TelemetryEvent_1.default.OnAgentEndSession, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                }
              } else {
                try {
                  (_a = this.conversation) === null || _a === void 0 ? void 0 : _a.registerOnThreadUpdate(function(message) {
                    var members = message.members;
                    if (members.length === 1) {
                      onAgentEndSessionCallback(message);
                      if (_this.refreshTokenTimer !== null) {
                        clearInterval(_this.refreshTokenTimer);
                        _this.refreshTokenTimer = null;
                      }
                    }
                  });
                  this.scenarioMarker.completeScenario(TelemetryEvent_1.default.OnAgentEndSession, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                } catch (error) {
                  this.scenarioMarker.failScenario(TelemetryEvent_1.default.OnAgentEndSession, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                }
              }
              return [
                2
                /*return*/
              ];
            });
          });
        };
        OmnichannelChatSDK2.prototype.uploadFileAttachment = function(fileInfo) {
          var _a, _b, _c, _d;
          return __awaiter(this, void 0, void 0, function() {
            var createObjectResponse, documentId, uploadDocumentResponse, fileIdsProperty, fileMetaProperty, sendMessageRequest, messageToSend, error_15, fileMetadata, messageToSend, error_16;
            return __generator(this, function(_e) {
              switch (_e.label) {
                case 0:
                  this.scenarioMarker.startScenario(TelemetryEvent_1.default.UploadFileAttachment, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  if (!(this.liveChatVersion === LiveChatVersion_1.default.V2))
                    return [3, 7];
                  return [4, (_a = this.AMSClient) === null || _a === void 0 ? void 0 : _a.createObject((_b = this.chatToken) === null || _b === void 0 ? void 0 : _b.chatId, fileInfo)];
                case 1:
                  createObjectResponse = _e.sent();
                  documentId = createObjectResponse.id;
                  return [4, (_c = this.AMSClient) === null || _c === void 0 ? void 0 : _c.uploadDocument(documentId, fileInfo)];
                case 2:
                  uploadDocumentResponse = _e.sent();
                  fileIdsProperty = {
                    amsReferences: JSON.stringify([documentId]),
                    amsreferences: JSON.stringify([documentId])
                  };
                  fileMetaProperty = {
                    amsMetadata: JSON.stringify([{
                      contentType: fileInfo.type,
                      fileName: fileInfo.name
                    }])
                  };
                  sendMessageRequest = {
                    content: "",
                    metadata: __assign(__assign({ widgetId: this.omnichannelConfig.widgetId, clientMessageId: Date.now().toString() }, fileIdsProperty), fileMetaProperty)
                  };
                  messageToSend = {
                    content: "",
                    timestamp: /* @__PURE__ */ new Date(),
                    contentType: MessageContentType_1.default.Text,
                    deliveryMode: DeliveryMode_1.default.Bridged,
                    messageType: MessageType_1.default.UserMessage,
                    tags: __spreadArrays(MessageTags_1.defaultMessageTags),
                    sender: {
                      displayName: "Customer",
                      id: "customer",
                      type: PersonType_1.default.User
                    },
                    fileMetadata: uploadDocumentResponse
                  };
                  _e.label = 3;
                case 3:
                  _e.trys.push([3, 5, , 6]);
                  return [4, (_d = this.conversation) === null || _d === void 0 ? void 0 : _d.sendMessage(sendMessageRequest)];
                case 4:
                  _e.sent();
                  this.scenarioMarker.completeScenario(TelemetryEvent_1.default.UploadFileAttachment, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  return [2, messageToSend];
                case 5:
                  error_15 = _e.sent();
                  console.error("OmnichannelChatSDK/uploadFileAttachment/sendMessage/error");
                  this.scenarioMarker.failScenario(TelemetryEvent_1.default.UploadFileAttachment, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  return [3, 6];
                case 6:
                  return [2, {}];
                case 7:
                  fileMetadata = void 0;
                  if (!(platform_1.default.isReactNative() || platform_1.default.isNode()))
                    return [3, 9];
                  return [4, this.conversation.sendFileData(fileInfo, FileSharingProtocolType_1.default.AmsBasedFileSharing)];
                case 8:
                  fileMetadata = _e.sent();
                  return [3, 11];
                case 9:
                  return [4, this.conversation.uploadFile(fileInfo, FileSharingProtocolType_1.default.AmsBasedFileSharing)];
                case 10:
                  fileMetadata = _e.sent();
                  _e.label = 11;
                case 11:
                  messageToSend = {
                    content: "",
                    timestamp: /* @__PURE__ */ new Date(),
                    contentType: MessageContentType_1.default.Text,
                    deliveryMode: DeliveryMode_1.default.Bridged,
                    messageType: MessageType_1.default.UserMessage,
                    tags: __spreadArrays(MessageTags_1.defaultMessageTags),
                    sender: {
                      displayName: "Customer",
                      id: "customer",
                      type: PersonType_1.default.User
                    },
                    fileMetadata
                  };
                  _e.label = 12;
                case 12:
                  _e.trys.push([12, 14, , 15]);
                  return [4, this.conversation.sendFileMessage(fileMetadata, messageToSend)];
                case 13:
                  _e.sent();
                  this.scenarioMarker.completeScenario(TelemetryEvent_1.default.UploadFileAttachment, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  return [2, messageToSend];
                case 14:
                  error_16 = _e.sent();
                  console.error("OmnichannelChatSDK/uploadFileAttachment/error: " + error_16);
                  this.scenarioMarker.failScenario(TelemetryEvent_1.default.UploadFileAttachment, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  return [3, 15];
                case 15:
                  return [2, {}];
              }
            });
          });
        };
        OmnichannelChatSDK2.prototype.downloadFileAttachment = function(fileMetadata) {
          var _a, _b;
          return __awaiter(this, void 0, void 0, function() {
            var response, view_location, viewResponse, _c, downloadedFile, error_17;
            return __generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  this.scenarioMarker.startScenario(TelemetryEvent_1.default.DownloadFileAttachment, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  if (!(this.liveChatVersion === LiveChatVersion_1.default.V2))
                    return [3, 6];
                  _d.label = 1;
                case 1:
                  _d.trys.push([1, 4, , 5]);
                  return [4, (_a = this.AMSClient) === null || _a === void 0 ? void 0 : _a.getViewStatus(fileMetadata)];
                case 2:
                  response = _d.sent();
                  view_location = response.view_location;
                  return [4, (_b = this.AMSClient) === null || _b === void 0 ? void 0 : _b.getView(fileMetadata, view_location)];
                case 3:
                  viewResponse = _d.sent();
                  this.scenarioMarker.completeScenario(TelemetryEvent_1.default.DownloadFileAttachment, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  return [2, viewResponse];
                case 4:
                  _c = _d.sent();
                  this.scenarioMarker.failScenario(TelemetryEvent_1.default.DownloadFileAttachment, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  throw new Error("DownloadFileAttachmentFailed");
                case 5:
                  return [3, 9];
                case 6:
                  _d.trys.push([6, 8, , 9]);
                  return [4, this.conversation.downloadFile(fileMetadata)];
                case 7:
                  downloadedFile = _d.sent();
                  this.scenarioMarker.completeScenario(TelemetryEvent_1.default.DownloadFileAttachment, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  return [2, downloadedFile];
                case 8:
                  error_17 = _d.sent();
                  console.error("OmnichannelChatSDK/downloadFileAttachment/error: " + error_17);
                  this.scenarioMarker.failScenario(TelemetryEvent_1.default.DownloadFileAttachment, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  throw new Error("DownloadFileAttachmentFailed");
                case 9:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        OmnichannelChatSDK2.prototype.emailLiveChatTranscript = function(body) {
          return __awaiter(this, void 0, void 0, function() {
            var emailTranscriptOptionalParams, emailRequestBody, emailResponse;
            return __generator(this, function(_a) {
              emailTranscriptOptionalParams = {};
              this.scenarioMarker.startScenario(TelemetryEvent_1.default.EmailLiveChatTranscript, {
                RequestId: this.requestId,
                ChatId: this.chatToken.chatId
              });
              try {
                if (this.authenticatedUserToken) {
                  emailTranscriptOptionalParams.authenticatedUserToken = this.authenticatedUserToken;
                }
                emailRequestBody = {
                  ChatId: this.chatToken.chatId,
                  EmailAddress: body.emailAddress,
                  DefaultAttachmentMessage: body.attachmentMessage,
                  CustomerLocale: body.locale || locale_1.getLocaleStringFromId(this.localeId)
                };
                emailResponse = this.OCClient.emailTranscript(this.requestId, this.chatToken.token, emailRequestBody, emailTranscriptOptionalParams);
                this.scenarioMarker.completeScenario(TelemetryEvent_1.default.EmailLiveChatTranscript, {
                  RequestId: this.requestId,
                  ChatId: this.chatToken.chatId
                });
                return [2, emailResponse];
              } catch (error) {
                console.error("OmnichannelChatSDK/emailLiveChatTranscript/error: " + error);
                this.scenarioMarker.failScenario(TelemetryEvent_1.default.EmailLiveChatTranscript, {
                  RequestId: this.requestId,
                  ChatId: this.chatToken.chatId
                });
              }
              return [
                2
                /*return*/
              ];
            });
          });
        };
        OmnichannelChatSDK2.prototype.getLiveChatTranscript = function(optionalParams) {
          if (optionalParams === void 0) {
            optionalParams = {};
          }
          return __awaiter(this, void 0, void 0, function() {
            var getChatTranscriptOptionalParams, requestId, chatToken, chatId, transcriptResponse, error_18, telemetryData;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  getChatTranscriptOptionalParams = {};
                  requestId = this.requestId;
                  chatToken = this.chatToken;
                  chatId = chatToken.chatId;
                  if (optionalParams.liveChatContext) {
                    requestId = optionalParams.liveChatContext.requestId;
                    chatToken = optionalParams.liveChatContext.chatToken;
                    chatId = chatToken.chatId;
                  }
                  this.scenarioMarker.startScenario(TelemetryEvent_1.default.GetLiveChatTranscript, {
                    RequestId: requestId,
                    ChatId: chatId
                  });
                  _a.label = 1;
                case 1:
                  _a.trys.push([1, 3, , 4]);
                  if (this.authenticatedUserToken) {
                    getChatTranscriptOptionalParams.authenticatedUserToken = this.authenticatedUserToken;
                  }
                  return [4, this.OCClient.getChatTranscripts(requestId, chatToken.chatId, chatToken.token, getChatTranscriptOptionalParams)];
                case 2:
                  transcriptResponse = _a.sent();
                  this.scenarioMarker.completeScenario(TelemetryEvent_1.default.GetLiveChatTranscript, {
                    RequestId: requestId,
                    ChatId: chatId
                  });
                  return [2, transcriptResponse];
                case 3:
                  error_18 = _a.sent();
                  telemetryData = {
                    RequestId: requestId,
                    ChatId: chatId
                  };
                  exceptionThrowers_1.default.throwLiveChatTranscriptRetrievalFailure(error_18, this.scenarioMarker, TelemetryEvent_1.default.GetLiveChatTranscript, telemetryData);
                  return [3, 4];
                case 4:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        OmnichannelChatSDK2.prototype.createChatAdapter = function(optionalParams) {
          var _a;
          if (optionalParams === void 0) {
            optionalParams = {};
          }
          return __awaiter(this, void 0, void 0, function() {
            var protocol, supportedChatAdapterProtocols, fileManager;
            return __generator(this, function(_b) {
              if (platform_1.default.isNode() || platform_1.default.isReactNative()) {
                return [2, Promise.reject("ChatAdapter is only supported on browser")];
              }
              protocol = optionalParams.protocol;
              supportedChatAdapterProtocols = [ChatAdapterProtocols_1.default.ACS, ChatAdapterProtocols_1.default.IC3, ChatAdapterProtocols_1.default.DirectLine];
              if (protocol && !supportedChatAdapterProtocols.includes(protocol)) {
                return [2, Promise.reject("ChatAdapter for protocol " + protocol + " currently not supported")];
              }
              if (protocol === ChatAdapterProtocols_1.default.DirectLine) {
                return [2, chatAdapterCreators_1.createDirectLine(optionalParams, this.chatSDKConfig, this.liveChatVersion, ChatAdapterProtocols_1.default.DirectLine, this.telemetry, this.scenarioMarker)];
              } else if (protocol === ChatAdapterProtocols_1.default.ACS || this.liveChatVersion === LiveChatVersion_1.default.V2) {
                fileManager = new AMSFileManager_1.default(this.AMSClient, this.acsAdapterLogger);
                return [2, chatAdapterCreators_1.createACSAdapter(optionalParams, this.chatSDKConfig, this.liveChatVersion, ChatAdapterProtocols_1.default.ACS, this.telemetry, this.scenarioMarker, this.omnichannelConfig, this.chatToken, fileManager, (_a = this.ACSClient) === null || _a === void 0 ? void 0 : _a.getChatClient(), this.acsAdapterLogger)];
              } else if (protocol === ChatAdapterProtocols_1.default.IC3 || this.liveChatVersion === LiveChatVersion_1.default.V1) {
                return [2, chatAdapterCreators_1.createIC3Adapter(optionalParams, this.chatSDKConfig, this.liveChatVersion, ChatAdapterProtocols_1.default.IC3, this.telemetry, this.scenarioMarker, this.chatToken, this.IC3Client, this.ic3ClientLogger)];
              }
              return [2, Promise.reject("ChatAdapter for protocol " + protocol + " currently not supported")];
            });
          });
        };
        OmnichannelChatSDK2.prototype.getVoiceVideoCalling = function(params) {
          if (params === void 0) {
            params = {};
          }
          return __awaiter(this, void 0, void 0, function() {
            var message, message, chatConfig, liveWSAndLiveChatEngJoin, msdyn_widgetsnippet, widgetSnippetSourceRegex, result;
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  this.scenarioMarker.startScenario(TelemetryEvent_1.default.GetVoiceVideoCalling);
                  if (platform_1.default.isNode() || platform_1.default.isReactNative()) {
                    message = "VoiceVideoCalling is only supported on browser";
                    exceptionThrowers_1.default.throwUnsupportedPlatform(this.scenarioMarker, TelemetryEvent_1.default.GetVoiceVideoCalling, message);
                  }
                  if (this.callingOption.toString() === CallingOptionsOptionSetNumber_1.default.NoCalling.toString()) {
                    message = "Voice and video call is not enabled";
                    exceptionThrowers_1.default.throwFeatureDisabled(this.scenarioMarker, TelemetryEvent_1.default.GetVoiceVideoCalling, message);
                  }
                  return [4, this.getChatConfig()];
                case 1:
                  chatConfig = _a.sent();
                  liveWSAndLiveChatEngJoin = chatConfig.LiveWSAndLiveChatEngJoin;
                  msdyn_widgetsnippet = liveWSAndLiveChatEngJoin.msdyn_widgetsnippet;
                  widgetSnippetSourceRegex = new RegExp('src="(https:\\/\\/[\\w-.]+)[\\w-.\\/]+"');
                  result = msdyn_widgetsnippet.match(widgetSnippetSourceRegex);
                  if (result && result.length) {
                    return [2, new Promise(function(resolve) {
                      return __awaiter(_this, void 0, void 0, function() {
                        var LiveChatWidgetLibCDNUrl, defaultParams;
                        var _this2 = this;
                        var _a2;
                        return __generator(this, function(_b) {
                          switch (_b.label) {
                            case 0:
                              LiveChatWidgetLibCDNUrl = result[1] + "/livechatwidget/WebChatControl/lib/CallingBundle.js";
                              (_a2 = this.telemetry) === null || _a2 === void 0 ? void 0 : _a2.setCDNPackages({
                                VoiceVideoCalling: LiveChatWidgetLibCDNUrl
                              });
                              defaultParams = {
                                logger: this.callingSdkLogger
                              };
                              return [4, WebUtils_1.loadScript(LiveChatWidgetLibCDNUrl, function() {
                                return __awaiter(_this2, void 0, void 0, function() {
                                  var VoiceVideoCalling;
                                  return __generator(this, function(_a3) {
                                    switch (_a3.label) {
                                      case 0:
                                        this.debug && console.debug(LiveChatWidgetLibCDNUrl + " loaded!");
                                        return [4, createVoiceVideoCalling_1.default(__assign(__assign({}, params), defaultParams))];
                                      case 1:
                                        VoiceVideoCalling = _a3.sent();
                                        this.scenarioMarker.completeScenario(TelemetryEvent_1.default.GetVoiceVideoCalling);
                                        VoiceVideoCalling.useScenarioMarker(this.scenarioMarker);
                                        resolve(VoiceVideoCalling);
                                        return [
                                          2
                                          /*return*/
                                        ];
                                    }
                                  });
                                });
                              }, function() {
                                return __awaiter(_this2, void 0, void 0, function() {
                                  var exceptionDetails;
                                  return __generator(this, function(_a3) {
                                    exceptionDetails = {
                                      response: "VoiceVideoCallingLoadFailed",
                                      message: "Failed to load VoiceVideoCalling"
                                    };
                                    this.scenarioMarker.failScenario(TelemetryEvent_1.default.GetVoiceVideoCalling, {
                                      ExceptionDetails: JSON.stringify(exceptionDetails)
                                    });
                                    throw new Error(exceptionDetails.response);
                                  });
                                });
                              })];
                            case 1:
                              _b.sent();
                              return [
                                2
                                /*return*/
                              ];
                          }
                        });
                      });
                    })];
                  }
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        OmnichannelChatSDK2.prototype.getPostChatSurveyContext = function() {
          return __awaiter(this, void 0, void 0, function() {
            var conversationId, chatConfig, liveWSAndLiveChatEngJoin, msdyn_postconversationsurveyenable, msfp_sourcesurveyidentifier, msfp_botsourcesurveyidentifier, postConversationSurveyOwnerId, postConversationBotSurveyOwnerId, liveWorkItemDetails, participantJoined, participantType, agentSurveyInviteLinkRequest, botSurveyInviteLinkRequest, optionalParams, agentSurveyInviteLinkResponse, botSurveyInviteLinkResponse, _a, agentSurveyInviteLink, agentFormsProLocale, botSurveyInviteLink, botFormsProLocale, postChatContext, ex_1;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  this.scenarioMarker.startScenario(TelemetryEvent_1.default.GetPostChatSurveyContext, {
                    RequestId: this.requestId
                  });
                  _b.label = 1;
                case 1:
                  _b.trys.push([1, 8, , 9]);
                  chatConfig = this.liveChatConfig;
                  liveWSAndLiveChatEngJoin = chatConfig.LiveWSAndLiveChatEngJoin;
                  msdyn_postconversationsurveyenable = liveWSAndLiveChatEngJoin.msdyn_postconversationsurveyenable, msfp_sourcesurveyidentifier = liveWSAndLiveChatEngJoin.msfp_sourcesurveyidentifier, msfp_botsourcesurveyidentifier = liveWSAndLiveChatEngJoin.msfp_botsourcesurveyidentifier, postConversationSurveyOwnerId = liveWSAndLiveChatEngJoin.postConversationSurveyOwnerId, postConversationBotSurveyOwnerId = liveWSAndLiveChatEngJoin.postConversationBotSurveyOwnerId;
                  if (!(msdyn_postconversationsurveyenable === "true"))
                    return [3, 6];
                  return [4, this.getConversationDetails()];
                case 2:
                  liveWorkItemDetails = _b.sent();
                  participantJoined = (liveWorkItemDetails === null || liveWorkItemDetails === void 0 ? void 0 : liveWorkItemDetails.canRenderPostChat) === "True";
                  participantType = liveWorkItemDetails === null || liveWorkItemDetails === void 0 ? void 0 : liveWorkItemDetails.participantType;
                  conversationId = liveWorkItemDetails === null || liveWorkItemDetails === void 0 ? void 0 : liveWorkItemDetails.conversationId;
                  agentSurveyInviteLinkRequest = {
                    "FormId": msfp_sourcesurveyidentifier,
                    "ConversationId": conversationId,
                    "OCLocaleCode": locale_1.getLocaleStringFromId(this.localeId)
                  };
                  botSurveyInviteLinkRequest = {
                    "FormId": msfp_botsourcesurveyidentifier,
                    "ConversationId": conversationId,
                    "OCLocaleCode": locale_1.getLocaleStringFromId(this.localeId)
                  };
                  optionalParams = {
                    "requestId": this.requestId
                  };
                  if (this.authenticatedUserToken) {
                    optionalParams.authenticatedUserToken = this.authenticatedUserToken;
                  }
                  return [4, this.OCClient.getSurveyInviteLink(postConversationSurveyOwnerId, agentSurveyInviteLinkRequest, optionalParams)];
                case 3:
                  agentSurveyInviteLinkResponse = _b.sent();
                  _a = postConversationBotSurveyOwnerId && msfp_botsourcesurveyidentifier;
                  if (!_a)
                    return [3, 5];
                  return [4, this.OCClient.getSurveyInviteLink(postConversationBotSurveyOwnerId, botSurveyInviteLinkRequest, optionalParams)];
                case 4:
                  _a = _b.sent();
                  _b.label = 5;
                case 5:
                  botSurveyInviteLinkResponse = _a;
                  agentSurveyInviteLink = void 0, agentFormsProLocale = void 0, botSurveyInviteLink = void 0, botFormsProLocale = void 0;
                  if (agentSurveyInviteLinkResponse != null) {
                    if (agentSurveyInviteLinkResponse.inviteList != null && agentSurveyInviteLinkResponse.inviteList.length == 1) {
                      agentSurveyInviteLink = agentSurveyInviteLinkResponse.inviteList[0].invitationLink;
                    } else {
                      this.scenarioMarker.failScenario(TelemetryEvent_1.default.GetPostChatSurveyContext, {
                        ConversationId: conversationId,
                        RequestId: this.requestId,
                        ExceptionDetails: "Survey Invite link failed to send response."
                      });
                      return [2, Promise.reject("Survey Invite link failed to send response.")];
                    }
                    if (agentSurveyInviteLinkResponse.formsProLocaleCode != null) {
                      agentFormsProLocale = agentSurveyInviteLinkResponse.formsProLocaleCode;
                    }
                    if (botSurveyInviteLinkResponse != null) {
                      if (botSurveyInviteLinkResponse.inviteList != null && botSurveyInviteLinkResponse.inviteList.length == 1) {
                        botSurveyInviteLink = botSurveyInviteLinkResponse.inviteList[0].invitationLink;
                      }
                      if (botSurveyInviteLinkResponse.formsProLocaleCode != null) {
                        botFormsProLocale = botSurveyInviteLinkResponse.formsProLocaleCode;
                      }
                    }
                    postChatContext = {
                      participantJoined,
                      participantType,
                      surveyInviteLink: agentSurveyInviteLink,
                      botSurveyInviteLink,
                      formsProLocale: agentFormsProLocale,
                      botFormsProLocale
                    };
                    return [2, Promise.resolve(postChatContext)];
                  } else {
                    this.scenarioMarker.failScenario(TelemetryEvent_1.default.GetPostChatSurveyContext, {
                      ConversationId: conversationId,
                      RequestId: this.requestId,
                      ExceptionDetails: "surveyInviteLinkResponse is null."
                    });
                    return [2, Promise.reject("surveyInviteLinkResponse is null.")];
                  }
                  return [3, 7];
                case 6:
                  this.scenarioMarker.failScenario(TelemetryEvent_1.default.GetPostChatSurveyContext, {
                    RequestId: this.requestId,
                    ExceptionDetails: "Post Chat Survey is disabled. Please check the Omnichannel Administration Portal."
                  });
                  return [2, Promise.reject("Post Chat is disabled from admin side.")];
                case 7:
                  return [3, 9];
                case 8:
                  ex_1 = _b.sent();
                  this.scenarioMarker.failScenario(TelemetryEvent_1.default.GetPostChatSurveyContext, {
                    ConversationId: conversationId !== null && conversationId !== void 0 ? conversationId : "",
                    RequestId: this.requestId,
                    ExceptionDetails: JSON.stringify(ex_1)
                  });
                  return [2, Promise.reject("Retrieving post chat context failed " + JSON.stringify(ex_1))];
                case 9:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        OmnichannelChatSDK2.prototype.getAgentAvailability = function(optionalParams) {
          if (optionalParams === void 0) {
            optionalParams = {};
          }
          return __awaiter(this, void 0, void 0, function() {
            var reportError, getAgentAvailabilityOptionalParams, response, e_6;
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  reportError = function(response2, message, chatId) {
                    if (chatId === void 0) {
                      chatId = "";
                    }
                    var exceptionDetails = {
                      response: response2,
                      message
                    };
                    _this.scenarioMarker.failScenario(TelemetryEvent_1.default.GetAgentAvailability, {
                      RequestId: _this.requestId,
                      ExceptionDetails: JSON.stringify(exceptionDetails),
                      ChatId: chatId
                    });
                    throw new Error(exceptionDetails.message);
                  };
                  this.scenarioMarker.startScenario(TelemetryEvent_1.default.GetAgentAvailability, {
                    RequestId: this.requestId
                  });
                  if (!this.authSettings) {
                    reportError("Unsupported", "GetAgentAvailability is supported only for authenticated live chat widget.");
                  }
                  if (!this.authenticatedUserToken) {
                    reportError("UndefinedAuthToken", "Missing AuthToken for GetAgentAvailability.");
                  }
                  if (this.conversation) {
                    reportError("InvalidOperation", "GetAgentAvailability can only be called before a chat has started.", this.chatToken.chatId);
                  }
                  getAgentAvailabilityOptionalParams = {
                    initContext: {}
                  };
                  getAgentAvailabilityOptionalParams = this.populateInitChatOptionalParam(getAgentAvailabilityOptionalParams, optionalParams, TelemetryEvent_1.default.GetAgentAvailability);
                  _a.label = 1;
                case 1:
                  _a.trys.push([1, 3, , 4]);
                  return [4, this.OCClient.getAgentAvailability(this.requestId, getAgentAvailabilityOptionalParams)];
                case 2:
                  response = _a.sent();
                  return [2, response];
                case 3:
                  e_6 = _a.sent();
                  reportError("GetAgentAvailabilityFailed", e_6.message);
                  return [3, 4];
                case 4:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        OmnichannelChatSDK2.prototype.getIC3Client = function() {
          return __awaiter(this, void 0, void 0, function() {
            var IC3Client;
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!(platform_1.default.isNode() || platform_1.default.isReactNative()))
                    return [3, 2];
                  this.debug && console.debug("IC3Core");
                  this.scenarioMarker.startScenario(TelemetryEvent_1.default.GetIC3Client);
                  this.IC3SDKProvider = omnichannel_ic3core_1.SDKProvider;
                  return [4, omnichannel_ic3core_1.SDKProvider.getSDK({
                    hostType: HostType_1.default.Page,
                    protocolType: ProtocoleType_1.default.IC3V1SDK
                  })];
                case 1:
                  IC3Client = _a.sent();
                  IC3Client.setDebug(this.debug);
                  this.scenarioMarker.completeScenario(TelemetryEvent_1.default.GetIC3Client);
                  return [2, IC3Client];
                case 2:
                  this.debug && console.debug("IC3Client");
                  return [2, new Promise(function(resolve, reject) {
                    return __awaiter(_this, void 0, void 0, function() {
                      var ic3ClientCDNUrl, IC3Client2;
                      var _this2 = this;
                      var _a2;
                      return __generator(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            ic3ClientCDNUrl = this.resolveIC3ClientUrl();
                            (_a2 = this.telemetry) === null || _a2 === void 0 ? void 0 : _a2.setCDNPackages({
                              IC3Client: ic3ClientCDNUrl
                            });
                            this.scenarioMarker.startScenario(TelemetryEvent_1.default.GetIC3Client);
                            if (!this.IC3SDKProvider)
                              return [3, 2];
                            return [4, this.IC3SDKProvider.getSDK({
                              hostType: HostType_1.default.IFrame,
                              protocolType: ProtocoleType_1.default.IC3V1SDK,
                              logger: this.ic3ClientLogger
                              // eslint-disable-line @typescript-eslint/no-explicit-any
                            })];
                          case 1:
                            IC3Client2 = _b.sent();
                            return [2, resolve(IC3Client2)];
                          case 2:
                            window.addEventListener("ic3:sdk:load", function() {
                              return __awaiter(_this2, void 0, void 0, function() {
                                var ic3sdk, IC3SDKProvider, IC3Client3;
                                return __generator(this, function(_a3) {
                                  switch (_a3.label) {
                                    case 0:
                                      this.debug && console.debug("ic3:sdk:load");
                                      ic3sdk = window.Microsoft.CRM.Omnichannel.IC3Client.SDK;
                                      IC3SDKProvider = ic3sdk.SDKProvider;
                                      this.IC3SDKProvider = IC3SDKProvider;
                                      return [4, IC3SDKProvider.getSDK({
                                        hostType: HostType_1.default.IFrame,
                                        protocolType: ProtocoleType_1.default.IC3V1SDK,
                                        logger: this.ic3ClientLogger
                                      })];
                                    case 1:
                                      IC3Client3 = _a3.sent();
                                      this.scenarioMarker.completeScenario(TelemetryEvent_1.default.GetIC3Client);
                                      resolve(IC3Client3);
                                      return [
                                        2
                                        /*return*/
                                      ];
                                  }
                                });
                              });
                            });
                            return [4, WebUtils_1.loadScript(ic3ClientCDNUrl, function() {
                              _this2.debug && console.debug("IC3Client loaded!");
                            }, function() {
                              var exceptionDetails = {
                                response: "IC3ClientLoadFailed"
                              };
                              _this2.scenarioMarker.failScenario(TelemetryEvent_1.default.GetIC3Client, {
                                ExceptionDetails: JSON.stringify(exceptionDetails)
                              });
                              reject("Failed to load IC3Client");
                            })];
                          case 3:
                            _b.sent();
                            return [
                              2
                              /*return*/
                            ];
                        }
                      });
                    });
                  })];
              }
            });
          });
        };
        OmnichannelChatSDK2.prototype.getChatConfig = function(optionalParams) {
          if (optionalParams === void 0) {
            optionalParams = {};
          }
          return __awaiter(this, void 0, void 0, function() {
            var sendCacheHeaders, bypassCache, liveChatConfig, dataMaskingConfig, authSettings, liveWSAndLiveChatEngJoin, liveChatVersion, chatWidgetLanguage, msdyn_localeid, setting, preChatSurvey, msdyn_prechatenabled, msdyn_callingoptions, msdyn_conversationmode, msdyn_enablechatreconnect, isPreChatEnabled, isChatReconnectEnabled;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  sendCacheHeaders = optionalParams.sendCacheHeaders;
                  bypassCache = sendCacheHeaders === true;
                  return [4, this.OCClient.getChatConfig(this.requestId, bypassCache)];
                case 1:
                  liveChatConfig = _a.sent();
                  dataMaskingConfig = liveChatConfig.DataMaskingInfo, authSettings = liveChatConfig.LiveChatConfigAuthSettings, liveWSAndLiveChatEngJoin = liveChatConfig.LiveWSAndLiveChatEngJoin, liveChatVersion = liveChatConfig.LiveChatVersion, chatWidgetLanguage = liveChatConfig.ChatWidgetLanguage;
                  msdyn_localeid = chatWidgetLanguage.msdyn_localeid;
                  this.localeId = msdyn_localeid || locale_1.defaultLocaleId;
                  this.liveChatVersion = liveChatVersion || LiveChatVersion_1.default.V2;
                  this.debug && console.log("[OmnichannelChatSDK][getChatConfig][liveChatVersion] " + this.liveChatVersion);
                  setting = dataMaskingConfig.setting;
                  if (setting.msdyn_maskforcustomer) {
                    this.dataMaskingRules = dataMaskingConfig.dataMaskingRules;
                  }
                  if (authSettings) {
                    this.authSettings = authSettings;
                  }
                  preChatSurvey = liveWSAndLiveChatEngJoin.PreChatSurvey, msdyn_prechatenabled = liveWSAndLiveChatEngJoin.msdyn_prechatenabled, msdyn_callingoptions = liveWSAndLiveChatEngJoin.msdyn_callingoptions, msdyn_conversationmode = liveWSAndLiveChatEngJoin.msdyn_conversationmode, msdyn_enablechatreconnect = liveWSAndLiveChatEngJoin.msdyn_enablechatreconnect;
                  isPreChatEnabled = msdyn_prechatenabled === true || msdyn_prechatenabled == "true";
                  isChatReconnectEnabled = msdyn_enablechatreconnect === true || msdyn_enablechatreconnect == "true";
                  if ((msdyn_conversationmode === null || msdyn_conversationmode === void 0 ? void 0 : msdyn_conversationmode.toString()) === ConversationMode_1.default.PersistentChat.toString()) {
                    this.isPersistentChat = true;
                  }
                  if (isChatReconnectEnabled && !this.isPersistentChat) {
                    this.isChatReconnect = true;
                  }
                  if (isPreChatEnabled && preChatSurvey && preChatSurvey.trim().length > 0) {
                    this.preChatSurvey = preChatSurvey;
                  }
                  if (!this.authSettings)
                    return [3, 3];
                  return [4, this.setAuthTokenProvider(this.chatSDKConfig.getAuthToken)];
                case 2:
                  _a.sent();
                  _a.label = 3;
                case 3:
                  if (this.preChatSurvey) {
                    this.debug && console.log("Prechat Survey!");
                  }
                  this.callingOption = msdyn_callingoptions;
                  this.liveChatConfig = liveChatConfig;
                  return [2, this.liveChatConfig];
              }
            });
          });
        };
        OmnichannelChatSDK2.prototype.resolveIC3ClientUrl = function() {
          return urlResolvers_1.default.resolveIC3ClientUrl(this.chatSDKConfig);
        };
        OmnichannelChatSDK2.prototype.resolveChatAdapterUrl = function(protocol) {
          return urlResolvers_1.default.resolveChatAdapterUrl(this.chatSDKConfig, this.liveChatVersion, protocol);
        };
        OmnichannelChatSDK2.prototype.updateChatToken = function(newToken, newRegionGTMS) {
          return __awaiter(this, void 0, void 0, function() {
            var sessionInfo, error_19, exceptionDetails;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  this.scenarioMarker.startScenario(TelemetryEvent_1.default.UpdateChatToken, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  _a.label = 1;
                case 1:
                  _a.trys.push([1, 4, , 5]);
                  if (!(this.liveChatVersion === LiveChatVersion_1.default.V1))
                    return [3, 3];
                  sessionInfo = {
                    token: newToken,
                    regionGtms: newRegionGTMS,
                    visitor: true
                  };
                  return [4, this.IC3Client.initialize(sessionInfo)];
                case 2:
                  _a.sent();
                  _a.label = 3;
                case 3:
                  this.scenarioMarker.completeScenario(TelemetryEvent_1.default.UpdateChatToken, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                  });
                  return [3, 5];
                case 4:
                  error_19 = _a.sent();
                  exceptionDetails = {
                    response: "UpdateChatTokenFailed"
                  };
                  this.scenarioMarker.failScenario(TelemetryEvent_1.default.UpdateChatToken, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId,
                    ExceptionDetails: JSON.stringify(exceptionDetails)
                  });
                  return [3, 5];
                case 5:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        OmnichannelChatSDK2.prototype.setAuthTokenProvider = function(provider) {
          return __awaiter(this, void 0, void 0, function() {
            var token, exceptionDetails, _a, exceptionDetails, exceptionDetails;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  this.scenarioMarker.startScenario(TelemetryEvent_1.default.GetAuthToken);
                  this.chatSDKConfig.getAuthToken = provider;
                  if (!this.chatSDKConfig.getAuthToken)
                    return [3, 5];
                  _b.label = 1;
                case 1:
                  _b.trys.push([1, 3, , 4]);
                  return [4, this.chatSDKConfig.getAuthToken()];
                case 2:
                  token = _b.sent();
                  if (token) {
                    this.authenticatedUserToken = token;
                    this.scenarioMarker.completeScenario(TelemetryEvent_1.default.GetAuthToken);
                  } else {
                    exceptionDetails = {
                      response: "UndefinedAuthToken"
                    };
                    this.scenarioMarker.failScenario(TelemetryEvent_1.default.GetAuthToken, {
                      ExceptionDetails: JSON.stringify(exceptionDetails)
                    });
                  }
                  return [3, 4];
                case 3:
                  _a = _b.sent();
                  exceptionDetails = {
                    response: "GetAuthTokenFailed"
                  };
                  this.scenarioMarker.failScenario(TelemetryEvent_1.default.GetAuthToken, {
                    ExceptionDetails: JSON.stringify(exceptionDetails)
                  });
                  return [3, 4];
                case 4:
                  return [3, 6];
                case 5:
                  exceptionDetails = {
                    response: "GetAuthTokenNotFound"
                  };
                  this.scenarioMarker.failScenario(TelemetryEvent_1.default.GetAuthToken, {
                    ExceptionDetails: JSON.stringify(exceptionDetails)
                  });
                  _b.label = 6;
                case 6:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        return OmnichannelChatSDK2;
      }()
    );
    exports.default = OmnichannelChatSDK;
  }
});

// node_modules/@microsoft/omnichannel-chat-sdk/lib/index.js
var require_lib4 = __commonJS({
  "node_modules/@microsoft/omnichannel-chat-sdk/lib/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultLocaleString = exports.defaultLocaleId = exports.getLocaleIdFromString = exports.getLocaleStringFromId = exports.isCustomerMessage = exports.isSystemMessage = exports.PersonType = exports.MessageType = exports.DeliveryMode = exports.MessageContentType = exports.uuidv4 = exports.OCSDKProvider = exports.IC3SDKProvider = exports.OmnichannelChatSDK = void 0;
    var ocsdk_1 = require_lib3();
    Object.defineProperty(exports, "OCSDKProvider", { enumerable: true, get: function() {
      return ocsdk_1.SDKProvider;
    } });
    Object.defineProperty(exports, "uuidv4", { enumerable: true, get: function() {
      return ocsdk_1.uuidv4;
    } });
    var locale_1 = require_locale();
    Object.defineProperty(exports, "defaultLocaleId", { enumerable: true, get: function() {
      return locale_1.defaultLocaleId;
    } });
    Object.defineProperty(exports, "defaultLocaleString", { enumerable: true, get: function() {
      return locale_1.defaultLocaleString;
    } });
    Object.defineProperty(exports, "getLocaleIdFromString", { enumerable: true, get: function() {
      return locale_1.getLocaleIdFromString;
    } });
    Object.defineProperty(exports, "getLocaleStringFromId", { enumerable: true, get: function() {
      return locale_1.getLocaleStringFromId;
    } });
    var utilities_1 = require_utilities();
    Object.defineProperty(exports, "isCustomerMessage", { enumerable: true, get: function() {
      return utilities_1.isCustomerMessage;
    } });
    Object.defineProperty(exports, "isSystemMessage", { enumerable: true, get: function() {
      return utilities_1.isSystemMessage;
    } });
    var DeliveryMode_1 = require_DeliveryMode();
    exports.DeliveryMode = DeliveryMode_1.default;
    var omnichannel_ic3core_1 = require_lib();
    Object.defineProperty(exports, "IC3SDKProvider", { enumerable: true, get: function() {
      return omnichannel_ic3core_1.SDKProvider;
    } });
    var MessageContentType_1 = require_MessageContentType();
    exports.MessageContentType = MessageContentType_1.default;
    var MessageType_1 = require_MessageType();
    exports.MessageType = MessageType_1.default;
    var OmnichannelChatSDK_1 = require_OmnichannelChatSDK();
    exports.OmnichannelChatSDK = OmnichannelChatSDK_1.default;
    var PersonType_1 = require_PersonType();
    exports.PersonType = PersonType_1.default;
    exports.default = {
      OmnichannelChatSDK: OmnichannelChatSDK_1.default,
      ic3sdk: { IC3SDKProvider: omnichannel_ic3core_1.SDKProvider },
      ocsdk: { OCSDKProvider: ocsdk_1.SDKProvider, uuidv4: ocsdk_1.uuidv4 }
    };
  }
});
export default require_lib4();
//# sourceMappingURL=@microsoft_omnichannel-chat-sdk.js.map
