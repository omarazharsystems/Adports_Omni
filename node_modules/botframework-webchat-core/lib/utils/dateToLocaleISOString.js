"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = dateToLocaleISOString;

/* eslint no-magic-numbers: ["off", { "ignore": [1, 2, 3, 60] }] */
function pad(value) {
  var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;

  if (typeof value !== 'number') {
    throw new Error('First argument must be a number');
  }

  var stringValue = value + '';

  while (stringValue.length < count) {
    stringValue = '0' + stringValue;
  }

  return stringValue;
} // Adopted from https://stackoverflow.com/questions/17415579/how-to-iso-8601-format-a-date-with-timezone-offset-in-javascript.
// Use typing of `Date` from globalThis.
// eslint-disable-next-line no-restricted-globals


function dateToLocaleISOString(date) {
  var isDateLike = // @ts-ignore TypeScript think this is always true.
  date.getTimezoneOffset && // @ts-ignore TypeScript think this is always true.
  date.getFullYear && // @ts-ignore TypeScript think this is always true.
  date.getMonth && // @ts-ignore TypeScript think this is always true.
  date.getDate && // @ts-ignore TypeScript think this is always true.
  date.getHours && // @ts-ignore TypeScript think this is always true.
  date.getMinutes && // @ts-ignore TypeScript think this is always true.
  date.getSeconds && date.getMilliseconds;

  if (!isDateLike) {
    throw new Error('First argument must be a Date-like object.');
  }

  var timezoneOffset = -date.getTimezoneOffset();
  var timezoneSign = timezoneOffset < 0 ? '-' : '+'; // "yyyy-MM-DDTHH:mm:ss.fff+08:00" for GMT+08
  // "yyyy-MM-DDTHH:mm:ss.fffZ" for UTC

  return "".concat(date.getFullYear(), "-").concat(pad(date.getMonth() + 1), "-").concat(pad(date.getDate()), "T").concat(pad(date.getHours()), ":").concat(pad(date.getMinutes()), ":").concat(pad(date.getSeconds()), ".").concat(pad(date.getMilliseconds(), 3)).concat(timezoneOffset ? "".concat(timezoneSign).concat(pad(~~(Math.abs(timezoneOffset) / 60)), ":").concat(pad(timezoneOffset % 60)) : 'Z');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwYWQiLCJ2YWx1ZSIsImNvdW50IiwiRXJyb3IiLCJzdHJpbmdWYWx1ZSIsImxlbmd0aCIsImRhdGVUb0xvY2FsZUlTT1N0cmluZyIsImRhdGUiLCJpc0RhdGVMaWtlIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJ0aW1lem9uZU9mZnNldCIsInRpbWV6b25lU2lnbiIsIk1hdGgiLCJhYnMiXSwic291cmNlUm9vdCI6ImNvcmU6Ly8vIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvZGF0ZVRvTG9jYWxlSVNPU3RyaW5nLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludCBuby1tYWdpYy1udW1iZXJzOiBbXCJvZmZcIiwgeyBcImlnbm9yZVwiOiBbMSwgMiwgMywgNjBdIH1dICovXG5cbmZ1bmN0aW9uIHBhZCh2YWx1ZTogbnVtYmVyLCBjb3VudCA9IDIpOiBzdHJpbmcge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpO1xuICB9XG5cbiAgbGV0IHN0cmluZ1ZhbHVlID0gdmFsdWUgKyAnJztcblxuICB3aGlsZSAoc3RyaW5nVmFsdWUubGVuZ3RoIDwgY291bnQpIHtcbiAgICBzdHJpbmdWYWx1ZSA9ICcwJyArIHN0cmluZ1ZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1ZhbHVlO1xufVxuXG4vLyBBZG9wdGVkIGZyb20gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTc0MTU1NzkvaG93LXRvLWlzby04NjAxLWZvcm1hdC1hLWRhdGUtd2l0aC10aW1lem9uZS1vZmZzZXQtaW4tamF2YXNjcmlwdC5cbi8vIFVzZSB0eXBpbmcgb2YgYERhdGVgIGZyb20gZ2xvYmFsVGhpcy5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRhdGVUb0xvY2FsZUlTT1N0cmluZyhkYXRlOiBEYXRlKTogc3RyaW5nIHtcbiAgY29uc3QgaXNEYXRlTGlrZSA9XG4gICAgLy8gQHRzLWlnbm9yZSBUeXBlU2NyaXB0IHRoaW5rIHRoaXMgaXMgYWx3YXlzIHRydWUuXG4gICAgZGF0ZS5nZXRUaW1lem9uZU9mZnNldCAmJlxuICAgIC8vIEB0cy1pZ25vcmUgVHlwZVNjcmlwdCB0aGluayB0aGlzIGlzIGFsd2F5cyB0cnVlLlxuICAgIGRhdGUuZ2V0RnVsbFllYXIgJiZcbiAgICAvLyBAdHMtaWdub3JlIFR5cGVTY3JpcHQgdGhpbmsgdGhpcyBpcyBhbHdheXMgdHJ1ZS5cbiAgICBkYXRlLmdldE1vbnRoICYmXG4gICAgLy8gQHRzLWlnbm9yZSBUeXBlU2NyaXB0IHRoaW5rIHRoaXMgaXMgYWx3YXlzIHRydWUuXG4gICAgZGF0ZS5nZXREYXRlICYmXG4gICAgLy8gQHRzLWlnbm9yZSBUeXBlU2NyaXB0IHRoaW5rIHRoaXMgaXMgYWx3YXlzIHRydWUuXG4gICAgZGF0ZS5nZXRIb3VycyAmJlxuICAgIC8vIEB0cy1pZ25vcmUgVHlwZVNjcmlwdCB0aGluayB0aGlzIGlzIGFsd2F5cyB0cnVlLlxuICAgIGRhdGUuZ2V0TWludXRlcyAmJlxuICAgIC8vIEB0cy1pZ25vcmUgVHlwZVNjcmlwdCB0aGluayB0aGlzIGlzIGFsd2F5cyB0cnVlLlxuICAgIGRhdGUuZ2V0U2Vjb25kcyAmJlxuICAgIGRhdGUuZ2V0TWlsbGlzZWNvbmRzO1xuXG4gIGlmICghaXNEYXRlTGlrZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIERhdGUtbGlrZSBvYmplY3QuJyk7XG4gIH1cblxuICBjb25zdCB0aW1lem9uZU9mZnNldCA9IC1kYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gIGNvbnN0IHRpbWV6b25lU2lnbiA9IHRpbWV6b25lT2Zmc2V0IDwgMCA/ICctJyA6ICcrJztcblxuICAvLyBcInl5eXktTU0tRERUSEg6bW06c3MuZmZmKzA4OjAwXCIgZm9yIEdNVCswOFxuICAvLyBcInl5eXktTU0tRERUSEg6bW06c3MuZmZmWlwiIGZvciBVVENcblxuICByZXR1cm4gYCR7ZGF0ZS5nZXRGdWxsWWVhcigpfS0ke3BhZChkYXRlLmdldE1vbnRoKCkgKyAxKX0tJHtwYWQoZGF0ZS5nZXREYXRlKCkpfVQke3BhZChkYXRlLmdldEhvdXJzKCkpfToke3BhZChcbiAgICBkYXRlLmdldE1pbnV0ZXMoKVxuICApfToke3BhZChkYXRlLmdldFNlY29uZHMoKSl9LiR7cGFkKGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCksIDMpfSR7XG4gICAgdGltZXpvbmVPZmZzZXQgPyBgJHt0aW1lem9uZVNpZ259JHtwYWQofn4oTWF0aC5hYnModGltZXpvbmVPZmZzZXQpIC8gNjApKX06JHtwYWQodGltZXpvbmVPZmZzZXQgJSA2MCl9YCA6ICdaJ1xuICB9YDtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBRUEsU0FBU0EsR0FBVCxDQUFhQyxLQUFiLEVBQStDO0VBQUEsSUFBbkJDLEtBQW1CLHVFQUFYLENBQVc7O0VBQzdDLElBQUksT0FBT0QsS0FBUCxLQUFpQixRQUFyQixFQUErQjtJQUM3QixNQUFNLElBQUlFLEtBQUosQ0FBVSxpQ0FBVixDQUFOO0VBQ0Q7O0VBRUQsSUFBSUMsV0FBVyxHQUFHSCxLQUFLLEdBQUcsRUFBMUI7O0VBRUEsT0FBT0csV0FBVyxDQUFDQyxNQUFaLEdBQXFCSCxLQUE1QixFQUFtQztJQUNqQ0UsV0FBVyxHQUFHLE1BQU1BLFdBQXBCO0VBQ0Q7O0VBRUQsT0FBT0EsV0FBUDtBQUNELEMsQ0FFRDtBQUNBO0FBQ0E7OztBQUNlLFNBQVNFLHFCQUFULENBQStCQyxJQUEvQixFQUFtRDtFQUNoRSxJQUFNQyxVQUFVLEdBQ2Q7RUFDQUQsSUFBSSxDQUFDRSxpQkFBTCxJQUNBO0VBQ0FGLElBQUksQ0FBQ0csV0FGTCxJQUdBO0VBQ0FILElBQUksQ0FBQ0ksUUFKTCxJQUtBO0VBQ0FKLElBQUksQ0FBQ0ssT0FOTCxJQU9BO0VBQ0FMLElBQUksQ0FBQ00sUUFSTCxJQVNBO0VBQ0FOLElBQUksQ0FBQ08sVUFWTCxJQVdBO0VBQ0FQLElBQUksQ0FBQ1EsVUFaTCxJQWFBUixJQUFJLENBQUNTLGVBZlA7O0VBaUJBLElBQUksQ0FBQ1IsVUFBTCxFQUFpQjtJQUNmLE1BQU0sSUFBSUwsS0FBSixDQUFVLDRDQUFWLENBQU47RUFDRDs7RUFFRCxJQUFNYyxjQUFjLEdBQUcsQ0FBQ1YsSUFBSSxDQUFDRSxpQkFBTCxFQUF4QjtFQUNBLElBQU1TLFlBQVksR0FBR0QsY0FBYyxHQUFHLENBQWpCLEdBQXFCLEdBQXJCLEdBQTJCLEdBQWhELENBdkJnRSxDQXlCaEU7RUFDQTs7RUFFQSxpQkFBVVYsSUFBSSxDQUFDRyxXQUFMLEVBQVYsY0FBZ0NWLEdBQUcsQ0FBQ08sSUFBSSxDQUFDSSxRQUFMLEtBQWtCLENBQW5CLENBQW5DLGNBQTREWCxHQUFHLENBQUNPLElBQUksQ0FBQ0ssT0FBTCxFQUFELENBQS9ELGNBQW1GWixHQUFHLENBQUNPLElBQUksQ0FBQ00sUUFBTCxFQUFELENBQXRGLGNBQTJHYixHQUFHLENBQzVHTyxJQUFJLENBQUNPLFVBQUwsRUFENEcsQ0FBOUcsY0FFS2QsR0FBRyxDQUFDTyxJQUFJLENBQUNRLFVBQUwsRUFBRCxDQUZSLGNBRStCZixHQUFHLENBQUNPLElBQUksQ0FBQ1MsZUFBTCxFQUFELEVBQXlCLENBQXpCLENBRmxDLFNBR0VDLGNBQWMsYUFBTUMsWUFBTixTQUFxQmxCLEdBQUcsQ0FBQyxDQUFDLEVBQUVtQixJQUFJLENBQUNDLEdBQUwsQ0FBU0gsY0FBVCxJQUEyQixFQUE3QixDQUFGLENBQXhCLGNBQStEakIsR0FBRyxDQUFDaUIsY0FBYyxHQUFHLEVBQWxCLENBQWxFLElBQTRGLEdBSDVHO0FBS0QifQ==