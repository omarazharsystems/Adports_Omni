"use strict";

var _regeneratorRuntime2 = require("@babel/runtime/regenerator");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = observeActivitySaga;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _effects = require("redux-saga/effects");

var _simpleUpdateIn = _interopRequireDefault(require("simple-update-in"));

var _observeEach = _interopRequireDefault(require("./effects/observeEach"));

var _queueIncomingActivity = _interopRequireDefault(require("../actions/queueIncomingActivity"));

var _whileConnected = _interopRequireDefault(require("./effects/whileConnected"));

var _marked = /*#__PURE__*/_regeneratorRuntime2.mark(observeActivity),
    _marked2 = /*#__PURE__*/_regeneratorRuntime2.mark(observeActivitySaga);

var PASSTHRU_FN = function PASSTHRU_FN(value) {
  return value;
};

function patchActivityWithFromRole(activity, userID) {
  // Some activities, such as "ConversationUpdate", does not have "from" defined.
  // And although "role" is defined in Direct Line spec, it was not sent over the wire.
  // We normalize the activity here to simplify null-check and logic later.
  // Patch activity.from.role to make sure its either "bot", "user", or "channel"
  if (!activity.from) {
    activity = (0, _simpleUpdateIn["default"])(activity, ['from', 'role'], function () {
      return 'channel';
    });
  } else if (!activity.from.role) {
    if (activity.from.id === userID) {
      activity = (0, _simpleUpdateIn["default"])(activity, ['from', 'role'], function () {
        return 'user';
      });
    } else if (activity.from.id) {
      activity = (0, _simpleUpdateIn["default"])(activity, ['from', 'role'], function () {
        return 'bot';
      });
    } else {
      activity = (0, _simpleUpdateIn["default"])(activity, ['from', 'role'], function () {
        return 'channel';
      });
    }
  }

  return activity;
}

function patchNullAsUndefined(activity) {
  // These fields are known used in Web Chat and in any cases, they should not be null, but undefined.
  // The only field omitted is "value", as it could be null purposefully.
  return ['attachmentLayout', 'attachments', 'channelData', 'conversation', 'entities', 'from', 'inputHint', 'locale', 'name', 'recipient', 'speak', 'suggestedActions', 'text', 'textFormat', 'timestamp', 'type'].reduce(function (activity, name) {
    var value = activity[name];
    return (0, _simpleUpdateIn["default"])(activity, [name], typeof value === 'undefined' || value === null ? undefined : PASSTHRU_FN);
  }, activity);
} // Patching the `from.name` to be a human readable name.
// We use the `from.name` for typing indicator, such that it read "John is typing...".


function patchFromName(activity) {
  return (0, _simpleUpdateIn["default"])(activity, ['from', 'name'], function (name) {
    var channelId = activity.channelId,
        _activity$from = activity.from,
        from = _activity$from === void 0 ? {} : _activity$from;

    if ((channelId === 'directline' || channelId === 'webchat') && from.id === from.name && from.role === 'bot') {
      return 'Bot';
    }

    return name;
  });
}

function observeActivity(_ref) {
  var directLine, userID;
  return _regenerator["default"].wrap(function observeActivity$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          directLine = _ref.directLine, userID = _ref.userID;
          _context2.next = 3;
          return (0, _observeEach["default"])(directLine.activity$, /*#__PURE__*/_regenerator["default"].mark(function observeActivity(activity) {
            return _regenerator["default"].wrap(function observeActivity$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    // TODO: [P2] #3953 Move the patching logic to a DirectLineJS wrapper, instead of too close to inners of Web Chat.
                    activity = patchNullAsUndefined(activity);
                    activity = patchActivityWithFromRole(activity, userID);
                    activity = patchFromName(activity);
                    _context.next = 5;
                    return (0, _effects.put)((0, _queueIncomingActivity["default"])(activity));

                  case 5:
                  case "end":
                    return _context.stop();
                }
              }
            }, observeActivity);
          }));

        case 3:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked);
}

function observeActivitySaga() {
  return _regenerator["default"].wrap(function observeActivitySaga$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return (0, _whileConnected["default"])(observeActivity);

        case 2:
        case "end":
          return _context3.stop();
      }
    }
  }, _marked2);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,