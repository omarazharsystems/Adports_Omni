"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = detectSlowConnectionSaga;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _effects = require("redux-saga/effects");

var _connect = require("../actions/connect");

var _reconnect = require("../actions/reconnect");

var _sleep = _interopRequireDefault(require("../utils/sleep"));

var _marked = /*#__PURE__*/_regenerator["default"].mark(detectSlowConnectionSaga);

var SLOW_CONNECTION_AFTER = 15000;

function detectSlowConnectionSaga(ponyfill) {
  var connectivityRace;
  return _regenerator["default"].wrap(function detectSlowConnectionSaga$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return (0, _effects.take)([_connect.CONNECT_PENDING, _reconnect.RECONNECT_PENDING]);

        case 2:
          _context.next = 4;
          return (0, _effects.race)({
            fulfilled: (0, _effects.take)([_connect.CONNECT_FULFILLED, _reconnect.RECONNECT_FULFILLED]),
            rejected: (0, _effects.take)([_connect.CONNECT_REJECTED, _reconnect.RECONNECT_REJECTED]),
            slow: (0, _effects.call)(_sleep["default"], SLOW_CONNECTION_AFTER, ponyfill)
          });

        case 4:
          connectivityRace = _context.sent;

          if (!('slow' in connectivityRace)) {
            _context.next = 8;
            break;
          }

          _context.next = 8;
          return (0, _effects.put)({
            type: _connect.CONNECT_STILL_PENDING
          });

        case 8:
          _context.next = 0;
          break;

        case 10:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZXRlY3RTbG93Q29ubmVjdGlvblNhZ2EiLCJTTE9XX0NPTk5FQ1RJT05fQUZURVIiLCJwb255ZmlsbCIsInRha2UiLCJDT05ORUNUX1BFTkRJTkciLCJSRUNPTk5FQ1RfUEVORElORyIsInJhY2UiLCJmdWxmaWxsZWQiLCJDT05ORUNUX0ZVTEZJTExFRCIsIlJFQ09OTkVDVF9GVUxGSUxMRUQiLCJyZWplY3RlZCIsIkNPTk5FQ1RfUkVKRUNURUQiLCJSRUNPTk5FQ1RfUkVKRUNURUQiLCJzbG93IiwiY2FsbCIsInNsZWVwIiwiY29ubmVjdGl2aXR5UmFjZSIsInB1dCIsInR5cGUiLCJDT05ORUNUX1NUSUxMX1BFTkRJTkciXSwic291cmNlUm9vdCI6ImNvcmU6Ly8vIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2FnYXMvZGV0ZWN0U2xvd0Nvbm5lY3Rpb25TYWdhLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNhbGwsIHB1dCwgcmFjZSwgdGFrZSB9IGZyb20gJ3JlZHV4LXNhZ2EvZWZmZWN0cyc7XG5cbmltcG9ydCB7IENPTk5FQ1RfRlVMRklMTEVELCBDT05ORUNUX1BFTkRJTkcsIENPTk5FQ1RfUkVKRUNURUQsIENPTk5FQ1RfU1RJTExfUEVORElORyB9IGZyb20gJy4uL2FjdGlvbnMvY29ubmVjdCc7XG5pbXBvcnQgeyBSRUNPTk5FQ1RfRlVMRklMTEVELCBSRUNPTk5FQ1RfUEVORElORywgUkVDT05ORUNUX1JFSkVDVEVEIH0gZnJvbSAnLi4vYWN0aW9ucy9yZWNvbm5lY3QnO1xuaW1wb3J0IHNsZWVwIGZyb20gJy4uL3V0aWxzL3NsZWVwJztcblxuaW1wb3J0IHR5cGUgeyBHbG9iYWxTY29wZVBvbnlmaWxsIH0gZnJvbSAnLi4vdHlwZXMvR2xvYmFsU2NvcGVQb255ZmlsbCc7XG5cbmNvbnN0IFNMT1dfQ09OTkVDVElPTl9BRlRFUiA9IDE1MDAwO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiogZGV0ZWN0U2xvd0Nvbm5lY3Rpb25TYWdhKHBvbnlmaWxsOiBHbG9iYWxTY29wZVBvbnlmaWxsKSB7XG4gIGZvciAoOzspIHtcbiAgICB5aWVsZCB0YWtlKFtDT05ORUNUX1BFTkRJTkcsIFJFQ09OTkVDVF9QRU5ESU5HXSk7XG5cbiAgICBjb25zdCBjb25uZWN0aXZpdHlSYWNlID0geWllbGQgcmFjZSh7XG4gICAgICBmdWxmaWxsZWQ6IHRha2UoW0NPTk5FQ1RfRlVMRklMTEVELCBSRUNPTk5FQ1RfRlVMRklMTEVEXSksXG4gICAgICByZWplY3RlZDogdGFrZShbQ09OTkVDVF9SRUpFQ1RFRCwgUkVDT05ORUNUX1JFSkVDVEVEXSksXG4gICAgICBzbG93OiBjYWxsKHNsZWVwLCBTTE9XX0NPTk5FQ1RJT05fQUZURVIsIHBvbnlmaWxsKVxuICAgIH0pO1xuXG4gICAgaWYgKCdzbG93JyBpbiBjb25uZWN0aXZpdHlSYWNlKSB7XG4gICAgICB5aWVsZCBwdXQoeyB0eXBlOiBDT05ORUNUX1NUSUxMX1BFTkRJTkcgfSk7XG4gICAgfVxuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBRUE7O0FBQ0E7O0FBQ0E7O3dEQU15QkEsd0I7O0FBRnpCLElBQU1DLHFCQUFxQixHQUFHLEtBQTlCOztBQUVlLFNBQVVELHdCQUFWLENBQW1DRSxRQUFuQztFQUFBO0VBQUE7SUFBQTtNQUFBO1FBQUE7VUFBQTtVQUVYLE9BQU0sSUFBQUMsYUFBQSxFQUFLLENBQUNDLHdCQUFELEVBQWtCQyw0QkFBbEIsQ0FBTCxDQUFOOztRQUZXO1VBQUE7VUFJYyxPQUFNLElBQUFDLGFBQUEsRUFBSztZQUNsQ0MsU0FBUyxFQUFFLElBQUFKLGFBQUEsRUFBSyxDQUFDSywwQkFBRCxFQUFvQkMsOEJBQXBCLENBQUwsQ0FEdUI7WUFFbENDLFFBQVEsRUFBRSxJQUFBUCxhQUFBLEVBQUssQ0FBQ1EseUJBQUQsRUFBbUJDLDZCQUFuQixDQUFMLENBRndCO1lBR2xDQyxJQUFJLEVBQUUsSUFBQUMsYUFBQSxFQUFLQyxpQkFBTCxFQUFZZCxxQkFBWixFQUFtQ0MsUUFBbkM7VUFINEIsQ0FBTCxDQUFOOztRQUpkO1VBSUxjLGdCQUpLOztVQUFBLE1BVVAsVUFBVUEsZ0JBVkg7WUFBQTtZQUFBO1VBQUE7O1VBQUE7VUFXVCxPQUFNLElBQUFDLFlBQUEsRUFBSTtZQUFFQyxJQUFJLEVBQUVDO1VBQVIsQ0FBSixDQUFOOztRQVhTO1VBQUE7VUFBQTs7UUFBQTtRQUFBO1VBQUE7TUFBQTtJQUFBO0VBQUE7QUFBQSJ9