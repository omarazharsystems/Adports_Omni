"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = startDictateOnSpeakCompleteSaga;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _effects = require("redux-saga/effects");

var _markActivity = require("../actions/markActivity");

var _activities = require("../selectors/activities");

var _setDictateState = require("../actions/setDictateState");

var _DictateState = require("../constants/DictateState");

var _dictateState = _interopRequireDefault(require("../selectors/dictateState"));

var _speakingActivity = _interopRequireDefault(require("../definitions/speakingActivity"));

var _startDictate = _interopRequireDefault(require("../actions/startDictate"));

var _marked = /*#__PURE__*/_regenerator["default"].mark(startDictateOnSpeakComplete),
    _marked2 = /*#__PURE__*/_regenerator["default"].mark(startDictateOnSpeakCompleteSaga);

function startDictateOnSpeakComplete() {
  var speakingActivities, dictateState;
  return _regenerator["default"].wrap(function startDictateOnSpeakComplete$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return (0, _effects.select)((0, _activities.of)(_speakingActivity["default"]));

        case 2:
          speakingActivities = _context.sent;
          _context.next = 5;
          return (0, _effects.select)(_dictateState["default"]);

        case 5:
          dictateState = _context.sent;

          if (!(dictateState === _DictateState.WILL_START && !speakingActivities.length)) {
            _context.next = 9;
            break;
          }

          _context.next = 9;
          return (0, _effects.put)((0, _startDictate["default"])());

        case 9:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
} // TODO: [P4] We should turn this into a reducer instead


function startDictateOnSpeakCompleteSaga() {
  return _regenerator["default"].wrap(function startDictateOnSpeakCompleteSaga$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return (0, _effects.takeEvery)(function (_ref) {
            var type = _ref.type;
            return type === _markActivity.MARK_ACTIVITY || type === _setDictateState.SET_DICTATE_STATE;
          }, startDictateOnSpeakComplete);

        case 2:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked2);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzdGFydERpY3RhdGVPblNwZWFrQ29tcGxldGUiLCJzdGFydERpY3RhdGVPblNwZWFrQ29tcGxldGVTYWdhIiwic2VsZWN0IiwiYWN0aXZpdGllc09mIiwic3BlYWtpbmdBY3Rpdml0eSIsInNwZWFraW5nQWN0aXZpdGllcyIsImRpY3RhdGVTdGF0ZVNlbGVjdG9yIiwiZGljdGF0ZVN0YXRlIiwiV0lMTF9TVEFSVCIsImxlbmd0aCIsInB1dCIsInN0YXJ0RGljdGF0ZSIsInRha2VFdmVyeSIsInR5cGUiLCJNQVJLX0FDVElWSVRZIiwiU0VUX0RJQ1RBVEVfU1RBVEUiXSwic291cmNlUm9vdCI6ImNvcmU6Ly8vIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2FnYXMvc3RhcnREaWN0YXRlT25TcGVha0NvbXBsZXRlU2FnYS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwdXQsIHNlbGVjdCwgdGFrZUV2ZXJ5IH0gZnJvbSAncmVkdXgtc2FnYS9lZmZlY3RzJztcblxuaW1wb3J0IHsgTUFSS19BQ1RJVklUWSB9IGZyb20gJy4uL2FjdGlvbnMvbWFya0FjdGl2aXR5JztcbmltcG9ydCB7IG9mIGFzIGFjdGl2aXRpZXNPZiB9IGZyb20gJy4uL3NlbGVjdG9ycy9hY3Rpdml0aWVzJztcbmltcG9ydCB7IFNFVF9ESUNUQVRFX1NUQVRFIH0gZnJvbSAnLi4vYWN0aW9ucy9zZXREaWN0YXRlU3RhdGUnO1xuaW1wb3J0IHsgV0lMTF9TVEFSVCB9IGZyb20gJy4uL2NvbnN0YW50cy9EaWN0YXRlU3RhdGUnO1xuaW1wb3J0IGRpY3RhdGVTdGF0ZVNlbGVjdG9yIGZyb20gJy4uL3NlbGVjdG9ycy9kaWN0YXRlU3RhdGUnO1xuaW1wb3J0IHNwZWFraW5nQWN0aXZpdHkgZnJvbSAnLi4vZGVmaW5pdGlvbnMvc3BlYWtpbmdBY3Rpdml0eSc7XG5pbXBvcnQgc3RhcnREaWN0YXRlIGZyb20gJy4uL2FjdGlvbnMvc3RhcnREaWN0YXRlJztcblxuZnVuY3Rpb24qIHN0YXJ0RGljdGF0ZU9uU3BlYWtDb21wbGV0ZSgpIHtcbiAgY29uc3Qgc3BlYWtpbmdBY3Rpdml0aWVzID0geWllbGQgc2VsZWN0KGFjdGl2aXRpZXNPZihzcGVha2luZ0FjdGl2aXR5KSk7XG4gIGNvbnN0IGRpY3RhdGVTdGF0ZSA9IHlpZWxkIHNlbGVjdChkaWN0YXRlU3RhdGVTZWxlY3Rvcik7XG5cbiAgaWYgKGRpY3RhdGVTdGF0ZSA9PT0gV0lMTF9TVEFSVCAmJiAhc3BlYWtpbmdBY3Rpdml0aWVzLmxlbmd0aCkge1xuICAgIHlpZWxkIHB1dChzdGFydERpY3RhdGUoKSk7XG4gIH1cbn1cblxuLy8gVE9ETzogW1A0XSBXZSBzaG91bGQgdHVybiB0aGlzIGludG8gYSByZWR1Y2VyIGluc3RlYWRcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKiBzdGFydERpY3RhdGVPblNwZWFrQ29tcGxldGVTYWdhKCkge1xuICB5aWVsZCB0YWtlRXZlcnkoKHsgdHlwZSB9KSA9PiB0eXBlID09PSBNQVJLX0FDVElWSVRZIHx8IHR5cGUgPT09IFNFVF9ESUNUQVRFX1NUQVRFLCBzdGFydERpY3RhdGVPblNwZWFrQ29tcGxldGUpO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzt3REFFVUEsMkI7eURBVWVDLCtCOztBQVZ6QixTQUFVRCwyQkFBVjtFQUFBO0VBQUE7SUFBQTtNQUFBO1FBQUE7VUFBQTtVQUM2QixPQUFNLElBQUFFLGVBQUEsRUFBTyxJQUFBQyxjQUFBLEVBQWFDLDRCQUFiLENBQVAsQ0FBTjs7UUFEN0I7VUFDUUMsa0JBRFI7VUFBQTtVQUV1QixPQUFNLElBQUFILGVBQUEsRUFBT0ksd0JBQVAsQ0FBTjs7UUFGdkI7VUFFUUMsWUFGUjs7VUFBQSxNQUlNQSxZQUFZLEtBQUtDLHdCQUFqQixJQUErQixDQUFDSCxrQkFBa0IsQ0FBQ0ksTUFKekQ7WUFBQTtZQUFBO1VBQUE7O1VBQUE7VUFLSSxPQUFNLElBQUFDLFlBQUEsRUFBSSxJQUFBQyx3QkFBQSxHQUFKLENBQU47O1FBTEo7UUFBQTtVQUFBO01BQUE7SUFBQTtFQUFBO0FBQUEsQyxDQVNBOzs7QUFDZSxTQUFVViwrQkFBVjtFQUFBO0lBQUE7TUFBQTtRQUFBO1VBQUE7VUFDYixPQUFNLElBQUFXLGtCQUFBLEVBQVU7WUFBQSxJQUFHQyxJQUFILFFBQUdBLElBQUg7WUFBQSxPQUFjQSxJQUFJLEtBQUtDLDJCQUFULElBQTBCRCxJQUFJLEtBQUtFLGtDQUFqRDtVQUFBLENBQVYsRUFBOEVmLDJCQUE5RSxDQUFOOztRQURhO1FBQUE7VUFBQTtNQUFBO0lBQUE7RUFBQTtBQUFBIn0=