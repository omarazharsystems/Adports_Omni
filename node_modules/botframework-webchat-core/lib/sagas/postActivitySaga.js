"use strict";

var _regeneratorRuntime2 = require("@babel/runtime/regenerator");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = postActivitySaga;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _effects = require("redux-saga/effects");

var _incomingActivity = require("../actions/incomingActivity");

var _postActivity = require("../actions/postActivity");

var _dateToLocaleISOString = _interopRequireDefault(require("../utils/dateToLocaleISOString"));

var _deleteKey = _interopRequireDefault(require("../utils/deleteKey"));

var _language = _interopRequireDefault(require("../selectors/language"));

var _observeOnce = _interopRequireDefault(require("./effects/observeOnce"));

var _sendTimeout = _interopRequireDefault(require("../selectors/sendTimeout"));

var _sleep = _interopRequireDefault(require("../utils/sleep"));

var _uniqueID = _interopRequireDefault(require("../utils/uniqueID"));

var _whileConnected = _interopRequireDefault(require("./effects/whileConnected"));

var _marked = /*#__PURE__*/_regeneratorRuntime2.mark(postActivity),
    _marked2 = /*#__PURE__*/_regeneratorRuntime2.mark(postActivitySaga);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

// After 5 minutes, the saga will stop from listening for echo backs and consider the outgoing message as permanently undeliverable.
// This value must be equals to or larger than the user-defined `styleOptions.sendTimeout`.
var HARD_SEND_TIMEOUT = 300000;

function postActivity(directLine, userID, username, numActivitiesPosted, _ref, ponyfill) {
  var method, activity, attachments, clientActivityID, locale, localTimeZone, now, outgoingActivity, meta, echoed, echoBackCall, sendTimeout, _yield$race, echoBack;

  return _regenerator["default"].wrap(function postActivity$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          method = _ref.meta.method, activity = _ref.payload.activity;
          attachments = activity.type === 'message' && activity.attachments || [];
          clientActivityID = (0, _uniqueID["default"])();
          _context3.next = 5;
          return (0, _effects.select)(_language["default"]);

        case 5:
          locale = _context3.sent;
          localTimeZone = typeof window.Intl === 'undefined' ? undefined : new Intl.DateTimeFormat().resolvedOptions().timeZone;
          now = new ponyfill.Date(); // Currently, we allow untyped outgoing activity as long as the chat adapter can deliver.
          // In the future, we should warn if the outgoing activity is not matching the type.

          outgoingActivity = _objectSpread(_objectSpread({}, (0, _deleteKey["default"])(activity, 'id')), {}, {
            channelData: _objectSpread(_objectSpread({}, (0, _deleteKey["default"])(activity.channelData, 'state', 'webchat:send-status')), {}, {
              clientActivityID: clientActivityID
            }),
            channelId: 'webchat',
            from: {
              id: userID,
              name: username,
              role: 'user'
            },
            locale: locale,
            localTimestamp: (0, _dateToLocaleISOString["default"])(now),
            localTimezone: localTimeZone
          }, activity.type === 'message' ? {
            attachments: attachments && attachments.map(function (_ref2) {
              var contentType = _ref2.contentType,
                  contentUrl = _ref2.contentUrl,
                  name = _ref2.name,
                  thumbnailUrl = _ref2.thumbnailUrl;
              return {
                contentType: contentType,
                contentUrl: contentUrl,
                name: name,
                thumbnailUrl: thumbnailUrl
              };
            }),
            text: activity.text
          } : activity.type === 'event' ? {
            name: activity.name,
            value: activity.value
          } : {});

          if (!numActivitiesPosted) {
            outgoingActivity.entities = [].concat((0, _toConsumableArray2["default"])(outgoingActivity.entities || []), [{
              // TODO: [P4] Currently in v3, we send the capabilities although the client might not actually have them
              //       We need to understand why we need to send these, and only send capabilities the client have
              requiresBotState: true,
              supportsListening: true,
              supportsTts: true,
              type: 'ClientCapabilities'
            }]);
          }

          meta = {
            clientActivityID: clientActivityID,
            method: method
          };
          _context3.next = 13;
          return (0, _effects.put)({
            type: _postActivity.POST_ACTIVITY_PENDING,
            meta: meta,
            payload: {
              activity: outgoingActivity
            }
          });

        case 13:
          _context3.prev = 13;
          // Quirks: We might receive INCOMING_ACTIVITY before the postActivity call completed
          //         So, we setup expectation first, then postActivity afterward
          echoBackCall = (0, _effects.call)( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
            var _activity$channelData, _yield$take, _activity;

            return _regenerator["default"].wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return (0, _effects.take)(_incomingActivity.INCOMING_ACTIVITY);

                  case 2:
                    _yield$take = _context.sent;
                    _activity = _yield$take.payload.activity;

                    if (!(((_activity$channelData = _activity.channelData) === null || _activity$channelData === void 0 ? void 0 : _activity$channelData.clientActivityID) === clientActivityID && _activity.id)) {
                      _context.next = 7;
                      break;
                    }

                    echoed = true;
                    return _context.abrupt("return", _activity);

                  case 7:
                    _context.next = 0;
                    break;

                  case 9:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          })); // Timeout could be due to either:
          // - Post activity call may take too long time to complete
          //   - Direct Line service only respond on HTTP after bot respond to Direct Line
          // - Activity may take too long time to echo back

          _context3.next = 17;
          return (0, _effects.select)(_sendTimeout["default"]);

        case 17:
          sendTimeout = _context3.sent;
          _context3.next = 20;
          return (0, _effects.race)({
            send: (0, _effects.all)({
              echoBack: echoBackCall,
              postActivity: (0, _observeOnce["default"])(directLine.postActivity(outgoingActivity))
            }),
            timeout: (0, _effects.call)( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
              return _regenerator["default"].wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      _context2.next = 2;
                      return (0, _effects.call)(_sleep["default"], sendTimeout, ponyfill);

                    case 2:
                      _context2.next = 4;
                      return (0, _effects.put)({
                        type: _postActivity.POST_ACTIVITY_IMPEDED,
                        meta: meta,
                        payload: {
                          activity: outgoingActivity
                        }
                      });

                    case 4:
                      _context2.next = 6;
                      return (0, _effects.call)(_sleep["default"], HARD_SEND_TIMEOUT - sendTimeout, ponyfill);

                    case 6:
                      throw !echoed ? new Error('timed out while waiting for outgoing message to echo back') : new Error('timed out while waiting for postActivity to return any values');

                    case 7:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, _callee2);
            }))
          });

        case 20:
          _yield$race = _context3.sent;
          echoBack = _yield$race.send.echoBack;
          _context3.next = 24;
          return (0, _effects.put)({
            type: _postActivity.POST_ACTIVITY_FULFILLED,
            meta: meta,
            payload: {
              activity: echoBack
            }
          });

        case 24:
          _context3.next = 31;
          break;

        case 26:
          _context3.prev = 26;
          _context3.t0 = _context3["catch"](13);
          console.error('botframework-webchat: Failed to post activity to chat adapter.', _context3.t0);
          _context3.next = 31;
          return (0, _effects.put)({
            type: _postActivity.POST_ACTIVITY_REJECTED,
            error: true,
            meta: meta,
            payload: _context3.t0
          });

        case 31:
          _context3.prev = 31;
          _context3.next = 34;
          return (0, _effects.cancelled)();

        case 34:
          if (!_context3.sent) {
            _context3.next = 37;
            break;
          }

          _context3.next = 37;
          return (0, _effects.put)({
            type: _postActivity.POST_ACTIVITY_REJECTED,
            error: true,
            meta: meta,
            payload: new Error('cancelled')
          });

        case 37:
          return _context3.finish(31);

        case 38:
        case "end":
          return _context3.stop();
      }
    }
  }, _marked, null, [[13, 26, 31, 38]]);
}

function postActivitySaga(ponyfill) {
  return _regenerator["default"].wrap(function postActivitySaga$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          _context6.next = 2;
          return (0, _whileConnected["default"])( /*#__PURE__*/_regenerator["default"].mark(function postActivityWhileConnected(_ref3) {
            var directLine, userID, username, numActivitiesPosted;
            return _regenerator["default"].wrap(function postActivityWhileConnected$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    directLine = _ref3.directLine, userID = _ref3.userID, username = _ref3.username;
                    numActivitiesPosted = 0;
                    _context5.next = 4;
                    return (0, _effects.takeEvery)(_postActivity.POST_ACTIVITY, /*#__PURE__*/_regenerator["default"].mark(function postActivityWrapper(action) {
                      return _regenerator["default"].wrap(function postActivityWrapper$(_context4) {
                        while (1) {
                          switch (_context4.prev = _context4.next) {
                            case 0:
                              return _context4.delegateYield(postActivity(directLine, userID, username, numActivitiesPosted++, action, ponyfill), "t0", 1);

                            case 1:
                            case "end":
                              return _context4.stop();
                          }
                        }
                      }, postActivityWrapper);
                    }));

                  case 4:
                  case "end":
                    return _context5.stop();
                }
              }
            }, postActivityWhileConnected);
          }));

        case 2:
        case "end":
          return _context6.stop();
      }
    }
  }, _marked2);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwb3N0QWN0aXZpdHkiLCJwb3N0QWN0aXZpdHlTYWdhIiwiSEFSRF9TRU5EX1RJTUVPVVQiLCJkaXJlY3RMaW5lIiwidXNlcklEIiwidXNlcm5hbWUiLCJudW1BY3Rpdml0aWVzUG9zdGVkIiwicG9ueWZpbGwiLCJtZXRob2QiLCJtZXRhIiwiYWN0aXZpdHkiLCJwYXlsb2FkIiwiYXR0YWNobWVudHMiLCJ0eXBlIiwiY2xpZW50QWN0aXZpdHlJRCIsInVuaXF1ZUlEIiwic2VsZWN0IiwibGFuZ3VhZ2VTZWxlY3RvciIsImxvY2FsZSIsImxvY2FsVGltZVpvbmUiLCJ3aW5kb3ciLCJJbnRsIiwidW5kZWZpbmVkIiwiRGF0ZVRpbWVGb3JtYXQiLCJyZXNvbHZlZE9wdGlvbnMiLCJ0aW1lWm9uZSIsIm5vdyIsIkRhdGUiLCJvdXRnb2luZ0FjdGl2aXR5IiwiZGVsZXRlS2V5IiwiY2hhbm5lbERhdGEiLCJjaGFubmVsSWQiLCJmcm9tIiwiaWQiLCJuYW1lIiwicm9sZSIsImxvY2FsVGltZXN0YW1wIiwiZGF0ZVRvTG9jYWxlSVNPU3RyaW5nIiwibG9jYWxUaW1lem9uZSIsIm1hcCIsImNvbnRlbnRUeXBlIiwiY29udGVudFVybCIsInRodW1ibmFpbFVybCIsInRleHQiLCJ2YWx1ZSIsImVudGl0aWVzIiwicmVxdWlyZXNCb3RTdGF0ZSIsInN1cHBvcnRzTGlzdGVuaW5nIiwic3VwcG9ydHNUdHMiLCJwdXQiLCJQT1NUX0FDVElWSVRZX1BFTkRJTkciLCJlY2hvQmFja0NhbGwiLCJjYWxsIiwidGFrZSIsIklOQ09NSU5HX0FDVElWSVRZIiwiZWNob2VkIiwic2VuZFRpbWVvdXRTZWxlY3RvciIsInNlbmRUaW1lb3V0IiwicmFjZSIsInNlbmQiLCJhbGwiLCJlY2hvQmFjayIsIm9ic2VydmVPbmNlIiwidGltZW91dCIsInNsZWVwIiwiUE9TVF9BQ1RJVklUWV9JTVBFREVEIiwiRXJyb3IiLCJQT1NUX0FDVElWSVRZX0ZVTEZJTExFRCIsImNvbnNvbGUiLCJlcnJvciIsIlBPU1RfQUNUSVZJVFlfUkVKRUNURUQiLCJjYW5jZWxsZWQiLCJ3aGlsZUNvbm5lY3RlZCIsInBvc3RBY3Rpdml0eVdoaWxlQ29ubmVjdGVkIiwidGFrZUV2ZXJ5IiwiUE9TVF9BQ1RJVklUWSIsInBvc3RBY3Rpdml0eVdyYXBwZXIiLCJhY3Rpb24iXSwic291cmNlUm9vdCI6ImNvcmU6Ly8vIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2FnYXMvcG9zdEFjdGl2aXR5U2FnYS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhbGwsIGNhbGwsIGNhbmNlbGxlZCwgcHV0LCByYWNlLCBzZWxlY3QsIHRha2UsIHRha2VFdmVyeSB9IGZyb20gJ3JlZHV4LXNhZ2EvZWZmZWN0cyc7XG5cbmltcG9ydCB7IElOQ09NSU5HX0FDVElWSVRZIH0gZnJvbSAnLi4vYWN0aW9ucy9pbmNvbWluZ0FjdGl2aXR5JztcbmltcG9ydCB7XG4gIFBPU1RfQUNUSVZJVFksXG4gIFBPU1RfQUNUSVZJVFlfRlVMRklMTEVELFxuICBQT1NUX0FDVElWSVRZX0lNUEVERUQsXG4gIFBPU1RfQUNUSVZJVFlfUEVORElORyxcbiAgUE9TVF9BQ1RJVklUWV9SRUpFQ1RFRFxufSBmcm9tICcuLi9hY3Rpb25zL3Bvc3RBY3Rpdml0eSc7XG5pbXBvcnQgZGF0ZVRvTG9jYWxlSVNPU3RyaW5nIGZyb20gJy4uL3V0aWxzL2RhdGVUb0xvY2FsZUlTT1N0cmluZyc7XG5pbXBvcnQgZGVsZXRlS2V5IGZyb20gJy4uL3V0aWxzL2RlbGV0ZUtleSc7XG5pbXBvcnQgbGFuZ3VhZ2VTZWxlY3RvciBmcm9tICcuLi9zZWxlY3RvcnMvbGFuZ3VhZ2UnO1xuaW1wb3J0IG9ic2VydmVPbmNlIGZyb20gJy4vZWZmZWN0cy9vYnNlcnZlT25jZSc7XG5pbXBvcnQgc2VuZFRpbWVvdXRTZWxlY3RvciBmcm9tICcuLi9zZWxlY3RvcnMvc2VuZFRpbWVvdXQnO1xuaW1wb3J0IHNsZWVwIGZyb20gJy4uL3V0aWxzL3NsZWVwJztcbmltcG9ydCB1bmlxdWVJRCBmcm9tICcuLi91dGlscy91bmlxdWVJRCc7XG5pbXBvcnQgd2hpbGVDb25uZWN0ZWQgZnJvbSAnLi9lZmZlY3RzL3doaWxlQ29ubmVjdGVkJztcblxuaW1wb3J0IHR5cGUgeyBEaXJlY3RMaW5lQWN0aXZpdHkgfSBmcm9tICcuLi90eXBlcy9leHRlcm5hbC9EaXJlY3RMaW5lQWN0aXZpdHknO1xuaW1wb3J0IHR5cGUgeyBEaXJlY3RMaW5lSlNCb3RDb25uZWN0aW9uIH0gZnJvbSAnLi4vdHlwZXMvZXh0ZXJuYWwvRGlyZWN0TGluZUpTQm90Q29ubmVjdGlvbic7XG5pbXBvcnQgdHlwZSB7IEdsb2JhbFNjb3BlUG9ueWZpbGwgfSBmcm9tICcuLi90eXBlcy9HbG9iYWxTY29wZVBvbnlmaWxsJztcbmltcG9ydCB0eXBlIHsgSW5jb21pbmdBY3Rpdml0eUFjdGlvbiB9IGZyb20gJy4uL2FjdGlvbnMvaW5jb21pbmdBY3Rpdml0eSc7XG5pbXBvcnQgdHlwZSB7XG4gIFBvc3RBY3Rpdml0eUFjdGlvbixcbiAgUG9zdEFjdGl2aXR5RnVsZmlsbGVkQWN0aW9uLFxuICBQb3N0QWN0aXZpdHlJbXBlZGVkQWN0aW9uLFxuICBQb3N0QWN0aXZpdHlQZW5kaW5nQWN0aW9uLFxuICBQb3N0QWN0aXZpdHlSZWplY3RlZEFjdGlvblxufSBmcm9tICcuLi9hY3Rpb25zL3Bvc3RBY3Rpdml0eSc7XG5pbXBvcnQgdHlwZSB7IFdlYkNoYXRBY3Rpdml0eSB9IGZyb20gJy4uL3R5cGVzL1dlYkNoYXRBY3Rpdml0eSc7XG5pbXBvcnQgdHlwZSB7IFdlYkNoYXRPdXRnb2luZ0FjdGl2aXR5IH0gZnJvbSAnLi4vdHlwZXMvaW50ZXJuYWwvV2ViQ2hhdE91dGdvaW5nQWN0aXZpdHknO1xuXG4vLyBBZnRlciA1IG1pbnV0ZXMsIHRoZSBzYWdhIHdpbGwgc3RvcCBmcm9tIGxpc3RlbmluZyBmb3IgZWNobyBiYWNrcyBhbmQgY29uc2lkZXIgdGhlIG91dGdvaW5nIG1lc3NhZ2UgYXMgcGVybWFuZW50bHkgdW5kZWxpdmVyYWJsZS5cbi8vIFRoaXMgdmFsdWUgbXVzdCBiZSBlcXVhbHMgdG8gb3IgbGFyZ2VyIHRoYW4gdGhlIHVzZXItZGVmaW5lZCBgc3R5bGVPcHRpb25zLnNlbmRUaW1lb3V0YC5cbmNvbnN0IEhBUkRfU0VORF9USU1FT1VUID0gMzAwMDAwO1xuXG5mdW5jdGlvbiogcG9zdEFjdGl2aXR5KFxuICBkaXJlY3RMaW5lOiBEaXJlY3RMaW5lSlNCb3RDb25uZWN0aW9uLFxuICB1c2VySUQ6IHN0cmluZyxcbiAgdXNlcm5hbWU6IHN0cmluZyxcbiAgbnVtQWN0aXZpdGllc1Bvc3RlZDogbnVtYmVyLFxuICB7IG1ldGE6IHsgbWV0aG9kIH0sIHBheWxvYWQ6IHsgYWN0aXZpdHkgfSB9OiBQb3N0QWN0aXZpdHlBY3Rpb24sXG4gIHBvbnlmaWxsOiBHbG9iYWxTY29wZVBvbnlmaWxsXG4pIHtcbiAgY29uc3QgYXR0YWNobWVudHMgPSAoYWN0aXZpdHkudHlwZSA9PT0gJ21lc3NhZ2UnICYmIGFjdGl2aXR5LmF0dGFjaG1lbnRzKSB8fCBbXTtcbiAgY29uc3QgY2xpZW50QWN0aXZpdHlJRCA9IHVuaXF1ZUlEKCk7XG4gIGNvbnN0IGxvY2FsZSA9IHlpZWxkIHNlbGVjdChsYW5ndWFnZVNlbGVjdG9yKTtcbiAgY29uc3QgbG9jYWxUaW1lWm9uZSA9XG4gICAgdHlwZW9mIHdpbmRvdy5JbnRsID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KCkucmVzb2x2ZWRPcHRpb25zKCkudGltZVpvbmU7XG4gIGNvbnN0IG5vdyA9IG5ldyBwb255ZmlsbC5EYXRlKCk7XG5cbiAgLy8gQ3VycmVudGx5LCB3ZSBhbGxvdyB1bnR5cGVkIG91dGdvaW5nIGFjdGl2aXR5IGFzIGxvbmcgYXMgdGhlIGNoYXQgYWRhcHRlciBjYW4gZGVsaXZlci5cbiAgLy8gSW4gdGhlIGZ1dHVyZSwgd2Ugc2hvdWxkIHdhcm4gaWYgdGhlIG91dGdvaW5nIGFjdGl2aXR5IGlzIG5vdCBtYXRjaGluZyB0aGUgdHlwZS5cbiAgY29uc3Qgb3V0Z29pbmdBY3Rpdml0eTogV2ViQ2hhdE91dGdvaW5nQWN0aXZpdHkgPSB7XG4gICAgLi4uZGVsZXRlS2V5KGFjdGl2aXR5LCAnaWQnKSxcbiAgICBjaGFubmVsRGF0YToge1xuICAgICAgLy8gUmVtb3ZlIGxvY2FsIGZpZWxkcyB0aGF0IHNob3VsZCBub3QgYmUgc2VuZCB0byB0aGUgc2VydmljZS5cbiAgICAgIC8vIGBjaGFubmVsRGF0YS5zdGF0ZWAgaXMgYmVpbmcgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiBgY2hhbm5lbERhdGFbJ3dlYmNoYXQ6c2VuZC1zdGF0dXMnXWAuXG4gICAgICAvLyBQbGVhc2UgcmVmZXIgdG8gIzQzNjIgZm9yIGRldGFpbHMuIFJlbW92ZSBvbiBvciBhZnRlciAyMDI0LTA3LTMxLlxuICAgICAgLi4uZGVsZXRlS2V5KGFjdGl2aXR5LmNoYW5uZWxEYXRhLCAnc3RhdGUnLCAnd2ViY2hhdDpzZW5kLXN0YXR1cycpLFxuICAgICAgY2xpZW50QWN0aXZpdHlJRFxuICAgIH0sXG4gICAgY2hhbm5lbElkOiAnd2ViY2hhdCcsXG4gICAgZnJvbToge1xuICAgICAgaWQ6IHVzZXJJRCxcbiAgICAgIG5hbWU6IHVzZXJuYW1lLFxuICAgICAgcm9sZTogJ3VzZXInXG4gICAgfSxcbiAgICBsb2NhbGUsXG4gICAgbG9jYWxUaW1lc3RhbXA6IGRhdGVUb0xvY2FsZUlTT1N0cmluZyhub3cpLFxuICAgIGxvY2FsVGltZXpvbmU6IGxvY2FsVGltZVpvbmUsXG4gICAgLi4uKGFjdGl2aXR5LnR5cGUgPT09ICdtZXNzYWdlJ1xuICAgICAgPyB7XG4gICAgICAgICAgYXR0YWNobWVudHM6XG4gICAgICAgICAgICBhdHRhY2htZW50cyAmJlxuICAgICAgICAgICAgYXR0YWNobWVudHMubWFwKCh7IGNvbnRlbnRUeXBlLCBjb250ZW50VXJsLCBuYW1lLCB0aHVtYm5haWxVcmwgfSkgPT4gKHtcbiAgICAgICAgICAgICAgY29udGVudFR5cGUsXG4gICAgICAgICAgICAgIGNvbnRlbnRVcmwsXG4gICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgIHRodW1ibmFpbFVybFxuICAgICAgICAgICAgfSkpLFxuICAgICAgICAgIHRleHQ6IGFjdGl2aXR5LnRleHRcbiAgICAgICAgfVxuICAgICAgOiBhY3Rpdml0eS50eXBlID09PSAnZXZlbnQnXG4gICAgICA/IHtcbiAgICAgICAgICBuYW1lOiBhY3Rpdml0eS5uYW1lLFxuICAgICAgICAgIHZhbHVlOiBhY3Rpdml0eS52YWx1ZVxuICAgICAgICB9XG4gICAgICA6IHt9KVxuICB9O1xuXG4gIGlmICghbnVtQWN0aXZpdGllc1Bvc3RlZCkge1xuICAgIG91dGdvaW5nQWN0aXZpdHkuZW50aXRpZXMgPSBbXG4gICAgICAuLi4ob3V0Z29pbmdBY3Rpdml0eS5lbnRpdGllcyB8fCBbXSksXG4gICAgICB7XG4gICAgICAgIC8vIFRPRE86IFtQNF0gQ3VycmVudGx5IGluIHYzLCB3ZSBzZW5kIHRoZSBjYXBhYmlsaXRpZXMgYWx0aG91Z2ggdGhlIGNsaWVudCBtaWdodCBub3QgYWN0dWFsbHkgaGF2ZSB0aGVtXG4gICAgICAgIC8vICAgICAgIFdlIG5lZWQgdG8gdW5kZXJzdGFuZCB3aHkgd2UgbmVlZCB0byBzZW5kIHRoZXNlLCBhbmQgb25seSBzZW5kIGNhcGFiaWxpdGllcyB0aGUgY2xpZW50IGhhdmVcbiAgICAgICAgcmVxdWlyZXNCb3RTdGF0ZTogdHJ1ZSxcbiAgICAgICAgc3VwcG9ydHNMaXN0ZW5pbmc6IHRydWUsXG4gICAgICAgIHN1cHBvcnRzVHRzOiB0cnVlLFxuICAgICAgICB0eXBlOiAnQ2xpZW50Q2FwYWJpbGl0aWVzJ1xuICAgICAgfVxuICAgIF07XG4gIH1cblxuICBjb25zdCBtZXRhOiB7IGNsaWVudEFjdGl2aXR5SUQ6IHN0cmluZzsgbWV0aG9kOiBzdHJpbmcgfSA9IHsgY2xpZW50QWN0aXZpdHlJRCwgbWV0aG9kIH07XG5cbiAgeWllbGQgcHV0KHtcbiAgICB0eXBlOiBQT1NUX0FDVElWSVRZX1BFTkRJTkcsXG4gICAgbWV0YSxcbiAgICBwYXlsb2FkOiB7IGFjdGl2aXR5OiBvdXRnb2luZ0FjdGl2aXR5IH1cbiAgfSBhcyBQb3N0QWN0aXZpdHlQZW5kaW5nQWN0aW9uKTtcblxuICBsZXQgZWNob2VkOiBib29sZWFuIHwgdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgLy8gUXVpcmtzOiBXZSBtaWdodCByZWNlaXZlIElOQ09NSU5HX0FDVElWSVRZIGJlZm9yZSB0aGUgcG9zdEFjdGl2aXR5IGNhbGwgY29tcGxldGVkXG4gICAgLy8gICAgICAgICBTbywgd2Ugc2V0dXAgZXhwZWN0YXRpb24gZmlyc3QsIHRoZW4gcG9zdEFjdGl2aXR5IGFmdGVyd2FyZFxuXG4gICAgY29uc3QgZWNob0JhY2tDYWxsID0gY2FsbChmdW5jdGlvbiogKCkge1xuICAgICAgZm9yICg7Oykge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgcGF5bG9hZDogeyBhY3Rpdml0eSB9XG4gICAgICAgIH06IEluY29taW5nQWN0aXZpdHlBY3Rpb24gPSB5aWVsZCB0YWtlKElOQ09NSU5HX0FDVElWSVRZKTtcbiAgICAgICAgaWYgKGFjdGl2aXR5LmNoYW5uZWxEYXRhPy5jbGllbnRBY3Rpdml0eUlEID09PSBjbGllbnRBY3Rpdml0eUlEICYmIGFjdGl2aXR5LmlkKSB7XG4gICAgICAgICAgZWNob2VkID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBhY3Rpdml0eTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gVGltZW91dCBjb3VsZCBiZSBkdWUgdG8gZWl0aGVyOlxuICAgIC8vIC0gUG9zdCBhY3Rpdml0eSBjYWxsIG1heSB0YWtlIHRvbyBsb25nIHRpbWUgdG8gY29tcGxldGVcbiAgICAvLyAgIC0gRGlyZWN0IExpbmUgc2VydmljZSBvbmx5IHJlc3BvbmQgb24gSFRUUCBhZnRlciBib3QgcmVzcG9uZCB0byBEaXJlY3QgTGluZVxuICAgIC8vIC0gQWN0aXZpdHkgbWF5IHRha2UgdG9vIGxvbmcgdGltZSB0byBlY2hvIGJhY2tcblxuICAgIGNvbnN0IHNlbmRUaW1lb3V0OiBudW1iZXIgPSB5aWVsZCBzZWxlY3Qoc2VuZFRpbWVvdXRTZWxlY3Rvcik7XG5cbiAgICBjb25zdCB7XG4gICAgICBzZW5kOiB7IGVjaG9CYWNrIH1cbiAgICB9OiB7IHNlbmQ6IHsgZWNob0JhY2s6IFdlYkNoYXRBY3Rpdml0eSB9IH0gPSB5aWVsZCByYWNlKHtcbiAgICAgIHNlbmQ6IGFsbCh7XG4gICAgICAgIGVjaG9CYWNrOiBlY2hvQmFja0NhbGwsXG4gICAgICAgIHBvc3RBY3Rpdml0eTogb2JzZXJ2ZU9uY2UoZGlyZWN0TGluZS5wb3N0QWN0aXZpdHkob3V0Z29pbmdBY3Rpdml0eSBhcyBEaXJlY3RMaW5lQWN0aXZpdHkpKVxuICAgICAgfSksXG4gICAgICB0aW1lb3V0OiBjYWxsKGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHlpZWxkIGNhbGwoc2xlZXAsIHNlbmRUaW1lb3V0LCBwb255ZmlsbCk7XG5cbiAgICAgICAgLy8gVGhlIElNUEVERUQgYWN0aW9uIGlzIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IGJ5IGNoYW5naW5nIGBjaGFubmVsRGF0YS5zdGF0ZWAgdG8gXCJzZW5kIGZhaWxlZFwiLlxuICAgICAgICAvLyBgY2hhbm5lbERhdGEuc3RhdGVgIGlzIGJlaW5nIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgYGNoYW5uZWxEYXRhWyd3ZWJjaGF0OnNlbmQtc3RhdHVzJ11gLlxuICAgICAgICAvLyBQbGVhc2UgcmVmZXIgdG8gIzQzNjIgZm9yIGRldGFpbHMuIFJlbW92ZSBvbiBvciBhZnRlciAyMDI0LTA3LTMxLlxuICAgICAgICB5aWVsZCBwdXQoe1xuICAgICAgICAgIHR5cGU6IFBPU1RfQUNUSVZJVFlfSU1QRURFRCxcbiAgICAgICAgICBtZXRhLFxuICAgICAgICAgIHBheWxvYWQ6IHsgYWN0aXZpdHk6IG91dGdvaW5nQWN0aXZpdHkgfVxuICAgICAgICB9IGFzIFBvc3RBY3Rpdml0eUltcGVkZWRBY3Rpb24pO1xuXG4gICAgICAgIHlpZWxkIGNhbGwoc2xlZXAsIEhBUkRfU0VORF9USU1FT1VUIC0gc2VuZFRpbWVvdXQsIHBvbnlmaWxsKTtcblxuICAgICAgICB0aHJvdyAhZWNob2VkXG4gICAgICAgICAgPyBuZXcgRXJyb3IoJ3RpbWVkIG91dCB3aGlsZSB3YWl0aW5nIGZvciBvdXRnb2luZyBtZXNzYWdlIHRvIGVjaG8gYmFjaycpXG4gICAgICAgICAgOiBuZXcgRXJyb3IoJ3RpbWVkIG91dCB3aGlsZSB3YWl0aW5nIGZvciBwb3N0QWN0aXZpdHkgdG8gcmV0dXJuIGFueSB2YWx1ZXMnKTtcbiAgICAgIH0pXG4gICAgfSk7XG5cbiAgICB5aWVsZCBwdXQoeyB0eXBlOiBQT1NUX0FDVElWSVRZX0ZVTEZJTExFRCwgbWV0YSwgcGF5bG9hZDogeyBhY3Rpdml0eTogZWNob0JhY2sgfSB9IGFzIFBvc3RBY3Rpdml0eUZ1bGZpbGxlZEFjdGlvbik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ2JvdGZyYW1ld29yay13ZWJjaGF0OiBGYWlsZWQgdG8gcG9zdCBhY3Rpdml0eSB0byBjaGF0IGFkYXB0ZXIuJywgZXJyKTtcblxuICAgIHlpZWxkIHB1dCh7XG4gICAgICB0eXBlOiBQT1NUX0FDVElWSVRZX1JFSkVDVEVELFxuICAgICAgZXJyb3I6IHRydWUsXG4gICAgICBtZXRhLFxuICAgICAgcGF5bG9hZDogZXJyXG4gICAgfSBhcyBQb3N0QWN0aXZpdHlSZWplY3RlZEFjdGlvbik7XG4gIH0gZmluYWxseSB7XG4gICAgaWYgKHlpZWxkIGNhbmNlbGxlZCgpKSB7XG4gICAgICB5aWVsZCBwdXQoe1xuICAgICAgICB0eXBlOiBQT1NUX0FDVElWSVRZX1JFSkVDVEVELFxuICAgICAgICBlcnJvcjogdHJ1ZSxcbiAgICAgICAgbWV0YSxcbiAgICAgICAgcGF5bG9hZDogbmV3IEVycm9yKCdjYW5jZWxsZWQnKVxuICAgICAgfSBhcyBQb3N0QWN0aXZpdHlSZWplY3RlZEFjdGlvbik7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKiBwb3N0QWN0aXZpdHlTYWdhKHBvbnlmaWxsOiBHbG9iYWxTY29wZVBvbnlmaWxsKSB7XG4gIHlpZWxkIHdoaWxlQ29ubmVjdGVkKGZ1bmN0aW9uKiBwb3N0QWN0aXZpdHlXaGlsZUNvbm5lY3RlZCh7XG4gICAgZGlyZWN0TGluZSxcbiAgICB1c2VySUQsXG4gICAgdXNlcm5hbWVcbiAgfToge1xuICAgIGRpcmVjdExpbmU6IERpcmVjdExpbmVKU0JvdENvbm5lY3Rpb247XG4gICAgdXNlcklEOiBzdHJpbmc7XG4gICAgdXNlcm5hbWU6IHN0cmluZztcbiAgfSkge1xuICAgIGxldCBudW1BY3Rpdml0aWVzUG9zdGVkID0gMDtcblxuICAgIHlpZWxkIHRha2VFdmVyeShQT1NUX0FDVElWSVRZLCBmdW5jdGlvbiogcG9zdEFjdGl2aXR5V3JhcHBlcihhY3Rpb246IFBvc3RBY3Rpdml0eUFjdGlvbikge1xuICAgICAgeWllbGQqIHBvc3RBY3Rpdml0eShkaXJlY3RMaW5lLCB1c2VySUQsIHVzZXJuYW1lLCBudW1BY3Rpdml0aWVzUG9zdGVkKyssIGFjdGlvbiwgcG9ueWZpbGwpO1xuICAgIH0pO1xuICB9KTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFFQTs7QUFDQTs7QUFPQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7cURBb0JVQSxZO3NEQXdKZUMsZ0I7Ozs7OztBQTVKekI7QUFDQTtBQUNBLElBQU1DLGlCQUFpQixHQUFHLE1BQTFCOztBQUVBLFNBQVVGLFlBQVYsQ0FDRUcsVUFERixFQUVFQyxNQUZGLEVBR0VDLFFBSEYsRUFJRUMsbUJBSkYsUUFNRUMsUUFORjtFQUFBOztFQUFBO0lBQUE7TUFBQTtRQUFBO1VBS1lDLE1BTFosUUFLSUMsSUFMSixDQUtZRCxNQUxaLEVBS2lDRSxRQUxqQyxRQUtzQkMsT0FMdEIsQ0FLaUNELFFBTGpDO1VBUVFFLFdB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