"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = sendFilesToPostActivitySaga;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _effects = require("redux-saga/effects");

var _mime = _interopRequireDefault(require("mime"));

var _sendFiles = require("../actions/sendFiles");

var _postActivity = _interopRequireDefault(require("../actions/postActivity"));

var _whileConnected = _interopRequireDefault(require("./effects/whileConnected"));

var _marked = /*#__PURE__*/_regenerator["default"].mark(postActivityWithFiles),
    _marked2 = /*#__PURE__*/_regenerator["default"].mark(sendFilesToPostActivity),
    _marked3 = /*#__PURE__*/_regenerator["default"].mark(sendFilesToPostActivitySaga);

var getType = _mime["default"].getType.bind(_mime["default"]);

function postActivityWithFiles(_ref) {
  var files;
  return _regenerator["default"].wrap(function postActivityWithFiles$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          files = _ref.payload.files;
          _context.next = 3;
          return (0, _effects.put)((0, _postActivity["default"])({
            attachments: [].map.call(files, function (_ref2) {
              var name = _ref2.name,
                  thumbnail = _ref2.thumbnail,
                  url = _ref2.url;
              return {
                contentType: getType(name) || 'application/octet-stream',
                contentUrl: url,
                name: name,
                thumbnailUrl: thumbnail
              };
            }),
            channelData: {
              attachmentSizes: [].map.call(files, function (_ref3) {
                var size = _ref3.size;
                return size;
              })
            },
            type: 'message'
          }));

        case 3:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}

function sendFilesToPostActivity() {
  return _regenerator["default"].wrap(function sendFilesToPostActivity$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return (0, _effects.takeEvery)(function (_ref4) {
            var payload = _ref4.payload,
                type = _ref4.type;
            return type === _sendFiles.SEND_FILES && payload.files.length;
          }, postActivityWithFiles);

        case 2:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked2);
}

function sendFilesToPostActivitySaga() {
  return _regenerator["default"].wrap(function sendFilesToPostActivitySaga$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return (0, _whileConnected["default"])(sendFilesToPostActivity);

        case 2:
        case "end":
          return _context3.stop();
      }
    }
  }, _marked3);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwb3N0QWN0aXZpdHlXaXRoRmlsZXMiLCJzZW5kRmlsZXNUb1Bvc3RBY3Rpdml0eSIsInNlbmRGaWxlc1RvUG9zdEFjdGl2aXR5U2FnYSIsImdldFR5cGUiLCJtaW1lIiwiYmluZCIsImZpbGVzIiwicGF5bG9hZCIsInB1dCIsInBvc3RBY3Rpdml0eSIsImF0dGFjaG1lbnRzIiwibWFwIiwiY2FsbCIsIm5hbWUiLCJ0aHVtYm5haWwiLCJ1cmwiLCJjb250ZW50VHlwZSIsImNvbnRlbnRVcmwiLCJ0aHVtYm5haWxVcmwiLCJjaGFubmVsRGF0YSIsImF0dGFjaG1lbnRTaXplcyIsInNpemUiLCJ0eXBlIiwidGFrZUV2ZXJ5IiwiU0VORF9GSUxFUyIsImxlbmd0aCIsIndoaWxlQ29ubmVjdGVkIl0sInNvdXJjZVJvb3QiOiJjb3JlOi8vLyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NhZ2FzL3NlbmRGaWxlc1RvUG9zdEFjdGl2aXR5U2FnYS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwdXQsIHRha2VFdmVyeSB9IGZyb20gJ3JlZHV4LXNhZ2EvZWZmZWN0cyc7XG5pbXBvcnQgbWltZSBmcm9tICdtaW1lJztcblxuaW1wb3J0IHsgU0VORF9GSUxFUyB9IGZyb20gJy4uL2FjdGlvbnMvc2VuZEZpbGVzJztcbmltcG9ydCBwb3N0QWN0aXZpdHkgZnJvbSAnLi4vYWN0aW9ucy9wb3N0QWN0aXZpdHknO1xuaW1wb3J0IHdoaWxlQ29ubmVjdGVkIGZyb20gJy4vZWZmZWN0cy93aGlsZUNvbm5lY3RlZCc7XG5cbmNvbnN0IGdldFR5cGUgPSBtaW1lLmdldFR5cGUuYmluZChtaW1lKTtcblxuZnVuY3Rpb24qIHBvc3RBY3Rpdml0eVdpdGhGaWxlcyh7IHBheWxvYWQ6IHsgZmlsZXMgfSB9KSB7XG4gIHlpZWxkIHB1dChcbiAgICBwb3N0QWN0aXZpdHkoe1xuICAgICAgYXR0YWNobWVudHM6IFtdLm1hcC5jYWxsKGZpbGVzLCAoeyBuYW1lLCB0aHVtYm5haWwsIHVybCB9KSA9PiAoe1xuICAgICAgICBjb250ZW50VHlwZTogZ2V0VHlwZShuYW1lKSB8fCAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyxcbiAgICAgICAgY29udGVudFVybDogdXJsLFxuICAgICAgICBuYW1lLFxuICAgICAgICB0aHVtYm5haWxVcmw6IHRodW1ibmFpbFxuICAgICAgfSkpLFxuICAgICAgY2hhbm5lbERhdGE6IHtcbiAgICAgICAgYXR0YWNobWVudFNpemVzOiBbXS5tYXAuY2FsbChmaWxlcywgKHsgc2l6ZSB9KSA9PiBzaXplKVxuICAgICAgfSxcbiAgICAgIHR5cGU6ICdtZXNzYWdlJ1xuICAgIH0pXG4gICk7XG59XG5cbmZ1bmN0aW9uKiBzZW5kRmlsZXNUb1Bvc3RBY3Rpdml0eSgpIHtcbiAgeWllbGQgdGFrZUV2ZXJ5KCh7IHBheWxvYWQsIHR5cGUgfSkgPT4gdHlwZSA9PT0gU0VORF9GSUxFUyAmJiBwYXlsb2FkLmZpbGVzLmxlbmd0aCwgcG9zdEFjdGl2aXR5V2l0aEZpbGVzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24qIHNlbmRGaWxlc1RvUG9zdEFjdGl2aXR5U2FnYSgpIHtcbiAgeWllbGQgd2hpbGVDb25uZWN0ZWQoc2VuZEZpbGVzVG9Qb3N0QWN0aXZpdHkpO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOzt3REFJVUEscUI7eURBaUJBQyx1Qjt5REFJZUMsMkI7O0FBdkJ6QixJQUFNQyxPQUFPLEdBQUdDLGdCQUFBLENBQUtELE9BQUwsQ0FBYUUsSUFBYixDQUFrQkQsZ0JBQWxCLENBQWhCOztBQUVBLFNBQVVKLHFCQUFWO0VBQUE7RUFBQTtJQUFBO01BQUE7UUFBQTtVQUE2Q00sS0FBN0MsUUFBa0NDLE9BQWxDLENBQTZDRCxLQUE3QztVQUFBO1VBQ0UsT0FBTSxJQUFBRSxZQUFBLEVBQ0osSUFBQUMsd0JBQUEsRUFBYTtZQUNYQyxXQUFXLEVBQUUsR0FBR0MsR0FBSCxDQUFPQyxJQUFQLENBQVlOLEtBQVosRUFBbUI7Y0FBQSxJQUFHTyxJQUFILFNBQUdBLElBQUg7Y0FBQSxJQUFTQyxTQUFULFNBQVNBLFNBQVQ7Y0FBQSxJQUFvQkMsR0FBcEIsU0FBb0JBLEdBQXBCO2NBQUEsT0FBK0I7Z0JBQzdEQyxXQUFXLEVBQUViLE9BQU8sQ0FBQ1UsSUFBRCxDQUFQLElBQWlCLDBCQUQrQjtnQkFFN0RJLFVBQVUsRUFBRUYsR0FGaUQ7Z0JBRzdERixJQUFJLEVBQUpBLElBSDZEO2dCQUk3REssWUFBWSxFQUFFSjtjQUorQyxDQUEvQjtZQUFBLENBQW5CLENBREY7WUFPWEssV0FBVyxFQUFFO2NBQ1hDLGVBQWUsRUFBRSxHQUFHVCxHQUFILENBQU9DLElBQVAsQ0FBWU4sS0FBWixFQUFtQjtnQkFBQSxJQUFHZSxJQUFILFNBQUdBLElBQUg7Z0JBQUEsT0FBY0EsSUFBZDtjQUFBLENBQW5CO1lBRE4sQ0FQRjtZQVVYQyxJQUFJLEVBQUU7VUFWSyxDQUFiLENBREksQ0FBTjs7UUFERjtRQUFBO1VBQUE7TUFBQTtJQUFBO0VBQUE7QUFBQTs7QUFpQkEsU0FBVXJCLHVCQUFWO0VBQUE7SUFBQTtNQUFBO1FBQUE7VUFBQTtVQUNFLE9BQU0sSUFBQXNCLGtCQUFBLEVBQVU7WUFBQSxJQUFHaEIsT0FBSCxTQUFHQSxPQUFIO1lBQUEsSUFBWWUsSUFBWixTQUFZQSxJQUFaO1lBQUEsT0FBdUJBLElBQUksS0FBS0UscUJBQVQsSUFBdUJqQixPQUFPLENBQUNELEtBQVIsQ0FBY21CLE1BQTVEO1VBQUEsQ0FBVixFQUE4RXpCLHFCQUE5RSxDQUFOOztRQURGO1FBQUE7VUFBQTtNQUFBO0lBQUE7RUFBQTtBQUFBOztBQUllLFNBQVVFLDJCQUFWO0VBQUE7SUFBQTtNQUFBO1FBQUE7VUFBQTtVQUNiLE9BQU0sSUFBQXdCLDBCQUFBLEVBQWV6Qix1QkFBZixDQUFOOztRQURhO1FBQUE7VUFBQTtNQUFBO0lBQUE7RUFBQTtBQUFBIn0=