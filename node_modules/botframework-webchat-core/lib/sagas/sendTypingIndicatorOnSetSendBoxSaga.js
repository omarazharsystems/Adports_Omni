"use strict";

var _regeneratorRuntime2 = require("@babel/runtime/regenerator");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = sendTypingIndicatorOnSetSendBoxSaga;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _effects = require("redux-saga/effects");

var _setSendBox = require("../actions/setSendBox");

var _setSendTypingIndicator = require("../actions/setSendTypingIndicator");

var _postActivity = require("../actions/postActivity");

var _emitTypingIndicator = _interopRequireDefault(require("../actions/emitTypingIndicator"));

var _sendTypingIndicator = _interopRequireDefault(require("../selectors/sendTypingIndicator"));

var _sleep = _interopRequireDefault(require("../utils/sleep"));

var _whileConnected = _interopRequireDefault(require("./effects/whileConnected"));

var _marked = /*#__PURE__*/_regeneratorRuntime2.mark(sendTypingIndicatorOnSetSendBox),
    _marked2 = /*#__PURE__*/_regeneratorRuntime2.mark(sendTypingIndicatorOnSetSendBoxSaga);

var SEND_INTERVAL = 3000;

function takeSendTypingIndicator(value) {
  return (0, _effects.take)( // TODO: "any" should be replaced all known types in the system.
  function (_ref) {
    var payload = _ref.payload,
        type = _ref.type;
    return type === _setSendTypingIndicator.SET_SEND_TYPING_INDICATOR && !payload.sendTypingIndicator === !value;
  });
}

function sendTypingIndicatorOnSetSendBox(_, ponyfill) {
  var Date, sendTypingIndicator, _loop;

  return _regenerator["default"].wrap(function sendTypingIndicatorOnSetSendBox$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          Date = ponyfill.Date;
          _context3.next = 3;
          return (0, _effects.select)(_sendTypingIndicator["default"]);

        case 3:
          sendTypingIndicator = _context3.sent;

          if (sendTypingIndicator) {
            _context3.next = 7;
            break;
          }

          _context3.next = 7;
          return takeSendTypingIndicator(true);

        case 7:
          _loop = /*#__PURE__*/_regenerator["default"].mark(function _loop() {
            var lastSend, task;
            return _regenerator["default"].wrap(function _loop$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    lastSend = -Infinity;
                    _context2.next = 3;
                    return (0, _effects.takeLatest)(function (_ref2) {
                      var payload = _ref2.payload,
                          type = _ref2.type;
                      return type === _setSendBox.SET_SEND_BOX && payload.text || // Stop sending pending typing indicator if the user has posted anything.
                      // We send typing indicator in a debounce way (t = 0, t = 3000, t = 6000).
                      // When the user type, and then post the activity at t = 1500, we still have a pending typing indicator at t = 3000.
                      // This code is to cancel the typing indicator at t = 3000.
                      type === _postActivity.POST_ACTIVITY && payload.activity.type !== 'typing';
                    }, /*#__PURE__*/_regenerator["default"].mark(function _callee(_ref3) {
                      var payload, type, interval;
                      return _regenerator["default"].wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              payload = _ref3.payload, type = _ref3.type;

                              if (!(type === _setSendBox.SET_SEND_BOX)) {
                                _context.next = 11;
                                break;
                              }

                              interval = SEND_INTERVAL - Date.now() + lastSend;

                              if (!(interval > 0)) {
                                _context.next = 6;
                                break;
                              }

                              _context.next = 6;
                              return (0, _effects.call)(_sleep["default"], interval, ponyfill);

                            case 6:
                              _context.next = 8;
                              return (0, _effects.put)((0, _emitTypingIndicator["default"])());

                            case 8:
                              lastSend = Date.now();
                              _context.next = 12;
                              break;

                            case 11:
                              if (payload.activity.type === 'message') {
                                lastSend = -Infinity;
                              }

                            case 12:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee);
                    }));

                  case 3:
                    task = _context2.sent;
                    _context2.next = 6;
                    return takeSendTypingIndicator(false);

                  case 6:
                    _context2.next = 8;
                    return (0, _effects.cancel)(task);

                  case 8:
                    _context2.next = 10;
                    return takeSendTypingIndicator(true);

                  case 10:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _loop);
          });

        case 8:
          return _context3.delegateYield(_loop(), "t0", 9);

        case 9:
          _context3.next = 8;
          break;

        case 11:
        case "end":
          return _context3.stop();
      }
    }
  }, _marked);
}

function sendTypingIndicatorOnSetSendBoxSaga(ponyfill) {
  return _regenerator["default"].wrap(function sendTypingIndicatorOnSetSendBoxSaga$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          _context4.next = 2;
          return (0, _whileConnected["default"])(sendTypingIndicatorOnSetSendBox, ponyfill);

        case 2:
        case "end":
          return _context4.stop();
      }
    }
  }, _marked2);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzZW5kVHlwaW5nSW5kaWNhdG9yT25TZXRTZW5kQm94Iiwic2VuZFR5cGluZ0luZGljYXRvck9uU2V0U2VuZEJveFNhZ2EiLCJTRU5EX0lOVEVSVkFMIiwidGFrZVNlbmRUeXBpbmdJbmRpY2F0b3IiLCJ2YWx1ZSIsInRha2UiLCJwYXlsb2FkIiwidHlwZSIsIlNFVF9TRU5EX1RZUElOR19JTkRJQ0FUT1IiLCJzZW5kVHlwaW5nSW5kaWNhdG9yIiwiXyIsInBvbnlmaWxsIiwiRGF0ZSIsInNlbGVjdCIsInNlbmRUeXBpbmdJbmRpY2F0b3JTZWxlY3RvciIsImxhc3RTZW5kIiwiSW5maW5pdHkiLCJ0YWtlTGF0ZXN0IiwiU0VUX1NFTkRfQk9YIiwidGV4dCIsIlBPU1RfQUNUSVZJVFkiLCJhY3Rpdml0eSIsImludGVydmFsIiwibm93IiwiY2FsbCIsInNsZWVwIiwicHV0IiwiZW1pdFR5cGluZ0luZGljYXRvciIsInRhc2siLCJjYW5jZWwiLCJ3aGlsZUNvbm5lY3RlZCJdLCJzb3VyY2VSb290IjoiY29yZTovLy8iLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWdhcy9zZW5kVHlwaW5nSW5kaWNhdG9yT25TZXRTZW5kQm94U2FnYS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBXZSB3aWxsIHJldmlzaXQgdGhpcyBsb2dpYyBpbiAjMjE1NyBhbmQgc2hvdWxkIHJlbW92ZSB0aGUgZm9sbG93aW5nIGVzbGludCBpZ25vcmVcbi8qIGVzbGludCByZXF1aXJlLWF0b21pYy11cGRhdGVzOiBcIm9mZlwiICovXG5cbmltcG9ydCB7IGNhbGwsIGNhbmNlbCwgcHV0LCBzZWxlY3QsIHRha2UsIHRha2VMYXRlc3QgfSBmcm9tICdyZWR1eC1zYWdhL2VmZmVjdHMnO1xuXG5pbXBvcnQgeyBTRVRfU0VORF9CT1ggfSBmcm9tICcuLi9hY3Rpb25zL3NldFNlbmRCb3gnO1xuaW1wb3J0IHsgU0VUX1NFTkRfVFlQSU5HX0lORElDQVRPUiB9IGZyb20gJy4uL2FjdGlvbnMvc2V0U2VuZFR5cGluZ0luZGljYXRvcic7XG5pbXBvcnQgeyBQT1NUX0FDVElWSVRZIH0gZnJvbSAnLi4vYWN0aW9ucy9wb3N0QWN0aXZpdHknO1xuaW1wb3J0IGVtaXRUeXBpbmdJbmRpY2F0b3IgZnJvbSAnLi4vYWN0aW9ucy9lbWl0VHlwaW5nSW5kaWNhdG9yJztcbmltcG9ydCBzZW5kVHlwaW5nSW5kaWNhdG9yU2VsZWN0b3IgZnJvbSAnLi4vc2VsZWN0b3JzL3NlbmRUeXBpbmdJbmRpY2F0b3InO1xuaW1wb3J0IHNsZWVwIGZyb20gJy4uL3V0aWxzL3NsZWVwJztcbmltcG9ydCB3aGlsZUNvbm5lY3RlZCBmcm9tICcuL2VmZmVjdHMvd2hpbGVDb25uZWN0ZWQnO1xuXG5pbXBvcnQgdHlwZSB7IEdsb2JhbFNjb3BlUG9ueWZpbGwgfSBmcm9tICcuLi90eXBlcy9HbG9iYWxTY29wZVBvbnlmaWxsJztcbmltcG9ydCB0eXBlIHNldFNlbmRUeXBpbmdJbmRpY2F0b3IgZnJvbSAnLi4vYWN0aW9ucy9zZXRTZW5kVHlwaW5nSW5kaWNhdG9yJztcblxudHlwZSBTZXRTZW5kVHlwaW5nSW5kaWNhdG9yQWN0aW9uID0gUmV0dXJuVHlwZTx0eXBlb2Ygc2V0U2VuZFR5cGluZ0luZGljYXRvcj47XG5cbmNvbnN0IFNFTkRfSU5URVJWQUwgPSAzMDAwO1xuXG5mdW5jdGlvbiB0YWtlU2VuZFR5cGluZ0luZGljYXRvcih2YWx1ZTogYm9vbGVhbikge1xuICByZXR1cm4gdGFrZTxTZXRTZW5kVHlwaW5nSW5kaWNhdG9yQWN0aW9uPihcbiAgICAvLyBUT0RPOiBcImFueVwiIHNob3VsZCBiZSByZXBsYWNlZCBhbGwga25vd24gdHlwZXMgaW4gdGhlIHN5c3RlbS5cbiAgICAoeyBwYXlsb2FkLCB0eXBlIH06IGFueSkgPT4gdHlwZSA9PT0gU0VUX1NFTkRfVFlQSU5HX0lORElDQVRPUiAmJiAhcGF5bG9hZC5zZW5kVHlwaW5nSW5kaWNhdG9yID09PSAhdmFsdWVcbiAgKTtcbn1cblxuZnVuY3Rpb24qIHNlbmRUeXBpbmdJbmRpY2F0b3JPblNldFNlbmRCb3goXywgcG9ueWZpbGw6IEdsb2JhbFNjb3BlUG9ueWZpbGwpIHtcbiAgY29uc3QgeyBEYXRlIH0gPSBwb255ZmlsbDtcbiAgY29uc3Qgc2VuZFR5cGluZ0luZGljYXRvciA9IHlpZWxkIHNlbGVjdChzZW5kVHlwaW5nSW5kaWNhdG9yU2VsZWN0b3IpO1xuXG4gIGlmICghc2VuZFR5cGluZ0luZGljYXRvcikge1xuICAgIHlpZWxkIHRha2VTZW5kVHlwaW5nSW5kaWNhdG9yKHRydWUpO1xuICB9XG5cbiAgZm9yICg7Oykge1xuICAgIGxldCBsYXN0U2VuZCA9IC1JbmZpbml0eTtcbiAgICBjb25zdCB0YXNrID0geWllbGQgdGFrZUxhdGVzdChcbiAgICAgICh7IHBheWxvYWQsIHR5cGUgfSkgPT5cbiAgICAgICAgKHR5cGUgPT09IFNFVF9TRU5EX0JPWCAmJiBwYXlsb2FkLnRleHQpIHx8XG4gICAgICAgIC8vIFN0b3Agc2VuZGluZyBwZW5kaW5nIHR5cGluZyBpbmRpY2F0b3IgaWYgdGhlIHVzZXIgaGFzIHBvc3RlZCBhbnl0aGluZy5cbiAgICAgICAgLy8gV2Ugc2VuZCB0eXBpbmcgaW5kaWNhdG9yIGluIGEgZGVib3VuY2Ugd2F5ICh0ID0gMCwgdCA9IDMwMDAsIHQgPSA2MDAwKS5cbiAgICAgICAgLy8gV2hlbiB0aGUgdXNlciB0eXBlLCBhbmQgdGhlbiBwb3N0IHRoZSBhY3Rpdml0eSBhdCB0ID0gMTUwMCwgd2Ugc3RpbGwgaGF2ZSBhIHBlbmRpbmcgdHlwaW5nIGluZGljYXRvciBhdCB0ID0gMzAwMC5cbiAgICAgICAgLy8gVGhpcyBjb2RlIGlzIHRvIGNhbmNlbCB0aGUgdHlwaW5nIGluZGljYXRvciBhdCB0ID0gMzAwMC5cbiAgICAgICAgKHR5cGUgPT09IFBPU1RfQUNUSVZJVFkgJiYgcGF5bG9hZC5hY3Rpdml0eS50eXBlICE9PSAndHlwaW5nJyksXG4gICAgICBmdW5jdGlvbiogKHsgcGF5bG9hZCwgdHlwZSB9KSB7XG4gICAgICAgIGlmICh0eXBlID09PSBTRVRfU0VORF9CT1gpIHtcbiAgICAgICAgICBjb25zdCBpbnRlcnZhbCA9IFNFTkRfSU5URVJWQUwgLSBEYXRlLm5vdygpICsgbGFzdFNlbmQ7XG5cbiAgICAgICAgICBpZiAoaW50ZXJ2YWwgPiAwKSB7XG4gICAgICAgICAgICB5aWVsZCBjYWxsKHNsZWVwLCBpbnRlcnZhbCwgcG9ueWZpbGwpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHlpZWxkIHB1dChlbWl0VHlwaW5nSW5kaWNhdG9yKCkpO1xuXG4gICAgICAgICAgbGFzdFNlbmQgPSBEYXRlLm5vdygpO1xuICAgICAgICB9IGVsc2UgaWYgKHBheWxvYWQuYWN0aXZpdHkudHlwZSA9PT0gJ21lc3NhZ2UnKSB7XG4gICAgICAgICAgbGFzdFNlbmQgPSAtSW5maW5pdHk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuXG4gICAgeWllbGQgdGFrZVNlbmRUeXBpbmdJbmRpY2F0b3IoZmFsc2UpO1xuICAgIHlpZWxkIGNhbmNlbCh0YXNrKTtcbiAgICB5aWVsZCB0YWtlU2VuZFR5cGluZ0luZGljYXRvcih0cnVlKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiogc2VuZFR5cGluZ0luZGljYXRvck9uU2V0U2VuZEJveFNhZ2EocG9ueWZpbGw6IEdsb2JhbFNjb3BlUG9ueWZpbGwpIHtcbiAgeWllbGQgd2hpbGVDb25uZWN0ZWQoc2VuZFR5cGluZ0luZGljYXRvck9uU2V0U2VuZEJveCwgcG9ueWZpbGwpO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBR0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O3FEQWdCVUEsK0I7c0RBeUNlQyxtQzs7QUFsRHpCLElBQU1DLGFBQWEsR0FBRyxJQUF0Qjs7QUFFQSxTQUFTQyx1QkFBVCxDQUFpQ0MsS0FBakMsRUFBaUQ7RUFDL0MsT0FBTyxJQUFBQyxhQUFBLEdBQ0w7RUFDQTtJQUFBLElBQUdDLE9BQUgsUUFBR0EsT0FBSDtJ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