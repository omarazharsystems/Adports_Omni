"use strict";

var _regeneratorRuntime2 = require("@babel/runtime/regenerator");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = stopSpeakingActivityOnInputSaga;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _effects = require("redux-saga/effects");

var _postActivity = require("../actions/postActivity");

var _setSendBox = require("../actions/setSendBox");

var _stopSpeakingActivity = _interopRequireDefault(require("../actions/stopSpeakingActivity"));

var _whileConnected = _interopRequireDefault(require("./effects/whileConnected"));

var _marked = /*#__PURE__*/_regeneratorRuntime2.mark(stopSpeakingActivityOnInput),
    _marked2 = /*#__PURE__*/_regeneratorRuntime2.mark(stopSpeakingActivityOnInputSaga);

function stopSpeakingActivityOnInput() {
  return _regenerator["default"].wrap(function stopSpeakingActivityOnInput$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return (0, _effects.takeEvery)(function (_ref) {
            var meta = _ref.meta,
                payload = _ref.payload,
                type = _ref.type;
            return type === _setSendBox.SET_SEND_BOX && payload.text || // We want to stop speaking activity when the user click on a card action
            // But currently there are no actions generated out of a card action
            // So, right now, we are using best-effort by listening to POST_ACTIVITY_PENDING with a "message" event
            // We filter out speech because we will call startSpeakingActivity() for POST_ACTIVITY_PENDING dispatched by speech
            type === _postActivity.POST_ACTIVITY_PENDING && meta.method !== 'speech' && payload.activity.type === 'message';
          }, /*#__PURE__*/_regenerator["default"].mark(function _callee() {
            return _regenerator["default"].wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return (0, _effects.put)((0, _stopSpeakingActivity["default"])());

                  case 2:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));

        case 2:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked);
}

function stopSpeakingActivityOnInputSaga() {
  return _regenerator["default"].wrap(function stopSpeakingActivityOnInputSaga$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return (0, _whileConnected["default"])(stopSpeakingActivityOnInput);

        case 2:
        case "end":
          return _context3.stop();
      }
    }
  }, _marked2);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzdG9wU3BlYWtpbmdBY3Rpdml0eU9uSW5wdXQiLCJzdG9wU3BlYWtpbmdBY3Rpdml0eU9uSW5wdXRTYWdhIiwidGFrZUV2ZXJ5IiwibWV0YSIsInBheWxvYWQiLCJ0eXBlIiwiU0VUX1NFTkRfQk9YIiwidGV4dCIsIlBPU1RfQUNUSVZJVFlfUEVORElORyIsIm1ldGhvZCIsImFjdGl2aXR5IiwicHV0Iiwic3RvcFNwZWFraW5nQWN0aXZpdHkiLCJ3aGlsZUNvbm5lY3RlZCJdLCJzb3VyY2VSb290IjoiY29yZTovLy8iLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWdhcy9zdG9wU3BlYWtpbmdBY3Rpdml0eU9uSW5wdXRTYWdhLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHB1dCwgdGFrZUV2ZXJ5IH0gZnJvbSAncmVkdXgtc2FnYS9lZmZlY3RzJztcblxuaW1wb3J0IHsgUE9TVF9BQ1RJVklUWV9QRU5ESU5HIH0gZnJvbSAnLi4vYWN0aW9ucy9wb3N0QWN0aXZpdHknO1xuaW1wb3J0IHsgU0VUX1NFTkRfQk9YIH0gZnJvbSAnLi4vYWN0aW9ucy9zZXRTZW5kQm94JztcbmltcG9ydCBzdG9wU3BlYWtpbmdBY3Rpdml0eSBmcm9tICcuLi9hY3Rpb25zL3N0b3BTcGVha2luZ0FjdGl2aXR5JztcbmltcG9ydCB3aGlsZUNvbm5lY3RlZCBmcm9tICcuL2VmZmVjdHMvd2hpbGVDb25uZWN0ZWQnO1xuXG5mdW5jdGlvbiogc3RvcFNwZWFraW5nQWN0aXZpdHlPbklucHV0KCkge1xuICB5aWVsZCB0YWtlRXZlcnkoXG4gICAgKHsgbWV0YSwgcGF5bG9hZCwgdHlwZSB9KSA9PlxuICAgICAgKHR5cGUgPT09IFNFVF9TRU5EX0JPWCAmJiBwYXlsb2FkLnRleHQpIHx8XG4gICAgICAvLyBXZSB3YW50IHRvIHN0b3Agc3BlYWtpbmcgYWN0aXZpdHkgd2hlbiB0aGUgdXNlciBjbGljayBvbiBhIGNhcmQgYWN0aW9uXG4gICAgICAvLyBCdXQgY3VycmVudGx5IHRoZXJlIGFyZSBubyBhY3Rpb25zIGdlbmVyYXRlZCBvdXQgb2YgYSBjYXJkIGFjdGlvblxuICAgICAgLy8gU28sIHJpZ2h0IG5vdywgd2UgYXJlIHVzaW5nIGJlc3QtZWZmb3J0IGJ5IGxpc3RlbmluZyB0byBQT1NUX0FDVElWSVRZX1BFTkRJTkcgd2l0aCBhIFwibWVzc2FnZVwiIGV2ZW50XG4gICAgICAvLyBXZSBmaWx0ZXIgb3V0IHNwZWVjaCBiZWNhdXNlIHdlIHdpbGwgY2FsbCBzdGFydFNwZWFraW5nQWN0aXZpdHkoKSBmb3IgUE9TVF9BQ1RJVklUWV9QRU5ESU5HIGRpc3BhdGNoZWQgYnkgc3BlZWNoXG4gICAgICAodHlwZSA9PT0gUE9TVF9BQ1RJVklUWV9QRU5ESU5HICYmIG1ldGEubWV0aG9kICE9PSAnc3BlZWNoJyAmJiBwYXlsb2FkLmFjdGl2aXR5LnR5cGUgPT09ICdtZXNzYWdlJyksXG4gICAgZnVuY3Rpb24qICgpIHtcbiAgICAgIHlpZWxkIHB1dChzdG9wU3BlYWtpbmdBY3Rpdml0eSgpKTtcbiAgICB9XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKiBzdG9wU3BlYWtpbmdBY3Rpdml0eU9uSW5wdXRTYWdhKCkge1xuICB5aWVsZCB3aGlsZUNvbm5lY3RlZChzdG9wU3BlYWtpbmdBY3Rpdml0eU9uSW5wdXQpO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O3FEQUVVQSwyQjtzREFlZUMsK0I7O0FBZnpCLFNBQVVELDJCQUFWO0VBQUE7SUFBQTtNQUFBO1FBQUE7VUFBQTtVQUNFLE9BQU0sSUFBQUUsa0JBQUEsRUFDSjtZQUFBLElBQUdDLElBQUgsUUFBR0EsSUFBSDtZQUFBLElBQVNDLE9BQVQsUUFBU0EsT0FBVDtZQUFBLElBQWtCQyxJQUFsQixRQUFrQkEsSUFBbEI7WUFBQSxPQUNHQSxJQUFJLEtBQUtDLHdCQUFULElBQXlCRixPQUFPLENBQUNHLElBQWxDLElBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQ0YsSUFBSSxLQUFLRyxtQ0FBVCxJQUFrQ0wsSUFBSSxDQUFDTSxNQUFMLEtBQWdCLFFBQWxELElBQThETCxPQUFPLENBQUNNLFFBQVIsQ0FBaUJMLElBQWpCLEtBQTBCLFNBTjNGO1VBQUEsQ0FESSw0Q0FRSjtZQUFBO2NBQUE7Z0JBQUE7a0JBQUE7b0JBQUE7b0JBQ0UsT0FBTSxJQUFBTSxZQUFBLEVBQUksSUFBQUMsZ0NBQUEsR0FBSixDQUFOOztrQkFERjtrQkFBQTtvQkFBQTtnQkFBQTtjQUFBO1lBQUE7VUFBQSxDQVJJLEVBQU47O1FBREY7UUFBQTtVQUFBO01BQUE7SUFBQTtFQUFBO0FBQUE7O0FBZWUsU0FBVVgsK0JBQVY7RUFBQTtJQUFBO01BQUE7UUFBQTtVQUFBO1VBQ2IsT0FBTSxJQUFBWSwwQkFBQSxFQUFlYiwyQkFBZixDQUFOOztRQURhO1FBQUE7VUFBQTtNQUFBO0lBQUE7RUFBQTtBQUFBIn0=