"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = createNotificationsReducer;

var _simpleUpdateIn = _interopRequireDefault(require("simple-update-in"));

var _dismissNotification = require("../actions/dismissNotification");

var _sagaError = require("../actions/sagaError");

var _setNotification = require("../actions/setNotification");

var _isForbiddenPropertyName = _interopRequireDefault(require("../utils/isForbiddenPropertyName"));

var DEFAULT_STATE = {};

function createNotificationsReducer(_ref) {
  var Date = _ref.Date;
  return function notifications() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_STATE;
    var action = arguments.length > 1 ? arguments[1] : undefined;
    var type = action.type;
    var now = Date.now();

    if (type === _dismissNotification.DISMISS_NOTIFICATION) {
      state = (0, _simpleUpdateIn["default"])(state, [action.payload.id]);
    } else if (type === _sagaError.SAGA_ERROR) {
      state = (0, _simpleUpdateIn["default"])(state, ['connectivitystatus', 'message'], function () {
        return 'javascripterror';
      });
    } else if (type === _setNotification.SET_NOTIFICATION) {
      var _action$payload = action.payload,
          alt = _action$payload.alt,
          data = _action$payload.data,
          id = _action$payload.id,
          level = _action$payload.level,
          message = _action$payload.message;

      if (!(0, _isForbiddenPropertyName["default"])(id)) {
        // Mitigated through denylisting.
        // eslint-disable-next-line security/detect-object-injection
        var notification = state[id];

        if (!notification || alt !== notification.alt || !Object.is(data, notification.data) || level !== notification.level || message !== notification.message) {
          state = (0, _simpleUpdateIn["default"])(state, [id], function () {
            return {
              alt: alt,
              data: data,
              id: id,
              level: level,
              message: message,
              timestamp: now
            };
          });
        }
      }
    }

    return state;
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJERUZBVUxUX1NUQVRFIiwiY3JlYXRlTm90aWZpY2F0aW9uc1JlZHVjZXIiLCJEYXRlIiwibm90aWZpY2F0aW9ucyIsInN0YXRlIiwiYWN0aW9uIiwidHlwZSIsIm5vdyIsIkRJU01JU1NfTk9USUZJQ0FUSU9OIiwidXBkYXRlSW4iLCJwYXlsb2FkIiwiaWQiLCJTQUdBX0VSUk9SIiwiU0VUX05PVElGSUNBVElPTiIsImFsdCIsImRhdGEiLCJsZXZlbCIsIm1lc3NhZ2UiLCJpc0ZvcmJpZGRlblByb3BlcnR5TmFtZSIsIm5vdGlmaWNhdGlvbiIsIk9iamVjdCIsImlzIiwidGltZXN0YW1wIl0sInNvdXJjZVJvb3QiOiJjb3JlOi8vLyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3JlZHVjZXJzL2NyZWF0ZU5vdGlmaWNhdGlvbnNSZWR1Y2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB1cGRhdGVJbiBmcm9tICdzaW1wbGUtdXBkYXRlLWluJztcblxuaW1wb3J0IHsgRElTTUlTU19OT1RJRklDQVRJT04gfSBmcm9tICcuLi9hY3Rpb25zL2Rpc21pc3NOb3RpZmljYXRpb24nO1xuaW1wb3J0IHsgU0FHQV9FUlJPUiB9IGZyb20gJy4uL2FjdGlvbnMvc2FnYUVycm9yJztcbmltcG9ydCB7IFNFVF9OT1RJRklDQVRJT04gfSBmcm9tICcuLi9hY3Rpb25zL3NldE5vdGlmaWNhdGlvbic7XG5pbXBvcnQgaXNGb3JiaWRkZW5Qcm9wZXJ0eU5hbWUgZnJvbSAnLi4vdXRpbHMvaXNGb3JiaWRkZW5Qcm9wZXJ0eU5hbWUnO1xuXG5pbXBvcnQgdHlwZSB7IERpc21pc3NOb3RpZmljYXRpb25BY3Rpb24gfSBmcm9tICcuLi9hY3Rpb25zL2Rpc21pc3NOb3RpZmljYXRpb24nO1xuaW1wb3J0IHR5cGUgeyBHbG9iYWxTY29wZVBvbnlmaWxsIH0gZnJvbSAnLi4vdHlwZXMvR2xvYmFsU2NvcGVQb255ZmlsbCc7XG5pbXBvcnQgdHlwZSB7IE5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3R5cGVzL2ludGVybmFsL05vdGlmaWNhdGlvbic7XG5pbXBvcnQgdHlwZSB7IFJlZHVjZXIgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgdHlwZSB7IFNhZ2FFcnJvckFjdGlvbiB9IGZyb20gJy4uL2FjdGlvbnMvc2FnYUVycm9yJztcbmltcG9ydCB0eXBlIHsgU2V0Tm90aWZpY2F0aW9uQWN0aW9uIH0gZnJvbSAnLi4vYWN0aW9ucy9zZXROb3RpZmljYXRpb24nO1xuXG50eXBlIE5vdGlmaWNhdGlvbnNBY3Rpb24gPSBEaXNtaXNzTm90aWZpY2F0aW9uQWN0aW9uIHwgU2FnYUVycm9yQWN0aW9uIHwgU2V0Tm90aWZpY2F0aW9uQWN0aW9uO1xudHlwZSBOb3RpZmljYXRpb25zU3RhdGUgPSBSZWNvcmQ8c3RyaW5nLCBOb3RpZmljYXRpb24+O1xuXG5jb25zdCBERUZBVUxUX1NUQVRFOiBOb3RpZmljYXRpb25zU3RhdGUgPSB7fTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTm90aWZpY2F0aW9uc1JlZHVjZXIoe1xuICBEYXRlXG59OiBHbG9iYWxTY29wZVBvbnlmaWxsKTogUmVkdWNlcjxOb3RpZmljYXRpb25zU3RhdGUsIE5vdGlmaWNhdGlvbnNBY3Rpb24+IHtcbiAgcmV0dXJuIGZ1bmN0aW9uIG5vdGlmaWNhdGlvbnMoXG4gICAgc3RhdGU6IE5vdGlmaWNhdGlvbnNTdGF0ZSA9IERFRkFVTFRfU1RBVEUsXG4gICAgYWN0aW9uOiBOb3RpZmljYXRpb25zQWN0aW9uXG4gICk6IE5vdGlmaWNhdGlvbnNTdGF0ZSB7XG4gICAgY29uc3QgeyB0eXBlIH0gPSBhY3Rpb247XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcblxuICAgIGlmICh0eXBlID09PSBESVNNSVNTX05PVElGSUNBVElPTikge1xuICAgICAgc3RhdGUgPSB1cGRhdGVJbihzdGF0ZSwgW2FjdGlvbi5wYXlsb2FkLmlkXSk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBTQUdBX0VSUk9SKSB7XG4gICAgICBzdGF0ZSA9IHVwZGF0ZUluKHN0YXRlLCBbJ2Nvbm5lY3Rpdml0eXN0YXR1cycsICdtZXNzYWdlJ10sICgpID0+ICdqYXZhc2NyaXB0ZXJyb3InKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFNFVF9OT1RJRklDQVRJT04pIHtcbiAgICAgIGNvbnN0IHsgYWx0LCBkYXRhLCBpZCwgbGV2ZWwsIG1lc3NhZ2UgfSA9IGFjdGlvbi5wYXlsb2FkO1xuXG4gICAgICBpZiAoIWlzRm9yYmlkZGVuUHJvcGVydHlOYW1lKGlkKSkge1xuICAgICAgICAvLyBNaXRpZ2F0ZWQgdGhyb3VnaCBkZW55bGlzdGluZy5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHNlY3VyaXR5L2RldGVjdC1vYmplY3QtaW5qZWN0aW9uXG4gICAgICAgIGNvbnN0IG5vdGlmaWNhdGlvbiA9IHN0YXRlW2lkXTtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgIW5vdGlmaWNhdGlvbiB8fFxuICAgICAgICAgIGFsdCAhPT0gbm90aWZpY2F0aW9uLmFsdCB8fFxuICAgICAgICAgICFPYmplY3QuaXMoZGF0YSwgbm90aWZpY2F0aW9uLmRhdGEpIHx8XG4gICAgICAgICAgbGV2ZWwgIT09IG5vdGlmaWNhdGlvbi5sZXZlbCB8fFxuICAgICAgICAgIG1lc3NhZ2UgIT09IG5vdGlmaWNhdGlvbi5tZXNzYWdlXG4gICAgICAgICkge1xuICAgICAgICAgIHN0YXRlID0gdXBkYXRlSW4oc3RhdGUsIFtpZF0sICgpID0+ICh7XG4gICAgICAgICAgICBhbHQsXG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICBsZXZlbCxcbiAgICAgICAgICAgIG1lc3NhZ2UsXG4gICAgICAgICAgICB0aW1lc3RhbXA6IG5vd1xuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzdGF0ZTtcbiAgfTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBWUEsSUFBTUEsYUFBaUMsR0FBRyxFQUExQzs7QUFFZSxTQUFTQywwQkFBVCxPQUUyRDtFQUFBLElBRHhFQyxJQUN3RSxRQUR4RUEsSUFDd0U7RUFDeEUsT0FBTyxTQUFTQyxhQUFULEdBR2U7SUFBQSxJQUZwQkMsS0FFb0IsdUVBRlFKLGFBRVI7SUFBQSxJQURwQkssTUFDb0I7SUFDcEIsSUFBUUMsSUFBUixHQUFpQkQsTUFBakIsQ0FBUUMsSUFBUjtJQUNBLElBQU1DLEdBQUcsR0FBR0wsSUFBSSxDQUFDSyxHQUFMLEVBQVo7O0lBRUEsSUFBSUQsSUFBSSxLQUFLRSx5Q0FBYixFQUFtQztNQUNqQ0osS0FBSyxHQUFHLElBQUFLLDBCQUFBLEVBQVNMLEtBQVQsRUFBZ0IsQ0FBQ0MsTUFBTSxDQUFDSyxPQUFQLENBQWVDLEVBQWhCLENBQWhCLENBQVI7SUFDRCxDQUZELE1BRU8sSUFBSUwsSUFBSSxLQUFLTSxxQkFBYixFQUF5QjtNQUM5QlIsS0FBSyxHQUFHLElBQUFLLDBCQUFBLEVBQVNMLEtBQVQsRUFBZ0IsQ0FBQyxvQkFBRCxFQUF1QixTQUF2QixDQUFoQixFQUFtRDtRQUFBLE9BQU0saUJBQU47TUFBQSxDQUFuRCxDQUFSO0lBQ0QsQ0FGTSxNQUVBLElBQUlFLElBQUksS0FBS08saUNBQWIsRUFBK0I7TUFDcEMsc0JBQTBDUixNQUFNLENBQUNLLE9BQWpEO01BQUEsSUFBUUksR0FBUixtQkFBUUEsR0FBUjtNQUFBLElBQWFDLElBQWIsbUJBQWFBLElBQWI7TUFBQSxJQUFtQkosRUFBbkIsbUJBQW1CQSxFQUFuQjtNQUFBLElBQXVCSyxLQUF2QixtQkFBdUJBLEtBQXZCO01BQUEsSUFBOEJDLE9BQTlCLG1CQUE4QkEsT0FBOUI7O01BRUEsSUFBSSxDQUFDLElBQUFDLG1DQUFBLEVBQXdCUCxFQUF4QixDQUFMLEVBQWtDO1FBQ2hDO1FBQ0E7UUFDQSxJQUFNUSxZQUFZLEdBQUdmLEtBQUssQ0FBQ08sRUFBRCxDQUExQjs7UUFFQSxJQUNFLENBQUNRLFlBQUQsSUFDQUwsR0FBRyxLQUFLSyxZQUFZLENBQUNMLEdBRHJCLElBRUEsQ0FBQ00sTUFBTSxDQUFDQyxFQUFQLENBQVVOLElBQVYsRUFBZ0JJLFlBQVksQ0FBQ0osSUFBN0IsQ0FGRCxJQUdBQyxLQUFLLEtBQUtHLFlBQVksQ0FBQ0gsS0FIdkIsSUFJQUMsT0FBTyxLQUFLRSxZQUFZLENBQUNGLE9BTDNCLEVBTUU7VUFDQWIsS0FBSyxHQUFHLElBQUFLLDBCQUFBLEVBQVNMLEtBQVQsRUFBZ0IsQ0FBQ08sRUFBRCxDQUFoQixFQUFzQjtZQUFBLE9BQU87Y0FDbkNHLEdBQUcsRUFBSEEsR0FEbUM7Y0FFbkNDLElBQUksRUFBSkEsSUFGbUM7Y0FHbkNKLEVBQUUsRUFBRkEsRUFIbUM7Y0FJbkNLLEtBQUssRUFBTEEsS0FKbUM7Y0FLbkNDLE9BQU8sRUFBUEEsT0FMbUM7Y0FNbkNLLFNBQVMsRUFBRWY7WUFOd0IsQ0FBUDtVQUFBLENBQXRCLENBQVI7UUFRRDtNQUNGO0lBQ0Y7O0lBRUQsT0FBT0gsS0FBUDtFQUNELENBdkNEO0FBd0NEIn0=