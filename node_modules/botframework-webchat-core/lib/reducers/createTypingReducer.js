"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = createLastTypingReducer;

var _simpleUpdateIn = _interopRequireDefault(require("simple-update-in"));

var _incomingActivity = require("../actions/incomingActivity");

var _postActivity = require("../actions/postActivity");

/* eslint no-case-declarations: "off" */

/* eslint no-unused-vars: "off" */
var DEFAULT_STATE = {};

function createLastTypingReducer(_ref) {
  var Date = _ref.Date;
  return function lastTyping() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_STATE;

    var _ref2 = arguments.length > 1 ? arguments[1] : undefined,
        payload = _ref2.payload,
        type = _ref2.type;

    if (type === _incomingActivity.INCOMING_ACTIVITY || type === _postActivity.POST_ACTIVITY_PENDING) {
      var _payload$activity = payload.activity,
          _payload$activity$fro = _payload$activity.from,
          id = _payload$activity$fro.id,
          name = _payload$activity$fro.name,
          role = _payload$activity$fro.role,
          activityType = _payload$activity.type;

      if (activityType === 'typing') {
        var now = Date.now();
        state = (0, _simpleUpdateIn["default"])(state, [id, 'at'], function (at) {
          return at || now;
        });
        state = (0, _simpleUpdateIn["default"])(state, [id, 'last'], function () {
          return now;
        });
        state = (0, _simpleUpdateIn["default"])(state, [id, 'name'], function () {
          return name;
        });
        state = (0, _simpleUpdateIn["default"])(state, [id, 'role'], function () {
          return role;
        });
      } else if (activityType === 'message') {
        state = (0, _simpleUpdateIn["default"])(state, [id]);
      }
    }

    return state;
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJERUZBVUxUX1NUQVRFIiwiY3JlYXRlTGFzdFR5cGluZ1JlZHVjZXIiLCJEYXRlIiwibGFzdFR5cGluZyIsInN0YXRlIiwicGF5bG9hZCIsInR5cGUiLCJJTkNPTUlOR19BQ1RJVklUWSIsIlBPU1RfQUNUSVZJVFlfUEVORElORyIsImFjdGl2aXR5IiwiZnJvbSIsImlkIiwibmFtZSIsInJvbGUiLCJhY3Rpdml0eVR5cGUiLCJub3ciLCJ1cGRhdGVJbiIsImF0Il0sInNvdXJjZVJvb3QiOiJjb3JlOi8vLyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3JlZHVjZXJzL2NyZWF0ZVR5cGluZ1JlZHVjZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50IG5vLWNhc2UtZGVjbGFyYXRpb25zOiBcIm9mZlwiICovXG4vKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cblxuaW1wb3J0IHVwZGF0ZUluIGZyb20gJ3NpbXBsZS11cGRhdGUtaW4nO1xuXG5pbXBvcnQgeyBJTkNPTUlOR19BQ1RJVklUWSB9IGZyb20gJy4uL2FjdGlvbnMvaW5jb21pbmdBY3Rpdml0eSc7XG5pbXBvcnQgeyBQT1NUX0FDVElWSVRZX1BFTkRJTkcgfSBmcm9tICcuLi9hY3Rpb25zL3Bvc3RBY3Rpdml0eSc7XG5cbmltcG9ydCB0eXBlIHsgR2xvYmFsU2NvcGVQb255ZmlsbCB9IGZyb20gJy4uL3R5cGVzL0dsb2JhbFNjb3BlUG9ueWZpbGwnO1xuaW1wb3J0IHR5cGUgeyBJbmNvbWluZ0FjdGl2aXR5QWN0aW9uIH0gZnJvbSAnLi4vYWN0aW9ucy9pbmNvbWluZ0FjdGl2aXR5JztcbmltcG9ydCB0eXBlIHsgUG9zdEFjdGl2aXR5UGVuZGluZ0FjdGlvbiB9IGZyb20gJy4uL2FjdGlvbnMvcG9zdEFjdGl2aXR5JztcbmltcG9ydCB0eXBlIHsgUmVkdWNlciB9IGZyb20gJ3JlZHV4JztcblxudHlwZSBUeXBpbmdTdGF0ZSA9IFJlY29yZDxcbiAgc3RyaW5nLFxuICB7XG4gICAgYXQ6IG51bWJlcjtcbiAgICBsYXN0OiBudW1iZXI7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHJvbGU6ICdib3QnIHwgJ2NoYW5uZWwnIHwgJ3VzZXInO1xuICB9XG4+O1xudHlwZSBUeXBpbmdBY3Rpb24gPSBJbmNvbWluZ0FjdGl2aXR5QWN0aW9uIHwgUG9zdEFjdGl2aXR5UGVuZGluZ0FjdGlvbjtcblxuY29uc3QgREVGQVVMVF9TVEFURTogVHlwaW5nU3RhdGUgPSB7fTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTGFzdFR5cGluZ1JlZHVjZXIoeyBEYXRlIH06IEdsb2JhbFNjb3BlUG9ueWZpbGwpOiBSZWR1Y2VyPFR5cGluZ1N0YXRlLCBUeXBpbmdBY3Rpb24+IHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGxhc3RUeXBpbmcoc3RhdGU6IFR5cGluZ1N0YXRlID0gREVGQVVMVF9TVEFURSwgeyBwYXlsb2FkLCB0eXBlIH06IFR5cGluZ0FjdGlvbik6IFR5cGluZ1N0YXRlIHtcbiAgICBpZiAodHlwZSA9PT0gSU5DT01JTkdfQUNUSVZJVFkgfHwgdHlwZSA9PT0gUE9TVF9BQ1RJVklUWV9QRU5ESU5HKSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGFjdGl2aXR5OiB7XG4gICAgICAgICAgZnJvbTogeyBpZCwgbmFtZSwgcm9sZSB9LFxuICAgICAgICAgIHR5cGU6IGFjdGl2aXR5VHlwZVxuICAgICAgICB9XG4gICAgICB9ID0gcGF5bG9hZDtcblxuICAgICAgaWYgKGFjdGl2aXR5VHlwZSA9PT0gJ3R5cGluZycpIHtcbiAgICAgICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcblxuICAgICAgICBzdGF0ZSA9IHVwZGF0ZUluKHN0YXRlLCBbaWQsICdhdCddLCBhdCA9PiBhdCB8fCBub3cpO1xuICAgICAgICBzdGF0ZSA9IHVwZGF0ZUluKHN0YXRlLCBbaWQsICdsYXN0J10sICgpID0+IG5vdyk7XG4gICAgICAgIHN0YXRlID0gdXBkYXRlSW4oc3RhdGUsIFtpZCwgJ25hbWUnXSwgKCkgPT4gbmFtZSk7XG4gICAgICAgIHN0YXRlID0gdXBkYXRlSW4oc3RhdGUsIFtpZCwgJ3JvbGUnXSwgKCkgPT4gcm9sZSk7XG4gICAgICB9IGVsc2UgaWYgKGFjdGl2aXR5VHlwZSA9PT0gJ21lc3NhZ2UnKSB7XG4gICAgICAgIHN0YXRlID0gdXBkYXRlSW4oc3RhdGUsIFtpZF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzdGF0ZTtcbiAgfTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBR0E7O0FBRUE7O0FBQ0E7O0FBTkE7O0FBQ0E7QUF1QkEsSUFBTUEsYUFBMEIsR0FBRyxFQUFuQzs7QUFFZSxTQUFTQyx1QkFBVCxPQUFvRztFQUFBLElBQWpFQyxJQUFpRSxRQUFqRUEsSUFBaUU7RUFDakgsT0FBTyxTQUFTQyxVQUFULEdBQXNHO0lBQUEsSUFBbEZDLEtBQWtGLHVFQUE3REosYUFBNkQ7O0lBQUE7SUFBQSxJQUE1Q0ssT0FBNEMsU0FBNUNBLE9BQTRDO0lBQUEsSUFBbkNDLElBQW1DLFNBQW5DQSxJQUFtQzs7SUFDM0csSUFBSUEsSUFBSSxLQUFLQyxtQ0FBVCxJQUE4QkQsSUFBSSxLQUFLRSxtQ0FBM0MsRUFBa0U7TUFDaEUsd0JBS0lILE9BTEosQ0FDRUksUUFERjtNQUFBLDhDQUVJQyxJQUZKO01BQUEsSUFFWUMsRUFGWix5QkFFWUEsRUFGWjtNQUFBLElBRWdCQyxJQUZoQix5QkFFZ0JBLElBRmhCO01BQUEsSUFFc0JDLElBRnRCLHlCQUVzQkEsSUFGdEI7TUFBQSxJQUdVQyxZQUhWLHFCQUdJUixJQUhKOztNQU9BLElBQUlRLFlBQVksS0FBSyxRQUFyQixFQUErQjtRQUM3QixJQUFNQyxHQUFHLEdBQUdiLElBQUksQ0FBQ2EsR0FBTCxFQUFaO1FBRUFYLEtBQUssR0FBRyxJQUFBWSwwQkFBQSxFQUFTWixLQUFULEVBQWdCLENBQUNPLEVBQUQsRUFBSyxJQUFMLENBQWhCLEVBQTRCLFVBQUFNLEVBQUU7VUFBQSxPQUFJQSxFQUFFLElBQUlGLEdBQVY7UUFBQSxDQUE5QixDQUFSO1FBQ0FYLEtBQUssR0FBRyxJQUFBWSwwQkFBQSxFQUFTWixLQUFULEVBQWdCLENBQUNPLEVBQUQsRUFBSyxNQUFMLENBQWhCLEVBQThCO1VBQUEsT0FBTUksR0FBTjtRQUFBLENBQTlCLENBQVI7UUFDQVgsS0FBSyxHQUFHLElBQUFZLDBCQUFBLEVBQVNaLEtBQVQsRUFBZ0IsQ0FBQ08sRUFBRCxFQUFLLE1BQUwsQ0FBaEIsRUFBOEI7VUFBQSxPQUFNQyxJQUFOO1FBQUEsQ0FBOUIsQ0FBUjtRQUNBUixLQUFLLEdBQUcsSUFBQVksMEJBQUEsRUFBU1osS0FBVCxFQUFnQixDQUFDTyxFQUFELEVBQUssTUFBTCxDQUFoQixFQUE4QjtVQUFBLE9BQU1FLElBQU47UUFBQSxDQUE5QixDQUFSO01BQ0QsQ0FQRCxNQU9PLElBQUlDLFlBQVksS0FBSyxTQUFyQixFQUFnQztRQUNyQ1YsS0FBSyxHQUFHLElBQUFZLDBCQUFBLEVBQVNaLEtBQVQsRUFBZ0IsQ0FBQ08sRUFBRCxDQUFoQixDQUFSO01BQ0Q7SUFDRjs7SUFFRCxPQUFPUCxLQUFQO0VBQ0QsQ0F0QkQ7QUF1QkQifQ==