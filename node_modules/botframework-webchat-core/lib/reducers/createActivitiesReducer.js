"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = createActivitiesReducer;

var _simpleUpdateIn = _interopRequireDefault(require("simple-update-in"));

var _deleteActivity = require("../actions/deleteActivity");

var _incomingActivity = require("../actions/incomingActivity");

var _markActivity = require("../actions/markActivity");

var _postActivity = require("../actions/postActivity");

var _SendStatus = require("../types/internal/SendStatus");

/* eslint no-magic-numbers: ["error", { "ignore": [0, 1, -1] }] */
var DEFAULT_STATE = [];
var DIRECT_LINE_PLACEHOLDER_URL = 'https://docs.botframework.com/static/devportal/client/images/bot-framework-default-placeholder.png';

function getClientActivityID(activity) {
  var _activity$channelData;

  return (_activity$channelData = activity.channelData) === null || _activity$channelData === void 0 ? void 0 : _activity$channelData.clientActivityID;
}

function findByClientActivityID(clientActivityID) {
  return function (activity) {
    return getClientActivityID(activity) === clientActivityID;
  };
}

function patchActivity(activity, lastActivity, _ref) {
  var Date = _ref.Date;
  // Direct Line channel will return a placeholder image for the user-uploaded image.
  // As observed, the URL for the placeholder image is https://docs.botframework.com/static/devportal/client/images/bot-framework-default-placeholder.png.
  // To make our code simpler, we are removing the value if "contentUrl" is pointing to a placeholder image.
  // TODO: [P2] #2869 This "contentURL" removal code should be moved to DirectLineJS adapter.
  // Also, if the "contentURL" starts with "blob:", this means the user is uploading a file (the URL is constructed by URL.createObjectURL)
  // Although the copy/reference of the file is temporary in-memory, to make the UX consistent across page refresh, we do not allow the user to re-download the file either.
  activity = (0, _simpleUpdateIn["default"])(activity, ['attachments', function () {
    return true;
  }, 'contentUrl'], function (contentUrl) {
    if (contentUrl !== DIRECT_LINE_PLACEHOLDER_URL && !/^blob:/i.test(contentUrl)) {
      return contentUrl;
    }
  }); // If the message does not have sequence ID, use these fallback values:
  // 1. "timestamp" field
  //    - outgoing activity will not have "timestamp" field
  // 2. last activity sequence ID (or 0) + 0.001
  //    - best effort to put this message the last one in the chat history

  activity = (0, _simpleUpdateIn["default"])(activity, ['channelData', 'webchat:sequence-id'], function (sequenceId) {
    var _lastActivity$channel;

    return typeof sequenceId === 'number' ? sequenceId : typeof activity.timestamp !== 'undefined' ? +new Date(activity.timestamp) : // We assume there will be no more than 1,000 messages sent before receiving server response.
    // If there are more than 1,000 messages, some messages will get reordered and appear jumpy after receiving server response.
    // eslint-disable-next-line no-magic-numbers
    ((lastActivity === null || lastActivity === void 0 ? void 0 : (_lastActivity$channel = lastActivity.channelData) === null || _lastActivity$channel === void 0 ? void 0 : _lastActivity$channel['webchat:sequence-id']) || 0) + 0.001;
  }); // TODO: [P1] #3953 We should move this patching logic to a DLJS wrapper for simplicity.

  activity = (0, _simpleUpdateIn["default"])(activity, ['channelData', 'webchat:sequence-id'], function (sequenceId) {
    return typeof sequenceId === 'number' ? sequenceId : +new Date(activity.timestamp || 0) || 0;
  });
  return activity;
}

function upsertActivityWithSort(activities, nextActivity, ponyfill) {
  nextActivity = patchActivity(nextActivity, activities[activities.length - 1], ponyfill);
  var _nextActivity = nextActivity,
      _nextActivity$channel = _nextActivity.channelData;
  _nextActivity$channel = _nextActivity$channel === void 0 ? {} : _nextActivity$channel;
  var nextClientActivityID = _nextActivity$channel.clientActivityID,
      nextSequenceId = _nextActivity$channel['webchat:sequence-id'];
  var nextActivities = activities.filter(function (_ref2) {
    var _ref2$channelData = _ref2.channelData;
    _ref2$channelData = _ref2$channelData === void 0 ? {} : _ref2$channelData;
    var clientActivityID = _ref2$channelData.clientActivityID,
        id = _ref2.id;
    return (// We will remove all "sending messages" activities and activities with same ID
      // "clientActivityID" is unique and used to track if the message has been sent and echoed back from the server
      !(nextClientActivityID && clientActivityID === nextClientActivityID) && !(id && id === nextActivity.id)
    );
  }); // Then, find the right (sorted) place to insert the new activity at, based on sequence ID.

  var indexToInsert = nextActivities.findIndex(function (_ref3) {
    var _ref3$channelData = _ref3.channelData;
    _ref3$channelData = _ref3$channelData === void 0 ? {} : _ref3$channelData;
    var sequenceId = _ref3$channelData['webchat:sequence-id'];
    return (sequenceId || 0) > (nextSequenceId || 0);
  }); // If no right place are found, append it

  nextActivities.splice(~indexToInsert ? indexToInsert : nextActivities.length, 0, nextActivity);
  return nextActivities;
}

function createActivitiesReducer(ponyfill) {
  return function activities() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_STATE;
    var action = arguments.length > 1 ? arguments[1] : undefined;

    switch (action.type) {
      case _deleteActivity.DELETE_ACTIVITY:
        state = (0, _simpleUpdateIn["default"])(state, [function (_ref4) {
          var id = _ref4.id;
          return id === action.payload.activityID;
        }]);
        break;

      case _markActivity.MARK_ACTIVITY:
        {
          var payload = action.payload;
          state = (0, _simpleUpdateIn["default"])(state, [function (_ref5) {
            var id = _ref5.id;
            return id === payload.activityID;
          }, 'channelData', payload.name], function () {
            return payload.value;
          });
        }
        break;

      case _postActivity.POST_ACTIVITY_PENDING:
        {
          var _activity = action.payload.activity; // `channelData.state` is being deprecated in favor of `channelData['webchat:send-status']`.
          // Please refer to #4362 for details. Remove on or after 2024-07-31.

          _activity = (0, _simpleUpdateIn["default"])(_activity, ['channelData', 'state'], function () {
            return _SendStatus.SENDING;
          });
          _activity = (0, _simpleUpdateIn["default"])(_activity, ['channelData', 'webchat:send-status'], function () {
            return _SendStatus.SENDING;
          });
          state = upsertActivityWithSort(state, _activity, ponyfill);
        }
        break;

      case _postActivity.POST_ACTIVITY_IMPEDED:
        state = (0, _simpleUpdateIn["default"])(state, // `channelData.state` is being deprecated in favor of `channelData['webchat:send-status']`.
        // Please refer to #4362 for details. Remove on or after 2024-07-31.
        [findByClientActivityID(action.meta.clientActivityID), 'channelData', 'state'], function () {
          return _SendStatus.SEND_FAILED;
        });
        break;

      case _postActivity.POST_ACTIVITY_REJECTED:
        state = (0, _simpleUpdateIn["default"])(state, [findByClientActivityID(action.meta.clientActivityID)], function (activity) {
          activity = (0, _simpleUpdateIn["default"])(activity, ['channelData', 'state'], function () {
            return _SendStatus.SEND_FAILED;
          });
          return (0, _simpleUpdateIn["default"])(activity, ['channelData', 'webchat:send-status'], function () {
            return _SendStatus.SEND_FAILED;
          });
        });
        break;

      case _postActivity.POST_ACTIVITY_FULFILLED:
        state = (0, _simpleUpdateIn["default"])(state, [findByClientActivityID(action.meta.clientActivityID)], function () {
          // We will replace the activity with the version from the server
          var activity = (0, _simpleUpdateIn["default"])(patchActivity(action.payload.activity, state[state.length - 1], ponyfill), // `channelData.state` is being deprecated in favor of `channelData['webchat:send-status']`.
          // Please refer to #4362 for details. Remove on or after 2024-07-31.
          ['channelData', 'state'], function () {
            return _SendStatus.SENT;
          });
          return (0, _simpleUpdateIn["default"])(activity, ['channelData', 'webchat:send-status'], function () {
            return _SendStatus.SENT;
          });
        });
        break;

      case _incomingActivity.INCOMING_ACTIVITY:
        {
          var _activity2 = action.payload.activity; // If the incoming activity is an echo back, we should keep the existing `channelData['webchat:send-status']` field.
          //
          // Otherwise, it will fail following scenario:
          //
          // 1. Send an activity to the service
          // 2. Service echoed back the activity
          // 3. Service did NOT return `postActivity` call
          // -  EXPECT: `channelData['webchat:send-status']` should be "sending".
          // -  ACTUAL: `channelData['webchat:send-status']` is `undefined` because the activity get overwritten by the echo back activity.
          //            The echo back activity contains no `channelData['webchat:send-status']`.
          //
          // While we are looking out for the scenario above, we should also look at the following scenarios:
          //
          // 1. Service restore chat history, including activities sent from the user. These activities has the following characteristics:
          //    - They do not have `channelData['webchat:send-status']`;
          //    - They do not have an ongoing `postActivitySaga`;
          //    - They should not previously appear in the chat history.
          // 2. We need to mark these activities as "sent".
          //
          // In the future, when we revamp our object model, we could use a different signal so we don't need the code below, for example:
          //
          // -  If `activity.id` is set, it is "sent", because the chat service assigned an ID to the activity;
          // -  If `activity.id` is not set, it is either "sending" or "send failed";
          //    - If `activity.channelData['webchat:send-failed-reason']` is set, it is "send failed" with the reason, otherwise;
          //    - It is sending.

          if (_activity2.from.role === 'user') {
            var _activity3 = _activity2,
                id = _activity3.id;
            var clientActivityID = getClientActivityID(_activity2);
            var existingActivity = state.find(function (activity) {
              return clientActivityID && getClientActivityID(activity) === clientActivityID || id && activity.id === id;
            });

            if (existingActivity) {
              var sendStatus = existingActivity.channelData['webchat:send-status'];

              if (sendStatus === _SendStatus.SENDING || sendStatus === _SendStatus.SEND_FAILED || sendStatus === _SendStatus.SENT) {
                _activity2 = (0, _simpleUpdateIn["default"])(_activity2, ['channelData', 'webchat:send-status'], function () {
                  return sendStatus;
                });
              }
            } else {
              // If there are no existing activity, probably this activity is restored from chat history.
              // All outgoing activities restored from service means they arrived at the service successfully.
              // Thus, we are marking them as "sent".
              _activity2 = (0, _simpleUpdateIn["default"])(_activity2, ['channelData', 'webchat:send-status'], function () {
                return _SendStatus.SENT;
              });
            }
          }

          state = upsertActivityWithSort(state, _activity2, ponyfill);
        }
        break;

      default:
        break;
    }

    return state;
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJERUZBVUxUX1NUQVRFIiwiRElSRUNUX0xJTkVfUExBQ0VIT0xERVJfVVJMIiwiZ2V0Q2xpZW50QWN0aXZpdHlJRCIsImFjdGl2aXR5IiwiY2hhbm5lbERhdGEiLCJjbGllbnRBY3Rpdml0eUlEIiwiZmluZEJ5Q2xpZW50QWN0aXZpdHlJRCIsInBhdGNoQWN0aXZpdHkiLCJsYXN0QWN0aXZpdHkiLCJEYXRlIiwidXBkYXRlSW4iLCJjb250ZW50VXJsIiwidGVzdCIsInNlcXVlbmNlSWQiLCJ0aW1lc3RhbXAiLCJ1cHNlcnRBY3Rpdml0eVdpdGhTb3J0IiwiYWN0aXZpdGllcyIsIm5leHRBY3Rpdml0eSIsInBvbnlmaWxsIiwibGVuZ3RoIiwibmV4dENsaWVudEFjdGl2aXR5SUQiLCJuZXh0U2VxdWVuY2VJZCIsIm5leHRBY3Rpdml0aWVzIiwiZmlsdGVyIiwiaWQiLCJpbmRleFRvSW5zZXJ0IiwiZmluZEluZGV4Iiwic3BsaWNlIiwiY3JlYXRlQWN0aXZpdGllc1JlZHVjZXIiLCJzdGF0ZSIsImFjdGlvbiIsInR5cGUiLCJERUxFVEVfQUNUSVZJVFkiLCJwYXlsb2FkIiwiYWN0aXZpdHlJRCIsIk1BUktfQUNUSVZJVFkiLCJuYW1lIiwidmFsdWUiLCJQT1NUX0FDVElWSVRZX1BFTkRJTkciLCJTRU5ESU5HIiwiUE9TVF9BQ1RJVklUWV9JTVBFREVEIiwibWV0YSIsIlNFTkRfRkFJTEVEIiwiUE9TVF9BQ1RJVklUWV9SRUpFQ1RFRCIsIlBPU1RfQUNUSVZJVFlfRlVMRklMTEVEIiwiU0VOVCIsIklOQ09NSU5HX0FDVElWSVRZIiwiZnJvbSIsInJvbGUiLCJleGlzdGluZ0FjdGl2aXR5IiwiZmluZCIsInNlbmRTdGF0dXMiXSwic291cmNlUm9vdCI6ImNvcmU6Ly8vIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcmVkdWNlcnMvY3JlYXRlQWN0aXZpdGllc1JlZHVjZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50IG5vLW1hZ2ljLW51bWJlcnM6IFtcImVycm9yXCIsIHsgXCJpZ25vcmVcIjogWzAsIDEsIC0xXSB9XSAqL1xuXG5pbXBvcnQgdXBkYXRlSW4gZnJvbSAnc2ltcGxlLXVwZGF0ZS1pbic7XG5cbmltcG9ydCB7IERFTEVURV9BQ1RJVklUWSB9IGZyb20gJy4uL2FjdGlvbnMvZGVsZXRlQWN0aXZpdHknO1xuaW1wb3J0IHsgSU5DT01JTkdfQUNUSVZJVFkgfSBmcm9tICcuLi9hY3Rpb25zL2luY29taW5nQWN0aXZpdHknO1xuaW1wb3J0IHsgTUFSS19BQ1RJVklUWSB9IGZyb20gJy4uL2FjdGlvbnMvbWFya0FjdGl2aXR5JztcbmltcG9ydCB7XG4gIFBPU1RfQUNUSVZJVFlfRlVMRklMTEVELFxuICBQT1NUX0FDVElWSVRZX0lNUEVERUQsXG4gIFBPU1RfQUNUSVZJVFlfUEVORElORyxcbiAgUE9TVF9BQ1RJVklUWV9SRUpFQ1RFRFxufSBmcm9tICcuLi9hY3Rpb25zL3Bvc3RBY3Rpdml0eSc7XG5pbXBvcnQgeyBTRU5EX0ZBSUxFRCwgU0VORElORywgU0VOVCB9IGZyb20gJy4uL3R5cGVzL2ludGVybmFsL1NlbmRTdGF0dXMnO1xuXG5pbXBvcnQgdHlwZSB7IERlbGV0ZUFjdGl2aXR5QWN0aW9uIH0gZnJvbSAnLi4vYWN0aW9ucy9kZWxldGVBY3Rpdml0eSc7XG5pbXBvcnQgdHlwZSB7IEdsb2JhbFNjb3BlUG9ueWZpbGwgfSBmcm9tICcuLi90eXBlcy9HbG9iYWxTY29wZVBvbnlmaWxsJztcbmltcG9ydCB0eXBlIHsgSW5jb21pbmdBY3Rpdml0eUFjdGlvbiB9IGZyb20gJy4uL2FjdGlvbnMvaW5jb21pbmdBY3Rpdml0eSc7XG5pbXBvcnQgdHlwZSB7IE1hcmtBY3Rpdml0eUFjdGlvbiB9IGZyb20gJy4uL2FjdGlvbnMvbWFya0FjdGl2aXR5JztcbmltcG9ydCB0eXBlIHtcbiAgUG9zdEFjdGl2aXR5RnVsZmlsbGVkQWN0aW9uLFxuICBQb3N0QWN0aXZpdHlJbXBlZGVkQWN0aW9uLFxuICBQb3N0QWN0aXZpdHlQZW5kaW5nQWN0aW9uLFxuICBQb3N0QWN0aXZpdHlSZWplY3RlZEFjdGlvblxufSBmcm9tICcuLi9hY3Rpb25zL3Bvc3RBY3Rpdml0eSc7XG5pbXBvcnQgdHlwZSB7IFJlZHVjZXIgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgdHlwZSB7IFdlYkNoYXRBY3Rpdml0eSB9IGZyb20gJy4uL3R5cGVzL1dlYkNoYXRBY3Rpdml0eSc7XG5cbnR5cGUgQWN0aXZpdGllc0FjdGlvbiA9XG4gIHwgRGVsZXRlQWN0aXZpdHlBY3Rpb25cbiAgfCBJbmNvbWluZ0FjdGl2aXR5QWN0aW9uXG4gIHwgTWFya0FjdGl2aXR5QWN0aW9uXG4gIHwgUG9zdEFjdGl2aXR5RnVsZmlsbGVkQWN0aW9uXG4gIHwgUG9zdEFjdGl2aXR5SW1wZWRlZEFjdGlvblxuICB8IFBvc3RBY3Rpdml0eVBlbmRpbmdBY3Rpb25cbiAgfCBQb3N0QWN0aXZpdHlSZWplY3RlZEFjdGlvbjtcblxudHlwZSBBY3Rpdml0aWVzU3RhdGUgPSBXZWJDaGF0QWN0aXZpdHlbXTtcblxuY29uc3QgREVGQVVMVF9TVEFURTogQWN0aXZpdGllc1N0YXRlID0gW107XG5jb25zdCBESVJFQ1RfTElORV9QTEFDRUhPTERFUl9VUkwgPVxuICAnaHR0cHM6Ly9kb2NzLmJvdGZyYW1ld29yay5jb20vc3RhdGljL2RldnBvcnRhbC9jbGllbnQvaW1hZ2VzL2JvdC1mcmFtZXdvcmstZGVmYXVsdC1wbGFjZWhvbGRlci5wbmcnO1xuXG5mdW5jdGlvbiBnZXRDbGllbnRBY3Rpdml0eUlEKGFjdGl2aXR5OiBXZWJDaGF0QWN0aXZpdHkpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICByZXR1cm4gYWN0aXZpdHkuY2hhbm5lbERhdGE/LmNsaWVudEFjdGl2aXR5SUQ7XG59XG5cbmZ1bmN0aW9uIGZpbmRCeUNsaWVudEFjdGl2aXR5SUQoY2xpZW50QWN0aXZpdHlJRDogc3RyaW5nKTogKGFjdGl2aXR5OiBXZWJDaGF0QWN0aXZpdHkpID0+IGJvb2xlYW4ge1xuICByZXR1cm4gKGFjdGl2aXR5OiBXZWJDaGF0QWN0aXZpdHkpID0+IGdldENsaWVudEFjdGl2aXR5SUQoYWN0aXZpdHkpID09PSBjbGllbnRBY3Rpdml0eUlEO1xufVxuXG5mdW5jdGlvbiBwYXRjaEFjdGl2aXR5KFxuICBhY3Rpdml0eTogV2ViQ2hhdEFjdGl2aXR5LFxuICBsYXN0QWN0aXZpdHk6IFdlYkNoYXRBY3Rpdml0eSxcbiAgeyBEYXRlIH06IEdsb2JhbFNjb3BlUG9ueWZpbGxcbik6IFdlYkNoYXRBY3Rpdml0eSB7XG4gIC8vIERpcmVjdCBMaW5lIGNoYW5uZWwgd2lsbCByZXR1cm4gYSBwbGFjZWhvbGRlciBpbWFnZSBmb3IgdGhlIHVzZXItdXBsb2FkZWQgaW1hZ2UuXG4gIC8vIEFzIG9ic2VydmVkLCB0aGUgVVJMIGZvciB0aGUgcGxhY2Vob2xkZXIgaW1hZ2UgaXMgaHR0cHM6Ly9kb2NzLmJvdGZyYW1ld29yay5jb20vc3RhdGljL2RldnBvcnRhbC9jbGllbnQvaW1hZ2VzL2JvdC1mcmFtZXdvcmstZGVmYXVsdC1wbGFjZWhvbGRlci5wbmcuXG4gIC8vIFRvIG1ha2Ugb3VyIGNvZGUgc2ltcGxlciwgd2UgYXJlIHJlbW92aW5nIHRoZSB2YWx1ZSBpZiBcImNvbnRlbnRVcmxcIiBpcyBwb2ludGluZyB0byBhIHBsYWNlaG9sZGVyIGltYWdlLlxuXG4gIC8vIFRPRE86IFtQMl0gIzI4NjkgVGhpcyBcImNvbnRlbnRVUkxcIiByZW1vdmFsIGNvZGUgc2hvdWxkIGJlIG1vdmVkIHRvIERpcmVjdExpbmVKUyBhZGFwdGVyLlxuXG4gIC8vIEFsc28sIGlmIHRoZSBcImNvbnRlbnRVUkxcIiBzdGFydHMgd2l0aCBcImJsb2I6XCIsIHRoaXMgbWVhbnMgdGhlIHVzZXIgaXMgdXBsb2FkaW5nIGEgZmlsZSAodGhlIFVSTCBpcyBjb25zdHJ1Y3RlZCBieSBVUkwuY3JlYXRlT2JqZWN0VVJMKVxuICAvLyBBbHRob3VnaCB0aGUgY29weS9yZWZlcmVuY2Ugb2YgdGhlIGZpbGUgaXMgdGVtcG9yYXJ5IGluLW1lbW9yeSwgdG8gbWFrZSB0aGUgVVggY29uc2lzdGVudCBhY3Jvc3MgcGFnZSByZWZyZXNoLCB3ZSBkbyBub3QgYWxsb3cgdGhlIHVzZXIgdG8gcmUtZG93bmxvYWQgdGhlIGZpbGUgZWl0aGVyLlxuXG4gIGFjdGl2aXR5ID0gdXBkYXRlSW4oYWN0aXZpdHksIFsnYXR0YWNobWVudHMnLCAoKSA9PiB0cnVlLCAnY29udGVudFVybCddLCAoY29udGVudFVybDogc3RyaW5nKSA9PiB7XG4gICAgaWYgKGNvbnRlbnRVcmwgIT09IERJUkVDVF9MSU5FX1BMQUNFSE9MREVSX1VSTCAmJiAhL15ibG9iOi9pdS50ZXN0KGNvbnRlbnRVcmwpKSB7XG4gICAgICByZXR1cm4gY29udGVudFVybDtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIElmIHRoZSBtZXNzYWdlIGRvZXMgbm90IGhhdmUgc2VxdWVuY2UgSUQsIHVzZSB0aGVzZSBmYWxsYmFjayB2YWx1ZXM6XG4gIC8vIDEuIFwidGltZXN0YW1wXCIgZmllbGRcbiAgLy8gICAgLSBvdXRnb2luZyBhY3Rpdml0eSB3aWxsIG5vdCBoYXZlIFwidGltZXN0YW1wXCIgZmllbGRcbiAgLy8gMi4gbGFzdCBhY3Rpdml0eSBzZXF1ZW5jZSBJRCAob3IgMCkgKyAwLjAwMVxuICAvLyAgICAtIGJlc3QgZWZmb3J0IHRvIHB1dCB0aGlzIG1lc3NhZ2UgdGhlIGxhc3Qgb25lIGluIHRoZSBjaGF0IGhpc3RvcnlcbiAgYWN0aXZpdHkgPSB1cGRhdGVJbihhY3Rpdml0eSwgWydjaGFubmVsRGF0YScsICd3ZWJjaGF0OnNlcXVlbmNlLWlkJ10sIChzZXF1ZW5jZUlkPzogbnVtYmVyKSA9PlxuICAgIHR5cGVvZiBzZXF1ZW5jZUlkID09PSAnbnVtYmVyJ1xuICAgICAgPyBzZXF1ZW5jZUlkXG4gICAgICA6IHR5cGVvZiBhY3Rpdml0eS50aW1lc3RhbXAgIT09ICd1bmRlZmluZWQnXG4gICAgICA/ICtuZXcgRGF0ZShhY3Rpdml0eS50aW1lc3RhbXApXG4gICAgICA6IC8vIFdlIGFzc3VtZSB0aGVyZSB3aWxsIGJlIG5vIG1vcmUgdGhhbiAxLDAwMCBtZXNzYWdlcyBzZW50IGJlZm9yZSByZWNlaXZpbmcgc2VydmVyIHJlc3BvbnNlLlxuICAgICAgICAvLyBJZiB0aGVyZSBhcmUgbW9yZSB0aGFuIDEsMDAwIG1lc3NhZ2VzLCBzb21lIG1lc3NhZ2VzIHdpbGwgZ2V0IHJlb3JkZXJlZCBhbmQgYXBwZWFyIGp1bXB5IGFmdGVyIHJlY2VpdmluZyBzZXJ2ZXIgcmVzcG9uc2UuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1tYWdpYy1udW1iZXJzXG4gICAgICAgIChsYXN0QWN0aXZpdHk/LmNoYW5uZWxEYXRhPy5bJ3dlYmNoYXQ6c2VxdWVuY2UtaWQnXSB8fCAwKSArIDAuMDAxXG4gICk7XG5cbiAgLy8gVE9ETzogW1AxXSAjMzk1MyBXZSBzaG91bGQgbW92ZSB0aGlzIHBhdGNoaW5nIGxvZ2ljIHRvIGEgRExKUyB3cmFwcGVyIGZvciBzaW1wbGljaXR5LlxuICBhY3Rpdml0eSA9IHVwZGF0ZUluKGFjdGl2aXR5LCBbJ2NoYW5uZWxEYXRhJywgJ3dlYmNoYXQ6c2VxdWVuY2UtaWQnXSwgKHNlcXVlbmNlSWQ6IG51bWJlcikgPT5cbiAgICB0eXBlb2Ygc2VxdWVuY2VJZCA9PT0gJ251bWJlcicgPyBzZXF1ZW5jZUlkIDogK25ldyBEYXRlKGFjdGl2aXR5LnRpbWVzdGFtcCB8fCAwKSB8fCAwXG4gICk7XG5cbiAgcmV0dXJuIGFjdGl2aXR5O1xufVxuXG5mdW5jdGlvbiB1cHNlcnRBY3Rpdml0eVdpdGhTb3J0KFxuICBhY3Rpdml0aWVzOiBXZWJDaGF0QWN0aXZpdHlbXSxcbiAgbmV4dEFjdGl2aXR5OiBXZWJDaGF0QWN0aXZpdHksXG4gIHBvbnlmaWxsOiBHbG9iYWxTY29wZVBvbnlmaWxsXG4pOiBXZWJDaGF0QWN0aXZpdHlbXSB7XG4gIG5leHRBY3Rpdml0eSA9IHBhdGNoQWN0aXZpdHkobmV4dEFjdGl2aXR5LCBhY3Rpdml0aWVzW2FjdGl2aXRpZXMubGVuZ3RoIC0gMV0sIHBvbnlmaWxsKTtcblxuICBjb25zdCB7IGNoYW5uZWxEYXRhOiB7IGNsaWVudEFjdGl2aXR5SUQ6IG5leHRDbGllbnRBY3Rpdml0eUlELCAnd2ViY2hhdDpzZXF1ZW5jZS1pZCc6IG5leHRTZXF1ZW5jZUlkIH0gPSB7fSB9ID1cbiAgICBuZXh0QWN0aXZpdHk7XG5cbiAgY29uc3QgbmV4dEFjdGl2aXRpZXMgPSBhY3Rpdml0aWVzLmZpbHRlcihcbiAgICAoeyBjaGFubmVsRGF0YTogeyBjbGllbnRBY3Rpdml0eUlEIH0gPSB7fSwgaWQgfSkgPT5cbiAgICAgIC8vIFdlIHdpbGwgcmVtb3ZlIGFsbCBcInNlbmRpbmcgbWVzc2FnZXNcIiBhY3Rpdml0aWVzIGFuZCBhY3Rpdml0aWVzIHdpdGggc2FtZSBJRFxuICAgICAgLy8gXCJjbGllbnRBY3Rpdml0eUlEXCIgaXMgdW5pcXVlIGFuZCB1c2VkIHRvIHRyYWNrIGlmIHRoZSBtZXNzYWdlIGhhcyBiZWVuIHNlbnQgYW5kIGVjaG9lZCBiYWNrIGZyb20gdGhlIHNlcnZlclxuICAgICAgIShuZXh0Q2xpZW50QWN0aXZpdHlJRCAmJiBjbGllbnRBY3Rpdml0eUlEID09PSBuZXh0Q2xpZW50QWN0aXZpdHlJRCkgJiYgIShpZCAmJiBpZCA9PT0gbmV4dEFjdGl2aXR5LmlkKVxuICApO1xuXG4gIC8vIFRoZW4sIGZpbmQgdGhlIHJpZ2h0IChzb3J0ZWQpIHBsYWNlIHRvIGluc2VydCB0aGUgbmV3IGFjdGl2aXR5IGF0LCBiYXNlZCBvbiBzZXF1ZW5jZSBJRC5cbiAgY29uc3QgaW5kZXhUb0luc2VydCA9IG5leHRBY3Rpdml0aWVzLmZpbmRJbmRleChcbiAgICAoeyBjaGFubmVsRGF0YTogeyAnd2ViY2hhdDpzZXF1ZW5jZS1pZCc6IHNlcXVlbmNlSWQgfSA9IHt9IH0pID0+IChzZXF1ZW5jZUlkIHx8IDApID4gKG5leHRTZXF1ZW5jZUlkIHx8IDApXG4gICk7XG5cbiAgLy8gSWYgbm8gcmlnaHQgcGxhY2UgYXJlIGZvdW5kLCBhcHBlbmQgaXRcbiAgbmV4dEFjdGl2aXRpZXMuc3BsaWNlKH5pbmRleFRvSW5zZXJ0ID8gaW5kZXhUb0luc2VydCA6IG5leHRBY3Rpdml0aWVzLmxlbmd0aCwgMCwgbmV4dEFjdGl2aXR5KTtcblxuICByZXR1cm4gbmV4dEFjdGl2aXRpZXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUFjdGl2aXRpZXNSZWR1Y2VyKFxuICBwb255ZmlsbDogR2xvYmFsU2NvcGVQb255ZmlsbFxuKTogUmVkdWNlcjxBY3Rpdml0aWVzU3RhdGUsIEFjdGl2aXRpZXNBY3Rpb24+IHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGFjdGl2aXRpZXMoc3RhdGU6IEFjdGl2aXRpZXNTdGF0ZSA9IERFRkFVTFRfU1RBVEUsIGFjdGlvbjogQWN0aXZpdGllc0FjdGlvbik6IEFjdGl2aXRpZXNTdGF0ZSB7XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgY2FzZSBERUxFVEVfQUNUSVZJVFk6XG4gICAgICAgIHN0YXRlID0gdXBkYXRlSW4oc3RhdGUsIFsoeyBpZCB9OiBXZWJDaGF0QWN0aXZpdHkpID0+IGlkID09PSBhY3Rpb24ucGF5bG9hZC5hY3Rpdml0eUlEXSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIE1BUktfQUNUSVZJVFk6XG4gICAgICAgIHtcbiAgICAgICAgICBjb25zdCB7IHBheWxvYWQgfSA9IGFjdGlvbjtcblxuICAgICAgICAgIHN0YXRlID0gdXBkYXRlSW4oXG4gICAgICAgICAgICBzdGF0ZSxcbiAgICAgICAgICAgIFsoeyBpZCB9OiBXZWJDaGF0QWN0aXZpdHkpID0+IGlkID09PSBwYXlsb2FkLmFjdGl2aXR5SUQsICdjaGFubmVsRGF0YScsIHBheWxvYWQubmFtZV0sXG4gICAgICAgICAgICAoKSA9PiBwYXlsb2FkLnZhbHVlXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFBPU1RfQUNUSVZJVFlfUEVORElORzpcbiAgICAgICAge1xuICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICBwYXlsb2FkOiB7IGFjdGl2aXR5IH1cbiAgICAgICAgICB9ID0gYWN0aW9uO1xuXG4gICAgICAgICAgLy8gYGNoYW5uZWxEYXRhLnN0YXRlYCBpcyBiZWluZyBkZXByZWNhdGVkIGluIGZhdm9yIG9mIGBjaGFubmVsRGF0YVsnd2ViY2hhdDpzZW5kLXN0YXR1cyddYC5cbiAgICAgICAgICAvLyBQbGVhc2UgcmVmZXIgdG8gIzQzNjIgZm9yIGRldGFpbHMuIFJlbW92ZSBvbiBvciBhZnRlciAyMDI0LTA3LTMxLlxuICAgICAgICAgIGFjdGl2aXR5ID0gdXBkYXRlSW4oYWN0aXZpdHksIFsnY2hhbm5lbERhdGEnLCAnc3RhdGUnXSwgKCkgPT4gU0VORElORyk7XG4gICAgICAgICAgYWN0aXZpdHkgPSB1cGRhdGVJbihhY3Rpdml0eSwgWydjaGFubmVsRGF0YScsICd3ZWJjaGF0OnNlbmQtc3RhdHVzJ10sICgpID0+IFNFTkRJTkcpO1xuXG4gICAgICAgICAgc3RhdGUgPSB1cHNlcnRBY3Rpdml0eVdpdGhTb3J0KHN0YXRlLCBhY3Rpdml0eSwgcG9ueWZpbGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgUE9TVF9BQ1RJVklUWV9JTVBFREVEOlxuICAgICAgICBzdGF0ZSA9IHVwZGF0ZUluKFxuICAgICAgICAgIHN0YXRlLFxuICAgICAgICAgIC8vIGBjaGFubmVsRGF0YS5zdGF0ZWAgaXMgYmVpbmcgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiBgY2hhbm5lbERhdGFbJ3dlYmNoYXQ6c2VuZC1zdGF0dXMnXWAuXG4gICAgICAgICAgLy8gUGxlYXNlIHJlZmVyIHRvICM0MzYyIGZvciBkZXRhaWxzLiBSZW1vdmUgb24gb3IgYWZ0ZXIgMjAyNC0wNy0zMS5cbiAgICAgICAgICBbZmluZEJ5Q2xpZW50QWN0aXZpdHlJRChhY3Rpb24ubWV0YS5jbGllbnRBY3Rpdml0eUlEKSwgJ2NoYW5uZWxEYXRhJywgJ3N0YXRlJ10sXG4gICAgICAgICAgKCkgPT4gU0VORF9GQUlMRURcbiAgICAgICAgKTtcblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBQT1NUX0FDVElWSVRZX1JFSkVDVEVEOlxuICAgICAgICBzdGF0ZSA9IHVwZGF0ZUluKHN0YXRlLCBbZmluZEJ5Q2xpZW50QWN0aXZpdHlJRChhY3Rpb24ubWV0YS5jbGllbnRBY3Rpdml0eUlEKV0sIGFjdGl2aXR5ID0+IHtcbiAgICAgICAgICBhY3Rpdml0eSA9IHVwZGF0ZUluKGFjdGl2aXR5LCBbJ2NoYW5uZWxEYXRhJywgJ3N0YXRlJ10sICgpID0+IFNFTkRfRkFJTEVEKTtcblxuICAgICAgICAgIHJldHVybiB1cGRhdGVJbihhY3Rpdml0eSwgWydjaGFubmVsRGF0YScsICd3ZWJjaGF0OnNlbmQtc3RhdHVzJ10sICgpID0+IFNFTkRfRkFJTEVEKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgUE9TVF9BQ1RJVklUWV9GVUxGSUxMRUQ6XG4gICAgICAgIHN0YXRlID0gdXBkYXRlSW4oc3RhdGUsIFtmaW5kQnlDbGllbnRBY3Rpdml0eUlEKGFjdGlvbi5tZXRhLmNsaWVudEFjdGl2aXR5SUQpXSwgKCkgPT4ge1xuICAgICAgICAgIC8vIFdlIHdpbGwgcmVwbGFjZSB0aGUgYWN0aXZpdHkgd2l0aCB0aGUgdmVyc2lvbiBmcm9tIHRoZSBzZXJ2ZXJcbiAgICAgICAgICBjb25zdCBhY3Rpdml0eSA9IHVwZGF0ZUluKFxuICAgICAgICAgICAgcGF0Y2hBY3Rpdml0eShhY3Rpb24ucGF5bG9hZC5hY3Rpdml0eSwgc3RhdGVbc3RhdGUubGVuZ3RoIC0gMV0sIHBvbnlmaWxsKSxcbiAgICAgICAgICAgIC8vIGBjaGFubmVsRGF0YS5zdGF0ZWAgaXMgYmVpbmcgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiBgY2hhbm5lbERhdGFbJ3dlYmNoYXQ6c2VuZC1zdGF0dXMnXWAuXG4gICAgICAgICAgICAvLyBQbGVhc2UgcmVmZXIgdG8gIzQzNjIgZm9yIGRldGFpbHMuIFJlbW92ZSBvbiBvciBhZnRlciAyMDI0LTA3LTMxLlxuICAgICAgICAgICAgWydjaGFubmVsRGF0YScsICdzdGF0ZSddLFxuICAgICAgICAgICAgKCkgPT4gU0VOVFxuICAgICAgICAgICk7XG5cbiAgICAgICAgICByZXR1cm4gdXBkYXRlSW4oYWN0aXZpdHksIFsnY2hhbm5lbERhdGEnLCAnd2ViY2hhdDpzZW5kLXN0YXR1cyddLCAoKSA9PiBTRU5UKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgSU5DT01JTkdfQUNUSVZJVFk6XG4gICAgICAgIHtcbiAgICAgICAgICBsZXQge1xuICAgICAgICAgICAgcGF5bG9hZDogeyBhY3Rpdml0eSB9XG4gICAgICAgICAgfSA9IGFjdGlvbjtcblxuICAgICAgICAgIC8vIElmIHRoZSBpbmNvbWluZyBhY3Rpdml0eSBpcyBhbiBlY2hvIGJhY2ssIHdlIHNob3VsZCBrZWVwIHRoZSBleGlzdGluZyBgY2hhbm5lbERhdGFbJ3dlYmNoYXQ6c2VuZC1zdGF0dXMnXWAgZmllbGQuXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyBPdGhlcndpc2UsIGl0IHdpbGwgZmFpbCBmb2xsb3dpbmcgc2NlbmFyaW86XG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyAxLiBTZW5kIGFuIGFjdGl2aXR5IHRvIHRoZSBzZXJ2aWNlXG4gICAgICAgICAgLy8gMi4gU2VydmljZSBlY2hvZWQgYmFjayB0aGUgYWN0aXZpdHlcbiAgICAgICAgICAvLyAzLiBTZXJ2aWNlIGRpZCBOT1QgcmV0dXJuIGBwb3N0QWN0aXZpdHlgIGNhbGxcbiAgICAgICAgICAvLyAtICBFWFBFQ1Q6IGBjaGFubmVsRGF0YVsnd2ViY2hhdDpzZW5kLXN0YXR1cyddYCBzaG91bGQgYmUgXCJzZW5kaW5nXCIuXG4gICAgICAgICAgLy8gLSAgQUNUVUFMOiBgY2hhbm5lbERhdGFbJ3dlYmNoYXQ6c2VuZC1zdGF0dXMnXWAgaXMgYHVuZGVmaW5lZGAgYmVjYXVzZSB0aGUgYWN0aXZpdHkgZ2V0IG92ZXJ3cml0dGVuIGJ5IHRoZSBlY2hvIGJhY2sgYWN0aXZpdHkuXG4gICAgICAgICAgLy8gICAgICAgICAgICBUaGUgZWNobyBiYWNrIGFjdGl2aXR5IGNvbnRhaW5zIG5vIGBjaGFubmVsRGF0YVsnd2ViY2hhdDpzZW5kLXN0YXR1cyddYC5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIFdoaWxlIHdlIGFyZSBsb29raW5nIG91dCBmb3IgdGhlIHNjZW5hcmlvIGFib3ZlLCB3ZSBzaG91bGQgYWxzbyBsb29rIGF0IHRoZSBmb2xsb3dpbmcgc2NlbmFyaW9zOlxuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gMS4gU2VydmljZSByZXN0b3JlIGNoYXQgaGlzdG9yeSwgaW5jbHVkaW5nIGFjdGl2aXRpZXMgc2VudCBmcm9tIHRoZSB1c2VyLiBUaGVzZSBhY3Rpdml0aWVzIGhhcyB0aGUgZm9sbG93aW5nIGNoYXJhY3RlcmlzdGljczpcbiAgICAgICAgICAvLyAgICAtIFRoZXkgZG8gbm90IGhhdmUgYGNoYW5uZWxEYXRhWyd3ZWJjaGF0OnNlbmQtc3RhdHVzJ11gO1xuICAgICAgICAgIC8vICAgIC0gVGhleSBkbyBub3QgaGF2ZSBhbiBvbmdvaW5nIGBwb3N0QWN0aXZpdHlTYWdhYDtcbiAgICAgICAgICAvLyAgICAtIFRoZXkgc2hvdWxkIG5vdCBwcmV2aW91c2x5IGFwcGVhciBpbiB0aGUgY2hhdCBoaXN0b3J5LlxuICAgICAgICAgIC8vIDIuIFdlIG5lZWQgdG8gbWFyayB0aGVzZSBhY3Rpdml0aWVzIGFzIFwic2VudFwiLlxuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gSW4gdGhlIGZ1dHVyZSwgd2hlbiB3ZSByZXZhbXAgb3VyIG9iamVjdCBtb2RlbCwgd2UgY291bGQgdXNlIGEgZGlmZmVyZW50IHNpZ25hbCBzbyB3ZSBkb24ndCBuZWVkIHRoZSBjb2RlIGJlbG93LCBmb3IgZXhhbXBsZTpcbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIC0gIElmIGBhY3Rpdml0eS5pZGAgaXMgc2V0LCBpdCBpcyBcInNlbnRcIiwgYmVjYXVzZSB0aGUgY2hhdCBzZXJ2aWNlIGFzc2lnbmVkIGFuIElEIHRvIHRoZSBhY3Rpdml0eTtcbiAgICAgICAgICAvLyAtICBJZiBgYWN0aXZpdHkuaWRgIGlzIG5vdCBzZXQsIGl0IGlzIGVpdGhlciBcInNlbmRpbmdcIiBvciBcInNlbmQgZmFpbGVkXCI7XG4gICAgICAgICAgLy8gICAgLSBJZiBgYWN0aXZpdHkuY2hhbm5lbERhdGFbJ3dlYmNoYXQ6c2VuZC1mYWlsZWQtcmVhc29uJ11gIGlzIHNldCwgaXQgaXMgXCJzZW5kIGZhaWxlZFwiIHdpdGggdGhlIHJlYXNvbiwgb3RoZXJ3aXNlO1xuICAgICAgICAgIC8vICAgIC0gSXQgaXMgc2VuZGluZy5cbiAgICAgICAgICBpZiAoYWN0aXZpdHkuZnJvbS5yb2xlID09PSAndXNlcicpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgaWQgfSA9IGFjdGl2aXR5O1xuICAgICAgICAgICAgY29uc3QgY2xpZW50QWN0aXZpdHlJRCA9IGdldENsaWVudEFjdGl2aXR5SUQoYWN0aXZpdHkpO1xuXG4gICAgICAgICAgICBjb25zdCBleGlzdGluZ0FjdGl2aXR5ID0gc3RhdGUuZmluZChcbiAgICAgICAgICAgICAgYWN0aXZpdHkgPT5cbiAgICAgICAgICAgICAgICAoY2xpZW50QWN0aXZpdHlJRCAmJiBnZXRDbGllbnRBY3Rpdml0eUlEKGFjdGl2aXR5KSA9PT0gY2xpZW50QWN0aXZpdHlJRCkgfHwgKGlkICYmIGFjdGl2aXR5LmlkID09PSBpZClcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGlmIChleGlzdGluZ0FjdGl2aXR5KSB7XG4gICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICBjaGFubmVsRGF0YTogeyAnd2ViY2hhdDpzZW5kLXN0YXR1cyc6IHNlbmRTdGF0dXMgfVxuICAgICAgICAgICAgICB9ID0gZXhpc3RpbmdBY3Rpdml0eTtcblxuICAgICAgICAgICAgICBpZiAoc2VuZFN0YXR1cyA9PT0gU0VORElORyB8fCBzZW5kU3RhdHVzID09PSBTRU5EX0ZBSUxFRCB8fCBzZW5kU3RhdHVzID09PSBTRU5UKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZpdHkgPSB1cGRhdGVJbihhY3Rpdml0eSwgWydjaGFubmVsRGF0YScsICd3ZWJjaGF0OnNlbmQtc3RhdHVzJ10sICgpID0+IHNlbmRTdGF0dXMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBJZiB0aGVyZSBhcmUgbm8gZXhpc3RpbmcgYWN0aXZpdHksIHByb2JhYmx5IHRoaXMgYWN0aXZpdHkgaXMgcmVzdG9yZWQgZnJvbSBjaGF0IGhpc3RvcnkuXG4gICAgICAgICAgICAgIC8vIEFsbCBvdXRnb2luZyBhY3Rpdml0aWVzIHJlc3RvcmVkIGZyb20gc2VydmljZSBtZWFucyB0aGV5IGFycml2ZWQgYXQgdGhlIHNlcnZpY2Ugc3VjY2Vzc2Z1bGx5LlxuICAgICAgICAgICAgICAvLyBUaHVzLCB3ZSBhcmUgbWFya2luZyB0aGVtIGFzIFwic2VudFwiLlxuICAgICAgICAgICAgICBhY3Rpdml0eSA9IHVwZGF0ZUluKGFjdGl2aXR5LCBbJ2NoYW5uZWxEYXRhJywgJ3dlYmNoYXQ6c2VuZC1zdGF0dXMnXSwgKCkgPT4gU0VOVCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc3RhdGUgPSB1cHNlcnRBY3Rpdml0eVdpdGhTb3J0KHN0YXRlLCBhY3Rpdml0eSwgcG9ueWZpbGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiBzdGF0ZTtcbiAgfTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBRUE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBTUE7O0FBYkE7QUF1Q0EsSUFBTUEsYUFBOEIsR0FBRyxFQUF2QztBQUNBLElBQU1DLDJCQUEyQixHQUMvQixvR0FERjs7QUFHQSxTQUFTQyxtQkFBVCxDQUE2QkMsUUFBN0IsRUFBNEU7RUFBQTs7RUFDMUUsZ0NBQU9BLFFBQVEsQ0FBQ0MsV0FBaEIsMERBQU8sc0JBQXNCQyxnQkFBN0I7QUFDRDs7QUFFRCxTQUFTQyxzQkFBVCxDQUFnQ0QsZ0JBQWhDLEVBQWtHO0VBQ2hHLE9BQU8sVUFBQ0YsUUFBRDtJQUFBLE9BQStCRCxtQkFBbUIsQ0FBQ0MsUUFBRCxDQUFuQixLQUFrQ0UsZ0JBQWpFO0VBQUEsQ0FBUDtBQUNEOztBQUVELFNBQVNFLGFBQVQsQ0FDRUosUUFERixFQUVFSyxZQUZGLFFBSW1CO0VBQUEsSUFEZkMsSUFDZSxRQURmQSxJQUNlO0VBQ2pCO0VBQ0E7RUFDQTtFQUVBO0VBRUE7RUFDQTtFQUVBTixRQUFRLEdBQUcsSUFBQU8sMEJBQUEsRUFBU1AsUUFBVCxFQUFtQixDQUFDLGFBQUQsRUFBZ0I7SUFBQSxPQUFNLElBQU47RUFBQSxDQUFoQixFQUE0QixZQUE1QixDQUFuQixFQUE4RCxVQUFDUSxVQUFELEVBQXdCO0lBQy9GLElBQUlBLFVBQVUsS0FBS1YsMkJBQWYsSUFBOEMsQ0FBQyxVQUFXVyxJQUFYLENBQWdCRCxVQUFoQixDQUFuRCxFQUFnRjtNQUM5RSxPQUFPQSxVQUFQO0lBQ0Q7RUFDRixDQUpVLENBQVgsQ0FWaUIsQ0FnQmpCO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7O0VBQ0FSLFFBQVEsR0FBRyxJQUFBTywwQkFBQSxFQUFTUCxRQUFULEVBQW1CLENBQUMsYUFBRCxFQUFnQixxQkFBaEIsQ0FBbkIsRUFBMkQsVUFBQ1UsVUFBRDtJQUFBOztJQUFBLE9BQ3BFLE9BQU9BLFVBQVAsS0FBc0IsUUFBdEIsR0FDSUEsVUFESixHQUVJLE9BQU9WLFFBQVEsQ0FBQ1csU0FBaEIsS0FBOEIsV0FBOUIsR0FDQSxDQUFDLElBQUlMLElBQUosQ0FBU04sUUFBUSxDQUFDVyxTQUFsQixDQURELEdBRUE7SUFDQTtJQUNBO0lBQ0EsQ0FBQyxDQUFBTixZQUFZLFNBQVosSUFBQUEsWUFBWSxXQUFaLHFDQUFBQSxZQUFZLENBQUVKLFdBQWQsZ0ZBQTRCLHFCQUE1QixNQUFzRCxDQUF2RCxJQUE0RCxLQVJJO0VBQUEsQ0FBM0QsQ0FBWCxDQXJCaUIsQ0FnQ2pCOztFQUNBRCxRQUFRLEdBQUcsSUFBQU8sMEJBQUEsRUFBU1AsUUFBVCxFQUFtQixDQUFDLGFBQUQsRUFBZ0IscUJBQWhCLENBQW5CLEVBQTJELFVBQUNVLFVBQUQ7SUFBQSxPQUNwRSxPQUFPQSxVQUFQLEtBQXNCLFFBQXRCLEdBQWlDQSxVQUFqQyxHQUE4QyxDQUFDLElBQUlKLElBQUosQ0FBU04sUUFBUSxDQUFDVyxTQUFULElBQXNCLENBQS9CLENBQUQsSUFBc0MsQ0FEaEI7RUFBQSxDQUEzRCxDQUFYO0VBSUEsT0FBT1gsUUFBUDtBQUNEOztBQUVELFNBQVNZLHNCQUFULENBQ0VDLFVBREYsRUFFRUMsWUFGRixFQUdFQyxRQUhGLEVBSXFCO0VBQ25CRCxZQUFZLEdBQUdWLGFBQWEsQ0FBQ1UsWUFBRCxFQUFlRCxVQUFVLENBQUNBLFVBQVUsQ0FBQ0csTUFBWCxHQUFvQixDQUFyQixDQUF6QixFQUFrREQsUUFBbEQsQ0FBNUI7RUFFQSxvQkFDRUQsWUFERjtFQUFBLDBDQUFRYixXQUFSO0VBQUEsMkRBQXlHLEVBQXpHO0VBQUEsSUFBeUNnQixvQkFBekMseUJBQXVCZixnQkFBdkI7RUFBQSxJQUFzRmdCLGNBQXRGLHlCQUErRCxxQkFBL0Q7RUFHQSxJQUFNQyxjQUFjLEdBQUdOLFVBQVUsQ0FBQ08sTUFBWCxDQUNyQjtJQUFBLDhCQUFHbkIsV0FBSDtJQUFBLG1EQUF1QyxFQUF2QztJQUFBLElBQWtCQyxnQkFBbEIscUJBQWtCQSxnQkFBbEI7SUFBQSxJQUEyQ21CLEVBQTNDLFNBQTJDQSxFQUEzQztJQUFBLE9BQ0U7TUFDQTtNQUNBLEVBQUVKLG9CQUFvQixJQUFJZixnQkFBZ0IsS0FBS2Usb0JBQS9DLEtBQXdFLEVBQUVJLEVBQUUsSUFBSUEsRUFBRSxLQUFLUCxZQUFZLENBQUNPLEVBQTVCO0lBSDFFO0VBQUEsQ0FEcUIsQ0FBdkIsQ0FObUIsQ0FhbkI7O0VBQ0EsSUFBTUMsYUFBYSxHQUFHSCxjQUFjLENBQUNJLFNBQWYsQ0FDcEI7SUFBQSw4QkFBR3RCLFdBQUg7SUFBQSxtREFBd0QsRUFBeEQ7SUFBQSxJQUF5Q1MsVUFBekMscUJBQWtCLHFCQUFsQjtJQUFBLE9BQWlFLENBQUNBLFVBQVUsSUFBSSxDQUFmLEtBQXFCUSxjQUFjLElBQUksQ0FBdkMsQ0FBakU7RUFBQSxDQURvQixDQUF0QixDQWRtQixDQWtCbkI7O0VBQ0FDLGNBQWMsQ0FBQ0ssTUFBZixDQUFzQixDQUFDRixhQUFELEdBQWlCQSxhQUFqQixHQUFpQ0gsY0FBYyxDQUFDSCxNQUF0RSxFQUE4RSxDQUE5RSxFQUFpRkYsWUFBakY7RUFFQSxPQUFPSyxjQUFQO0FBQ0Q7O0FBRWMsU0FBU00sdUJBQVQsQ0FDYlYsUUFEYSxFQUUrQjtFQUM1QyxPQUFPLFNBQVNGLFVBQVQsR0FBdUc7SUFBQSxJQUFuRmEsS0FBbUYsdUVBQTFEN0IsYUFBMEQ7SUFBQSxJQUEzQzhCLE1BQTJDOztJQUM1RyxRQUFRQSxNQUFNLENBQUNDLElBQWY7TUFDRSxLQUFLQywrQkFBTDtRQUNFSCxLQUFLLEdBQUcsSUFBQW5CLDBCQUFBLEVBQVNtQixLQUFULEVBQWdCLENBQUM7VUFBQSxJQUFHTCxFQUFILFNBQUdBLEVBQUg7VUFBQSxPQUE2QkEsRUFBRSxLQUFLTSxNQUFNLENBQUNHLE9BQVAsQ0FBZUMsVUFBbkQ7UUFBQSxDQUFELENBQWhCLENBQVI7UUFDQTs7TUFFRixLQUFLQywyQkFBTDtRQUNFO1VBQ0UsSUFBUUYsT0FBUixHQUFvQkgsTUFBcEIsQ0FBUUcsT0FBUjtVQUVBSixLQUFLLEdBQUcsSUFBQW5CLDBCQUFBLEVBQ05tQixLQURNLEVBRU4sQ0FBQztZQUFBLElBQUdMLEVBQUgsU0FBR0EsRUFBSDtZQUFBLE9BQTZCQSxFQUFFLEtBQUtTLE9BQU8sQ0FBQ0MsVUFBNUM7VUFBQSxDQUFELEVBQXlELGFBQXpELEVBQXdFRCxPQUFPLENBQUNHLElBQWhGLENBRk0sRUFHTjtZQUFBLE9BQU1ILE9BQU8sQ0FBQ0ksS0FBZDtVQUFBLENBSE0sQ0FBUjtRQUtEO1FBRUQ7O01BRUYsS0FBS0MsbUNBQUw7UUFDRTtVQUNFLElBQ2FuQyxTQURiLEdBRUkyQixNQUZKLENBQ0VHLE9BREYsQ0FDYTlCLFFBRGIsQ0FERixDQUtFO1VBQ0E7O1VBQ0FBLFNBQVEsR0FBRyxJQUFBTywwQkFBQSxFQUFTUCxTQUFULEVBQW1CLENBQUMsYUFBRCxFQUFnQixPQUFoQixDQUFuQixFQUE2QztZQUFBLE9BQU1vQyxtQkFBTjtVQUFBLENBQTdDLENBQVg7VUFDQXBDLFNBQVEsR0FBRyxJQUFBTywwQkFBQSxFQUFTUCxTQUFULEVBQW1CLENBQUMsYUFBRCxFQUFnQixxQkFBaEIsQ0FBbkIsRUFBMkQ7WUFBQSxPQUFNb0MsbUJBQU47VUFBQSxDQUEzRCxDQUFYO1VBRUFWLEtBQUssR0FBR2Qsc0JBQXNCLENBQUNjLEtBQUQsRUFBUTFCLFNBQVIsRUFBa0JlLFFBQWxCLENBQTlCO1FBQ0Q7UUFFRDs7TUFFRixLQUFLc0IsbUNBQUw7UUFDRVgsS0FBSyxHQUFHLElBQUFuQiwwQkFBQSxFQUNObUIsS0FETSxFQUVOO1FBQ0E7UUFDQSxDQUFDdkIsc0JBQXNCLENBQUN3QixNQUFNLENBQUNXLElBQVAsQ0FBWXBDLGdCQUFiLENBQXZCLEVBQXVELGFBQXZELEVBQXNFLE9BQXRFLENBSk0sRUFLTjtVQUFBLE9BQU1xQyx1QkFBTjtRQUFBLENBTE0sQ0FBUjtRQVFBOztNQUVGLEtBQUtDLG9DQUFMO1FBQ0VkLEtBQUssR0FBRyxJQUFBbkIsMEJBQUEsRUFBU21CLEtBQVQsRUFBZ0IsQ0FBQ3ZCLHNCQUFzQixDQUFDd0IsTUFBTSxDQUFDVyxJQUFQLENBQVlwQyxnQkFBYixDQUF2QixDQUFoQixFQUF3RSxVQUFBRixRQUFRLEVBQUk7VUFDMUZBLFFBQVEsR0FBRyxJQUFBTywwQkFBQSxFQUFTUCxRQUFULEVBQW1CLENBQUMsYUFBRCxFQUFnQixPQUFoQixDQUFuQixFQUE2QztZQUFBLE9BQU11Qyx1QkFBTjtVQUFBLENBQTdDLENBQVg7VUFFQSxPQUFPLElBQUFoQywwQkFBQSxFQUFTUCxRQUFULEVBQW1CLENBQUMsYUFBRCxFQUFnQixxQkFBaEIsQ0FBbkIsRUFBMkQ7WUFBQSxPQUFNdUMsdUJBQU47VUFBQSxDQUEzRCxDQUFQO1FBQ0QsQ0FKTyxDQUFSO1FBTUE7O01BRUYsS0FBS0UscUNBQUw7UUFDRWYsS0FBSyxHQUFHLElBQUFuQiwwQkFBQSxFQUFTbUIsS0FBVCxFQUFnQixDQUFDdkIsc0JBQXNCLENBQUN3QixNQUFNLENBQUNXLElBQVAsQ0FBWXBDLGdCQUFiLENBQXZCLENBQWhCLEVBQXdFLFlBQU07VUFDcEY7VUFDQSxJQUFNRixRQUFRLEdBQUcsSUFBQU8sMEJBQUEsRUFDZkgsYUFBYSxDQUFDdUIsTUFBTSxDQUFDRyxPQUFQLENBQWU5QixRQUFoQixFQUEwQjBCLEtBQUssQ0FBQ0EsS0FBSyxDQUFDVixNQUFOLEdBQWUsQ0FBaEIsQ0FBL0IsRUFBbURELFFBQW5ELENBREUsRUFFZjtVQUNBO1VBQ0EsQ0FBQyxhQUFELEVBQWdCLE9BQWhCLENBSmUsRUFLZjtZQUFBLE9BQU0yQixnQkFBTjtVQUFBLENBTGUsQ0FBakI7VUFRQSxPQUFPLElBQUFuQywwQkFBQSxFQUFTUCxRQUFULEVBQW1CLENBQUMsYUFBRCxFQUFnQixxQkFBaEIsQ0FBbkIsRUFBMkQ7WUFBQSxPQUFNMEMsZ0JBQU47VUFBQSxDQUEzRCxDQUFQO1FBQ0QsQ0FYTyxDQUFSO1FBYUE7O01BRUYsS0FBS0MsbUNBQUw7UUFDRTtVQUNFLElBQ2EzQyxVQURiLEdBRUkyQixNQUZKLENBQ0VHLE9BREYsQ0FDYTlCLFFBRGIsQ0FERixDQUtFO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBOztVQUNBLElBQUlBLFVBQVEsQ0FBQzRDLElBQVQsQ0FBY0MsSUFBZCxLQUF1QixNQUEzQixFQUFtQztZQUNqQyxpQkFBZTdDLFVBQWY7WUFBQSxJQUFRcUIsRUFBUixjQUFRQSxFQUFSO1lBQ0EsSUFBTW5CLGdCQUFnQixHQUFHSCxtQkFBbUIsQ0FBQ0MsVUFBRCxDQUE1QztZQUVBLElBQU04QyxnQkFBZ0IsR0FBR3BCLEtBQUssQ0FBQ3FCLElBQU4sQ0FDdkIsVUFBQS9DLFFBQVE7Y0FBQSxPQUNMRSxnQkFBZ0IsSUFBSUgsbUJBQW1CLENBQUNDLFFBQUQsQ0FBbkIsS0FBa0NFLGdCQUF2RCxJQUE2RW1CLEVBQUUsSUFBSXJCLFFBQVEsQ0FBQ3FCLEVBQVQsS0FBZ0JBLEVBRDdGO1lBQUEsQ0FEZSxDQUF6Qjs7WUFLQSxJQUFJeUIsZ0JBQUosRUFBc0I7Y0FDcEIsSUFDd0NFLFVBRHhDLEdBRUlGLGdCQUZKLENBQ0U3QyxXQURGLENBQ2lCLHFCQURqQjs7Y0FJQSxJQUFJK0MsVUFBVSxLQUFLWixtQkFBZixJQUEwQlksVUFBVSxLQUFLVCx1QkFBekMsSUFBd0RTLFVBQVUsS0FBS04sZ0JBQTNFLEVBQWlGO2dCQUMvRTFDLFVBQVEsR0FBRyxJQUFBTywwQkFBQSxFQUFTUCxVQUFULEVBQW1CLENBQUMsYUFBRCxFQUFnQixxQkFBaEIsQ0FBbkIsRUFBMkQ7a0JBQUEsT0FBTWdELFVBQU47Z0JBQUEsQ0FBM0QsQ0FBWDtjQUNEO1lBQ0YsQ0FSRCxNQVFPO2NBQ0w7Y0FDQTtjQUNBO2NBQ0FoRCxVQUFRLEdBQUcsSUFBQU8sMEJBQUEsRUFBU1AsVUFBVCxFQUFtQixDQUFDLGFBQUQsRUFBZ0IscUJBQWhCLENBQW5CLEVBQTJEO2dCQUFBLE9BQU0wQyxnQkFBTjtjQUFBLENBQTNELENBQVg7WUFDRDtVQUNGOztVQUVEaEIsS0FBSyxHQUFHZCxzQkFBc0IsQ0FBQ2MsS0FBRCxFQUFRMUIsVUFBUixFQUFrQmUsUUFBbEIsQ0FBOUI7UUFDRDtRQUVEOztNQUVGO1FBQ0U7SUFwSUo7O0lBdUlBLE9BQU9XLEtBQVA7RUFDRCxDQXpJRDtBQTBJRCJ9