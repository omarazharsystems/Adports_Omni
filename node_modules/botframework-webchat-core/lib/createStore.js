"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = createStore;
exports.withDevTools = withDevTools;
exports.withOptions = withOptions;

var _redux = require("redux");

var _reduxDevtoolsExtension = require("redux-devtools-extension");

var _reduxSaga = _interopRequireDefault(require("redux-saga"));

var _createReducer = _interopRequireDefault(require("./createReducer"));

var _createSagas = _interopRequireDefault(require("./createSagas"));

var _sagaError = _interopRequireDefault(require("./actions/sagaError"));

function createEnhancerAndSagaMiddleware(getStore) {
  var sagaMiddleware = (0, _reduxSaga["default"])({
    onError: function onError() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      var err = args[0];
      console.error(err);
      var store = getStore();
      store && store.dispatch((0, _sagaError["default"])());
    }
  });

  for (var _len = arguments.length, middlewares = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    middlewares[_key - 1] = arguments[_key];
  }

  return {
    enhancer: _redux.applyMiddleware.apply(void 0, middlewares.concat([sagaMiddleware])),
    sagaMiddleware: sagaMiddleware
  };
}
/**
 * Creates a Redux store internally used by Web Chat.
 *
 * This store is critical for Web Chat business logics to operate, please use with cautions.
 */
// The complexity is introduced by the check of ponyfill.
// eslint-disable-next-line complexity


function withOptions(options, initialState) {
  // IE Mode does not have `globalThis`.
  var globalThisOrWindow = typeof globalThis === 'undefined' ? window : globalThis;
  var ponyfillFromOptions = options.ponyfill || {}; // TODO: [P2] Dedupe: when we have an utility package, move this code there and mark it as internal use.

  var ponyfill = {
    cancelAnimationFrame: ponyfillFromOptions.cancelAnimationFrame || ( // Using clock functions from global if not provided.
    // eslint-disable-next-line no-restricted-globals
    typeof cancelAnimationFrame === 'function' ? cancelAnimationFrame.bind(globalThisOrWindow) : undefined),
    cancelIdleCallback: ponyfillFromOptions.cancelIdleCallback || ( // eslint-disable-next-line no-restricted-globals
    typeof cancelIdleCallback === 'function' ? cancelIdleCallback.bind(globalThisOrWindow) : undefined),
    clearImmediate: ponyfillFromOptions.clearImmediate || ( // eslint-disable-next-line no-restricted-globals
    typeof clearImmediate === 'function' ? clearImmediate.bind(globalThisOrWindow) : undefined),
    clearInterval: ponyfillFromOptions.clearInterval || ( // eslint-disable-next-line no-restricted-globals
    typeof clearInterval === 'function' ? clearInterval.bind(globalThisOrWindow) : undefined),
    clearTimeout: ponyfillFromOptions.clearTimeout || ( // eslint-disable-next-line no-restricted-globals
    typeof clearTimeout === 'function' ? clearTimeout.bind(globalThisOrWindow) : undefined),
    // eslint-disable-next-line no-restricted-globals
    Date: ponyfillFromOptions.Date || Date,
    requestAnimationFrame: ponyfillFromOptions.requestAnimationFrame || ( // eslint-disable-next-line no-restricted-globals
    typeof requestAnimationFrame === 'function' ? requestAnimationFrame.bind(globalThisOrWindow) : undefined),
    requestIdleCallback: ponyfillFromOptions.requestIdleCallback || ( // eslint-disable-next-line no-restricted-globals
    typeof requestIdleCallback === 'function' ? requestIdleCallback.bind(globalThisOrWindow) : undefined),
    setImmediate: ponyfillFromOptions.setImmediate || ( // eslint-disable-next-line no-restricted-globals
    typeof setImmediate === 'function' ? setImmediate.bind(globalThisOrWindow) : undefined),
    setInterval: ponyfillFromOptions.setInterval || ( // eslint-disable-next-line no-restricted-globals
    typeof setInterval === 'function' ? setInterval.bind(globalThisOrWindow) : undefined),
    setTimeout: ponyfillFromOptions.setTimeout || ( // eslint-disable-next-line no-restricted-globals
    typeof setTimeout === 'function' ? setTimeout.bind(globalThisOrWindow) : undefined)
  }; // We are sure the "getStore" (first argument) is not called on "createEnhancerAndSagaMiddleware()".
  // eslint-disable-next-line @typescript-eslint/no-use-before-define

  for (var _len3 = arguments.length, middlewares = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
    middlewares[_key3 - 2] = arguments[_key3];
  }

  var _createEnhancerAndSag = createEnhancerAndSagaMiddleware.apply(void 0, [function () {
    return store;
  }].concat(middlewares)),
      enhancer = _createEnhancerAndSag.enhancer,
      sagaMiddleware = _createEnhancerAndSag.sagaMiddleware;

  var store = (0, _redux.createStore)((0, _createReducer["default"])(ponyfill), initialState || {}, options.devTools ? (0, _reduxDevtoolsExtension.composeWithDevTools)(enhancer) : enhancer);
  sagaMiddleware.run((0, _createSagas["default"])({
    ponyfill: ponyfill
  }));
  return store;
}
/**
 * Creates a Redux store internally used by Web Chat.
 *
 * This store is critical for Web Chat business logics to operate, please use with cautions.
 */


function createStore(initialState) {
  for (var _len4 = arguments.length, middlewares = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    middlewares[_key4 - 1] = arguments[_key4];
  }

  return withOptions.apply(void 0, [{}, initialState].concat(middlewares));
}
/**
 * Creates a Redux store internally used by Web Chat, with Redux development tools.
 *
 * This store is critical for Web Chat business logics to operate, please use with cautions.
 *
 * @deprecated Use `withOptions` instead and pass `{ devTools: true }`
 */


function withDevTools(initialState) {
  for (var _len5 = arguments.length, middlewares = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
    middlewares[_key5 - 1] = arguments[_key5];
  }

  return withOptions.apply(void 0, [{
    devTools: true
  }, initialState].concat(middlewares));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,