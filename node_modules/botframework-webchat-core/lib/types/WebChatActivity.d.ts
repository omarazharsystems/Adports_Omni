import type { AnyAnd } from './AnyAnd';
import type { DirectLineAttachment } from './external/DirectLineAttachment';
import type { DirectLineSuggestedAction } from './external/DirectLineSuggestedAction';
type SupportedRole = 'bot' | 'channel' | 'user';
type SupportedSendStatus = 'sending' | 'send failed' | 'sent';
type ChannelData<SendStatus extends SupportedSendStatus | undefined, Type extends string> = AnyAnd<{
    attachmentSizes?: number[];
    clientActivityID?: string;
    'webchat:sequence-id': number;
} & (SendStatus extends SupportedSendStatus ? {
    /**
     * @deprecated Since 4.15.3: Please use `channelData['webchat:send-status']` or `useSendStatusByActivityKey()` hook instead.
     *             Please refer to https://github.com/microsoft/BotFramework-WebChat/pull/4362 for details. This field will be removed on or after 2024-07-31.
     */
    state?: SendStatus;
    /**
     * The send status of the activity.
     *
     * - `"sending"`, the activity is in-transit and it has not been timed out;
     * - `"send failed"`, the activity cannot be delivered permanently and further processing had been stopped;
     * - `"sent"`, the activity is delivered successfully.
     *
     * Due to network-related race conditions, the activity could be marked as `"send failed"` but delivered by the service.
     * In this case, the activity should continue to mark as `"send failed"`.
     *
     * For further details, please see [#4362](https://github.com/microsoft/BotFramework-WebChat/pull/4362).
     */
    'webchat:send-status': SendStatus;
} : {}) & (Type extends 'message' ? {
    messageBack?: {
        displayText: string;
    };
    postBack?: boolean;
    speak?: boolean;
    speechSynthesisUtterance?: SpeechSynthesisUtterance;
    'webchat:fallback-text'?: string;
} : {})>;
type ClientCapabilitiesEntity = {
    requiresBotState?: boolean;
    supportsListening?: boolean;
    supportsTts?: boolean;
    type: 'ClientCapabilities';
};
type Entity = ClientCapabilitiesEntity | AnyAnd<{
    type: Exclude<string, 'ClientCapabilities'>;
}>;
type ChannelAcount<Role extends SupportedRole> = {
    id: string;
    name?: string;
    role: Role;
};
type EventActivityEssence = {
    name: string;
    type: 'event';
    value?: any;
};
type MessageActivityEssence = {
    attachmentLayout?: 'carousel' | 'stacked';
    attachments?: DirectLineAttachment[];
    inputHint?: 'accepting' | 'expecting' | 'ignoring';
    locale?: string;
    speak?: string;
    suggestedActions?: DirectLineSuggestedAction;
    text: string | undefined;
    textFormat?: 'markdown' | 'plain' | 'xml';
    type: 'message';
    value?: any;
};
type TypingActivityEssence = {
    type: 'typing';
};
type TimestampFromServerEssence = {
    id: string;
    localTimestamp?: string;
    timestamp: string;
};
type TimestampInTransitEssence = {
    id?: string;
    localTimestamp: string;
    timestamp?: string;
};
type TimestampEssence<Role extends SupportedRole, SendStatus extends SupportedSendStatus | undefined> = Role extends 'user' ? SendStatus extends 'sending' | 'send failed' ? TimestampInTransitEssence : TimestampFromServerEssence : TimestampFromServerEssence;
type CoreActivityEssence<Role extends SupportedRole, SendStatus extends SupportedSendStatus | undefined, Type extends string = 'conversationUpdate' | 'event' | 'invoke' | 'message' | 'typing'> = {
    channelData: ChannelData<SendStatus, Type>;
    channelId?: string;
    entities?: Entity[];
    from: ChannelAcount<Role>;
    localTimezone?: string;
    replyToId?: string;
    type: string;
} & TimestampEssence<Role, SendStatus> & (Type extends 'event' ? EventActivityEssence : Type extends 'message' ? MessageActivityEssence : Type extends 'typing' ? TypingActivityEssence : {
    type: Type;
});
type OthersActivity = CoreActivityEssence<'bot' | 'channel', undefined>;
type SelfActivitySendFailed = CoreActivityEssence<'user', 'send failed'>;
type SelfActivitySending = CoreActivityEssence<'user', 'sending'>;
type SelfActivitySent = CoreActivityEssence<'user', 'sent'>;
type SelfActivity = SelfActivitySendFailed | SelfActivitySending | SelfActivitySent;
type WebChatActivity = SelfActivity | OthersActivity;
export type { WebChatActivity };
//# sourceMappingURL=WebChatActivity.d.ts.map