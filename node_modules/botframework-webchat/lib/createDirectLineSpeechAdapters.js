"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createDirectLineSpeechAdapters;

var _botframeworkDirectlinespeechSdk = require("botframework-directlinespeech-sdk");

var _createMicrophoneAudioConfigAndAudioContext = _interopRequireDefault(require("./speech/createMicrophoneAudioConfigAndAudioContext"));

var DEFAULT_LANGUAGE = 'en-US'; // TODO: When using DLSpeech via bundle, we will add our own MicrophoneAudioConfig.

function createDirectLineSpeechAdapters(_ref) {
  var _window, _window$navigator;

  var audioConfig = _ref.audioConfig,
      audioContext = _ref.audioContext,
      audioInputDeviceId = _ref.audioInputDeviceId,
      enableInternalHTTPSupport = _ref.enableInternalHTTPSupport,
      enableTelemetry = _ref.enableTelemetry,
      fetchCredentials = _ref.fetchCredentials,
      speechRecognitionEndpointId = _ref.speechRecognitionEndpointId,
      _ref$speechRecognitio = _ref.speechRecognitionLanguage,
      speechRecognitionLanguage = _ref$speechRecognitio === void 0 ? ((_window = window) === null || _window === void 0 ? void 0 : (_window$navigator = _window.navigator) === null || _window$navigator === void 0 ? void 0 : _window$navigator.language) || DEFAULT_LANGUAGE : _ref$speechRecognitio,
      speechSynthesisDeploymentId = _ref.speechSynthesisDeploymentId,
      speechSynthesisOutputFormat = _ref.speechSynthesisOutputFormat,
      textNormalization = _ref.textNormalization,
      userID = _ref.userID,
      username = _ref.username;

  if (audioConfig) {
    audioInputDeviceId && console.warn('botframework-webchat: "audioConfig" and "audioInputDeviceId" cannot be set at the same time; ignoring "audioInputDeviceId".');
    audioContext && console.warn('botframework-webchat: "audioConfig" and "audioContext" cannot be set at the same time; ignoring "audioContext" for speech recognition.');
  } else if (!window.navigator.mediaDevices) {
    // If the browser does not support or allow microphone access, we will continue to create Direct Line Speech adapter without custom "audioConfig" and "audioContext".
    // In Direct Line Speech SDK, it will disable speech functionality, only leaving text chat available via the protocol.
    console.warn('botframework-webchat: Your browser does not support or allow microphone access or the page is not loaded via HTTPS or localhost. Speech is disabled for Direct Line Speech. However, you may pass a custom "audioConfig" to enable speech in this environment.');
  } else {
    var _createMicrophoneAudi = (0, _createMicrophoneAudioConfigAndAudioContext.default)({
      audioContext: audioContext,
      audioInputDeviceId: audioInputDeviceId,
      enableTelemetry: enableTelemetry
    });

    audioConfig = _createMicrophoneAudi.audioConfig;
    audioContext = _createMicrophoneAudi.audioContext;
  }

  return (0, _botframeworkDirectlinespeechSdk.createAdapters)({
    audioConfig: audioConfig,
    audioContext: audioContext,
    enableInternalHTTPSupport: enableInternalHTTPSupport,
    enableTelemetry: enableTelemetry,
    fetchCredentials: fetchCredentials,
    speechRecognitionEndpointId: speechRecognitionEndpointId,
    speechRecognitionLanguage: speechRecognitionLanguage,
    speechSynthesisDeploymentId: speechSynthesisDeploymentId,
    speechSynthesisOutputFormat: speechSynthesisOutputFormat,
    textNormalization: textNormalization,
    userID: userID,
    username: username
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJERUZBVUxUX0xBTkdVQUdFIiwiY3JlYXRlRGlyZWN0TGluZVNwZWVjaEFkYXB0ZXJzIiwiYXVkaW9Db25maWciLCJhdWRpb0NvbnRleHQiLCJhdWRpb0lucHV0RGV2aWNlSWQiLCJlbmFibGVJbnRlcm5hbEhUVFBTdXBwb3J0IiwiZW5hYmxlVGVsZW1ldHJ5IiwiZmV0Y2hDcmVkZW50aWFscyIsInNwZWVjaFJlY29nbml0aW9uRW5kcG9pbnRJZCIsInNwZWVjaFJlY29nbml0aW9uTGFuZ3VhZ2UiLCJ3aW5kb3ciLCJuYXZpZ2F0b3IiLCJsYW5ndWFnZSIsInNwZWVjaFN5bnRoZXNpc0RlcGxveW1lbnRJZCIsInNwZWVjaFN5bnRoZXNpc091dHB1dEZvcm1hdCIsInRleHROb3JtYWxpemF0aW9uIiwidXNlcklEIiwidXNlcm5hbWUiLCJjb25zb2xlIiwid2FybiIsIm1lZGlhRGV2aWNlcyIsImNyZWF0ZU1pY3JvcGhvbmVBdWRpb0NvbmZpZ0FuZEF1ZGlvQ29udGV4dCIsImNyZWF0ZUFkYXB0ZXJzIl0sInNvdXJjZVJvb3QiOiJidW5kbGU6Ly8vIiwic291cmNlcyI6WyIuLi9zcmMvY3JlYXRlRGlyZWN0TGluZVNwZWVjaEFkYXB0ZXJzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEF1ZGlvQ29uZmlnIH0gZnJvbSAnbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsnO1xuaW1wb3J0IHsgY3JlYXRlQWRhcHRlcnMgfSBmcm9tICdib3RmcmFtZXdvcmstZGlyZWN0bGluZXNwZWVjaC1zZGsnO1xuaW1wb3J0IHsgV2ViU3BlZWNoUG9ueWZpbGwgfSBmcm9tICdib3RmcmFtZXdvcmstd2ViY2hhdC1hcGknO1xuaW1wb3J0IHR5cGUgeyBEaXJlY3RMaW5lSlNCb3RDb25uZWN0aW9uIH0gZnJvbSAnYm90ZnJhbWV3b3JrLXdlYmNoYXQtY29yZSc7XG5cbmltcG9ydCBDb2duaXRpdmVTZXJ2aWNlc0F1ZGlvT3V0cHV0Rm9ybWF0IGZyb20gJy4vdHlwZXMvQ29nbml0aXZlU2VydmljZXNBdWRpb091dHB1dEZvcm1hdCc7XG5pbXBvcnQgQ29nbml0aXZlU2VydmljZXNDcmVkZW50aWFscyBmcm9tICcuL3R5cGVzL0NvZ25pdGl2ZVNlcnZpY2VzQ3JlZGVudGlhbHMnO1xuaW1wb3J0IENvZ25pdGl2ZVNlcnZpY2VzVGV4dE5vcm1hbGl6YXRpb24gZnJvbSAnLi90eXBlcy9Db2duaXRpdmVTZXJ2aWNlc1RleHROb3JtYWxpemF0aW9uJztcbmltcG9ydCBjcmVhdGVNaWNyb3Bob25lQXVkaW9Db25maWdBbmRBdWRpb0NvbnRleHQgZnJvbSAnLi9zcGVlY2gvY3JlYXRlTWljcm9waG9uZUF1ZGlvQ29uZmlnQW5kQXVkaW9Db250ZXh0JztcblxuY29uc3QgREVGQVVMVF9MQU5HVUFHRSA9ICdlbi1VUyc7XG5cbi8vIFRPRE86IFdoZW4gdXNpbmcgRExTcGVlY2ggdmlhIGJ1bmRsZSwgd2Ugd2lsbCBhZGQgb3VyIG93biBNaWNyb3Bob25lQXVkaW9Db25maWcuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVEaXJlY3RMaW5lU3BlZWNoQWRhcHRlcnMoe1xuICBhdWRpb0NvbmZpZyxcbiAgYXVkaW9Db250ZXh0LFxuICBhdWRpb0lucHV0RGV2aWNlSWQsXG4gIGVuYWJsZUludGVybmFsSFRUUFN1cHBvcnQsXG4gIGVuYWJsZVRlbGVtZXRyeSxcbiAgZmV0Y2hDcmVkZW50aWFscyxcbiAgc3BlZWNoUmVjb2duaXRpb25FbmRwb2ludElkLFxuICBzcGVlY2hSZWNvZ25pdGlvbkxhbmd1YWdlID0gd2luZG93Py5uYXZpZ2F0b3I/Lmxhbmd1YWdlIHx8IERFRkFVTFRfTEFOR1VBR0UsXG4gIHNwZWVjaFN5bnRoZXNpc0RlcGxveW1lbnRJZCxcbiAgc3BlZWNoU3ludGhlc2lzT3V0cHV0Rm9ybWF0LFxuICB0ZXh0Tm9ybWFsaXphdGlvbixcbiAgdXNlcklELFxuICB1c2VybmFtZVxufToge1xuICBhdWRpb0NvbmZpZz86IEF1ZGlvQ29uZmlnO1xuICBhdWRpb0NvbnRleHQ/OiBBdWRpb0NvbnRleHQ7XG4gIGF1ZGlvSW5wdXREZXZpY2VJZD86IHN0cmluZztcbiAgZW5hYmxlSW50ZXJuYWxIVFRQU3VwcG9ydD86IHRydWU7XG4gIGVuYWJsZVRlbGVtZXRyeT86IHRydWU7XG4gIGZldGNoQ3JlZGVudGlhbHM6IENvZ25pdGl2ZVNlcnZpY2VzQ3JlZGVudGlhbHM7XG4gIHNwZWVjaFJlY29nbml0aW9uRW5kcG9pbnRJZD86IHN0cmluZztcbiAgc3BlZWNoUmVjb2duaXRpb25MYW5ndWFnZT86IHN0cmluZztcbiAgc3BlZWNoU3ludGhlc2lzRGVwbG95bWVudElkPzogc3RyaW5nO1xuICBzcGVlY2hTeW50aGVzaXNPdXRwdXRGb3JtYXQ/OiBDb2duaXRpdmVTZXJ2aWNlc0F1ZGlvT3V0cHV0Rm9ybWF0O1xuICB0ZXh0Tm9ybWFsaXphdGlvbj86IENvZ25pdGl2ZVNlcnZpY2VzVGV4dE5vcm1hbGl6YXRpb247XG4gIHVzZXJJRD86IHN0cmluZztcbiAgdXNlcm5hbWU/OiBzdHJpbmc7XG59KToge1xuICBkaXJlY3RMaW5lOiBEaXJlY3RMaW5lSlNCb3RDb25uZWN0aW9uO1xuICB3ZWJTcGVlY2hQb255ZmlsbDogV2ViU3BlZWNoUG9ueWZpbGw7XG59IHtcbiAgaWYgKGF1ZGlvQ29uZmlnKSB7XG4gICAgYXVkaW9JbnB1dERldmljZUlkICYmXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdib3RmcmFtZXdvcmstd2ViY2hhdDogXCJhdWRpb0NvbmZpZ1wiIGFuZCBcImF1ZGlvSW5wdXREZXZpY2VJZFwiIGNhbm5vdCBiZSBzZXQgYXQgdGhlIHNhbWUgdGltZTsgaWdub3JpbmcgXCJhdWRpb0lucHV0RGV2aWNlSWRcIi4nXG4gICAgICApO1xuXG4gICAgYXVkaW9Db250ZXh0ICYmXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdib3RmcmFtZXdvcmstd2ViY2hhdDogXCJhdWRpb0NvbmZpZ1wiIGFuZCBcImF1ZGlvQ29udGV4dFwiIGNhbm5vdCBiZSBzZXQgYXQgdGhlIHNhbWUgdGltZTsgaWdub3JpbmcgXCJhdWRpb0NvbnRleHRcIiBmb3Igc3BlZWNoIHJlY29nbml0aW9uLidcbiAgICAgICk7XG4gIH0gZWxzZSBpZiAoIXdpbmRvdy5uYXZpZ2F0b3IubWVkaWFEZXZpY2VzKSB7XG4gICAgLy8gSWYgdGhlIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBvciBhbGxvdyBtaWNyb3Bob25lIGFjY2Vzcywgd2Ugd2lsbCBjb250aW51ZSB0byBjcmVhdGUgRGlyZWN0IExpbmUgU3BlZWNoIGFkYXB0ZXIgd2l0aG91dCBjdXN0b20gXCJhdWRpb0NvbmZpZ1wiIGFuZCBcImF1ZGlvQ29udGV4dFwiLlxuICAgIC8vIEluIERpcmVjdCBMaW5lIFNwZWVjaCBTREssIGl0IHdpbGwgZGlzYWJsZSBzcGVlY2ggZnVuY3Rpb25hbGl0eSwgb25seSBsZWF2aW5nIHRleHQgY2hhdCBhdmFpbGFibGUgdmlhIHRoZSBwcm90b2NvbC5cbiAgICBjb25zb2xlLndhcm4oXG4gICAgICAnYm90ZnJhbWV3b3JrLXdlYmNoYXQ6IFlvdXIgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IG9yIGFsbG93IG1pY3JvcGhvbmUgYWNjZXNzIG9yIHRoZSBwYWdlIGlzIG5vdCBsb2FkZWQgdmlhIEhUVFBTIG9yIGxvY2FsaG9zdC4gU3BlZWNoIGlzIGRpc2FibGVkIGZvciBEaXJlY3QgTGluZSBTcGVlY2guIEhvd2V2ZXIsIHlvdSBtYXkgcGFzcyBhIGN1c3RvbSBcImF1ZGlvQ29uZmlnXCIgdG8gZW5hYmxlIHNwZWVjaCBpbiB0aGlzIGVudmlyb25tZW50LidcbiAgICApO1xuICB9IGVsc2Uge1xuICAgICh7IGF1ZGlvQ29uZmlnLCBhdWRpb0NvbnRleHQgfSA9IGNyZWF0ZU1pY3JvcGhvbmVBdWRpb0NvbmZpZ0FuZEF1ZGlvQ29udGV4dCh7XG4gICAgICBhdWRpb0NvbnRleHQsXG4gICAgICBhdWRpb0lucHV0RGV2aWNlSWQsXG4gICAgICBlbmFibGVUZWxlbWV0cnlcbiAgICB9KSk7XG4gIH1cblxuICByZXR1cm4gY3JlYXRlQWRhcHRlcnMoe1xuICAgIGF1ZGlvQ29uZmlnLFxuICAgIGF1ZGlvQ29udGV4dCxcbiAgICBlbmFibGVJbnRlcm5hbEhUVFBTdXBwb3J0LFxuICAgIGVuYWJsZVRlbGVtZXRyeSxcbiAgICBmZXRjaENyZWRlbnRpYWxzLFxuICAgIHNwZWVjaFJlY29nbml0aW9uRW5kcG9pbnRJZCxcbiAgICBzcGVlY2hSZWNvZ25pdGlvbkxhbmd1YWdlLFxuICAgIHNwZWVjaFN5bnRoZXNpc0RlcGxveW1lbnRJZCxcbiAgICBzcGVlY2hTeW50aGVzaXNPdXRwdXRGb3JtYXQsXG4gICAgdGV4dE5vcm1hbGl6YXRpb24sXG4gICAgdXNlcklELFxuICAgIHVzZXJuYW1lXG4gIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFDQTs7QUFPQTs7QUFFQSxJQUFNQSxnQkFBZ0IsR0FBRyxPQUF6QixDLENBRUE7O0FBQ2UsU0FBU0MsOEJBQVQsT0ErQmI7RUFBQTs7RUFBQSxJQTlCQUMsV0E4QkEsUUE5QkFBLFdBOEJBO0VBQUEsSUE3QkFDLFlBNkJBLFFBN0JBQSxZQTZCQTtFQUFBLElBNUJBQyxrQkE0QkEsUUE1QkFBLGtCQTRCQTtFQUFBLElBM0JBQyx5QkEyQkEsUUEzQkFBLHlCQTJCQTtFQUFBLElBMUJBQyxlQTBCQSxRQTFCQUEsZUEwQkE7RUFBQSxJQXpCQUMsZ0JBeUJBLFFBekJBQSxnQkF5QkE7RUFBQSxJQXhCQUMsMkJBd0JBLFFBeEJBQSwyQkF3QkE7RUFBQSxpQ0F2QkFDLHlCQXVCQTtFQUFBLElBdkJBQSx5QkF1QkEsc0NBdkI0QixZQUFBQyxNQUFNLFVBQU4sK0RBQVFDLFNBQVIsd0VBQW1CQyxRQUFuQixLQUErQlosZ0JBdUIzRDtFQUFBLElBdEJBYSwyQkFzQkEsUUF0QkFBLDJCQXNCQTtFQUFBLElBckJBQywyQkFxQkEsUUFyQkFBLDJCQXFCQTtFQUFBLElBcEJBQyxpQkFvQkEsUUFwQkFBLGlCQW9CQTtFQUFBLElBbkJBQyxNQW1CQSxRQW5CQUEsTUFtQkE7RUFBQSxJQWxCQUMsUUFrQkEsUUFsQkFBLFFBa0JBOztFQUNBLElBQUlmLFdBQUosRUFBaUI7SUFDZkUsa0JBQWtCLElBQ2hCYyxPQUFPLENBQUNDLElBQVIsQ0FDRSw2SEFERixDQURGO0lBS0FoQixZQUFZLElBQ1ZlLE9BQU8sQ0FBQ0MsSUFBUixDQUNFLHdJQURGLENBREY7RUFJRCxDQVZELE1BVU8sSUFBSSxDQUFDVCxNQUFNLENBQUNDLFNBQVAsQ0FBaUJTLFlBQXRCLEVBQW9DO0lBQ3pDO0lBQ0E7SUFDQUYsT0FBTyxDQUFDQyxJQUFSLENBQ0UsZ1FBREY7RUFHRCxDQU5NLE1BTUE7SUFBQSw0QkFDNEIsSUFBQUUsbURBQUEsRUFBMkM7TUFDMUVsQixZQUFZLEVBQVpBLFlBRDBFO01BRTFFQyxrQkFBa0IsRUFBbEJBLGtCQUYwRTtNQUcxRUUsZUFBZSxFQUFmQTtJQUgwRSxDQUEzQyxDQUQ1Qjs7SUFDRkosV0FERSx5QkFDRkEsV0FERTtJQUNXQyxZQURYLHlCQUNXQSxZQURYO0VBTU47O0VBRUQsT0FBTyxJQUFBbUIsK0NBQUEsRUFBZTtJQUNwQnBCLFdBQVcsRUFBWEEsV0FEb0I7SUFFcEJDLFlBQVksRUFBWkEsWUFGb0I7SUFHcEJFLHlCQUF5QixFQUF6QkEseUJBSG9CO0lBSXBCQyxlQUFlLEVBQWZBLGVBSm9CO0lBS3BCQyxnQkFBZ0IsRUFBaEJBLGdCQUxvQjtJQU1wQkMsMkJBQTJCLEVBQTNCQSwyQkFOb0I7SUFPcEJDLHlCQUF5QixFQUF6QkEseUJBUG9CO0lBUXBCSSwyQkFBMkIsRUFBM0JBLDJCQVJvQjtJQVNwQkMsMkJBQTJCLEVBQTNCQSwyQkFUb0I7SUFVcEJDLGlCQUFpQixFQUFqQkEsaUJBVm9CO0lBV3BCQyxNQUFNLEVBQU5BLE1BWG9CO0lBWXBCQyxRQUFRLEVBQVJBO0VBWm9CLENBQWYsQ0FBUDtBQWNEIn0=