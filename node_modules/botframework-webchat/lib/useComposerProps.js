"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useComposerProps;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _react = require("react");

var _createAdaptiveCardsAttachmentForScreenReaderMiddleware = _interopRequireDefault(require("./adaptiveCards/createAdaptiveCardsAttachmentForScreenReaderMiddleware"));

var _createAdaptiveCardsAttachmentMiddleware = _interopRequireDefault(require("./adaptiveCards/createAdaptiveCardsAttachmentMiddleware"));

var _createAdaptiveCardsStyleSet = _interopRequireDefault(require("./adaptiveCards/Styles/createAdaptiveCardsStyleSet"));

var _renderMarkdown = _interopRequireDefault(require("./renderMarkdown"));

function useComposerProps(_ref) {
  var attachmentForScreenReaderMiddleware = _ref.attachmentForScreenReaderMiddleware,
      attachmentMiddleware = _ref.attachmentMiddleware,
      renderMarkdown = _ref.renderMarkdown,
      styleOptions = _ref.styleOptions,
      styleSet = _ref.styleSet;
  var patchedAttachmentMiddleware = (0, _react.useMemo)(function () {
    return [].concat((0, _toConsumableArray2.default)(attachmentMiddleware), [(0, _createAdaptiveCardsAttachmentMiddleware.default)()]);
  }, [attachmentMiddleware]);
  var patchedAttachmentForScreenReaderMiddleware = (0, _react.useMemo)(function () {
    return [].concat((0, _toConsumableArray2.default)(attachmentForScreenReaderMiddleware), [(0, _createAdaptiveCardsAttachmentForScreenReaderMiddleware.default)()]);
  }, [attachmentForScreenReaderMiddleware]); // When styleSet is not specified, the styleOptions will be used to create Adaptive Cards styleSet and merged into useStyleSet.

  var extraStyleSet = (0, _react.useMemo)(function () {
    return styleSet ? undefined : (0, _createAdaptiveCardsStyleSet.default)(styleOptions);
  }, [styleOptions, styleSet]);
  var patchedRenderMarkdown = (0, _react.useMemo)(function () {
    return typeof renderMarkdown === 'undefined' ? _renderMarkdown.default : renderMarkdown;
  }, [renderMarkdown]);
  return {
    attachmentForScreenReaderMiddleware: patchedAttachmentForScreenReaderMiddleware,
    attachmentMiddleware: patchedAttachmentMiddleware,
    extraStyleSet: extraStyleSet,
    renderMarkdown: patchedRenderMarkdown
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1c2VDb21wb3NlclByb3BzIiwiYXR0YWNobWVudEZvclNjcmVlblJlYWRlck1pZGRsZXdhcmUiLCJhdHRhY2htZW50TWlkZGxld2FyZSIsInJlbmRlck1hcmtkb3duIiwic3R5bGVPcHRpb25zIiwic3R5bGVTZXQiLCJwYXRjaGVkQXR0YWNobWVudE1pZGRsZXdhcmUiLCJ1c2VNZW1vIiwiY3JlYXRlQWRhcHRpdmVDYXJkc0F0dGFjaG1lbnRNaWRkbGV3YXJlIiwicGF0Y2hlZEF0dGFjaG1lbnRGb3JTY3JlZW5SZWFkZXJNaWRkbGV3YXJlIiwiY3JlYXRlQWRhcHRpdmVDYXJkc0F0dGFjaG1lbnRGb3JTY3JlZW5SZWFkZXJNaWRkbGV3YXJlIiwiZXh0cmFTdHlsZVNldCIsInVuZGVmaW5lZCIsImNyZWF0ZUFkYXB0aXZlQ2FyZHNTdHlsZVNldCIsInBhdGNoZWRSZW5kZXJNYXJrZG93biIsImRlZmF1bHRSZW5kZXJNYXJrZG93biJdLCJzb3VyY2VSb290IjoiYnVuZGxlOi8vLyIsInNvdXJjZXMiOlsiLi4vc3JjL3VzZUNvbXBvc2VyUHJvcHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXR0YWNobWVudEZvclNjcmVlblJlYWRlck1pZGRsZXdhcmUsIEF0dGFjaG1lbnRNaWRkbGV3YXJlIH0gZnJvbSAnYm90ZnJhbWV3b3JrLXdlYmNoYXQtYXBpJztcbmltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBjcmVhdGVBZGFwdGl2ZUNhcmRzQXR0YWNobWVudEZvclNjcmVlblJlYWRlck1pZGRsZXdhcmUgZnJvbSAnLi9hZGFwdGl2ZUNhcmRzL2NyZWF0ZUFkYXB0aXZlQ2FyZHNBdHRhY2htZW50Rm9yU2NyZWVuUmVhZGVyTWlkZGxld2FyZSc7XG5pbXBvcnQgY3JlYXRlQWRhcHRpdmVDYXJkc0F0dGFjaG1lbnRNaWRkbGV3YXJlIGZyb20gJy4vYWRhcHRpdmVDYXJkcy9jcmVhdGVBZGFwdGl2ZUNhcmRzQXR0YWNobWVudE1pZGRsZXdhcmUnO1xuaW1wb3J0IGNyZWF0ZUFkYXB0aXZlQ2FyZHNTdHlsZVNldCBmcm9tICcuL2FkYXB0aXZlQ2FyZHMvU3R5bGVzL2NyZWF0ZUFkYXB0aXZlQ2FyZHNTdHlsZVNldCc7XG5pbXBvcnQgZGVmYXVsdFJlbmRlck1hcmtkb3duIGZyb20gJy4vcmVuZGVyTWFya2Rvd24nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VDb21wb3NlclByb3BzKHtcbiAgYXR0YWNobWVudEZvclNjcmVlblJlYWRlck1pZGRsZXdhcmUsXG4gIGF0dGFjaG1lbnRNaWRkbGV3YXJlLFxuICByZW5kZXJNYXJrZG93bixcbiAgc3R5bGVPcHRpb25zLFxuICBzdHlsZVNldFxufToge1xuICBhdHRhY2htZW50Rm9yU2NyZWVuUmVhZGVyTWlkZGxld2FyZTogQXR0YWNobWVudEZvclNjcmVlblJlYWRlck1pZGRsZXdhcmVbXTtcbiAgYXR0YWNobWVudE1pZGRsZXdhcmU6IEF0dGFjaG1lbnRNaWRkbGV3YXJlW107XG4gIHJlbmRlck1hcmtkb3duPzogKFxuICAgIG1hcmtkb3duOiBzdHJpbmcsXG4gICAgbmV3TGluZU9wdGlvbnM6IHsgbWFya2Rvd25SZXNwZWN0Q1JMRjogYm9vbGVhbiB9LFxuICAgIGxpbmtPcHRpb25zOiB7IGV4dGVybmFsTGlua0FsdDogc3RyaW5nIH1cbiAgKSA9PiBzdHJpbmc7XG4gIHN0eWxlT3B0aW9uczogYW55O1xuICBzdHlsZVNldDogYW55O1xufSk6IHtcbiAgYXR0YWNobWVudEZvclNjcmVlblJlYWRlck1pZGRsZXdhcmU6IEF0dGFjaG1lbnRGb3JTY3JlZW5SZWFkZXJNaWRkbGV3YXJlW107XG4gIGF0dGFjaG1lbnRNaWRkbGV3YXJlOiBBdHRhY2htZW50TWlkZGxld2FyZVtdO1xuICByZW5kZXJNYXJrZG93bjogKFxuICAgIG1hcmtkb3duOiBzdHJpbmcsXG4gICAgbmV3TGluZU9wdGlvbnM6IHsgbWFya2Rvd25SZXNwZWN0Q1JMRjogYm9vbGVhbiB9LFxuICAgIGxpbmtPcHRpb25zOiB7IGV4dGVybmFsTGlua0FsdDogc3RyaW5nIH1cbiAgKSA9PiBzdHJpbmc7XG4gIGV4dHJhU3R5bGVTZXQ6IGFueTtcbn0ge1xuICBjb25zdCBwYXRjaGVkQXR0YWNobWVudE1pZGRsZXdhcmUgPSB1c2VNZW1vKFxuICAgICgpID0+IFsuLi5hdHRhY2htZW50TWlkZGxld2FyZSwgY3JlYXRlQWRhcHRpdmVDYXJkc0F0dGFjaG1lbnRNaWRkbGV3YXJlKCldLFxuICAgIFthdHRhY2htZW50TWlkZGxld2FyZV1cbiAgKTtcblxuICBjb25zdCBwYXRjaGVkQXR0YWNobWVudEZvclNjcmVlblJlYWRlck1pZGRsZXdhcmUgPSB1c2VNZW1vKFxuICAgICgpID0+IFsuLi5hdHRhY2htZW50Rm9yU2NyZWVuUmVhZGVyTWlkZGxld2FyZSwgY3JlYXRlQWRhcHRpdmVDYXJkc0F0dGFjaG1lbnRGb3JTY3JlZW5SZWFkZXJNaWRkbGV3YXJlKCldLFxuICAgIFthdHRhY2htZW50Rm9yU2NyZWVuUmVhZGVyTWlkZGxld2FyZV1cbiAgKTtcblxuICAvLyBXaGVuIHN0eWxlU2V0IGlzIG5vdCBzcGVjaWZpZWQsIHRoZSBzdHlsZU9wdGlvbnMgd2lsbCBiZSB1c2VkIHRvIGNyZWF0ZSBBZGFwdGl2ZSBDYXJkcyBzdHlsZVNldCBhbmQgbWVyZ2VkIGludG8gdXNlU3R5bGVTZXQuXG4gIGNvbnN0IGV4dHJhU3R5bGVTZXQgPSB1c2VNZW1vKFxuICAgICgpID0+IChzdHlsZVNldCA/IHVuZGVmaW5lZCA6IGNyZWF0ZUFkYXB0aXZlQ2FyZHNTdHlsZVNldChzdHlsZU9wdGlvbnMpKSxcbiAgICBbc3R5bGVPcHRpb25zLCBzdHlsZVNldF1cbiAgKTtcblxuICBjb25zdCBwYXRjaGVkUmVuZGVyTWFya2Rvd24gPSB1c2VNZW1vKFxuICAgICgpID0+ICh0eXBlb2YgcmVuZGVyTWFya2Rvd24gPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdFJlbmRlck1hcmtkb3duIDogcmVuZGVyTWFya2Rvd24pLFxuICAgIFtyZW5kZXJNYXJrZG93bl1cbiAgKTtcblxuICByZXR1cm4ge1xuICAgIGF0dGFjaG1lbnRGb3JTY3JlZW5SZWFkZXJNaWRkbGV3YXJlOiBwYXRjaGVkQXR0YWNobWVudEZvclNjcmVlblJlYWRlck1pZGRsZXdhcmUsXG4gICAgYXR0YWNobWVudE1pZGRsZXdhcmU6IHBhdGNoZWRBdHRhY2htZW50TWlkZGxld2FyZSxcbiAgICBleHRyYVN0eWxlU2V0LFxuICAgIHJlbmRlck1hcmtkb3duOiBwYXRjaGVkUmVuZGVyTWFya2Rvd25cbiAgfTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFZSxTQUFTQSxnQkFBVCxPQXlCYjtFQUFBLElBeEJBQyxtQ0F3QkEsUUF4QkFBLG1DQXdCQTtFQUFBLElBdkJBQyxvQkF1QkEsUUF2QkFBLG9CQXVCQTtFQUFBLElBdEJBQyxjQXNCQSxRQXRCQUEsY0FzQkE7RUFBQSxJQXJCQUMsWUFxQkEsUUFyQkFBLFlBcUJBO0VBQUEsSUFwQkFDLFFBb0JBLFFBcEJBQSxRQW9CQTtFQUNBLElBQU1DLDJCQUEyQixHQUFHLElBQUFDLGNBQUEsRUFDbEM7SUFBQSxrREFBVUwsb0JBQVYsSUFBZ0MsSUFBQU0sZ0RBQUEsR0FBaEM7RUFBQSxDQURrQyxFQUVsQyxDQUFDTixvQkFBRCxDQUZrQyxDQUFwQztFQUtBLElBQU1PLDBDQUEwQyxHQUFHLElBQUFGLGNBQUEsRUFDakQ7SUFBQSxrREFBVU4sbUNBQVYsSUFBK0MsSUFBQVMsK0RBQUEsR0FBL0M7RUFBQSxDQURpRCxFQUVqRCxDQUFDVCxtQ0FBRCxDQUZpRCxDQUFuRCxDQU5BLENBV0E7O0VBQ0EsSUFBTVUsYUFBYSxHQUFHLElBQUFKLGNBQUEsRUFDcEI7SUFBQSxPQUFPRixRQUFRLEdBQUdPLFNBQUgsR0FBZSxJQUFBQyxvQ0FBQSxFQUE0QlQsWUFBNUIsQ0FBOUI7RUFBQSxDQURvQixFQUVwQixDQUFDQSxZQUFELEVBQWVDLFFBQWYsQ0FGb0IsQ0FBdEI7RUFLQSxJQUFNUyxxQkFBcUIsR0FBRyxJQUFBUCxjQUFBLEVBQzVCO0lBQUEsT0FBTyxPQUFPSixjQUFQLEtBQTBCLFdBQTFCLEdBQXdDWSx1QkFBeEMsR0FBZ0VaLGNBQXZFO0VBQUEsQ0FENEIsRUFFNUIsQ0FBQ0EsY0FBRCxDQUY0QixDQUE5QjtFQUtBLE9BQU87SUFDTEYsbUNBQW1DLEVBQUVRLDBDQURoQztJQUVMUCxvQkFBb0IsRUFBRUksMkJBRmpCO0lBR0xLLGFBQWEsRUFBYkEsYUFISztJQUlMUixjQUFjLEVBQUVXO0VBSlgsQ0FBUDtBQU1EIn0=