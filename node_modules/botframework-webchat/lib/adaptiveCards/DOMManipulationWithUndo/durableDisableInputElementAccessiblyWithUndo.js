"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = durableDisableInputElementAccessiblyWithUndo;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _addEventListenerWithUndo = _interopRequireDefault(require("./addEventListenerWithUndo"));

var _bunchUndos = _interopRequireDefault(require("./bunchUndos"));

var _noOp = _interopRequireDefault(require("./private/noOp"));

var _setOrRemoveAttributeIfFalseWithUndo = _interopRequireDefault(require("./setOrRemoveAttributeIfFalseWithUndo"));

/**
 * An event handler for disabling event bubbling and propagation.
 */
function disabledHandler(event) {
  event.preventDefault();
  event.stopImmediatePropagation();
  event.stopPropagation();
}

function disable(element, undoStack) {
  var tag = element.nodeName.toLowerCase();
  /* eslint-disable-next-line default-case */

  switch (tag) {
    case 'button':
    case 'input':
    case 'select':
    case 'textarea':
      undoStack.push( // "click" handler in capture phase to make sure we can block as much "click" event listeners as possible.
      (0, _addEventListenerWithUndo.default)(element, 'click', disabledHandler, {
        capture: true
      }), (0, _setOrRemoveAttributeIfFalseWithUndo.default)(element, 'aria-disabled', 'true'), (0, _setOrRemoveAttributeIfFalseWithUndo.default)(element, 'tabindex', '-1'));

      if (tag === 'input' || tag === 'textarea') {
        undoStack.push((0, _setOrRemoveAttributeIfFalseWithUndo.default)(element, 'readonly', 'readonly'));
      } else if (tag === 'select') {
        undoStack.push.apply(undoStack, (0, _toConsumableArray2.default)(Array.from(element.querySelectorAll('option')).map(function (option) {
          return (0, _setOrRemoveAttributeIfFalseWithUndo.default)(option, 'disabled', 'disabled');
        })));
      }

      break;
  }
}
/**
 * Disables an input element in accessible fashion with undo function.
 *
 * This is designed for accessibility and mimick the behavior of `disabled` attribute in accessible form:
 *
 * - Take away from focus ring;
 *   - If currently focused, do not move focus;
 * - Mark content as readonly.
 *
 * Thus, it should not impact hyperlinks or other contents which are not affected by `disabled` attribute.
 *
 * For simplicity, currently, we did not disable element with `contenteditable` attribute.
 *
 * We only disable these elements: `<button>`, `<input>`, `<select>`, `<textarea>`.
 *
 * We need durability as Adaptive Cards occasionally reset `tabindex="0"`.
 *
 * @returns {function} A function, when called, will restore to previous state.
 */


function durableDisableInputElementAccessiblyWithUndo(element) {
  if (!element) {
    return _noOp.default;
  }

  var undoStack = [];

  var apply = function apply() {
    return disable(element, undoStack);
  };

  apply();
  var observer = new MutationObserver(apply);
  observer.observe(element, {
    attributeFilter: ['tabindex']
  });
  undoStack.push(function () {
    return observer.disconnect();
  });
  return (0, _bunchUndos.default)(undoStack);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkaXNhYmxlZEhhbmRsZXIiLCJldmVudCIsInByZXZlbnREZWZhdWx0Iiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwic3RvcFByb3BhZ2F0aW9uIiwiZGlzYWJsZSIsImVsZW1lbnQiLCJ1bmRvU3RhY2siLCJ0YWciLCJub2RlTmFtZSIsInRvTG93ZXJDYXNlIiwicHVzaCIsImFkZEV2ZW50TGlzdGVuZXJXaXRoVW5kbyIsImNhcHR1cmUiLCJzZXRPclJlbW92ZUF0dHJpYnV0ZUlmRmFsc2VXaXRoVW5kbyIsIkFycmF5IiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJtYXAiLCJvcHRpb24iLCJkdXJhYmxlRGlzYWJsZUlucHV0RWxlbWVudEFjY2Vzc2libHlXaXRoVW5kbyIsIm5vT3AiLCJhcHBseSIsIm9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIm9ic2VydmUiLCJhdHRyaWJ1dGVGaWx0ZXIiLCJkaXNjb25uZWN0IiwiYnVuY2hVbmRvcyJdLCJzb3VyY2VSb290IjoiYnVuZGxlOi8vLyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FkYXB0aXZlQ2FyZHMvRE9NTWFuaXB1bGF0aW9uV2l0aFVuZG8vZHVyYWJsZURpc2FibGVJbnB1dEVsZW1lbnRBY2Nlc3NpYmx5V2l0aFVuZG8udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFkZEV2ZW50TGlzdGVuZXJXaXRoVW5kbyBmcm9tICcuL2FkZEV2ZW50TGlzdGVuZXJXaXRoVW5kbyc7XG5pbXBvcnQgYnVuY2hVbmRvcyBmcm9tICcuL2J1bmNoVW5kb3MnO1xuaW1wb3J0IG5vT3AgZnJvbSAnLi9wcml2YXRlL25vT3AnO1xuaW1wb3J0IHNldE9yUmVtb3ZlQXR0cmlidXRlSWZGYWxzZVdpdGhVbmRvIGZyb20gJy4vc2V0T3JSZW1vdmVBdHRyaWJ1dGVJZkZhbHNlV2l0aFVuZG8nO1xuXG5pbXBvcnQgdHlwZSB7IFVuZG9GdW5jdGlvbiB9IGZyb20gJy4vdHlwZXMvVW5kb0Z1bmN0aW9uJztcblxuLyoqXG4gKiBBbiBldmVudCBoYW5kbGVyIGZvciBkaXNhYmxpbmcgZXZlbnQgYnViYmxpbmcgYW5kIHByb3BhZ2F0aW9uLlxuICovXG5mdW5jdGlvbiBkaXNhYmxlZEhhbmRsZXIoZXZlbnQ6IEV2ZW50KTogdm9pZCB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbn1cblxuZnVuY3Rpb24gZGlzYWJsZShlbGVtZW50OiBIVE1MRWxlbWVudCwgdW5kb1N0YWNrOiBVbmRvRnVuY3Rpb25bXSk6IHZvaWQge1xuICBjb25zdCB0YWcgPSBlbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlZmF1bHQtY2FzZSAqL1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgJ2J1dHRvbic6XG4gICAgY2FzZSAnaW5wdXQnOlxuICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgdW5kb1N0YWNrLnB1c2goXG4gICAgICAgIC8vIFwiY2xpY2tcIiBoYW5kbGVyIGluIGNhcHR1cmUgcGhhc2UgdG8gbWFrZSBzdXJlIHdlIGNhbiBibG9jayBhcyBtdWNoIFwiY2xpY2tcIiBldmVudCBsaXN0ZW5lcnMgYXMgcG9zc2libGUuXG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXJXaXRoVW5kbyhlbGVtZW50LCAnY2xpY2snLCBkaXNhYmxlZEhhbmRsZXIsIHsgY2FwdHVyZTogdHJ1ZSB9KSxcbiAgICAgICAgc2V0T3JSZW1vdmVBdHRyaWJ1dGVJZkZhbHNlV2l0aFVuZG8oZWxlbWVudCwgJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpLFxuICAgICAgICBzZXRPclJlbW92ZUF0dHJpYnV0ZUlmRmFsc2VXaXRoVW5kbyhlbGVtZW50LCAndGFiaW5kZXgnLCAnLTEnKVxuICAgICAgKTtcblxuICAgICAgaWYgKHRhZyA9PT0gJ2lucHV0JyB8fCB0YWcgPT09ICd0ZXh0YXJlYScpIHtcbiAgICAgICAgdW5kb1N0YWNrLnB1c2goc2V0T3JSZW1vdmVBdHRyaWJ1dGVJZkZhbHNlV2l0aFVuZG8oZWxlbWVudCwgJ3JlYWRvbmx5JywgJ3JlYWRvbmx5JykpO1xuICAgICAgfSBlbHNlIGlmICh0YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgICAgIHVuZG9TdGFjay5wdXNoKFxuICAgICAgICAgIC4uLkFycmF5LmZyb20oZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdvcHRpb24nKSBhcyBOb2RlTGlzdE9mPEhUTUxPcHRpb25FbGVtZW50PikubWFwKG9wdGlvbiA9PlxuICAgICAgICAgICAgc2V0T3JSZW1vdmVBdHRyaWJ1dGVJZkZhbHNlV2l0aFVuZG8ob3B0aW9uLCAnZGlzYWJsZWQnLCAnZGlzYWJsZWQnKVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNhYmxlcyBhbiBpbnB1dCBlbGVtZW50IGluIGFjY2Vzc2libGUgZmFzaGlvbiB3aXRoIHVuZG8gZnVuY3Rpb24uXG4gKlxuICogVGhpcyBpcyBkZXNpZ25lZCBmb3IgYWNjZXNzaWJpbGl0eSBhbmQgbWltaWNrIHRoZSBiZWhhdmlvciBvZiBgZGlzYWJsZWRgIGF0dHJpYnV0ZSBpbiBhY2Nlc3NpYmxlIGZvcm06XG4gKlxuICogLSBUYWtlIGF3YXkgZnJvbSBmb2N1cyByaW5nO1xuICogICAtIElmIGN1cnJlbnRseSBmb2N1c2VkLCBkbyBub3QgbW92ZSBmb2N1cztcbiAqIC0gTWFyayBjb250ZW50IGFzIHJlYWRvbmx5LlxuICpcbiAqIFRodXMsIGl0IHNob3VsZCBub3QgaW1wYWN0IGh5cGVybGlua3Mgb3Igb3RoZXIgY29udGVudHMgd2hpY2ggYXJlIG5vdCBhZmZlY3RlZCBieSBgZGlzYWJsZWRgIGF0dHJpYnV0ZS5cbiAqXG4gKiBGb3Igc2ltcGxpY2l0eSwgY3VycmVudGx5LCB3ZSBkaWQgbm90IGRpc2FibGUgZWxlbWVudCB3aXRoIGBjb250ZW50ZWRpdGFibGVgIGF0dHJpYnV0ZS5cbiAqXG4gKiBXZSBvbmx5IGRpc2FibGUgdGhlc2UgZWxlbWVudHM6IGA8YnV0dG9uPmAsIGA8aW5wdXQ+YCwgYDxzZWxlY3Q+YCwgYDx0ZXh0YXJlYT5gLlxuICpcbiAqIFdlIG5lZWQgZHVyYWJpbGl0eSBhcyBBZGFwdGl2ZSBDYXJkcyBvY2Nhc2lvbmFsbHkgcmVzZXQgYHRhYmluZGV4PVwiMFwiYC5cbiAqXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259IEEgZnVuY3Rpb24sIHdoZW4gY2FsbGVkLCB3aWxsIHJlc3RvcmUgdG8gcHJldmlvdXMgc3RhdGUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGR1cmFibGVEaXNhYmxlSW5wdXRFbGVtZW50QWNjZXNzaWJseVdpdGhVbmRvKGVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkKTogVW5kb0Z1bmN0aW9uIHtcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuIG5vT3A7XG4gIH1cblxuICBjb25zdCB1bmRvU3RhY2s6IFVuZG9GdW5jdGlvbltdID0gW107XG5cbiAgY29uc3QgYXBwbHkgPSAoKSA9PiBkaXNhYmxlKGVsZW1lbnQsIHVuZG9TdGFjayk7XG5cbiAgYXBwbHkoKTtcblxuICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGFwcGx5KTtcblxuICBvYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQsIHsgYXR0cmlidXRlRmlsdGVyOiBbJ3RhYmluZGV4J10gfSk7XG5cbiAgdW5kb1N0YWNrLnB1c2goKCkgPT4gb2JzZXJ2ZXIuZGlzY29ubmVjdCgpKTtcblxuICByZXR1cm4gYnVuY2hVbmRvcyh1bmRvU3RhY2spO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUlBO0FBQ0E7QUFDQTtBQUNBLFNBQVNBLGVBQVQsQ0FBeUJDLEtBQXpCLEVBQTZDO0VBQzNDQSxLQUFLLENBQUNDLGNBQU47RUFDQUQsS0FBSyxDQUFDRSx3QkFBTjtFQUNBRixLQUFLLENBQUNHLGVBQU47QUFDRDs7QUFFRCxTQUFTQyxPQUFULENBQWlCQyxPQUFqQixFQUF1Q0MsU0FBdkMsRUFBd0U7RUFDdEUsSUFBTUMsR0FBRyxHQUFHRixPQUFPLENBQUNHLFFBQVIsQ0FBaUJDLFdBQWpCLEVBQVo7RUFFQTs7RUFDQSxRQUFRRixHQUFSO0lBQ0UsS0FBSyxRQUFMO0lBQ0EsS0FBSyxPQUFMO0lBQ0EsS0FBSyxRQUFMO0lBQ0EsS0FBSyxVQUFMO01BQ0VELFNBQVMsQ0FBQ0ksSUFBVixFQUNFO01BQ0EsSUFBQUMsaUNBQUEsRUFBeUJOLE9BQXpCLEVBQWtDLE9BQWxDLEVBQTJDTixlQUEzQyxFQUE0RDtRQUFFYSxPQUFPLEVBQUU7TUFBWCxDQUE1RCxDQUZGLEVBR0UsSUFBQUMsNENBQUEsRUFBb0NSLE9BQXBDLEVBQTZDLGVBQTdDLEVBQThELE1BQTlELENBSEYsRUFJRSxJQUFBUSw0Q0FBQSxFQUFvQ1IsT0FBcEMsRUFBNkMsVUFBN0MsRUFBeUQsSUFBekQsQ0FKRjs7TUFPQSxJQUFJRSxHQUFHLEtBQUssT0FBUixJQUFtQkEsR0FBRyxLQUFLLFVBQS9CLEVBQTJDO1FBQ3pDRCxTQUFTLENBQUNJLElBQVYsQ0FBZSxJQUFBRyw0Q0FBQSxFQUFvQ1IsT0FBcEMsRUFBNkMsVUFBN0MsRUFBeUQsVUFBekQsQ0FBZjtNQUNELENBRkQsTUFFTyxJQUFJRSxHQUFHLEtBQUssUUFBWixFQUFzQjtRQUMzQkQsU0FBUyxDQUFDSSxJQUFWLE9BQUFKLFNBQVMsbUNBQ0pRLEtBQUssQ0FBQ0MsSUFBTixDQUFXVixPQUFPLENBQUNXLGdCQUFSLENBQXlCLFFBQXpCLENBQVgsRUFBZ0ZDLEdBQWhGLENBQW9GLFVBQUFDLE1BQU07VUFBQSxPQUMzRixJQUFBTCw0Q0FBQSxFQUFvQ0ssTUFBcEMsRUFBNEMsVUFBNUMsRUFBd0QsVUFBeEQsQ0FEMkY7UUFBQSxDQUExRixDQURJLEVBQVQ7TUFLRDs7TUFFRDtFQXRCSjtBQXdCRDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDZSxTQUFTQyw0Q0FBVCxDQUFzRGQsT0FBdEQsRUFBc0c7RUFDbkgsSUFBSSxDQUFDQSxPQUFMLEVBQWM7SUFDWixPQUFPZSxhQUFQO0VBQ0Q7O0VBRUQsSUFBTWQsU0FBeUIsR0FBRyxFQUFsQzs7RUFFQSxJQUFNZSxLQUFLLEdBQUcsU0FBUkEsS0FBUTtJQUFBLE9BQU1qQixPQUFPLENBQUNDLE9BQUQsRUFBVUMsU0FBVixDQUFiO0VBQUEsQ0FBZDs7RUFFQWUsS0FBSztFQUVMLElBQU1DLFFBQVEsR0FBRyxJQUFJQyxnQkFBSixDQUFxQkYsS0FBckIsQ0FBakI7RUFFQUMsUUFBUSxDQUFDRSxPQUFULENBQWlCbkIsT0FBakIsRUFBMEI7SUFBRW9CLGVBQWUsRUFBRSxDQUFDLFVBQUQ7RUFBbkIsQ0FBMUI7RUFFQW5CLFNBQVMsQ0FBQ0ksSUFBVixDQUFlO0lBQUEsT0FBTVksUUFBUSxDQUFDSSxVQUFULEVBQU47RUFBQSxDQUFmO0VBRUEsT0FBTyxJQUFBQyxtQkFBQSxFQUFXckIsU0FBWCxDQUFQO0FBQ0QifQ==