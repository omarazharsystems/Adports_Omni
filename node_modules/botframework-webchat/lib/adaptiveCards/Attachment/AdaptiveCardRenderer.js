"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _botframeworkWebchatComponent = require("botframework-webchat-component");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _renderAdaptiveCard = _interopRequireDefault(require("./private/renderAdaptiveCard"));

var _useActionSetShouldNotBeMenuBarModEffect = _interopRequireDefault(require("./AdaptiveCardHacks/useActionSetShouldNotBeMenuBarModEffect"));

var _useActionShouldBePushButtonModEffect = _interopRequireDefault(require("./AdaptiveCardHacks/useActionShouldBePushButtonModEffect"));

var _useActiveElementModEffect = _interopRequireDefault(require("./AdaptiveCardHacks/useActiveElementModEffect"));

var _useAdaptiveCardsHostConfig = _interopRequireDefault(require("../hooks/useAdaptiveCardsHostConfig"));

var _useAdaptiveCardsPackage = _interopRequireDefault(require("../hooks/useAdaptiveCardsPackage"));

var _useDisabledModEffect3 = _interopRequireDefault(require("./AdaptiveCardHacks/useDisabledModEffect"));

var _usePersistValuesModEffect = _interopRequireDefault(require("./AdaptiveCardHacks/usePersistValuesModEffect"));

var _useRoleModEffect3 = _interopRequireDefault(require("./AdaptiveCardHacks/useRoleModEffect"));

var _useValueRef = _interopRequireDefault(require("./AdaptiveCardHacks/private/useValueRef"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* eslint no-magic-numbers: ["error", { "ignore": [-1, 0, 2] }] */
var ErrorBox = _botframeworkWebchatComponent.Components.ErrorBox;
var useDisabled = _botframeworkWebchatComponent.hooks.useDisabled,
    useLocalizer = _botframeworkWebchatComponent.hooks.useLocalizer,
    usePerformCardAction = _botframeworkWebchatComponent.hooks.usePerformCardAction,
    useRenderMarkdownAsHTML = _botframeworkWebchatComponent.hooks.useRenderMarkdownAsHTML,
    useScrollToEnd = _botframeworkWebchatComponent.hooks.useScrollToEnd,
    useStyleSet = _botframeworkWebchatComponent.hooks.useStyleSet;
var node_env = undefined || "production";

var AdaptiveCardRenderer = function AdaptiveCardRenderer(_ref) {
  var actionPerformedClassName = _ref.actionPerformedClassName,
      adaptiveCard = _ref.adaptiveCard,
      disabledFromProps = _ref.disabled,
      tapAction = _ref.tapAction;

  var _useStyleSet = useStyleSet(),
      _useStyleSet2 = (0, _slicedToArray2.default)(_useStyleSet, 1),
      adaptiveCardRendererStyleSet = _useStyleSet2[0].adaptiveCardRenderer;

  var _useAdaptiveCardsPack = (0, _useAdaptiveCardsPackage.default)(),
      _useAdaptiveCardsPack2 = (0, _slicedToArray2.default)(_useAdaptiveCardsPack, 1),
      _useAdaptiveCardsPack3 = _useAdaptiveCardsPack2[0],
      GlobalSettings = _useAdaptiveCardsPack3.GlobalSettings,
      HostConfig = _useAdaptiveCardsPack3.HostConfig;

  var _useAdaptiveCardsHost = (0, _useAdaptiveCardsHostConfig.default)(),
      _useAdaptiveCardsHost2 = (0, _slicedToArray2.default)(_useAdaptiveCardsHost, 1),
      adaptiveCardsHostConfig = _useAdaptiveCardsHost2[0];

  var _useDisabled = useDisabled(),
      _useDisabled2 = (0, _slicedToArray2.default)(_useDisabled, 1),
      disabledFromComposer = _useDisabled2[0];

  var contentRef = (0, _react.useRef)();
  var localize = useLocalizer();
  var performCardAction = usePerformCardAction();
  var renderMarkdownAsHTML = useRenderMarkdownAsHTML();
  var scrollToEnd = useScrollToEnd();
  var disabled = disabledFromComposer || disabledFromProps;
  var tapActionRef = (0, _useValueRef.default)(tapAction);
  var disabledRef = (0, _useValueRef.default)(disabled); // TODO: [P2] #3199 We should consider using `adaptiveCard.selectAction` instead.
  // The null check for "tapAction" is in "handleClickAndKeyPressForTapAction".

  var handleClickAndKeyPress = (0, _react.useCallback)(function (event) {
    var _ref2 = event,
        key = _ref2.key,
        type = _ref2.type;
    var target = event.target; // Some items, e.g. tappable text, cannot be disabled thru DOM attributes

    var current = contentRef.current;
    var adaptiveCardRoot = current.querySelector('.ac-adaptiveCard[tabindex="0"]');

    if (!adaptiveCardRoot) {
      return console.warn('botframework-webchat: No Adaptive Card root container can be found; the card is probably on an unsupported Adaptive Card version.');
    } // For "keypress" event, we only listen to ENTER and SPACEBAR key.


    if (type === 'keypress') {
      if (key !== 'Enter' && key !== ' ') {
        return;
      }

      event.preventDefault();
    } // We will call performCardAction if either:
    // 1. We are on the target, or
    // 2. The event-dispatching element is not interactive


    if (target !== adaptiveCardRoot) {
      var tabIndex = (0, _botframeworkWebchatComponent.getTabIndex)(target); // If the user is clicking on something that is already clickable, do not allow them to click the card.
      // E.g. a hero card can be tappable, and image and buttons inside the hero card can also be tappable.

      if (typeof tabIndex === 'number' && tabIndex >= 0) {
        return;
      }
    }

    performCardAction(tapActionRef.current);
    scrollToEnd();
  }, [contentRef, performCardAction, scrollToEnd, tapActionRef]); // Only listen to event if it is not disabled and have "tapAction" prop.

  var handleClickAndKeyPressForTapAction = !disabled && tapAction ? handleClickAndKeyPress : undefined;
  var handleExecuteAction = (0, _react.useCallback)(function (action) {
    // Some items, e.g. tappable image, cannot be disabled thru DOM attributes
    if (disabledRef.current) {
      return;
    }

    var actionTypeName = action.getJsonTypeName();
    var image = action.iconUrl,
        title = action.title; // We cannot use "instanceof" check here, because web devs may bring their own version of Adaptive Cards package.
    // We need to check using "getJsonTypeName()" instead.

    if (actionTypeName === 'Action.OpenUrl') {
      var _ref3 = action,
          value = _ref3.url;
      performCardAction({
        image: image,
        title: title,
        type: 'openUrl',
        value: value
      });
    } else if (actionTypeName === 'Action.Submit') {
      var _ref4 = action,
          data = _ref4.data;

      if (typeof data !== 'undefined') {
        if (typeof data === 'string') {
          performCardAction({
            image: image,
            title: title,
            type: 'imBack',
            value: data
          });
        } else if (data.__isBotFrameworkCardAction) {
          performCardAction(data.cardAction);
        } else {
          performCardAction({
            image: image,
            title: title,
            type: 'postBack',
            value: data
          });
        }
      }

      scrollToEnd();
    } else {
      console.error("Web Chat: received unknown action from Adaptive Cards");
      console.error(action);
    }
  }, [disabledRef, performCardAction, scrollToEnd]); // For accessibility issue #1340, `tabindex="0"` must not be set for the root container if it is not interactive.

  var setTabIndexAtCardRoot = !!tapAction;

  var _useActionShouldBePus = (0, _useActionShouldBePushButtonModEffect.default)(adaptiveCard),
      _useActionShouldBePus2 = (0, _slicedToArray2.default)(_useActionShouldBePus, 2),
      applyActionShouldBePushButtonMod = _useActionShouldBePus2[0],
      undoActionShouldBePushButtonMod = _useActionShouldBePus2[1];

  var _useActionSetShouldNo = (0, _useActionSetShouldNotBeMenuBarModEffect.default)(adaptiveCard),
      _useActionSetShouldNo2 = (0, _slicedToArray2.default)(_useActionSetShouldNo, 2),
      applyActionSetShouldNotBeMenuBarMod = _useActionSetShouldNo2[0],
      undoActionSetShouldNotBeMenuBarMod = _useActionSetShouldNo2[1];

  var _useActiveElementModE = (0, _useActiveElementModEffect.default)(adaptiveCard),
      _useActiveElementModE2 = (0, _slicedToArray2.default)(_useActiveElementModE, 2),
      applyActiveElementMod = _useActiveElementModE2[0],
      undoActiveElementMod = _useActiveElementModE2[1];

  var _useDisabledModEffect = (0, _useDisabledModEffect3.default)(adaptiveCard),
      _useDisabledModEffect2 = (0, _slicedToArray2.default)(_useDisabledModEffect, 2),
      applyDisabledMod = _useDisabledModEffect2[0],
      undoDisabledMod = _useDisabledModEffect2[1];

  var _usePersistValuesModE = (0, _usePersistValuesModEffect.default)(adaptiveCard),
      _usePersistValuesModE2 = (0, _slicedToArray2.default)(_usePersistValuesModE, 2),
      applyPersistValuesMod = _usePersistValuesModE2[0],
      undoPersistValuesMod = _usePersistValuesModE2[1];

  var _useRoleModEffect = (0, _useRoleModEffect3.default)(adaptiveCard),
      _useRoleModEffect2 = (0, _slicedToArray2.default)(_useRoleModEffect, 2),
      applyRoleMod = _useRoleModEffect2[0],
      undoRoleMod = _useRoleModEffect2[1];

  var _useMemo = (0, _react.useMemo)(function () {
    undoActionShouldBePushButtonMod();
    undoActionSetShouldNotBeMenuBarMod();
    undoActiveElementMod();
    undoDisabledMod();
    undoPersistValuesMod();
    undoRoleMod();
    return (0, _renderAdaptiveCard.default)(adaptiveCard, {
      adaptiveCardsHostConfig: adaptiveCardsHostConfig,
      adaptiveCardsPackage: {
        GlobalSettings: GlobalSettings,
        HostConfig: HostConfig
      },
      renderMarkdownAsHTML: renderMarkdownAsHTML,
      setTabIndexAtCardRoot: setTabIndexAtCardRoot
    });
  }, [adaptiveCard, adaptiveCardsHostConfig, GlobalSettings, HostConfig, renderMarkdownAsHTML, setTabIndexAtCardRoot, undoActionShouldBePushButtonMod, undoActionSetShouldNotBeMenuBarMod, undoActiveElementMod, undoDisabledMod, undoPersistValuesMod, undoRoleMod]),
      element = _useMemo.element,
      errors = _useMemo.errors;

  (0, _react.useMemo)(function () {
    adaptiveCard.onExecuteAction = handleExecuteAction;
  }, [adaptiveCard, handleExecuteAction]);
  (0, _react.useLayoutEffect)(function () {
    var current = contentRef.current;
    current === null || current === void 0 ? void 0 : current.appendChild(element);
    return function () {
      current === null || current === void 0 ? void 0 : current.removeChild(element);
    };
  }, [contentRef, element]); // Apply all mods regardless whether the element changed or not.
  // This is because we have undoed mods when we call the `useXXXModEffect` hook.

  (0, _react.useLayoutEffect)(function () {
    applyActionShouldBePushButtonMod(element, actionPerformedClassName);
    applyActionSetShouldNotBeMenuBarMod(element);
    applyActiveElementMod(element);
    applyDisabledMod(element, disabled);
    applyPersistValuesMod(element);
    applyRoleMod(element);
  }, [actionPerformedClassName, applyActionShouldBePushButtonMod, applyActionSetShouldNotBeMenuBarMod, applyActiveElementMod, applyDisabledMod, applyPersistValuesMod, applyRoleMod, disabled, element]);
  return errors !== null && errors !== void 0 && errors.length ? node_env === 'development' && /*#__PURE__*/_react.default.createElement(ErrorBox, {
    error: errors[0],
    type: localize('ADAPTIVE_CARD_ERROR_BOX_TITLE_RENDER')
  }) : /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)(adaptiveCardRendererStyleSet + '', 'webchat__adaptive-card-renderer'),
    onClick: handleClickAndKeyPressForTapAction,
    onKeyPress: handleClickAndKeyPressForTapAction,
    ref: contentRef
  });
};

AdaptiveCardRenderer.defaultProps = {
  actionPerformedClassName: '',
  disabled: undefined,
  tapAction: undefined
};
AdaptiveCardRenderer.propTypes = {
  actionPerformedClassName: _propTypes.default.string,
  adaptiveCard: _propTypes.default.any.isRequired,
  disabled: _propTypes.default.bool,
  // TypeScript class is not mappable to PropTypes.func
  // @ts-ignore
  tapAction: _propTypes.default.shape({
    image: _propTypes.default.string,
    title: _propTypes.default.string,
    type: _propTypes.default.string.isRequired,
    value: _propTypes.default.string
  })
};
var _default = AdaptiveCardRenderer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFcnJvckJveCIsIkNvbXBvbmVudHMiLCJ1c2VEaXNhYmxlZCIsImhvb2tzIiwidXNlTG9jYWxpemVyIiwidXNlUGVyZm9ybUNhcmRBY3Rpb24iLCJ1c2VSZW5kZXJNYXJrZG93bkFzSFRNTCIsInVzZVNjcm9sbFRvRW5kIiwidXNlU3R5bGVTZXQiLCJub2RlX2VudiIsIkFkYXB0aXZlQ2FyZFJlbmRlcmVyIiwiYWN0aW9uUGVyZm9ybWVkQ2xhc3NOYW1lIiwiYWRhcHRpdmVDYXJkIiwiZGlzYWJsZWRGcm9tUHJvcHMiLCJkaXNhYmxlZCIsInRhcEFjdGlvbiIsImFkYXB0aXZlQ2FyZFJlbmRlcmVyU3R5bGVTZXQiLCJhZGFwdGl2ZUNhcmRSZW5kZXJlciIsInVzZUFkYXB0aXZlQ2FyZHNQYWNrYWdlIiwiR2xvYmFsU2V0dGluZ3MiLCJIb3N0Q29uZmlnIiwidXNlQWRhcHRpdmVDYXJkc0hvc3RDb25maWciLCJhZGFwdGl2ZUNhcmRzSG9zdENvbmZpZyIsImRpc2FibGVkRnJvbUNvbXBvc2VyIiwiY29udGVudFJlZiIsInVzZVJlZiIsImxvY2FsaXplIiwicGVyZm9ybUNhcmRBY3Rpb24iLCJyZW5kZXJNYXJrZG93bkFzSFRNTCIsInNjcm9sbFRvRW5kIiwidGFwQWN0aW9uUmVmIiwidXNlVmFsdWVSZWYiLCJkaXNhYmxlZFJlZiIsImhhbmRsZUNsaWNrQW5kS2V5UHJlc3MiLCJ1c2VDYWxsYmFjayIsImV2ZW50Iiwia2V5IiwidHlwZSIsInRhcmdldCIsImN1cnJlbnQiLCJhZGFwdGl2ZUNhcmRSb290IiwicXVlcnlTZWxlY3RvciIsImNvbnNvbGUiLCJ3YXJuIiwicHJldmVudERlZmF1bHQiLCJ0YWJJbmRleCIsImdldFRhYkluZGV4IiwiaGFuZGxlQ2xpY2tBbmRLZXlQcmVzc0ZvclRhcEFjdGlvbiIsInVuZGVmaW5lZCIsImhhbmRsZUV4ZWN1dGVBY3Rpb24iLCJhY3Rpb24iLCJhY3Rpb25UeXBlTmFtZSIsImdldEpzb25UeXBlTmFtZSIsImltYWdlIiwiaWNvblVybCIsInRpdGxlIiwidmFsdWUiLCJ1cmwiLCJkYXRhIiwiX19pc0JvdEZyYW1ld29ya0NhcmRBY3Rpb24iLCJjYXJkQWN0aW9uIiwiZXJyb3IiLCJzZXRUYWJJbmRleEF0Q2FyZFJvb3QiLCJ1c2VBY3Rpb25TaG91bGRCZVB1c2hCdXR0b25Nb2RFZmZlY3QiLCJhcHBseUFjdGlvblNob3VsZEJlUHVzaEJ1dHRvbk1vZCIsInVuZG9BY3Rpb25TaG91bGRCZVB1c2hCdXR0b25Nb2QiLCJ1c2VBY3Rpb25TZXRTaG91bGROb3RCZU1lbnVCYXJNb2RFZmZlY3QiLCJhcHBseUFjdGlvblNldFNob3VsZE5vdEJlTWVudUJhck1vZCIsInVuZG9BY3Rpb25TZXRTaG91bGROb3RCZU1lbnVCYXJNb2QiLCJ1c2VBY3RpdmVFbGVtZW50TW9kRWZmZWN0IiwiYXBwbHlBY3RpdmVFbGVtZW50TW9kIiwidW5kb0FjdGl2ZUVsZW1lbnRNb2QiLCJ1c2VEaXNhYmxlZE1vZEVmZmVjdCIsImFwcGx5RGlzYWJsZWRNb2QiLCJ1bmRvRGlzYWJsZWRNb2QiLCJ1c2VQZXJzaXN0VmFsdWVzTW9kRWZmZWN0IiwiYXBwbHlQZXJzaXN0VmFsdWVzTW9kIiwidW5kb1BlcnNpc3RWYWx1ZXNNb2QiLCJ1c2VSb2xlTW9kRWZmZWN0IiwiYXBwbHlSb2xlTW9kIiwidW5kb1JvbGVNb2QiLCJ1c2VNZW1vIiwicmVuZGVyQWRhcHRpdmVDYXJkIiwiYWRhcHRpdmVDYXJkc1BhY2thZ2UiLCJlbGVtZW50IiwiZXJyb3JzIiwib25FeGVjdXRlQWN0aW9uIiwidXNlTGF5b3V0RWZmZWN0IiwiYXBwZW5kQ2hpbGQiLCJyZW1vdmVDaGlsZCIsImxlbmd0aCIsImNsYXNzTmFtZXMiLCJkZWZhdWx0UHJvcHMiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJhbnkiLCJpc1JlcXVpcmVkIiwiYm9vbCIsInNoYXBlIl0sInNvdXJjZVJvb3QiOiJidW5kbGU6Ly8vIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYWRhcHRpdmVDYXJkcy9BdHRhY2htZW50L0FkYXB0aXZlQ2FyZFJlbmRlcmVyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQgbm8tbWFnaWMtbnVtYmVyczogW1wiZXJyb3JcIiwgeyBcImlnbm9yZVwiOiBbLTEsIDAsIDJdIH1dICovXG5cbmltcG9ydCB7IEFjdGlvbiBhcyBBZGFwdGl2ZUNhcmRBY3Rpb24sIEFkYXB0aXZlQ2FyZCwgT3BlblVybEFjdGlvbiwgU3VibWl0QWN0aW9uIH0gZnJvbSAnYWRhcHRpdmVjYXJkcyc7XG5pbXBvcnQgeyBDb21wb25lbnRzLCBnZXRUYWJJbmRleCwgaG9va3MgfSBmcm9tICdib3RmcmFtZXdvcmstd2ViY2hhdC1jb21wb25lbnQnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7XG4gIEtleWJvYXJkRXZlbnRIYW5kbGVyLFxuICBNb3VzZUV2ZW50SGFuZGxlcixcbiAgdXNlQ2FsbGJhY2ssXG4gIHVzZUxheW91dEVmZmVjdCxcbiAgdXNlTWVtbyxcbiAgdXNlUmVmLFxuICBWRkNcbn0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBEaXJlY3RMaW5lQ2FyZEFjdGlvbiB9IGZyb20gJ2JvdGZyYW1ld29yay13ZWJjaGF0LWNvcmUnO1xuXG5pbXBvcnQgeyBCb3RGcmFtZXdvcmtDYXJkQWN0aW9uIH0gZnJvbSAnLi9BZGFwdGl2ZUNhcmRCdWlsZGVyJztcbmltcG9ydCByZW5kZXJBZGFwdGl2ZUNhcmQgZnJvbSAnLi9wcml2YXRlL3JlbmRlckFkYXB0aXZlQ2FyZCc7XG5pbXBvcnQgdXNlQWN0aW9uU2V0U2hvdWxkTm90QmVNZW51QmFyTW9kRWZmZWN0IGZyb20gJy4vQWRhcHRpdmVDYXJkSGFja3MvdXNlQWN0aW9uU2V0U2hvdWxkTm90QmVNZW51QmFyTW9kRWZmZWN0JztcbmltcG9ydCB1c2VBY3Rpb25TaG91bGRCZVB1c2hCdXR0b25Nb2RFZmZlY3QgZnJvbSAnLi9BZGFwdGl2ZUNhcmRIYWNrcy91c2VBY3Rpb25TaG91bGRCZVB1c2hCdXR0b25Nb2RFZmZlY3QnO1xuaW1wb3J0IHVzZUFjdGl2ZUVsZW1lbnRNb2RFZmZlY3QgZnJvbSAnLi9BZGFwdGl2ZUNhcmRIYWNrcy91c2VBY3RpdmVFbGVtZW50TW9kRWZmZWN0JztcbmltcG9ydCB1c2VBZGFwdGl2ZUNhcmRzSG9zdENvbmZpZyBmcm9tICcuLi9ob29rcy91c2VBZGFwdGl2ZUNhcmRzSG9zdENvbmZpZyc7XG5pbXBvcnQgdXNlQWRhcHRpdmVDYXJkc1BhY2thZ2UgZnJvbSAnLi4vaG9va3MvdXNlQWRhcHRpdmVDYXJkc1BhY2thZ2UnO1xuaW1wb3J0IHVzZURpc2FibGVkTW9kRWZmZWN0IGZyb20gJy4vQWRhcHRpdmVDYXJkSGFja3MvdXNlRGlzYWJsZWRNb2RFZmZlY3QnO1xuaW1wb3J0IHVzZVBlcnNpc3RWYWx1ZXNNb2RFZmZlY3QgZnJvbSAnLi9BZGFwdGl2ZUNhcmRIYWNrcy91c2VQZXJzaXN0VmFsdWVzTW9kRWZmZWN0JztcbmltcG9ydCB1c2VSb2xlTW9kRWZmZWN0IGZyb20gJy4vQWRhcHRpdmVDYXJkSGFja3MvdXNlUm9sZU1vZEVmZmVjdCc7XG5pbXBvcnQgdXNlVmFsdWVSZWYgZnJvbSAnLi9BZGFwdGl2ZUNhcmRIYWNrcy9wcml2YXRlL3VzZVZhbHVlUmVmJztcblxuY29uc3QgeyBFcnJvckJveCB9ID0gQ29tcG9uZW50cztcbmNvbnN0IHsgdXNlRGlzYWJsZWQsIHVzZUxvY2FsaXplciwgdXNlUGVyZm9ybUNhcmRBY3Rpb24sIHVzZVJlbmRlck1hcmtkb3duQXNIVE1MLCB1c2VTY3JvbGxUb0VuZCwgdXNlU3R5bGVTZXQgfSA9IGhvb2tzO1xuXG5jb25zdCBub2RlX2VudiA9IHByb2Nlc3MuZW52Lm5vZGVfZW52IHx8IHByb2Nlc3MuZW52Lk5PREVfRU5WO1xuXG50eXBlIEFkYXB0aXZlQ2FyZFJlbmRlcmVyUHJvcHMgPSB7XG4gIGFjdGlvblBlcmZvcm1lZENsYXNzTmFtZT86IHN0cmluZztcbiAgYWRhcHRpdmVDYXJkOiBBZGFwdGl2ZUNhcmQ7XG4gIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgdGFwQWN0aW9uPzogRGlyZWN0TGluZUNhcmRBY3Rpb247XG59O1xuXG5jb25zdCBBZGFwdGl2ZUNhcmRSZW5kZXJlcjogVkZDPEFkYXB0aXZlQ2FyZFJlbmRlcmVyUHJvcHM+ID0gKHtcbiAgYWN0aW9uUGVyZm9ybWVkQ2xhc3NOYW1lLFxuICBhZGFwdGl2ZUNhcmQsXG4gIGRpc2FibGVkOiBkaXNhYmxlZEZyb21Qcm9wcyxcbiAgdGFwQWN0aW9uXG59KSA9PiB7XG4gIGNvbnN0IFt7IGFkYXB0aXZlQ2FyZFJlbmRlcmVyOiBhZGFwdGl2ZUNhcmRSZW5kZXJlclN0eWxlU2V0IH1dID0gdXNlU3R5bGVTZXQoKTtcbiAgY29uc3QgW3sgR2xvYmFsU2V0dGluZ3MsIEhvc3RDb25maWcgfV0gPSB1c2VBZGFwdGl2ZUNhcmRzUGFja2FnZSgpO1xuICBjb25zdCBbYWRhcHRpdmVDYXJkc0hvc3RDb25maWddID0gdXNlQWRhcHRpdmVDYXJkc0hvc3RDb25maWcoKTtcbiAgY29uc3QgW2Rpc2FibGVkRnJvbUNvbXBvc2VyXSA9IHVzZURpc2FibGVkKCk7XG4gIGNvbnN0IGNvbnRlbnRSZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KCk7XG4gIGNvbnN0IGxvY2FsaXplID0gdXNlTG9jYWxpemVyKCk7XG4gIGNvbnN0IHBlcmZvcm1DYXJkQWN0aW9uID0gdXNlUGVyZm9ybUNhcmRBY3Rpb24oKTtcbiAgY29uc3QgcmVuZGVyTWFya2Rvd25Bc0hUTUwgPSB1c2VSZW5kZXJNYXJrZG93bkFzSFRNTCgpO1xuICBjb25zdCBzY3JvbGxUb0VuZCA9IHVzZVNjcm9sbFRvRW5kKCk7XG5cbiAgY29uc3QgZGlzYWJsZWQgPSBkaXNhYmxlZEZyb21Db21wb3NlciB8fCBkaXNhYmxlZEZyb21Qcm9wcztcbiAgY29uc3QgdGFwQWN0aW9uUmVmID0gdXNlVmFsdWVSZWYodGFwQWN0aW9uKTtcblxuICBjb25zdCBkaXNhYmxlZFJlZiA9IHVzZVZhbHVlUmVmKGRpc2FibGVkKTtcblxuICAvLyBUT0RPOiBbUDJdICMzMTk5IFdlIHNob3VsZCBjb25zaWRlciB1c2luZyBgYWRhcHRpdmVDYXJkLnNlbGVjdEFjdGlvbmAgaW5zdGVhZC5cbiAgLy8gVGhlIG51bGwgY2hlY2sgZm9yIFwidGFwQWN0aW9uXCIgaXMgaW4gXCJoYW5kbGVDbGlja0FuZEtleVByZXNzRm9yVGFwQWN0aW9uXCIuXG4gIGNvbnN0IGhhbmRsZUNsaWNrQW5kS2V5UHJlc3MgPSB1c2VDYWxsYmFjazxLZXlib2FyZEV2ZW50SGFuZGxlcjxIVE1MRGl2RWxlbWVudD4gfCBNb3VzZUV2ZW50SGFuZGxlcjxIVE1MRGl2RWxlbWVudD4+KFxuICAgIChldmVudCk6IHZvaWQgPT4ge1xuICAgICAgY29uc3QgeyBrZXksIHR5cGUgfSA9IGV2ZW50IGFzIEtleWJvYXJkRXZlbnQ7XG4gICAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQgYXMgSFRNTERpdkVsZW1lbnQ7XG5cbiAgICAgIC8vIFNvbWUgaXRlbXMsIGUuZy4gdGFwcGFibGUgdGV4dCwgY2Fubm90IGJlIGRpc2FibGVkIHRocnUgRE9NIGF0dHJpYnV0ZXNcbiAgICAgIGNvbnN0IHsgY3VycmVudCB9ID0gY29udGVudFJlZjtcbiAgICAgIGNvbnN0IGFkYXB0aXZlQ2FyZFJvb3QgPSBjdXJyZW50LnF1ZXJ5U2VsZWN0b3IoJy5hYy1hZGFwdGl2ZUNhcmRbdGFiaW5kZXg9XCIwXCJdJyk7XG5cbiAgICAgIGlmICghYWRhcHRpdmVDYXJkUm9vdCkge1xuICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKFxuICAgICAgICAgICdib3RmcmFtZXdvcmstd2ViY2hhdDogTm8gQWRhcHRpdmUgQ2FyZCByb290IGNvbnRhaW5lciBjYW4gYmUgZm91bmQ7IHRoZSBjYXJkIGlzIHByb2JhYmx5IG9uIGFuIHVuc3VwcG9ydGVkIEFkYXB0aXZlIENhcmQgdmVyc2lvbi4nXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIEZvciBcImtleXByZXNzXCIgZXZlbnQsIHdlIG9ubHkgbGlzdGVuIHRvIEVOVEVSIGFuZCBTUEFDRUJBUiBrZXkuXG4gICAgICBpZiAodHlwZSA9PT0gJ2tleXByZXNzJykge1xuICAgICAgICBpZiAoa2V5ICE9PSAnRW50ZXInICYmIGtleSAhPT0gJyAnKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cblxuICAgICAgLy8gV2Ugd2lsbCBjYWxsIHBlcmZvcm1DYXJkQWN0aW9uIGlmIGVpdGhlcjpcbiAgICAgIC8vIDEuIFdlIGFyZSBvbiB0aGUgdGFyZ2V0LCBvclxuICAgICAgLy8gMi4gVGhlIGV2ZW50LWRpc3BhdGNoaW5nIGVsZW1lbnQgaXMgbm90IGludGVyYWN0aXZlXG4gICAgICBpZiAodGFyZ2V0ICE9PSBhZGFwdGl2ZUNhcmRSb290KSB7XG4gICAgICAgIGNvbnN0IHRhYkluZGV4ID0gZ2V0VGFiSW5kZXgodGFyZ2V0KTtcblxuICAgICAgICAvLyBJZiB0aGUgdXNlciBpcyBjbGlja2luZyBvbiBzb21ldGhpbmcgdGhhdCBpcyBhbHJlYWR5IGNsaWNrYWJsZSwgZG8gbm90IGFsbG93IHRoZW0gdG8gY2xpY2sgdGhlIGNhcmQuXG4gICAgICAgIC8vIEUuZy4gYSBoZXJvIGNhcmQgY2FuIGJlIHRhcHBhYmxlLCBhbmQgaW1hZ2UgYW5kIGJ1dHRvbnMgaW5zaWRlIHRoZSBoZXJvIGNhcmQgY2FuIGFsc28gYmUgdGFwcGFibGUuXG4gICAgICAgIGlmICh0eXBlb2YgdGFiSW5kZXggPT09ICdudW1iZXInICYmIHRhYkluZGV4ID49IDApIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcGVyZm9ybUNhcmRBY3Rpb24odGFwQWN0aW9uUmVmLmN1cnJlbnQpO1xuICAgICAgc2Nyb2xsVG9FbmQoKTtcbiAgICB9LFxuICAgIFtjb250ZW50UmVmLCBwZXJmb3JtQ2FyZEFjdGlvbiwgc2Nyb2xsVG9FbmQsIHRhcEFjdGlvblJlZl1cbiAgKTtcblxuICAvLyBPbmx5IGxpc3RlbiB0byBldmVudCBpZiBpdCBpcyBub3QgZGlzYWJsZWQgYW5kIGhhdmUgXCJ0YXBBY3Rpb25cIiBwcm9wLlxuICBjb25zdCBoYW5kbGVDbGlja0FuZEtleVByZXNzRm9yVGFwQWN0aW9uID0gIWRpc2FibGVkICYmIHRhcEFjdGlvbiA/IGhhbmRsZUNsaWNrQW5kS2V5UHJlc3MgOiB1bmRlZmluZWQ7XG5cbiAgY29uc3QgaGFuZGxlRXhlY3V0ZUFjdGlvbiA9IHVzZUNhbGxiYWNrKFxuICAgIChhY3Rpb246IEFkYXB0aXZlQ2FyZEFjdGlvbik6IHZvaWQgPT4ge1xuICAgICAgLy8gU29tZSBpdGVtcywgZS5nLiB0YXBwYWJsZSBpbWFnZSwgY2Fubm90IGJlIGRpc2FibGVkIHRocnUgRE9NIGF0dHJpYnV0ZXNcbiAgICAgIGlmIChkaXNhYmxlZFJlZi5jdXJyZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgYWN0aW9uVHlwZU5hbWUgPSBhY3Rpb24uZ2V0SnNvblR5cGVOYW1lKCk7XG4gICAgICBjb25zdCB7IGljb25Vcmw6IGltYWdlLCB0aXRsZSB9ID0gYWN0aW9uO1xuXG4gICAgICAvLyBXZSBjYW5ub3QgdXNlIFwiaW5zdGFuY2VvZlwiIGNoZWNrIGhlcmUsIGJlY2F1c2Ugd2ViIGRldnMgbWF5IGJyaW5nIHRoZWlyIG93biB2ZXJzaW9uIG9mIEFkYXB0aXZlIENhcmRzIHBhY2thZ2UuXG4gICAgICAvLyBXZSBuZWVkIHRvIGNoZWNrIHVzaW5nIFwiZ2V0SnNvblR5cGVOYW1lKClcIiBpbnN0ZWFkLlxuICAgICAgaWYgKGFjdGlvblR5cGVOYW1lID09PSAnQWN0aW9uLk9wZW5VcmwnKSB7XG4gICAgICAgIGNvbnN0IHsgdXJsOiB2YWx1ZSB9ID0gYWN0aW9uIGFzIE9wZW5VcmxBY3Rpb247XG5cbiAgICAgICAgcGVyZm9ybUNhcmRBY3Rpb24oe1xuICAgICAgICAgIGltYWdlLFxuICAgICAgICAgIHRpdGxlLFxuICAgICAgICAgIHR5cGU6ICdvcGVuVXJsJyxcbiAgICAgICAgICB2YWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoYWN0aW9uVHlwZU5hbWUgPT09ICdBY3Rpb24uU3VibWl0Jykge1xuICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGFjdGlvbiBhcyBTdWJtaXRBY3Rpb24gYXMge1xuICAgICAgICAgIGRhdGE6IHN0cmluZyB8IEJvdEZyYW1ld29ya0NhcmRBY3Rpb247XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHBlcmZvcm1DYXJkQWN0aW9uKHtcbiAgICAgICAgICAgICAgaW1hZ2UsXG4gICAgICAgICAgICAgIHRpdGxlLFxuICAgICAgICAgICAgICB0eXBlOiAnaW1CYWNrJyxcbiAgICAgICAgICAgICAgdmFsdWU6IGRhdGFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YS5fX2lzQm90RnJhbWV3b3JrQ2FyZEFjdGlvbikge1xuICAgICAgICAgICAgcGVyZm9ybUNhcmRBY3Rpb24oZGF0YS5jYXJkQWN0aW9uKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVyZm9ybUNhcmRBY3Rpb24oe1xuICAgICAgICAgICAgICBpbWFnZSxcbiAgICAgICAgICAgICAgdGl0bGUsXG4gICAgICAgICAgICAgIHR5cGU6ICdwb3N0QmFjaycsXG4gICAgICAgICAgICAgIHZhbHVlOiBkYXRhXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzY3JvbGxUb0VuZCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgV2ViIENoYXQ6IHJlY2VpdmVkIHVua25vd24gYWN0aW9uIGZyb20gQWRhcHRpdmUgQ2FyZHNgKTtcbiAgICAgICAgY29uc29sZS5lcnJvcihhY3Rpb24pO1xuICAgICAgfVxuICAgIH0sXG4gICAgW2Rpc2FibGVkUmVmLCBwZXJmb3JtQ2FyZEFjdGlvbiwgc2Nyb2xsVG9FbmRdXG4gICk7XG5cbiAgLy8gRm9yIGFjY2Vzc2liaWxpdHkgaXNzdWUgIzEzNDAsIGB0YWJpbmRleD1cIjBcImAgbXVzdCBub3QgYmUgc2V0IGZvciB0aGUgcm9vdCBjb250YWluZXIgaWYgaXQgaXMgbm90IGludGVyYWN0aXZlLlxuICBjb25zdCBzZXRUYWJJbmRleEF0Q2FyZFJvb3QgPSAhIXRhcEFjdGlvbjtcblxuICBjb25zdCBbYXBwbHlBY3Rpb25TaG91bGRCZVB1c2hCdXR0b25Nb2QsIHVuZG9BY3Rpb25TaG91bGRCZVB1c2hCdXR0b25Nb2RdID1cbiAgICB1c2VBY3Rpb25TaG91bGRCZVB1c2hCdXR0b25Nb2RFZmZlY3QoYWRhcHRpdmVDYXJkKTtcbiAgY29uc3QgW2FwcGx5QWN0aW9uU2V0U2hvdWxkTm90QmVNZW51QmFyTW9kLCB1bmRvQWN0aW9uU2V0U2hvdWxkTm90QmVNZW51QmFyTW9kXSA9XG4gICAgdXNlQWN0aW9uU2V0U2hvdWxkTm90QmVNZW51QmFyTW9kRWZmZWN0KGFkYXB0aXZlQ2FyZCk7XG4gIGNvbnN0IFthcHBseUFjdGl2ZUVsZW1lbnRNb2QsIHVuZG9BY3RpdmVFbGVtZW50TW9kXSA9IHVzZUFjdGl2ZUVsZW1lbnRNb2RFZmZlY3QoYWRhcHRpdmVDYXJkKTtcbiAgY29uc3QgW2FwcGx5RGlzYWJsZWRNb2QsIHVuZG9EaXNhYmxlZE1vZF0gPSB1c2VEaXNhYmxlZE1vZEVmZmVjdChhZGFwdGl2ZUNhcmQpO1xuICBjb25zdCBbYXBwbHlQZXJzaXN0VmFsdWVzTW9kLCB1bmRvUGVyc2lzdFZhbHVlc01vZF0gPSB1c2VQZXJzaXN0VmFsdWVzTW9kRWZmZWN0KGFkYXB0aXZlQ2FyZCk7XG4gIGNvbnN0IFthcHBseVJvbGVNb2QsIHVuZG9Sb2xlTW9kXSA9IHVzZVJvbGVNb2RFZmZlY3QoYWRhcHRpdmVDYXJkKTtcblxuICBjb25zdCB7IGVsZW1lbnQsIGVycm9ycyB9OiB7IGVsZW1lbnQ/OiBIVE1MRWxlbWVudDsgZXJyb3JzPzogRXJyb3JbXSB9ID0gdXNlTWVtbygoKSA9PiB7XG4gICAgdW5kb0FjdGlvblNob3VsZEJlUHVzaEJ1dHRvbk1vZCgpO1xuICAgIHVuZG9BY3Rpb25TZXRTaG91bGROb3RCZU1lbnVCYXJNb2QoKTtcbiAgICB1bmRvQWN0aXZlRWxlbWVudE1vZCgpO1xuICAgIHVuZG9EaXNhYmxlZE1vZCgpO1xuICAgIHVuZG9QZXJzaXN0VmFsdWVzTW9kKCk7XG4gICAgdW5kb1JvbGVNb2QoKTtcblxuICAgIHJldHVybiByZW5kZXJBZGFwdGl2ZUNhcmQoYWRhcHRpdmVDYXJkLCB7XG4gICAgICBhZGFwdGl2ZUNhcmRzSG9zdENvbmZpZyxcbiAgICAgIGFkYXB0aXZlQ2FyZHNQYWNrYWdlOiB7IEdsb2JhbFNldHRpbmdzLCBIb3N0Q29uZmlnIH0sXG4gICAgICByZW5kZXJNYXJrZG93bkFzSFRNTCxcbiAgICAgIHNldFRhYkluZGV4QXRDYXJkUm9vdFxuICAgIH0pO1xuICB9LCBbXG4gICAgYWRhcHRpdmVDYXJkLFxuICAgIGFkYXB0aXZlQ2FyZHNIb3N0Q29uZmlnLFxuICAgIEdsb2JhbFNldHRpbmdzLFxuICAgIEhvc3RDb25maWcsXG4gICAgcmVuZGVyTWFya2Rvd25Bc0hUTUwsXG4gICAgc2V0VGFiSW5kZXhBdENhcmRSb290LFxuICAgIHVuZG9BY3Rpb25TaG91bGRCZVB1c2hCdXR0b25Nb2QsXG4gICAgdW5kb0FjdGlvblNldFNob3VsZE5vdEJlTWVudUJhck1vZCxcbiAgICB1bmRvQWN0aXZlRWxlbWVudE1vZCxcbiAgICB1bmRvRGlzYWJsZWRNb2QsXG4gICAgdW5kb1BlcnNpc3RWYWx1ZXNNb2QsXG4gICAgdW5kb1JvbGVNb2RcbiAgXSk7XG5cbiAgdXNlTWVtbygoKSA9PiB7XG4gICAgYWRhcHRpdmVDYXJkLm9uRXhlY3V0ZUFjdGlvbiA9IGhhbmRsZUV4ZWN1dGVBY3Rpb247XG4gIH0sIFthZGFwdGl2ZUNhcmQsIGhhbmRsZUV4ZWN1dGVBY3Rpb25dKTtcblxuICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHsgY3VycmVudCB9ID0gY29udGVudFJlZjtcblxuICAgIGN1cnJlbnQ/LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGN1cnJlbnQ/LnJlbW92ZUNoaWxkKGVsZW1lbnQpO1xuICAgIH07XG4gIH0sIFtjb250ZW50UmVmLCBlbGVtZW50XSk7XG5cbiAgLy8gQXBwbHkgYWxsIG1vZHMgcmVnYXJkbGVzcyB3aGV0aGVyIHRoZSBlbGVtZW50IGNoYW5nZWQgb3Igbm90LlxuICAvLyBUaGlzIGlzIGJlY2F1c2Ugd2UgaGF2ZSB1bmRvZWQgbW9kcyB3aGVuIHdlIGNhbGwgdGhlIGB1c2VYWFhNb2RFZmZlY3RgIGhvb2suXG4gIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgYXBwbHlBY3Rpb25TaG91bGRCZVB1c2hCdXR0b25Nb2QoZWxlbWVudCwgYWN0aW9uUGVyZm9ybWVkQ2xhc3NOYW1lKTtcbiAgICBhcHBseUFjdGlvblNldFNob3VsZE5vdEJlTWVudUJhck1vZChlbGVtZW50KTtcbiAgICBhcHBseUFjdGl2ZUVsZW1lbnRNb2QoZWxlbWVudCk7XG4gICAgYXBwbHlEaXNhYmxlZE1vZChlbGVtZW50LCBkaXNhYmxlZCk7XG4gICAgYXBwbHlQZXJzaXN0VmFsdWVzTW9kKGVsZW1lbnQpO1xuICAgIGFwcGx5Um9sZU1vZChlbGVtZW50KTtcbiAgfSwgW1xuICAgIGFjdGlvblBlcmZvcm1lZENsYXNzTmFtZSxcbiAgICBhcHBseUFjdGlvblNob3VsZEJlUHVzaEJ1dHRvbk1vZCxcbiAgICBhcHBseUFjdGlvblNldFNob3VsZE5vdEJlTWVudUJhck1vZCxcbiAgICBhcHBseUFjdGl2ZUVsZW1lbnRNb2QsXG4gICAgYXBwbHlEaXNhYmxlZE1vZCxcbiAgICBhcHBseVBlcnNpc3RWYWx1ZXNNb2QsXG4gICAgYXBwbHlSb2xlTW9kLFxuICAgIGRpc2FibGVkLFxuICAgIGVsZW1lbnRcbiAgXSk7XG5cbiAgcmV0dXJuIGVycm9ycz8ubGVuZ3RoID8gKFxuICAgIG5vZGVfZW52ID09PSAnZGV2ZWxvcG1lbnQnICYmIDxFcnJvckJveCBlcnJvcj17ZXJyb3JzWzBdfSB0eXBlPXtsb2NhbGl6ZSgnQURBUFRJVkVfQ0FSRF9FUlJPUl9CT1hfVElUTEVfUkVOREVSJyl9IC8+XG4gICkgOiAoXG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKGFkYXB0aXZlQ2FyZFJlbmRlcmVyU3R5bGVTZXQgKyAnJywgJ3dlYmNoYXRfX2FkYXB0aXZlLWNhcmQtcmVuZGVyZXInKX1cbiAgICAgIG9uQ2xpY2s9e2hhbmRsZUNsaWNrQW5kS2V5UHJlc3NGb3JUYXBBY3Rpb24gYXMgTW91c2VFdmVudEhhbmRsZXI8SFRNTERpdkVsZW1lbnQ+fVxuICAgICAgb25LZXlQcmVzcz17aGFuZGxlQ2xpY2tBbmRLZXlQcmVzc0ZvclRhcEFjdGlvbiBhcyBLZXlib2FyZEV2ZW50SGFuZGxlcjxIVE1MRGl2RWxlbWVudD59XG4gICAgICByZWY9e2NvbnRlbnRSZWZ9XG4gICAgLz5cbiAgKTtcbn07XG5cbkFkYXB0aXZlQ2FyZFJlbmRlcmVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgYWN0aW9uUGVyZm9ybWVkQ2xhc3NOYW1lOiAnJyxcbiAgZGlzYWJsZWQ6IHVuZGVmaW5lZCxcbiAgdGFwQWN0aW9uOiB1bmRlZmluZWRcbn07XG5cbkFkYXB0aXZlQ2FyZFJlbmRlcmVyLnByb3BUeXBlcyA9IHtcbiAgYWN0aW9uUGVyZm9ybWVkQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBhZGFwdGl2ZUNhcmQ6IFByb3BUeXBlcy5hbnkuaXNSZXF1aXJlZCxcbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8vIFR5cGVTY3JpcHQgY2xhc3MgaXMgbm90IG1hcHBhYmxlIHRvIFByb3BUeXBlcy5mdW5jXG4gIC8vIEB0cy1pZ25vcmVcbiAgdGFwQWN0aW9uOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGltYWdlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZ1xuICB9KVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQWRhcHRpdmVDYXJkUmVuZGVyZXI7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFHQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFZQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7O0FBM0JBO0FBNkJBLElBQVFBLFFBQVIsR0FBcUJDLHdDQUFyQixDQUFRRCxRQUFSO0FBQ0EsSUFBUUUsV0FBUixHQUFrSEMsbUNBQWxILENBQVFELFdBQVI7QUFBQSxJQUFxQkUsWUFBckIsR0FBa0hELG1DQUFsSCxDQUFxQkMsWUFBckI7QUFBQSxJQUFtQ0Msb0JBQW5DLEdBQWtIRixtQ0FBbEgsQ0FBbUNFLG9CQUFuQztBQUFBLElBQXlEQyx1QkFBekQsR0FBa0hILG1DQUFsSCxDQUF5REcsdUJBQXpEO0FBQUEsSUFBa0ZDLGNBQWxGLEdBQWtISixtQ0FBbEgsQ0FBa0ZJLGNBQWxGO0FBQUEsSUFBa0dDLFdBQWxHLEdBQWtITCxtQ0FBbEgsQ0FBa0dLLFdBQWxHO0FBRUEsSUFBTUMsUUFBUSxHQUFHLHlCQUFqQjs7QUFTQSxJQUFNQyxvQkFBb0QsR0FBRyxTQUF2REEsb0JBQXVELE9BS3ZEO0VBQUEsSUFKSkMsd0JBSUksUUFKSkEsd0JBSUk7RUFBQSxJQUhKQyxZQUdJLFFBSEpBLFlBR0k7RUFBQSxJQUZNQyxpQkFFTixRQUZKQyxRQUVJO0VBQUEsSUFESkMsU0FDSSxRQURKQSxTQUNJOztFQUNKLG1CQUFpRVAs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