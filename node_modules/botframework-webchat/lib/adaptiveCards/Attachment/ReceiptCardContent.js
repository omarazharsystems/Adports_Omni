"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _botframeworkWebchatComponent = require("botframework-webchat-component");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _AdaptiveCardBuilder = _interopRequireDefault(require("./AdaptiveCardBuilder"));

var _AdaptiveCardRenderer = _interopRequireDefault(require("./AdaptiveCardRenderer"));

var _useAdaptiveCardsPackage = _interopRequireDefault(require("../hooks/useAdaptiveCardsPackage"));

var _useStyleOptions3 = _interopRequireDefault(require("../../hooks/useStyleOptions"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* eslint no-magic-numbers: ["error", { "ignore": [0, 1, 10, 15, 25, 50, 75] }] */
var useDirection = _botframeworkWebchatComponent.hooks.useDirection,
    useLocalizer = _botframeworkWebchatComponent.hooks.useLocalizer;

function nullOrUndefined(obj) {
  return obj === null || typeof obj === 'undefined';
}

var ReceiptCardContent = function ReceiptCardContent(_ref) {
  var actionPerformedClassName = _ref.actionPerformedClassName,
      content = _ref.content,
      disabled = _ref.disabled;

  var _useAdaptiveCardsPack = (0, _useAdaptiveCardsPackage.default)(),
      _useAdaptiveCardsPack2 = (0, _slicedToArray2.default)(_useAdaptiveCardsPack, 1),
      adaptiveCardsPackage = _useAdaptiveCardsPack2[0];

  var _useDirection = useDirection(),
      _useDirection2 = (0, _slicedToArray2.default)(_useDirection, 1),
      direction = _useDirection2[0];

  var _useStyleOptions = (0, _useStyleOptions3.default)(),
      _useStyleOptions2 = (0, _slicedToArray2.default)(_useStyleOptions, 1),
      styleOptions = _useStyleOptions2[0];

  var localize = useLocalizer();
  var taxText = localize('RECEIPT_CARD_TAX');
  var totalText = localize('RECEIPT_CARD_TOTAL');
  var vatText = localize('RECEIPT_CARD_VAT');
  var builtCard = (0, _react.useMemo)(function () {
    var builder = new _AdaptiveCardBuilder.default(adaptiveCardsPackage, styleOptions, direction);
    var HorizontalAlignment = adaptiveCardsPackage.HorizontalAlignment,
        TextSize = adaptiveCardsPackage.TextSize,
        TextWeight = adaptiveCardsPackage.TextWeight;
    var buttons = content.buttons,
        facts = content.facts,
        items = content.items,
        tax = content.tax,
        title = content.title,
        total = content.total,
        vat = content.vat;
    var richCardWrapTitle = styleOptions.richCardWrapTitle;

    if (content) {
      builder.addTextBlock(title, {
        size: TextSize.Medium,
        weight: TextWeight.Bolder,
        wrap: richCardWrapTitle
      });

      if (facts) {
        var _builder$addColumnSet = builder.addColumnSet([75, 25]),
            _builder$addColumnSet2 = (0, _slicedToArray2.default)(_builder$addColumnSet, 2),
            firstFactColumn = _builder$addColumnSet2[0],
            lastFactColumn = _builder$addColumnSet2[1];

        facts.map(function (_ref2) {
          var key = _ref2.key,
              value = _ref2.value;
          builder.addTextBlock(key, {
            size: TextSize.Medium
          }, firstFactColumn);
          builder.addTextBlock(value, {
            size: TextSize.Medium,
            horizontalAlignment: HorizontalAlignment.Right
          }, lastFactColumn);
        });
      }

      items && items.map(function (_ref3) {
        var _ref3$image = _ref3.image;
        _ref3$image = _ref3$image === void 0 ? {} : _ref3$image;
        var alt = _ref3$image.alt,
            imageTap = _ref3$image.tap,
            url = _ref3$image.url,
            price = _ref3.price,
            quantity = _ref3.quantity,
            subtitle = _ref3.subtitle,
            tap = _ref3.tap,
            text = _ref3.text,
            title = _ref3.title;
        var itemColumns;

        if (url) {
          var _builder$addColumnSet3 = builder.addColumnSet([15, 75, 10]),
              _builder$addColumnSet4 = (0, _toArray2.default)(_builder$addColumnSet3),
              itemImageColumn = _builder$addColumnSet4[0],
              columns = _builder$addColumnSet4.slice(1);

          itemColumns = columns;
          builder.addImage(url, itemImageColumn, imageTap, alt);
        } else {
          itemColumns = builder.addColumnSet([75, 25], undefined, tap && tap);
        }

        var _itemColumns = itemColumns,
            _itemColumns2 = (0, _slicedToArray2.default)(_itemColumns, 2),
            itemTitleColumn = _itemColumns2[0],
            itemPriceColumn = _itemColumns2[1];

        builder.addTextBlock(quantity ? "".concat(title, " &times; ").concat(quantity) : title, {
          size: TextSize.Medium,
          weight: TextWeight.Bolder,
          wrap: richCardWrapTitle
        }, itemTitleColumn);
        builder.addTextBlock(subtitle, {
          size: TextSize.Medium,
          wrap: richCardWrapTitle
        }, itemTitleColumn);
        builder.addTextBlock(price, {
          horizontalAlignment: HorizontalAlignment.Right
        }, itemPriceColumn);

        if (text) {
          builder.addTextBlock(text, {
            size: TextSize.Medium,
            wrap: richCardWrapTitle
          }, itemTitleColumn);
        }
      });

      if (!nullOrUndefined(vat)) {
        var vatCol = builder.addColumnSet([75, 25]);
        builder.addTextBlock(vatText, {
          size: TextSize.Medium,
          weight: TextWeight.Bolder
        }, vatCol[0]);
        builder.addTextBlock(vat, {
          horizontalAlignment: HorizontalAlignment.Right
        }, vatCol[1]);
      }

      if (!nullOrUndefined(tax)) {
        var taxCol = builder.addColumnSet([75, 25]);
        builder.addTextBlock(taxText, {
          size: TextSize.Medium,
          weight: TextWeight.Bolder
        }, taxCol[0]);
        builder.addTextBlock(tax, {
          horizontalAlignment: HorizontalAlignment.Right
        }, taxCol[1]);
      }

      if (!nullOrUndefined(total)) {
        var totalCol = builder.addColumnSet([75, 25]);
        builder.addTextBlock(totalText, {
          size: TextSize.Medium,
          weight: TextWeight.Bolder
        }, totalCol[0]);
        builder.addTextBlock(total, {
          horizontalAlignment: HorizontalAlignment.Right,
          size: TextSize.Medium,
          weight: TextWeight.Bolder
        }, totalCol[1]);
      }

      builder.addButtons(buttons);
      return builder.card;
    }
  }, [adaptiveCardsPackage, content, direction, styleOptions, taxText, totalText, vatText]);
  return /*#__PURE__*/_react.default.createElement(_AdaptiveCardRenderer.default, {
    actionPerformedClassName: actionPerformedClassName,
    adaptiveCard: builtCard,
    disabled: disabled,
    tapAction: content && content.tap
  });
};

ReceiptCardContent.defaultProps = {
  actionPerformedClassName: '',
  disabled: undefined
};
ReceiptCardContent.propTypes = {
  actionPerformedClassName: _propTypes.default.string,
  // PropTypes cannot fully capture TypeScript types.
  // @ts-ignore
  content: _propTypes.default.shape({
    buttons: _propTypes.default.array,
    facts: _propTypes.default.arrayOf(_propTypes.default.shape({
      key: _propTypes.default.string,
      value: _propTypes.default.string
    })),
    items: _propTypes.default.arrayOf(_propTypes.default.shape({
      image: _propTypes.default.shape({
        alt: _propTypes.default.string.isRequired,
        tap: _propTypes.default.any,
        url: _propTypes.default.string.isRequired
      }),
      price: _propTypes.default.string.isRequired,
      quantity: _propTypes.default.string,
      subtitle: _propTypes.default.string,
      tap: _propTypes.default.any,
      text: _propTypes.default.string,
      title: _propTypes.default.string.isRequired
    })),
    tap: _propTypes.default.any,
    tax: _propTypes.default.string,
    title: _propTypes.default.string,
    total: _propTypes.default.string,
    vat: _propTypes.default.string
  }).isRequired,
  disabled: _propTypes.default.bool
};
var _default = ReceiptCardContent;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,