"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = usePersistValuesModEffect;

var _react = require("react");

var _useAdaptiveCardModEffect = _interopRequireDefault(require("./private/useAdaptiveCardModEffect"));

var _usePrevious = _interopRequireDefault(require("./private/usePrevious"));

/**
 * Gets all user-inputted values under a DOM node.
 *
 * We assume values are ID-ed. If not ID-ed (such as `<textarea>`), there will be only a single instance (no two `<textarea>`).
 */
function getUserValues(element) {
  if (!element) {
    return new Set();
  }

  return Array.from(element.querySelectorAll('input, option, textarea')).reduce(function (values, element) {
    if (element instanceof HTMLInputElement) {
      var type = element.type;

      if (type === 'checkbox' || type === 'radio') {
        element.checked && values.add(element.value);
      } else {
        // ASSUMPTION: We expect CardObject will NOT mix <input type="text"> with <input type="checkbox">.
        values.clear();
        values.add(element.value);
      }
    } else if (element instanceof HTMLOptionElement) {
      element.selected && values.add(element.value);
    } else {
      // ASSUMPTION: We expect CardObject will NOT mix <textarea> with <input type="checkbox">.
      values.clear();
      values.add(element.value);
    }

    return values;
  }, new Set());
}
/**
 * Set multiple user-inputted values under a DOM node.
 *
 * This function must be paired with `getUserValues`.
 */


function setUserValues(element, values) {
  if (!element) {
    return;
  } // If the element does not support multiple choices, say <input type="text"> or <textarea>, then, use the first value.


  var defaultValue = Array.from(values)[0] || '';
  element.querySelectorAll('input, option, textarea').forEach(function (element) {
    if (element instanceof HTMLInputElement) {
      var type = element.type;

      if (type === 'checkbox' || type === 'radio') {
        element.checked = values.has(element.value);
      } else {
        element.value = defaultValue;
      }
    } else if (element instanceof HTMLOptionElement) {
      element.selected = values.has(element.value);
    } else {
      element.value = defaultValue;
    }
  });
}
/**
 * Re-rendering: Current user-inputted values must be saved and restored on re-render.
 */


function usePersistValuesModEffect(adaptiveCard) {
  var prevAdaptiveCard = (0, _usePrevious.default)(adaptiveCard);
  var valuesMapRef = (0, _react.useRef)(new Map());
  prevAdaptiveCard === adaptiveCard || valuesMapRef.current.clear();
  var modder = (0, _react.useMemo)(function () {
    return function (adaptiveCard) {
      var valuesMap = valuesMapRef.current;
      adaptiveCard.getAllInputs().forEach(function (cardObject) {
        valuesMap.has(cardObject) && setUserValues(cardObject.renderedElement, valuesMap.get(cardObject));
      });
      return function () {
        valuesMapRef.current = adaptiveCard.getAllInputs().reduce(function (valuesMap, cardObject) {
          var value = getUserValues(cardObject.renderedElement);
          return typeof value !== 'undefined' ? valuesMap.set(cardObject, value) : valuesMap;
        }, new Map());
      };
    };
  }, [valuesMapRef]);
  return (0, _useAdaptiveCardModEffect.default)(modder, adaptiveCard);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,