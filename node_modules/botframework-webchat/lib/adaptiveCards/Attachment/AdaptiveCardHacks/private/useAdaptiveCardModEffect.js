"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useAdaptiveCardModEffect;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _classPrivateFieldGet5 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldGet"));

var _classPrivateFieldSet2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldSet"));

var _react = require("react");

var _useLazyRef = _interopRequireDefault(require("./useLazyRef"));

var _useValueRef = _interopRequireDefault(require("./useValueRef"));

function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }

function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }

var _mod = /*#__PURE__*/new WeakMap();

var _undo = /*#__PURE__*/new WeakMap();

var Mod = /*#__PURE__*/function () {
  function Mod(mod) {
    (0, _classCallCheck2.default)(this, Mod);

    _classPrivateFieldInitSpec(this, _mod, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _undo, {
      writable: true,
      value: void 0
    });

    (0, _classPrivateFieldSet2.default)(this, _mod, mod);
  } // @ts-ignore We are using Babel to transpile and it will transpile private modifier.


  (0, _createClass2.default)(Mod, [{
    key: "apply",
    value: function apply(adaptiveCard, cardElement) {
      var _classPrivateFieldGet2, _classPrivateFieldGet3;

      (_classPrivateFieldGet2 = (0, _classPrivateFieldGet5.default)(this, _undo)) === null || _classPrivateFieldGet2 === void 0 ? void 0 : _classPrivateFieldGet2.call(this);

      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      (0, _classPrivateFieldSet2.default)(this, _undo, adaptiveCard && cardElement && (_classPrivateFieldGet3 = (0, _classPrivateFieldGet5.default)(this, _mod)).call.apply(_classPrivateFieldGet3, [this, adaptiveCard, cardElement].concat(args)));
    }
  }, {
    key: "undo",
    value: function undo() {
      var _classPrivateFieldGet4;

      (_classPrivateFieldGet4 = (0, _classPrivateFieldGet5.default)(this, _undo)) === null || _classPrivateFieldGet4 === void 0 ? void 0 : _classPrivateFieldGet4.call(this);
      (0, _classPrivateFieldSet2.default)(this, _undo, undefined);
    }
  }]);
  return Mod;
}();
/**
 * Creates a mod effect for Adaptive Card.
 *
 * When this hook is executed, it will return two functions for applying and undo the mod.
 * It will also monitor the DOM tree and undo-then-reapply if mutation occurred.
 *
 * The first function must be called right after DOM is mounted. The second function must be called right before re-render.
 *
 * @return {[function, function]} Two functions, the first one to apply the mod, the second one to undo the mod.
 */


function useAdaptiveCardModEffect(modder, adaptiveCard) {
  var adaptiveCardRef = (0, _useValueRef.default)(adaptiveCard);
  var mod = (0, _react.useMemo)(function () {
    return new Mod(modder);
  }, [modder]);
  var reapplyRef = (0, _react.useRef)();
  var observerRef = (0, _useLazyRef.default)(function () {
    return new MutationObserver(function () {
      var _reapplyRef$current;

      (_reapplyRef$current = reapplyRef.current) === null || _reapplyRef$current === void 0 ? void 0 : _reapplyRef$current.call(reapplyRef);
    });
  });
  (0, _react.useEffect)(function () {
    return function () {
      observerRef.current.disconnect();
    };
  }, [observerRef]);
  var handleApply = (0, _react.useCallback)(function (cardElement) {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    if (adaptiveCardRef.current && cardElement) {
      // Apply the mod immediately, then assign the function to reapply() so we can call later when mutation happens.
      (reapplyRef.current = function () {
        return mod.apply.apply(mod, [adaptiveCardRef.current, cardElement].concat(args));
      })();
    }

    var observer = observerRef.current;
    observer.disconnect();
    observer.observe(cardElement, {
      childList: true,
      subtree: true
    });
  }, [adaptiveCardRef, observerRef, mod]);
  var handleUndo = (0, _react.useCallback)(function () {
    mod.undo(); // If we have undo-ed the mod, calling reapply() through MutationObserver should be no-op.

    reapplyRef.current = undefined;
  }, [mod, reapplyRef]);
  return (0, _react.useMemo)(function () {
    return Object.freeze([handleApply, handleUndo]);
  }, [handleApply, handleUndo]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNb2QiLCJtb2QiLCJhZGFwdGl2ZUNhcmQiLCJjYXJkRWxlbWVudCIsImFyZ3MiLCJ1bmRlZmluZWQiLCJ1c2VBZGFwdGl2ZUNhcmRNb2RFZmZlY3QiLCJtb2RkZXIiLCJhZGFwdGl2ZUNhcmRSZWYiLCJ1c2VWYWx1ZVJlZiIsInVzZU1lbW8iLCJyZWFwcGx5UmVmIiwidXNlUmVmIiwib2JzZXJ2ZXJSZWYiLCJ1c2VMYXp5UmVmIiwiTXV0YXRpb25PYnNlcnZlciIsImN1cnJlbnQiLCJ1c2VFZmZlY3QiLCJkaXNjb25uZWN0IiwiaGFuZGxlQXBwbHkiLCJ1c2VDYWxsYmFjayIsImFwcGx5Iiwib2JzZXJ2ZXIiLCJvYnNlcnZlIiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsImhhbmRsZVVuZG8iLCJ1bmRvIiwiT2JqZWN0IiwiZnJlZXplIl0sInNvdXJjZVJvb3QiOiJidW5kbGU6Ly8vIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYWRhcHRpdmVDYXJkcy9BdHRhY2htZW50L0FkYXB0aXZlQ2FyZEhhY2tzL3ByaXZhdGUvdXNlQWRhcHRpdmVDYXJkTW9kRWZmZWN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZU1lbW8sIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHVzZUxhenlSZWYgZnJvbSAnLi91c2VMYXp5UmVmJztcbmltcG9ydCB1c2VWYWx1ZVJlZiBmcm9tICcuL3VzZVZhbHVlUmVmJztcblxuaW1wb3J0IHR5cGUgeyBBZGFwdGl2ZUNhcmQgfSBmcm9tICdhZGFwdGl2ZWNhcmRzJztcblxudHlwZSBNb2RGdW5jdGlvbjxUQXJncyBleHRlbmRzIHVua25vd25bXSA9IFtdPiA9IChcbiAgYWRhcHRpdmVDYXJkOiBBZGFwdGl2ZUNhcmQsXG4gIGNhcmRFbGVtZW50OiBIVE1MRWxlbWVudCxcbiAgLi4uYXJnczogVEFyZ3NcbikgPT4gKCkgPT4gdm9pZDtcblxuY2xhc3MgTW9kPFRBcmdzIGV4dGVuZHMgdW5rbm93bltdPiB7XG4gIGNvbnN0cnVjdG9yKG1vZDogTW9kRnVuY3Rpb248VEFyZ3M+KSB7XG4gICAgdGhpcy4jbW9kID0gbW9kO1xuICB9XG5cbiAgLy8gQHRzLWlnbm9yZSBXZSBhcmUgdXNpbmcgQmFiZWwgdG8gdHJhbnNwaWxlIGFuZCBpdCB3aWxsIHRyYW5zcGlsZSBwcml2YXRlIG1vZGlmaWVyLlxuICAjbW9kOiBNb2RGdW5jdGlvbjxUQXJncz47XG4gIC8vIEB0cy1pZ25vcmUgV2UgYXJlIHVzaW5nIEJhYmVsIHRvIHRyYW5zcGlsZSBhbmQgaXQgd2lsbCB0cmFuc3BpbGUgcHJpdmF0ZSBtb2RpZmllci5cbiAgI3VuZG86ICgoKSA9PiB2b2lkKSB8IHVuZGVmaW5lZDtcblxuICBhcHBseShhZGFwdGl2ZUNhcmQ6IEFkYXB0aXZlQ2FyZCB8IHVuZGVmaW5lZCwgY2FyZEVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkLCAuLi5hcmdzOiBUQXJncykge1xuICAgIHRoaXMuI3VuZG8/LigpO1xuICAgIHRoaXMuI3VuZG8gPSBhZGFwdGl2ZUNhcmQgJiYgY2FyZEVsZW1lbnQgJiYgdGhpcy4jbW9kKGFkYXB0aXZlQ2FyZCwgY2FyZEVsZW1lbnQsIC4uLmFyZ3MpO1xuICB9XG5cbiAgdW5kbygpIHtcbiAgICB0aGlzLiN1bmRvPy4oKTtcbiAgICB0aGlzLiN1bmRvID0gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1vZCBlZmZlY3QgZm9yIEFkYXB0aXZlIENhcmQuXG4gKlxuICogV2hlbiB0aGlzIGhvb2sgaXMgZXhlY3V0ZWQsIGl0IHdpbGwgcmV0dXJuIHR3byBmdW5jdGlvbnMgZm9yIGFwcGx5aW5nIGFuZCB1bmRvIHRoZSBtb2QuXG4gKiBJdCB3aWxsIGFsc28gbW9uaXRvciB0aGUgRE9NIHRyZWUgYW5kIHVuZG8tdGhlbi1yZWFwcGx5IGlmIG11dGF0aW9uIG9jY3VycmVkLlxuICpcbiAqIFRoZSBmaXJzdCBmdW5jdGlvbiBtdXN0IGJlIGNhbGxlZCByaWdodCBhZnRlciBET00gaXMgbW91bnRlZC4gVGhlIHNlY29uZCBmdW5jdGlvbiBtdXN0IGJlIGNhbGxlZCByaWdodCBiZWZvcmUgcmUtcmVuZGVyLlxuICpcbiAqIEByZXR1cm4ge1tmdW5jdGlvbiwgZnVuY3Rpb25dfSBUd28gZnVuY3Rpb25zLCB0aGUgZmlyc3Qgb25lIHRvIGFwcGx5IHRoZSBtb2QsIHRoZSBzZWNvbmQgb25lIHRvIHVuZG8gdGhlIG1vZC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlQWRhcHRpdmVDYXJkTW9kRWZmZWN0PFRBcmdzIGV4dGVuZHMgdW5rbm93bltdPihcbiAgbW9kZGVyOiAoYWRhcHRpdmVDYXJkOiBBZGFwdGl2ZUNhcmQsIGNhcmRFbGVtZW50OiBIVE1MRWxlbWVudCwgLi4uYXJnczogVEFyZ3MpID0+ICgpID0+IHZvaWQsXG4gIGFkYXB0aXZlQ2FyZDogQWRhcHRpdmVDYXJkXG4pOiByZWFkb25seSBbKGNhcmRFbGVtZW50OiBIVE1MRWxlbWVudCwgLi4uYXJnczogVEFyZ3MpID0+IHZvaWQsICgpID0+IHZvaWRdIHtcbiAgY29uc3QgYWRhcHRpdmVDYXJkUmVmID0gdXNlVmFsdWVSZWYoYWRhcHRpdmVDYXJkKTtcbiAgY29uc3QgbW9kID0gdXNlTWVtbygoKSA9PiBuZXcgTW9kPFRBcmdzPihtb2RkZXIpLCBbbW9kZGVyXSk7XG4gIGNvbnN0IHJlYXBwbHlSZWYgPSB1c2VSZWY8KCkgPT4gdm9pZD4oKTtcblxuICBjb25zdCBvYnNlcnZlclJlZiA9IHVzZUxhenlSZWY8TXV0YXRpb25PYnNlcnZlcj4oXG4gICAgKCkgPT5cbiAgICAgIG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHtcbiAgICAgICAgcmVhcHBseVJlZi5jdXJyZW50Py4oKTtcbiAgICAgIH0pXG4gICk7XG5cbiAgdXNlRWZmZWN0KFxuICAgICgpID0+ICgpID0+IHtcbiAgICAgIG9ic2VydmVyUmVmLmN1cnJlbnQuZGlzY29ubmVjdCgpO1xuICAgIH0sXG4gICAgW29ic2VydmVyUmVmXVxuICApO1xuXG4gIGNvbnN0IGhhbmRsZUFwcGx5ID0gdXNlQ2FsbGJhY2soXG4gICAgKGNhcmRFbGVtZW50OiBIVE1MRWxlbWVudCwgLi4uYXJnczogVEFyZ3MpID0+IHtcbiAgICAgIGlmIChhZGFwdGl2ZUNhcmRSZWYuY3VycmVudCAmJiBjYXJkRWxlbWVudCkge1xuICAgICAgICAvLyBBcHBseSB0aGUgbW9kIGltbWVkaWF0ZWx5LCB0aGVuIGFzc2lnbiB0aGUgZnVuY3Rpb24gdG8gcmVhcHBseSgpIHNvIHdlIGNhbiBjYWxsIGxhdGVyIHdoZW4gbXV0YXRpb24gaGFwcGVucy5cbiAgICAgICAgKHJlYXBwbHlSZWYuY3VycmVudCA9ICgpID0+IG1vZC5hcHBseShhZGFwdGl2ZUNhcmRSZWYuY3VycmVudCwgY2FyZEVsZW1lbnQsIC4uLmFyZ3MpKSgpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB7IGN1cnJlbnQ6IG9ic2VydmVyIH0gPSBvYnNlcnZlclJlZjtcblxuICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShjYXJkRWxlbWVudCwgeyBjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWUgfSk7XG4gICAgfSxcbiAgICBbYWRhcHRpdmVDYXJkUmVmLCBvYnNlcnZlclJlZiwgbW9kXVxuICApO1xuXG4gIGNvbnN0IGhhbmRsZVVuZG8gPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgbW9kLnVuZG8oKTtcblxuICAgIC8vIElmIHdlIGhhdmUgdW5kby1lZCB0aGUgbW9kLCBjYWxsaW5nIHJlYXBwbHkoKSB0aHJvdWdoIE11dGF0aW9uT2JzZXJ2ZXIgc2hvdWxkIGJlIG5vLW9wLlxuICAgIHJlYXBwbHlSZWYuY3VycmVudCA9IHVuZGVmaW5lZDtcbiAgfSwgW21vZCwgcmVhcHBseVJlZl0pO1xuXG4gIHJldHVybiB1c2VNZW1vKFxuICAgICgpID0+IE9iamVjdC5mcmVlemUoW2hhbmRsZUFwcGx5LCBoYW5kbGVVbmRvXSkgYXMgcmVhZG9ubHkgW3R5cGVvZiBoYW5kbGVBcHBseSwgdHlwZW9mIGhhbmRsZVVuZG9dLFxuICAgIFtoYW5kbGVBcHBseSwgaGFuZGxlVW5kb11cbiAgKTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFFQTs7QUFDQTs7Ozs7Ozs7OztJQVVNQSxHO0VBQ0osYUFBWUMsR0FBWixFQUFxQztJQUFBOztJQUFBO01BQUE7TUFBQTtJQUFBOztJQUFBO01BQUE7TUFBQTtJQUFBOztJQUNuQyxnREFBWUEsR0FBWjtFQUNELEMsQ0FFRDs7Ozs7V0FLQSxlQUFNQyxZQUFOLEVBQThDQyxXQUE5QyxFQUFvRztNQUFBOztNQUNsRzs7TUFEa0csa0NBQWJDLElBQWE7UUFBYkEsSUFBYTtNQUFBOztNQUVsRyxpREFBYUYsWUFBWSxJQUFJQyxXQUFoQixrRUFBK0IsSUFBL0IsNkNBQStCLElBQS9CLEVBQXlDRCxZQUF6QyxFQUF1REMsV0FBdkQsU0FBdUVDLElBQXZFLEVBQWI7SUFDRDs7O1dBRUQsZ0JBQU87TUFBQTs7TUFDTDtNQUNBLGlEQUFhQyxTQUFiO0lBQ0Q7Ozs7QUFHSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ2UsU0FBU0Msd0JBQVQsQ0FDYkMsTUFEYSxFQUViTCxZQUZhLEVBRzhEO0VBQzNFLElBQU1NLGVBQWUsR0FBRyxJQUFBQyxvQkFBQSxFQUFZUCxZQUFaLENBQXhCO0VBQ0EsSUFBTUQsR0FBRyxHQUFHLElBQUFTLGNBQUEsRUFBUTtJQUFBLE9BQU0sSUFBSVYsR0FBSixDQUFlTyxNQUFmLENBQU47RUFBQSxDQUFSLEVBQXNDLENBQUNBLE1BQUQsQ0FBdEMsQ0FBWjtFQUNBLElBQU1JLFVBQVUsR0FBRyxJQUFBQyxhQUFBLEdBQW5CO0VBRUEsSUFBTUMsV0FBVyxHQUFHLElBQUFDLG1CQUFBLEVBQ2xCO0lBQUEsT0FDRSxJQUFJQyxnQkFBSixDQUFxQixZQUFNO01BQUE7O01BQ3pCLHVCQUFBSixVQUFVLENBQUNLLE9BQVgsaUZBQUFMLFVBQVU7SUFDWCxDQUZELENBREY7RUFBQSxDQURrQixDQUFwQjtFQU9BLElBQUFNLGdCQUFBLEVBQ0U7SUFBQSxPQUFNLFlBQU07TUFDVkosV0FBVyxDQUFDRyxPQUFaLENBQW9CRSxVQUFwQjtJQUNELENBRkQ7RUFBQSxDQURGLEVBSUUsQ0FBQ0wsV0FBRCxDQUpGO0VBT0EsSUFBTU0sV0FBVyxHQUFHLElBQUFDLGtCQUFBLEVBQ2xCLFVBQUNqQixXQUFELEVBQThDO0lBQUEsbUNBQWhCQyxJQUFnQjtNQUFoQkEsSUFBZ0I7SUFBQTs7SUFDNUMsSUFBSUksZUFBZSxDQUFDUSxPQUFoQixJQUEyQmIsV0FBL0IsRUFBNEM7TUFDMUM7TUFDQSxDQUFDUSxVQUFVLENBQUNLLE9BQVgsR0FBcUI7UUFBQSxPQUFNZixHQUFHLENBQUNvQixLQUFKLE9BQUFwQixHQUFHLEdBQU9PLGVBQWUsQ0FBQ1EsT0FBdkIsRUFBZ0NiLFdBQWhDLFNBQWdEQyxJQUFoRCxFQUFUO01BQUEsQ0FBdEI7SUFDRDs7SUFFRCxJQUFpQmtCLFFBQWpCLEdBQThCVCxXQUE5QixDQUFRRyxPQUFSO0lBRUFNLFFBQVEsQ0FBQ0osVUFBVDtJQUNBSSxRQUFRLENBQUNDLE9BQVQsQ0FBaUJwQixXQUFqQixFQUE4QjtNQUFFcUIsU0FBUyxFQUFFLElBQWI7TUFBbUJDLE9BQU8sRUFBRTtJQUE1QixDQUE5QjtFQUNELENBWGlCLEVBWWxCLENBQUNqQixlQUFELEVBQWtCSyxXQUFsQixFQUErQlosR0FBL0IsQ0Faa0IsQ0FBcEI7RUFlQSxJQUFNeUIsVUFBVSxHQUFHLElBQUFOLGtCQUFBLEVBQVksWUFBTTtJQUNuQ25CLEdBQUcsQ0FBQzBCLElBQUosR0FEbUMsQ0FHbkM7O0lBQ0FoQixVQUFVLENBQUNLLE9BQVgsR0FBcUJYLFNBQXJCO0VBQ0QsQ0FMa0IsRUFLaEIsQ0FBQ0osR0FBRCxFQUFNVSxVQUFOLENBTGdCLENBQW5CO0VBT0EsT0FBTyxJQUFBRCxjQUFBLEVBQ0w7SUFBQSxPQUFNa0IsTUFBTSxDQUFDQyxNQUFQLENBQWMsQ0FBQ1YsV0FBRCxFQUFjTyxVQUFkLENBQWQsQ0FBTjtFQUFBLENBREssRUFFTCxDQUFDUCxXQUFELEVBQWNPLFVBQWQsQ0FGSyxDQUFQO0FBSUQifQ==