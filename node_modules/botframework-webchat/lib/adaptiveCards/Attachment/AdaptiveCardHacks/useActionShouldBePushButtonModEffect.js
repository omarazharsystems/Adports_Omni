"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useActionShouldBePushButtonModEffect;

var _react = require("react");

var _addEventListenerWithUndo = _interopRequireDefault(require("../../DOMManipulationWithUndo/addEventListenerWithUndo"));

var _bunchUndos = _interopRequireDefault(require("../../DOMManipulationWithUndo/bunchUndos"));

var _closest = _interopRequireDefault(require("./private/closest"));

var _durableAddClassWithUndo = _interopRequireDefault(require("../../DOMManipulationWithUndo/durableAddClassWithUndo"));

var _findDOMNodeOwner = _interopRequireDefault(require("./private/findDOMNodeOwner"));

var _setOrRemoveAttributeIfFalseWithUndo = _interopRequireDefault(require("../../DOMManipulationWithUndo/setOrRemoveAttributeIfFalseWithUndo"));

var _useAdaptiveCardModEffect = _interopRequireDefault(require("./private/useAdaptiveCardModEffect"));

var _usePrevious = _interopRequireDefault(require("./private/usePrevious"));

/**
 * Accessibility: Action in ActionSet/CardElement should be push button.
 *
 * Pressing the action button is a decision-making process. The decision made by the end-user need to be read by the screen reader.
 * Thus, we need to indicate what decision the end-user made.
 *
 * Since action buttons are button, the intuitive way to indicate selection of a button is marking it as pressed.
 *
 * One exception is the `Action.ShowUrl` action. This button represents expand/collapse header of an accordion.
 * Thus, their state is indicated by `aria-expanded`, instead of `aria-pressed`.
 * However, we still need to remove other unnecessary ARIA fields.
 */
function useActionShouldBePushButtonModEffect(adaptiveCard) {
  var prevAdaptiveCard = (0, _usePrevious.default)(adaptiveCard);
  var pushedCardObjectsRef = (0, _react.useRef)(new Set());
  prevAdaptiveCard === adaptiveCard || pushedCardObjectsRef.current.clear();
  var modder = (0, _react.useMemo)(function () {
    return function (adaptiveCard, cardElement, actionPerformedClassName) {
      var undoStack = [];
      Array.from(cardElement.querySelectorAll('button.ac-pushButton')).forEach(function (actionElement) {
        var cardObject = (0, _findDOMNodeOwner.default)(adaptiveCard, actionElement);

        if (!actionElement.hasAttribute('aria-expanded')) {
          if (pushedCardObjectsRef.current.has(cardObject)) {
            actionPerformedClassName && undoStack.push((0, _durableAddClassWithUndo.default)(actionElement, actionPerformedClassName));
            undoStack.push((0, _setOrRemoveAttributeIfFalseWithUndo.default)(actionElement, 'aria-pressed', 'true'));
          } else {
            undoStack.push((0, _setOrRemoveAttributeIfFalseWithUndo.default)(actionElement, 'aria-pressed', 'false'));
          }
        }

        undoStack.push((0, _setOrRemoveAttributeIfFalseWithUndo.default)(actionElement, 'aria-posinset', false), (0, _setOrRemoveAttributeIfFalseWithUndo.default)(actionElement, 'aria-setsize', false), (0, _setOrRemoveAttributeIfFalseWithUndo.default)(actionElement, 'role', false));
      });
      undoStack.push((0, _addEventListenerWithUndo.default)(cardElement, 'click', function (_ref) {
        var target = _ref.target;
        // Depends on click location, `target` could be the <div> inside the <button class="ac-pushButton">.
        // Thus, we need to check if we the `target` is inside `button.ac-pushButton` or not.
        var actionElement = (0, _closest.default)(target, 'button.ac-pushButton');

        if (!actionElement) {
          return;
        }

        var cardObject = (0, _findDOMNodeOwner.default)(adaptiveCard, actionElement);

        if ( // Not an AC action.
        !cardObject || // Ignores buttons which are supposed to be disabled.
        actionElement.getAttribute('aria-disabled') === 'true' || // Mods all AC action buttons except those for `Action.ShowCard`, which has `aria-expanded` attribute.
        actionElement.hasAttribute('aria-expanded')) {
          return;
        }

        actionPerformedClassName && undoStack.push((0, _durableAddClassWithUndo.default)(actionElement, actionPerformedClassName));
        undoStack.push((0, _setOrRemoveAttributeIfFalseWithUndo.default)(actionElement, 'aria-pressed', 'true'));
        cardObject && pushedCardObjectsRef.current.add(cardObject);
      }, {
        capture: true
      }));
      return function () {
        return (0, _bunchUndos.default)(undoStack)();
      };
    };
  }, [pushedCardObjectsRef]);
  return (0, _useAdaptiveCardModEffect.default)(modder, adaptiveCard);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,