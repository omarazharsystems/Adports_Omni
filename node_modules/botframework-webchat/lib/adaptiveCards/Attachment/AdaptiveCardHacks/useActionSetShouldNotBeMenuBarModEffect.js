"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useActionShouldBePushButtonModEffect;

var _react = require("react");

var _bunchUndos = _interopRequireDefault(require("../../DOMManipulationWithUndo/bunchUndos"));

var _setOrRemoveAttributeIfFalseWithUndo = _interopRequireDefault(require("../../DOMManipulationWithUndo/setOrRemoveAttributeIfFalseWithUndo"));

var _useAdaptiveCardModEffect = _interopRequireDefault(require("./private/useAdaptiveCardModEffect"));

/**
 * Accessibility: ActionSet should not be menu bar.
 *
 * Menu bar is not accessible through screen reader keyboard shortcut keys:
 *
 * - <kbd>B</kbd> will jump to next button, which the end-user can quickly the chosen action;
 * - <kbd>F</kbd> will jump to next form field, which is very similar but also jump to text fields;
 * - There are no keyboard shortcut keys for menu.
 *
 * Marking action button as menu item in a menu bar hurts accessibility. End-user will not be able to jump to buttons quickly.
 *
 * Thus, ActionSet should not be menu bar.
 */
function useActionShouldBePushButtonModEffect(adaptiveCard) {
  var modder = (0, _react.useMemo)(function () {
    return function (_, cardElement) {
      var actionSetElements = Array.from(cardElement.querySelectorAll('.ac-actionSet[role="menubar"]'));
      var undoStack = actionSetElements.map(function (actionSetElement) {
        return (0, _setOrRemoveAttributeIfFalseWithUndo.default)(actionSetElement, 'role', false);
      });
      return function () {
        return (0, _bunchUndos.default)(undoStack)();
      };
    };
  }, []);
  return (0, _useAdaptiveCardModEffect.default)(modder, adaptiveCard);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1c2VBY3Rpb25TaG91bGRCZVB1c2hCdXR0b25Nb2RFZmZlY3QiLCJhZGFwdGl2ZUNhcmQiLCJtb2RkZXIiLCJ1c2VNZW1vIiwiXyIsImNhcmRFbGVtZW50IiwiYWN0aW9uU2V0RWxlbWVudHMiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwidW5kb1N0YWNrIiwibWFwIiwiYWN0aW9uU2V0RWxlbWVudCIsInNldE9yUmVtb3ZlQXR0cmlidXRlSWZGYWxzZVdpdGhVbmRvIiwiYnVuY2hVbmRvcyIsInVzZUFkYXB0aXZlQ2FyZE1vZEVmZmVjdCJdLCJzb3VyY2VSb290IjoiYnVuZGxlOi8vLyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FkYXB0aXZlQ2FyZHMvQXR0YWNobWVudC9BZGFwdGl2ZUNhcmRIYWNrcy91c2VBY3Rpb25TZXRTaG91bGROb3RCZU1lbnVCYXJNb2RFZmZlY3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IGJ1bmNoVW5kb3MgZnJvbSAnLi4vLi4vRE9NTWFuaXB1bGF0aW9uV2l0aFVuZG8vYnVuY2hVbmRvcyc7XG5pbXBvcnQgc2V0T3JSZW1vdmVBdHRyaWJ1dGVJZkZhbHNlV2l0aFVuZG8gZnJvbSAnLi4vLi4vRE9NTWFuaXB1bGF0aW9uV2l0aFVuZG8vc2V0T3JSZW1vdmVBdHRyaWJ1dGVJZkZhbHNlV2l0aFVuZG8nO1xuaW1wb3J0IHVzZUFkYXB0aXZlQ2FyZE1vZEVmZmVjdCBmcm9tICcuL3ByaXZhdGUvdXNlQWRhcHRpdmVDYXJkTW9kRWZmZWN0JztcblxuaW1wb3J0IHR5cGUgeyBBZGFwdGl2ZUNhcmQgfSBmcm9tICdhZGFwdGl2ZWNhcmRzJztcblxuLyoqXG4gKiBBY2Nlc3NpYmlsaXR5OiBBY3Rpb25TZXQgc2hvdWxkIG5vdCBiZSBtZW51IGJhci5cbiAqXG4gKiBNZW51IGJhciBpcyBub3QgYWNjZXNzaWJsZSB0aHJvdWdoIHNjcmVlbiByZWFkZXIga2V5Ym9hcmQgc2hvcnRjdXQga2V5czpcbiAqXG4gKiAtIDxrYmQ+Qjwva2JkPiB3aWxsIGp1bXAgdG8gbmV4dCBidXR0b24sIHdoaWNoIHRoZSBlbmQtdXNlciBjYW4gcXVpY2tseSB0aGUgY2hvc2VuIGFjdGlvbjtcbiAqIC0gPGtiZD5GPC9rYmQ+IHdpbGwganVtcCB0byBuZXh0IGZvcm0gZmllbGQsIHdoaWNoIGlzIHZlcnkgc2ltaWxhciBidXQgYWxzbyBqdW1wIHRvIHRleHQgZmllbGRzO1xuICogLSBUaGVyZSBhcmUgbm8ga2V5Ym9hcmQgc2hvcnRjdXQga2V5cyBmb3IgbWVudS5cbiAqXG4gKiBNYXJraW5nIGFjdGlvbiBidXR0b24gYXMgbWVudSBpdGVtIGluIGEgbWVudSBiYXIgaHVydHMgYWNjZXNzaWJpbGl0eS4gRW5kLXVzZXIgd2lsbCBub3QgYmUgYWJsZSB0byBqdW1wIHRvIGJ1dHRvbnMgcXVpY2tseS5cbiAqXG4gKiBUaHVzLCBBY3Rpb25TZXQgc2hvdWxkIG5vdCBiZSBtZW51IGJhci5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlQWN0aW9uU2hvdWxkQmVQdXNoQnV0dG9uTW9kRWZmZWN0KGFkYXB0aXZlQ2FyZDogQWRhcHRpdmVDYXJkKSB7XG4gIGNvbnN0IG1vZGRlciA9IHVzZU1lbW8oXG4gICAgKCkgPT4gKF86IEFkYXB0aXZlQ2FyZCwgY2FyZEVsZW1lbnQ6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICBjb25zdCBhY3Rpb25TZXRFbGVtZW50cyA9IEFycmF5LmZyb20oXG4gICAgICAgIGNhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5hYy1hY3Rpb25TZXRbcm9sZT1cIm1lbnViYXJcIl0nKSBhcyBOb2RlTGlzdE9mPEhUTUxFbGVtZW50PlxuICAgICAgKTtcblxuICAgICAgY29uc3QgdW5kb1N0YWNrID0gYWN0aW9uU2V0RWxlbWVudHMubWFwKGFjdGlvblNldEVsZW1lbnQgPT5cbiAgICAgICAgc2V0T3JSZW1vdmVBdHRyaWJ1dGVJZkZhbHNlV2l0aFVuZG8oYWN0aW9uU2V0RWxlbWVudCwgJ3JvbGUnLCBmYWxzZSlcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiAoKSA9PiBidW5jaFVuZG9zKHVuZG9TdGFjaykoKTtcbiAgICB9LFxuICAgIFtdXG4gICk7XG5cbiAgcmV0dXJuIHVzZUFkYXB0aXZlQ2FyZE1vZEVmZmVjdChtb2RkZXIsIGFkYXB0aXZlQ2FyZCk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUVBOztBQUNBOztBQUNBOztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2UsU0FBU0Esb0NBQVQsQ0FBOENDLFlBQTlDLEVBQTBFO0VBQ3ZGLElBQU1DLE1BQU0sR0FBRyxJQUFBQyxjQUFBLEVBQ2I7SUFBQSxPQUFNLFVBQUNDLENBQUQsRUFBa0JDLFdBQWxCLEVBQStDO01BQ25ELElBQU1DLGlCQUFpQixHQUFHQyxLQUFLLENBQUNDLElBQU4sQ0FDeEJILFdBQVcsQ0FBQ0ksZ0JBQVosQ0FBNkIsK0JBQTdCLENBRHdCLENBQTFCO01BSUEsSUFBTUMsU0FBUyxHQUFHSixpQkFBaUIsQ0FBQ0ssR0FBbEIsQ0FBc0IsVUFBQUMsZ0JBQWdCO1FBQUEsT0FDdEQsSUFBQUMsNENBQUEsRUFBb0NELGdCQUFwQyxFQUFzRCxNQUF0RCxFQUE4RCxLQUE5RCxDQURzRDtNQUFBLENBQXRDLENBQWxCO01BSUEsT0FBTztRQUFBLE9BQU0sSUFBQUUsbUJBQUEsRUFBV0osU0FBWCxHQUFOO01BQUEsQ0FBUDtJQUNELENBVkQ7RUFBQSxDQURhLEVBWWIsRUFaYSxDQUFmO0VBZUEsT0FBTyxJQUFBSyxpQ0FBQSxFQUF5QmIsTUFBekIsRUFBaUNELFlBQWpDLENBQVA7QUFDRCJ9