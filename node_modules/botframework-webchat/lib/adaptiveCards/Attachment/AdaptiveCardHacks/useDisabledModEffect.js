"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useDisabledModEffect;

var _react = require("react");

var _bunchUndos = _interopRequireDefault(require("../../DOMManipulationWithUndo/bunchUndos"));

var _durableDisableInputElementAccessiblyWithUndo = _interopRequireDefault(require("../../DOMManipulationWithUndo/durableDisableInputElementAccessiblyWithUndo"));

var _useAdaptiveCardModEffect = _interopRequireDefault(require("./private/useAdaptiveCardModEffect"));

// This is intended. This is a no-op function and intended to do nothing.
// eslint-disable-next-line @typescript-eslint/no-empty-function
var NO_OP = function NO_OP() {}; // In Adaptive Cards, <button> with "aria-expanded" attribute means it is makeshift of <details> and it is Action.ShowCard.
// In HTML, <details> should not be disabled unless the accordion does not permit the panel to be collapsed.
// So when we look for input elements, should skip <button> that mimick <details>.


var INPUT_ELEMENT_SELECTOR = 'button:not([aria-expanded]), input, select, textarea';

/**
 * Accessibility: Form fields in Adaptive Cards need to be disabled to reduce confusion for screen reader users.
 *
 * One exception is the `Action.ShowUrl`, this is because this action is expand/collapse of an accordion control.
 * Similar to `<details>`/`<summary>`, accordion must not allowed to be disabled.
 */
function useDisabledModEffect(adaptiveCard) {
  var modder = (0, _react.useMemo)(function () {
    return function (_, cardElement, disabled) {
      if (!disabled) {
        return NO_OP;
      }

      var undoStack = Array.from(cardElement.querySelectorAll(INPUT_ELEMENT_SELECTOR)).map(function (element) {
        return (0, _durableDisableInputElementAccessiblyWithUndo.default)(element);
      });
      return function () {
        return (0, _bunchUndos.default)(undoStack)();
      };
    };
  }, []);
  return (0, _useAdaptiveCardModEffect.default)(modder, adaptiveCard);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOT19PUCIsIklOUFVUX0VMRU1FTlRfU0VMRUNUT1IiLCJ1c2VEaXNhYmxlZE1vZEVmZmVjdCIsImFkYXB0aXZlQ2FyZCIsIm1vZGRlciIsInVzZU1lbW8iLCJfIiwiY2FyZEVsZW1lbnQiLCJkaXNhYmxlZCIsInVuZG9TdGFjayIsIkFycmF5IiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJtYXAiLCJlbGVtZW50IiwiZHVyYWJsZURpc2FibGVJbnB1dEVsZW1lbnRBY2Nlc3NpYmx5V2l0aFVuZG8iLCJidW5jaFVuZG9zIiwidXNlQWRhcHRpdmVDYXJkTW9kRWZmZWN0Il0sInNvdXJjZVJvb3QiOiJidW5kbGU6Ly8vIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYWRhcHRpdmVDYXJkcy9BdHRhY2htZW50L0FkYXB0aXZlQ2FyZEhhY2tzL3VzZURpc2FibGVkTW9kRWZmZWN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBidW5jaFVuZG9zIGZyb20gJy4uLy4uL0RPTU1hbmlwdWxhdGlvbldpdGhVbmRvL2J1bmNoVW5kb3MnO1xuaW1wb3J0IGR1cmFibGVEaXNhYmxlSW5wdXRFbGVtZW50QWNjZXNzaWJseVdpdGhVbmRvIGZyb20gJy4uLy4uL0RPTU1hbmlwdWxhdGlvbldpdGhVbmRvL2R1cmFibGVEaXNhYmxlSW5wdXRFbGVtZW50QWNjZXNzaWJseVdpdGhVbmRvJztcbmltcG9ydCB1c2VBZGFwdGl2ZUNhcmRNb2RFZmZlY3QgZnJvbSAnLi9wcml2YXRlL3VzZUFkYXB0aXZlQ2FyZE1vZEVmZmVjdCc7XG5cbmltcG9ydCB0eXBlIHsgQWRhcHRpdmVDYXJkIH0gZnJvbSAnYWRhcHRpdmVjYXJkcyc7XG5pbXBvcnQgdHlwZSB7IFVuZG9GdW5jdGlvbiB9IGZyb20gJy4uLy4uL0RPTU1hbmlwdWxhdGlvbldpdGhVbmRvL3R5cGVzL1VuZG9GdW5jdGlvbic7XG5cbi8vIFRoaXMgaXMgaW50ZW5kZWQuIFRoaXMgaXMgYSBuby1vcCBmdW5jdGlvbiBhbmQgaW50ZW5kZWQgdG8gZG8gbm90aGluZy5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cbmNvbnN0IE5PX09QOiBVbmRvRnVuY3Rpb24gPSAoKSA9PiB7fTtcblxuLy8gSW4gQWRhcHRpdmUgQ2FyZHMsIDxidXR0b24+IHdpdGggXCJhcmlhLWV4cGFuZGVkXCIgYXR0cmlidXRlIG1lYW5zIGl0IGlzIG1ha2VzaGlmdCBvZiA8ZGV0YWlscz4gYW5kIGl0IGlzIEFjdGlvbi5TaG93Q2FyZC5cbi8vIEluIEhUTUwsIDxkZXRhaWxzPiBzaG91bGQgbm90IGJlIGRpc2FibGVkIHVubGVzcyB0aGUgYWNjb3JkaW9uIGRvZXMgbm90IHBlcm1pdCB0aGUgcGFuZWwgdG8gYmUgY29sbGFwc2VkLlxuLy8gU28gd2hlbiB3ZSBsb29rIGZvciBpbnB1dCBlbGVtZW50cywgc2hvdWxkIHNraXAgPGJ1dHRvbj4gdGhhdCBtaW1pY2sgPGRldGFpbHM+LlxuY29uc3QgSU5QVVRfRUxFTUVOVF9TRUxFQ1RPUiA9ICdidXR0b246bm90KFthcmlhLWV4cGFuZGVkXSksIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhJztcbnR5cGUgSW5wdXRFbGVtZW50VHlwZSA9IEhUTUxCdXR0b25FbGVtZW50IHwgSFRNTElucHV0RWxlbWVudCB8IEhUTUxTZWxlY3RFbGVtZW50IHwgSFRNTFRleHRBcmVhRWxlbWVudDtcblxuLyoqXG4gKiBBY2Nlc3NpYmlsaXR5OiBGb3JtIGZpZWxkcyBpbiBBZGFwdGl2ZSBDYXJkcyBuZWVkIHRvIGJlIGRpc2FibGVkIHRvIHJlZHVjZSBjb25mdXNpb24gZm9yIHNjcmVlbiByZWFkZXIgdXNlcnMuXG4gKlxuICogT25lIGV4Y2VwdGlvbiBpcyB0aGUgYEFjdGlvbi5TaG93VXJsYCwgdGhpcyBpcyBiZWNhdXNlIHRoaXMgYWN0aW9uIGlzIGV4cGFuZC9jb2xsYXBzZSBvZiBhbiBhY2NvcmRpb24gY29udHJvbC5cbiAqIFNpbWlsYXIgdG8gYDxkZXRhaWxzPmAvYDxzdW1tYXJ5PmAsIGFjY29yZGlvbiBtdXN0IG5vdCBhbGxvd2VkIHRvIGJlIGRpc2FibGVkLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VEaXNhYmxlZE1vZEVmZmVjdChcbiAgYWRhcHRpdmVDYXJkOiBBZGFwdGl2ZUNhcmRcbik6IHJlYWRvbmx5IFsoY2FyZEVsZW1lbnQ6IEhUTUxFbGVtZW50LCBkaXNhYmxlZDogYm9vbGVhbikgPT4gdm9pZCwgKCkgPT4gdm9pZF0ge1xuICBjb25zdCBtb2RkZXIgPSB1c2VNZW1vKFxuICAgICgpID0+IChfLCBjYXJkRWxlbWVudDogSFRNTEVsZW1lbnQsIGRpc2FibGVkOiBib29sZWFuKSA9PiB7XG4gICAgICBpZiAoIWRpc2FibGVkKSB7XG4gICAgICAgIHJldHVybiBOT19PUDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdW5kb1N0YWNrOiAoKCkgPT4gdm9pZClbXSA9IEFycmF5LmZyb20oXG4gICAgICAgIGNhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoSU5QVVRfRUxFTUVOVF9TRUxFQ1RPUikgYXMgTm9kZUxpc3RPZjxJbnB1dEVsZW1lbnRUeXBlPlxuICAgICAgKS5tYXAoZWxlbWVudCA9PiBkdXJhYmxlRGlzYWJsZUlucHV0RWxlbWVudEFjY2Vzc2libHlXaXRoVW5kbyhlbGVtZW50KSk7XG5cbiAgICAgIHJldHVybiAoKSA9PiBidW5jaFVuZG9zKHVuZG9TdGFjaykoKTtcbiAgICB9LFxuICAgIFtdXG4gICk7XG5cbiAgcmV0dXJuIHVzZUFkYXB0aXZlQ2FyZE1vZEVmZmVjdChtb2RkZXIsIGFkYXB0aXZlQ2FyZCk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUVBOztBQUNBOztBQUNBOztBQUtBO0FBQ0E7QUFDQSxJQUFNQSxLQUFtQixHQUFHLFNBQXRCQSxLQUFzQixHQUFNLENBQUUsQ0FBcEMsQyxDQUVBO0FBQ0E7QUFDQTs7O0FBQ0EsSUFBTUMsc0JBQXNCLEdBQUcsc0RBQS9COztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNlLFNBQVNDLG9CQUFULENBQ2JDLFlBRGEsRUFFaUU7RUFDOUUsSUFBTUMsTUFBTSxHQUFHLElBQUFDLGNBQUEsRUFDYjtJQUFBLE9BQU0sVUFBQ0MsQ0FBRCxFQUFJQyxXQUFKLEVBQThCQyxRQUE5QixFQUFvRDtNQUN4RCxJQUFJLENBQUNBLFFBQUwsRUFBZTtRQUNiLE9BQU9SLEtBQVA7TUFDRDs7TUFFRCxJQUFNUyxTQUF5QixHQUFHQyxLQUFLLENBQUNDLElBQU4sQ0FDaENKLFdBQVcsQ0FBQ0ssZ0JBQVosQ0FBNkJYLHNCQUE3QixDQURnQyxFQUVoQ1ksR0FGZ0MsQ0FFNUIsVUFBQUMsT0FBTztRQUFBLE9BQUksSUFBQUMscURBQUEsRUFBNkNELE9BQTdDLENBQUo7TUFBQSxDQUZxQixDQUFsQztNQUlBLE9BQU87UUFBQSxPQUFNLElBQUFFLG1CQUFBLEVBQVdQLFNBQVgsR0FBTjtNQUFBLENBQVA7SUFDRCxDQVZEO0VBQUEsQ0FEYSxFQVliLEVBWmEsQ0FBZjtFQWVBLE9BQU8sSUFBQVEsaUNBQUEsRUFBeUJiLE1BQXpCLEVBQWlDRCxZQUFqQyxDQUFQO0FBQ0QifQ==