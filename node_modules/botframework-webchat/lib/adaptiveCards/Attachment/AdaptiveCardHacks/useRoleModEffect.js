"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useRoleModEffect;

var _react = require("react");

var _setOrRemoveAttributeIfFalseWithUndo = _interopRequireDefault(require("../../DOMManipulationWithUndo/setOrRemoveAttributeIfFalseWithUndo"));

var _useAdaptiveCardModEffect = _interopRequireDefault(require("./private/useAdaptiveCardModEffect"));

/**
 * Accessibility: "role" attribute must be set if "aria-label" is set.
 *
 * It is possible to render an Adaptive Card with empty content but "aria-label" attribute. The Adaptive Cards JSON looks like:
 *
 * ```json
 * {
 *   "type": "AdaptiveCard",
 *   "speak": "Hello, World!",
 *   "body": [],
 *   "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
 *   "version": "1.5"
 * }
 * ```
 *
 * The HTML output will be:
 *
 * ```html
 * <div class="ac-adaptiveCard" aria-label="Hello, World!"></div>
 * ```
 *
 * This violates WAI-ARIA because "aria-label" must not be set on an element without a "role".
 *
 * We need to set "role" attribute to "form" if the card has any input fields and is valid as a "form" role, otherwise, "figure".
 */
function useRoleModEffect(adaptiveCard) {
  var modder = (0, _react.useMemo)(function () {
    return function (_, cardElement) {
      return (0, _setOrRemoveAttributeIfFalseWithUndo.default)(cardElement, 'role', // "form" role requires either "aria-label", "aria-labelledby", or "title".
      cardElement.querySelector('button, input, select, textarea') && cardElement.getAttribute('aria-label') || cardElement.getAttribute('aria-labelledby') || cardElement.getAttribute('title') ? 'form' : 'figure');
    };
  }, []);
  return (0, _useAdaptiveCardModEffect.default)(modder, adaptiveCard);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1c2VSb2xlTW9kRWZmZWN0IiwiYWRhcHRpdmVDYXJkIiwibW9kZGVyIiwidXNlTWVtbyIsIl8iLCJjYXJkRWxlbWVudCIsInNldE9yUmVtb3ZlQXR0cmlidXRlSWZGYWxzZVdpdGhVbmRvIiwicXVlcnlTZWxlY3RvciIsImdldEF0dHJpYnV0ZSIsInVzZUFkYXB0aXZlQ2FyZE1vZEVmZmVjdCJdLCJzb3VyY2VSb290IjoiYnVuZGxlOi8vLyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FkYXB0aXZlQ2FyZHMvQXR0YWNobWVudC9BZGFwdGl2ZUNhcmRIYWNrcy91c2VSb2xlTW9kRWZmZWN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBzZXRPclJlbW92ZUF0dHJpYnV0ZUlmRmFsc2VXaXRoVW5kbyBmcm9tICcuLi8uLi9ET01NYW5pcHVsYXRpb25XaXRoVW5kby9zZXRPclJlbW92ZUF0dHJpYnV0ZUlmRmFsc2VXaXRoVW5kbyc7XG5pbXBvcnQgdXNlQWRhcHRpdmVDYXJkTW9kRWZmZWN0IGZyb20gJy4vcHJpdmF0ZS91c2VBZGFwdGl2ZUNhcmRNb2RFZmZlY3QnO1xuXG5pbXBvcnQgdHlwZSB7IEFkYXB0aXZlQ2FyZCB9IGZyb20gJ2FkYXB0aXZlY2FyZHMnO1xuXG4vKipcbiAqIEFjY2Vzc2liaWxpdHk6IFwicm9sZVwiIGF0dHJpYnV0ZSBtdXN0IGJlIHNldCBpZiBcImFyaWEtbGFiZWxcIiBpcyBzZXQuXG4gKlxuICogSXQgaXMgcG9zc2libGUgdG8gcmVuZGVyIGFuIEFkYXB0aXZlIENhcmQgd2l0aCBlbXB0eSBjb250ZW50IGJ1dCBcImFyaWEtbGFiZWxcIiBhdHRyaWJ1dGUuIFRoZSBBZGFwdGl2ZSBDYXJkcyBKU09OIGxvb2tzIGxpa2U6XG4gKlxuICogYGBganNvblxuICoge1xuICogICBcInR5cGVcIjogXCJBZGFwdGl2ZUNhcmRcIixcbiAqICAgXCJzcGVha1wiOiBcIkhlbGxvLCBXb3JsZCFcIixcbiAqICAgXCJib2R5XCI6IFtdLFxuICogICBcIiRzY2hlbWFcIjogXCJodHRwOi8vYWRhcHRpdmVjYXJkcy5pby9zY2hlbWFzL2FkYXB0aXZlLWNhcmQuanNvblwiLFxuICogICBcInZlcnNpb25cIjogXCIxLjVcIlxuICogfVxuICogYGBgXG4gKlxuICogVGhlIEhUTUwgb3V0cHV0IHdpbGwgYmU6XG4gKlxuICogYGBgaHRtbFxuICogPGRpdiBjbGFzcz1cImFjLWFkYXB0aXZlQ2FyZFwiIGFyaWEtbGFiZWw9XCJIZWxsbywgV29ybGQhXCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBUaGlzIHZpb2xhdGVzIFdBSS1BUklBIGJlY2F1c2UgXCJhcmlhLWxhYmVsXCIgbXVzdCBub3QgYmUgc2V0IG9uIGFuIGVsZW1lbnQgd2l0aG91dCBhIFwicm9sZVwiLlxuICpcbiAqIFdlIG5lZWQgdG8gc2V0IFwicm9sZVwiIGF0dHJpYnV0ZSB0byBcImZvcm1cIiBpZiB0aGUgY2FyZCBoYXMgYW55IGlucHV0IGZpZWxkcyBhbmQgaXMgdmFsaWQgYXMgYSBcImZvcm1cIiByb2xlLCBvdGhlcndpc2UsIFwiZmlndXJlXCIuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVJvbGVNb2RFZmZlY3QoXG4gIGFkYXB0aXZlQ2FyZDogQWRhcHRpdmVDYXJkXG4pOiByZWFkb25seSBbKGNhcmRFbGVtZW50OiBIVE1MRWxlbWVudCkgPT4gdm9pZCwgKCkgPT4gdm9pZF0ge1xuICBjb25zdCBtb2RkZXIgPSB1c2VNZW1vKFxuICAgICgpID0+IChfLCBjYXJkRWxlbWVudDogSFRNTEVsZW1lbnQpID0+XG4gICAgICBzZXRPclJlbW92ZUF0dHJpYnV0ZUlmRmFsc2VXaXRoVW5kbyhcbiAgICAgICAgY2FyZEVsZW1lbnQsXG4gICAgICAgICdyb2xlJyxcbiAgICAgICAgLy8gXCJmb3JtXCIgcm9sZSByZXF1aXJlcyBlaXRoZXIgXCJhcmlhLWxhYmVsXCIsIFwiYXJpYS1sYWJlbGxlZGJ5XCIsIG9yIFwidGl0bGVcIi5cbiAgICAgICAgKGNhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvbiwgaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEnKSAmJiBjYXJkRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKSkgfHxcbiAgICAgICAgICBjYXJkRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWxsZWRieScpIHx8XG4gICAgICAgICAgY2FyZEVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0aXRsZScpXG4gICAgICAgICAgPyAnZm9ybSdcbiAgICAgICAgICA6ICdmaWd1cmUnXG4gICAgICApLFxuICAgIFtdXG4gICk7XG5cbiAgcmV0dXJuIHVzZUFkYXB0aXZlQ2FyZE1vZEVmZmVjdChtb2RkZXIsIGFkYXB0aXZlQ2FyZCk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUVBOztBQUNBOztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2UsU0FBU0EsZ0JBQVQsQ0FDYkMsWUFEYSxFQUU4QztFQUMzRCxJQUFNQyxNQUFNLEdBQUcsSUFBQUMsY0FBQSxFQUNiO0lBQUEsT0FBTSxVQUFDQyxDQUFELEVBQUlDLFdBQUo7TUFBQSxPQUNKLElBQUFDLDRDQUFBLEVBQ0VELFdBREYsRUFFRSxNQUZGLEVBR0U7TUFDQ0EsV0FBVyxDQUFDRSxhQUFaLENBQTBCLGlDQUExQixLQUFnRUYsV0FBVyxDQUFDRyxZQUFaLENBQXlCLFlBQXpCLENBQWpFLElBQ0VILFdBQVcsQ0FBQ0csWUFBWixDQUF5QixpQkFBekIsQ0FERixJQUVFSCxXQUFXLENBQUNHLFlBQVosQ0FBeUIsT0FBekIsQ0FGRixHQUdJLE1BSEosR0FJSSxRQVJOLENBREk7SUFBQSxDQUFOO0VBQUEsQ0FEYSxFQVliLEVBWmEsQ0FBZjtFQWVBLE9BQU8sSUFBQUMsaUNBQUEsRUFBeUJQLE1BQXpCLEVBQWlDRCxZQUFqQyxDQUFQO0FBQ0QifQ==