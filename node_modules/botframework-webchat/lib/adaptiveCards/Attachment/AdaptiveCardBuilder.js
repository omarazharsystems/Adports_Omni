"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _adaptivecards = require("adaptivecards");

var _botframeworkWebchatCore = require("botframework-webchat-core");

function addCardAction(cardAction, includesOAuthButtons) {
  var type = cardAction.type;
  var action;

  if (type === 'imBack' || type === 'messageBack' || type === 'postBack' || type === 'signin' && includesOAuthButtons) {
    action = new _adaptivecards.SubmitAction();
    action.data = {
      __isBotFrameworkCardAction: true,
      cardAction: cardAction
    };
    action.title = cardAction.title;
  } else {
    action = new _adaptivecards.OpenUrlAction();
    action.title = cardAction.title;
    action.url = cardAction.type === 'call' ? "tel:".concat(cardAction.value) : cardAction.value;
  }

  return action;
}

var AdaptiveCardBuilder = /*#__PURE__*/function () {
  function AdaptiveCardBuilder(adaptiveCards, styleOptions) {
    var direction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'ltr';
    (0, _classCallCheck2.default)(this, AdaptiveCardBuilder);
    (0, _defineProperty2.default)(this, "card", void 0);
    (0, _defineProperty2.default)(this, "container", void 0);
    (0, _defineProperty2.default)(this, "styleOptions", void 0);
    this.card = new adaptiveCards.AdaptiveCard();
    this.container = new _adaptivecards.Container();
    this.container.rtl = direction === 'rtl';
    this.styleOptions = styleOptions;
    this.card.addItem(this.container);
  }

  (0, _createClass2.default)(AdaptiveCardBuilder, [{
    key: "addColumnSet",
    value: function addColumnSet(sizes) {
      var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.container;
      var selectAction = arguments.length > 2 ? arguments[2] : undefined;
      var columnSet = new _adaptivecards.ColumnSet();
      columnSet.selectAction = selectAction && addCardAction(selectAction);
      container.addItem(columnSet);
      return sizes.map(function (size) {
        var column = new _adaptivecards.Column();
        column.width = new _adaptivecards.SizeAndUnit(size, _adaptivecards.SizeUnit.Weight);
        columnSet.addColumn(column);
        return column;
      });
    }
  }, {
    key: "addItems",
    value: function addItems(cardElements) {
      var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.container;
      cardElements.forEach(function (cardElement) {
        return container.addItem(cardElement);
      });
    }
  }, {
    key: "addTextBlock",
    value: function addTextBlock(text, template) {
      var container = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.container;

      if (typeof text !== 'undefined') {
        var textblock = new _adaptivecards.TextBlock();

        for (var prop in template) {
          if (!(0, _botframeworkWebchatCore.isForbiddenPropertyName)(prop)) {
            // Mitigated through denylisting.
            // eslint-disable-next-line security/detect-object-injection
            textblock[prop] = template[prop];
          }
        }

        textblock.text = text;
        container.addItem(textblock);
      }
    }
  }, {
    key: "addButtons",
    value: function addButtons(cardActions, includesOAuthButtons) {
      var _this = this;

      cardActions && cardActions.forEach(function (cardAction) {
        _this.card.addAction(addCardAction(cardAction, includesOAuthButtons));
      });
    }
  }, {
    key: "addCommonHeaders",
    value: function addCommonHeaders(content) {
      var richCardWrapTitle = this.styleOptions.richCardWrapTitle;
      this.addTextBlock(content.title, {
        color: _adaptivecards.TextColor.Default,
        size: _adaptivecards.TextSize.Medium,
        style: 'heading',
        weight: _adaptivecards.TextWeight.Bolder,
        wrap: richCardWrapTitle
      });
      this.addTextBlock(content.subtitle, {
        color: _adaptivecards.TextColor.Default,
        isSubtle: true,
        wrap: richCardWrapTitle
      });
      this.addTextBlock(content.text, {
        color: _adaptivecards.TextColor.Default,
        wrap: true
      });
    }
  }, {
    key: "addCommon",
    value: function addCommon(content) {
      this.addCommonHeaders(content);
      this.addButtons(content.buttons);
    }
  }, {
    key: "addImage",
    value: function addImage(url, container, selectAction, altText) {
      container = container || this.container;
      var image = new _adaptivecards.Image();
      image.altText = altText;
      image.url = url;
      image.selectAction = selectAction && addCardAction(selectAction);
      image.size = _adaptivecards.Size.Stretch;
      container.addItem(image);
    }
  }]);
  return AdaptiveCardBuilder;
}();

exports.default = AdaptiveCardBuilder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,