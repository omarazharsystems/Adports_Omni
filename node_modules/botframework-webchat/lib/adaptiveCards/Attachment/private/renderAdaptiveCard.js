"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = renderAdaptiveCard;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

/**
 * Returns `true`, if the object is a plain object and not a class, otherwise, `false`.
 */
function isPlainObject(obj) {
  return Object.getPrototypeOf(obj) === Object.prototype;
}

function renderAdaptiveCard(adaptiveCard, _ref) {
  var adaptiveCardsHostConfig = _ref.adaptiveCardsHostConfig,
      _ref$adaptiveCardsPac = _ref.adaptiveCardsPackage,
      GlobalSettings = _ref$adaptiveCardsPac.GlobalSettings,
      HostConfig = _ref$adaptiveCardsPac.HostConfig,
      renderMarkdownAsHTML = _ref.renderMarkdownAsHTML,
      setTabIndexAtCardRoot = _ref.setTabIndexAtCardRoot;

  // Currently, the only way to set the Markdown engine is to set it thru static member of AdaptiveCard class
  // TODO: [P3] Checks if we could make the "renderMarkdownAsHTML" per card
  //       This could be limitations from Adaptive Cards package (not supported as of 1.2.5)
  //       Because there could be timing difference between .parse and .render, we could be using wrong Markdown engine
  // "onProcessMarkdown" is a static function but we are trying to scope it to the current object instead.
  // eslint-disable-next-line dot-notation
  adaptiveCard.constructor['onProcessMarkdown'] = function (text, result) {
    if (renderMarkdownAsHTML) {
      result.outputHtml = renderMarkdownAsHTML(text);
      result.didProcess = true;
    }
  };

  if (adaptiveCardsHostConfig) {
    adaptiveCard.hostConfig = isPlainObject(adaptiveCardsHostConfig) ? new HostConfig(adaptiveCardsHostConfig) : adaptiveCardsHostConfig;
  } // For accessibility issue #1340, `tabindex="0"` must not be set for the root container if it is not interactive.


  GlobalSettings.setTabIndexAtCardRoot = setTabIndexAtCardRoot;

  var _adaptiveCard$validat = adaptiveCard.validateProperties(),
      validationEvents = _adaptiveCard$validat.validationEvents;

  if (validationEvents.length) {
    return {
      errors: validationEvents.reduce(function (items, _ref2) {
        var message = _ref2.message;
        return [].concat((0, _toConsumableArray2.default)(items), [new Error(message)]);
      }, [])
    };
  }

  var element;

  try {
    element = adaptiveCard.render();
  } catch (error) {
    return {
      errors: [error]
    };
  }

  if (!element) {
    return {
      errors: [new Error('Adaptive Card rendered as empty element')]
    };
  }

  return {
    element: element
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc1BsYWluT2JqZWN0Iiwib2JqIiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJyZW5kZXJBZGFwdGl2ZUNhcmQiLCJhZGFwdGl2ZUNhcmQiLCJhZGFwdGl2ZUNhcmRzSG9zdENvbmZpZyIsImFkYXB0aXZlQ2FyZHNQYWNrYWdlIiwiR2xvYmFsU2V0dGluZ3MiLCJIb3N0Q29uZmlnIiwicmVuZGVyTWFya2Rvd25Bc0hUTUwiLCJzZXRUYWJJbmRleEF0Q2FyZFJvb3QiLCJjb25zdHJ1Y3RvciIsInRleHQiLCJyZXN1bHQiLCJvdXRwdXRIdG1sIiwiZGlkUHJvY2VzcyIsImhvc3RDb25maWciLCJ2YWxpZGF0ZVByb3BlcnRpZXMiLCJ2YWxpZGF0aW9uRXZlbnRzIiwibGVuZ3RoIiwiZXJyb3JzIiwicmVkdWNlIiwiaXRlbXMiLCJtZXNzYWdlIiwiRXJyb3IiLCJlbGVtZW50IiwicmVuZGVyIiwiZXJyb3IiXSwic291cmNlUm9vdCI6ImJ1bmRsZTovLy8iLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hZGFwdGl2ZUNhcmRzL0F0dGFjaG1lbnQvcHJpdmF0ZS9yZW5kZXJBZGFwdGl2ZUNhcmQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUge1xuICBBZGFwdGl2ZUNhcmQsXG4gIEdsb2JhbFNldHRpbmdzIGFzIEdsb2JhbFNldHRpbmdzVHlwZSxcbiAgSG9zdENvbmZpZyBhcyBIb3N0Q29uZmlnVHlwZSxcbiAgSU1hcmtkb3duUHJvY2Vzc2luZ1Jlc3VsdFxufSBmcm9tICdhZGFwdGl2ZWNhcmRzJztcblxuLyoqXG4gKiBSZXR1cm5zIGB0cnVlYCwgaWYgdGhlIG9iamVjdCBpcyBhIHBsYWluIG9iamVjdCBhbmQgbm90IGEgY2xhc3MsIG90aGVyd2lzZSwgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBPYmplY3QucHJvdG90eXBlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW5kZXJBZGFwdGl2ZUNhcmQoXG4gIGFkYXB0aXZlQ2FyZDogQWRhcHRpdmVDYXJkLFxuICB7XG4gICAgYWRhcHRpdmVDYXJkc0hvc3RDb25maWcsXG4gICAgYWRhcHRpdmVDYXJkc1BhY2thZ2U6IHsgR2xvYmFsU2V0dGluZ3MsIEhvc3RDb25maWcgfSxcbiAgICByZW5kZXJNYXJrZG93bkFzSFRNTCxcbiAgICBzZXRUYWJJbmRleEF0Q2FyZFJvb3RcbiAgfToge1xuICAgIGFkYXB0aXZlQ2FyZHNIb3N0Q29uZmlnPzogSG9zdENvbmZpZ1R5cGU7XG4gICAgYWRhcHRpdmVDYXJkc1BhY2thZ2U6IHtcbiAgICAgIEdsb2JhbFNldHRpbmdzOiB0eXBlb2YgR2xvYmFsU2V0dGluZ3NUeXBlO1xuICAgICAgSG9zdENvbmZpZzogdHlwZW9mIEhvc3RDb25maWdUeXBlO1xuICAgIH07XG4gICAgcmVuZGVyTWFya2Rvd25Bc0hUTUw/OiAobWFya2Rvd246IHN0cmluZykgPT4gc3RyaW5nO1xuICAgIHNldFRhYkluZGV4QXRDYXJkUm9vdDogYm9vbGVhbjtcbiAgfVxuKTogeyBlbGVtZW50OiBIVE1MRWxlbWVudCB9IHwgeyBlcnJvcnM6IEVycm9yW10gfSB7XG4gIC8vIEN1cnJlbnRseSwgdGhlIG9ubHkgd2F5IHRvIHNldCB0aGUgTWFya2Rvd24gZW5naW5lIGlzIHRvIHNldCBpdCB0aHJ1IHN0YXRpYyBtZW1iZXIgb2YgQWRhcHRpdmVDYXJkIGNsYXNzXG5cbiAgLy8gVE9ETzogW1AzXSBDaGVja3MgaWYgd2UgY291bGQgbWFrZSB0aGUgXCJyZW5kZXJNYXJrZG93bkFzSFRNTFwiIHBlciBjYXJkXG4gIC8vICAgICAgIFRoaXMgY291bGQgYmUgbGltaXRhdGlvbnMgZnJvbSBBZGFwdGl2ZSBDYXJkcyBwYWNrYWdlIChub3Qgc3VwcG9ydGVkIGFzIG9mIDEuMi41KVxuICAvLyAgICAgICBCZWNhdXNlIHRoZXJlIGNvdWxkIGJlIHRpbWluZyBkaWZmZXJlbmNlIGJldHdlZW4gLnBhcnNlIGFuZCAucmVuZGVyLCB3ZSBjb3VsZCBiZSB1c2luZyB3cm9uZyBNYXJrZG93biBlbmdpbmVcblxuICAvLyBcIm9uUHJvY2Vzc01hcmtkb3duXCIgaXMgYSBzdGF0aWMgZnVuY3Rpb24gYnV0IHdlIGFyZSB0cnlpbmcgdG8gc2NvcGUgaXQgdG8gdGhlIGN1cnJlbnQgb2JqZWN0IGluc3RlYWQuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkb3Qtbm90YXRpb25cbiAgYWRhcHRpdmVDYXJkLmNvbnN0cnVjdG9yWydvblByb2Nlc3NNYXJrZG93biddID0gKHRleHQ6IHN0cmluZywgcmVzdWx0OiBJTWFya2Rvd25Qcm9jZXNzaW5nUmVzdWx0KSA9PiB7XG4gICAgaWYgKHJlbmRlck1hcmtkb3duQXNIVE1MKSB7XG4gICAgICByZXN1bHQub3V0cHV0SHRtbCA9IHJlbmRlck1hcmtkb3duQXNIVE1MKHRleHQpO1xuICAgICAgcmVzdWx0LmRpZFByb2Nlc3MgPSB0cnVlO1xuICAgIH1cbiAgfTtcblxuICBpZiAoYWRhcHRpdmVDYXJkc0hvc3RDb25maWcpIHtcbiAgICBhZGFwdGl2ZUNhcmQuaG9zdENvbmZpZyA9IGlzUGxhaW5PYmplY3QoYWRhcHRpdmVDYXJkc0hvc3RDb25maWcpXG4gICAgICA/IG5ldyBIb3N0Q29uZmlnKGFkYXB0aXZlQ2FyZHNIb3N0Q29uZmlnKVxuICAgICAgOiBhZGFwdGl2ZUNhcmRzSG9zdENvbmZpZztcbiAgfVxuXG4gIC8vIEZvciBhY2Nlc3NpYmlsaXR5IGlzc3VlICMxMzQwLCBgdGFiaW5kZXg9XCIwXCJgIG11c3Qgbm90IGJlIHNldCBmb3IgdGhlIHJvb3QgY29udGFpbmVyIGlmIGl0IGlzIG5vdCBpbnRlcmFjdGl2ZS5cbiAgR2xvYmFsU2V0dGluZ3Muc2V0VGFiSW5kZXhBdENhcmRSb290ID0gc2V0VGFiSW5kZXhBdENhcmRSb290O1xuXG4gIGNvbnN0IHsgdmFsaWRhdGlvbkV2ZW50cyB9ID0gYWRhcHRpdmVDYXJkLnZhbGlkYXRlUHJvcGVydGllcygpO1xuXG4gIGlmICh2YWxpZGF0aW9uRXZlbnRzLmxlbmd0aCkge1xuICAgIHJldHVybiB7IGVycm9yczogdmFsaWRhdGlvbkV2ZW50cy5yZWR1Y2UoKGl0ZW1zLCB7IG1lc3NhZ2UgfSkgPT4gWy4uLml0ZW1zLCBuZXcgRXJyb3IobWVzc2FnZSldLCBbXSBhcyBFcnJvcltdKSB9O1xuICB9XG5cbiAgbGV0IGVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgZWxlbWVudCA9IGFkYXB0aXZlQ2FyZC5yZW5kZXIoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4geyBlcnJvcnM6IFtlcnJvcl0gfTtcbiAgfVxuXG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybiB7IGVycm9yczogW25ldyBFcnJvcignQWRhcHRpdmUgQ2FyZCByZW5kZXJlZCBhcyBlbXB0eSBlbGVtZW50JyldIH07XG4gIH1cblxuICByZXR1cm4geyBlbGVtZW50IH07XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0EsYUFBVCxDQUF1QkMsR0FBdkIsRUFBNEI7RUFDMUIsT0FBT0MsTUFBTSxDQUFDQyxjQUFQLENBQXNCRixHQUF0QixNQUErQkMsTUFBTSxDQUFDRSxTQUE3QztBQUNEOztBQUVjLFNBQVNDLGtCQUFULENBQ2JDLFlBRGEsUUFnQm1DO0VBQUEsSUFiOUNDLHVCQWE4QyxRQWI5Q0EsdUJBYThDO0VBQUEsaUNBWjlDQyxvQkFZOEM7RUFBQSxJQVp0QkMsY0FZc0IseUJBWnRCQSxjQVlzQjtFQUFBLElBWk5DLFVBWU0seUJBWk5BLFVBWU07RUFBQSxJQVg5Q0Msb0JBVzhDLFFBWDlDQSxvQkFXOEM7RUFBQSxJQVY5Q0MscUJBVThDLFFBVjlDQSxxQkFVOEM7O0VBQ2hEO0VBRUE7RUFDQTtFQUNBO0VBRUE7RUFDQTtFQUNBTixZQUFZLENBQUNPLFdBQWIsQ0FBeUIsbUJBQXpCLElBQWdELFVBQUNDLElBQUQsRUFBZUMsTUFBZixFQUFxRDtJQUNuRyxJQUFJSixvQkFBSixFQUEwQjtNQUN4QkksTUFBTSxDQUFDQyxVQUFQLEdBQW9CTCxvQkFBb0IsQ0FBQ0csSUFBRCxDQUF4QztNQUNBQyxNQUFNLENBQUNFLFVBQVAsR0FBb0IsSUFBcEI7SUFDRDtFQUNGLENBTEQ7O0VBT0EsSUFBSVYsdUJBQUosRUFBNkI7SUFDM0JELFlBQVksQ0FBQ1ksVUFBYixHQUEwQmxCLGFBQWEsQ0FBQ08sdUJBQUQsQ0FBYixHQUN0QixJQUFJRyxVQUFKLENBQWVILHVCQUFmLENBRHNCLEdBRXRCQSx1QkFGSjtFQUdELENBcEIrQyxDQXNCaEQ7OztFQUNBRSxjQUFjLENBQUNHLHFCQUFmLEdBQXVDQSxxQkFBdkM7O0VBRUEsNEJBQTZCTixZQUFZLENBQUNhLGtCQUFiLEVBQTdCO0VBQUEsSUFBUUMsZ0JBQVIseUJBQVFBLGdCQUFSOztFQUVBLElBQUlBLGdCQUFnQixDQUFDQyxNQUFyQixFQUE2QjtJQUMzQixPQUFPO01BQUVDLE1BQU0sRUFBRUYsZ0JBQWdCLENBQUNHLE1BQWpCLENBQXdCLFVBQUNDLEtBQUQ7UUFBQSxJQUFVQyxPQUFWLFNBQVVBLE9BQVY7UUFBQSxrREFBNEJELEtBQTVCLElBQW1DLElBQUlFLEtBQUosQ0FBVUQsT0FBVixDQUFuQztNQUFBLENBQXhCLEVBQWdGLEVBQWhGO0lBQVYsQ0FBUDtFQUNEOztFQUVELElBQUlFLE9BQUo7O0VBRUEsSUFBSTtJQUNGQSxPQUFPLEdBQUdyQixZQUFZLENBQUNzQixNQUFiLEVBQVY7RUFDRCxDQUZELENBRUUsT0FBT0MsS0FBUCxFQUFjO0lBQ2QsT0FBTztNQUFFUCxNQUFNLEVBQUUsQ0FBQ08sS0FBRDtJQUFWLENBQVA7RUFDRDs7RUFFRCxJQUFJLENBQUNGLE9BQUwsRUFBYztJQUNaLE9BQU87TUFBRUwsTUFBTSxFQUFFLENBQUMsSUFBSUksS0FBSixDQUFVLHlDQUFWLENBQUQ7SUFBVixDQUFQO0VBQ0Q7O0VBRUQsT0FBTztJQUFFQyxPQUFPLEVBQVBBO0VBQUYsQ0FBUDtBQUNEIn0=