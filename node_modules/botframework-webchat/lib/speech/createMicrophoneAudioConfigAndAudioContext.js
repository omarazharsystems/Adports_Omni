"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createMicrophoneAudioConfigAndAudioContext;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _Exports = require("microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports");

var _Exports2 = require("microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/Exports");

var _bytesPerSample = _interopRequireDefault(require("./bytesPerSample"));

var _createAudioConfig = _interopRequireDefault(require("./createAudioConfig"));

var _createAudioContext = _interopRequireDefault(require("./createAudioContext"));

var _getUserMedia = _interopRequireDefault(require("./getUserMedia"));

// This is how often we are flushing audio buffer to the network. Modify this value will affect latency.
var DEFAULT_BUFFER_DURATION_IN_MS = 100; // TODO: [P2] #3975 We should consider building our own PcmRecorder:
//       - Use Audio Worklet via blob URL
//       - Not hardcoding the sample rate or other values
// PcmRecorder always downscale to 16000 Hz. We cannot use the dynamic value from MediaConstraints or MediaTrackSettings.

var PCM_RECORDER_HARDCODED_SETTINGS = Object.freeze({
  channelCount: 1,
  sampleRate: 16000,
  sampleSize: 16
});
var PCM_RECORDER_HARDCODED_FORMAT = Object.freeze({
  bitsPerSample: PCM_RECORDER_HARDCODED_SETTINGS.sampleSize,
  // `channelCount` is not on @types/web@0.0.54 yet, related to https://github.com/microsoft/TypeScript-DOM-lib-generator/issues/1290.
  // @ts-ignore
  channels: PCM_RECORDER_HARDCODED_SETTINGS.channelCount,
  samplesPerSec: PCM_RECORDER_HARDCODED_SETTINGS.sampleRate
});

function createMicrophoneAudioConfig(options) {
  var audioConstraints = options.audioConstraints,
      audioContext = options.audioContext,
      debug = options.debug,
      enableTelemetry = options.enableTelemetry,
      pcmRecorderWorkletUrl = options.pcmRecorderWorkletUrl;
  var bufferDurationInMS = options.bufferDurationInMS || DEFAULT_BUFFER_DURATION_IN_MS; // Related to #4523.
  // When bumping to recent version of `microsoft-cognitiveservices-speech-sdk@>=1.23.0`, pass `true` to the constructor.
  // const pcmRecorder = new PcmRecorder(true);

  var pcmRecorder = new _Exports2.PcmRecorder();
  pcmRecorderWorkletUrl && pcmRecorder.setWorkletUrl(pcmRecorderWorkletUrl);
  return (0, _createAudioConfig.default)({
    attach: function attach(audioNodeId) {
      return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        var mediaStream, _mediaStream$getAudio, _mediaStream$getAudio2, firstAudioTrack, outputStream;

        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _getUserMedia.default)({
                  audio: audioConstraints,
                  video: false
                });

              case 2:
                mediaStream = _context.sent;
                _mediaStream$getAudio = mediaStream.getAudioTracks(), _mediaStream$getAudio2 = (0, _slicedToArray2.default)(_mediaStream$getAudio, 1), firstAudioTrack = _mediaStream$getAudio2[0];

                if (firstAudioTrack) {
                  _context.next = 6;
                  break;
                }

                throw new Error('No audio device is found.');

              case 6:
                outputStream = new _Exports.ChunkedArrayBufferStream( // Speech SDK quirks: PcmRecorder hardcoded sample rate of 16000 Hz.
                (0, _bytesPerSample.default)(PCM_RECORDER_HARDCODED_SETTINGS) * ( // eslint-disable-next-line no-magic-numbers
                (bufferDurationInMS || DEFAULT_BUFFER_DURATION_IN_MS) / 1000), audioNodeId);
                pcmRecorder.record(audioContext, mediaStream, outputStream);
                return _context.abrupt("return", {
                  audioStreamNode: {
                    // Speech SDK quirks: In SDK's original MicAudioSource implementation, it call turnOff() during detach().
                    //                    That means, it call turnOff(), then detach(), then turnOff() again. Seems redundant.
                    //                    When using with Direct Line Speech, turnOff() is never called.
                    detach: function detach() {
                      // Speech SDK quirks: In SDK, it call outputStream.close() in turnOff() before outputStream.readEnded() in detach().
                      //                    I think it make sense to call readEnded() before close().
                      outputStream.readEnded();
                      outputStream.close(); // PcmRecorder.releaseMediaResources() will disconnect/stop the MediaStream.
                      // We cannot use MediaStream again after turned off.

                      pcmRecorder.releaseMediaResources(audioContext); // MediaStream will become inactive after all tracks are removed.

                      mediaStream.getTracks().forEach(function (track) {
                        return mediaStream.removeTrack(track);
                      }); // ESLint: "return" is required by TypeScript
                      // eslint-disable-next-line no-useless-return

                      return;
                    },
                    id: function id() {
                      return audioNodeId;
                    },
                    read: function read() {
                      return outputStream.read();
                    }
                  },
                  deviceInfo: {
                    manufacturer: 'Bot Framework Web Chat',
                    model: enableTelemetry ? firstAudioTrack.label : '',
                    type: enableTelemetry ? 'Microphones' : 'Unknown'
                  },
                  // Speech SDK quirks: PcmRecorder hardcoded sample rate of 16000 Hz.
                  //                    We cannot obtain this number other than looking at their source code.
                  //                    I.e. no getter property.
                  // PcmRecorder always downscale to 16000 Hz. We cannot use the dynamic value from MediaConstraints or MediaTrackSettings.
                  format: PCM_RECORDER_HARDCODED_FORMAT
                });

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    },
    debug: debug
  });
}

function createMicrophoneAudioConfigAndAudioContext(_ref) {
  var audioContext = _ref.audioContext,
      audioInputDeviceId = _ref.audioInputDeviceId,
      enableTelemetry = _ref.enableTelemetry;
  // Web Chat has an implementation of AudioConfig for microphone that would enable better support on Safari:
  // - Maintain same instance of `AudioContext` across recognitions;
  // - Resume suspended `AudioContext` on user gestures.
  //
  // This is filed as https://github.com/microsoft/cognitive-services-speech-sdk-js/issues/571.
  // Before Speech SDK team take our suggestion, we need to continue using a custom AudioConfig object to persist the blessing.
  audioContext || (audioContext = (0, _createAudioContext.default)());
  return {
    audioConfig: createMicrophoneAudioConfig({
      audioConstraints: audioInputDeviceId ? {
        deviceId: audioInputDeviceId
      } : true,
      audioContext: audioContext,
      enableTelemetry: enableTelemetry ? true : undefined
    }),
    audioContext: audioContext
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,