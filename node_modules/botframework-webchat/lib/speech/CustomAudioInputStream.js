"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _microsoftCognitiveservicesSpeechSdk = require("microsoft-cognitiveservices-speech-sdk");

var _Exports = require("microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports");

var _AudioStreamFormat = require("microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/AudioStreamFormat");

var _Exports2 = require("microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports");

var _botframeworkWebchatCore = require("botframework-webchat-core");

var _uuid = require("uuid");

var _pDeferEs = _interopRequireDefault(require("p-defer-es5"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var SYMBOL_DEVICE_INFO_DEFERRED = Symbol('deviceInfoDeferred');
var SYMBOL_EVENTS = Symbol('events');
var SYMBOL_FORMAT_DEFERRED = Symbol('formatDeferred');
var SYMBOL_OPTIONS = Symbol('options'); // Speech SDK quirks: Only 2 lifecycle functions are actually used.
//                    They are: attach() and turnOff().
//                    Others are not used, including: blob(), close(), detach(), turnOn().

var CustomAudioInputStream = /*#__PURE__*/function (_AudioInputStream) {
  (0, _inherits2.default)(CustomAudioInputStream, _AudioInputStream);

  var _super = _createSuper(CustomAudioInputStream);

  function CustomAudioInputStream() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck2.default)(this, CustomAudioInputStream);
    _this = _super.call(this);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), SYMBOL_DEVICE_INFO_DEFERRED, void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), SYMBOL_EVENTS, void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), SYMBOL_FORMAT_DEFERRED, void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), SYMBOL_OPTIONS, void 0);
    var normalizedOptions = {
      debug: options.debug || false,
      id: options.id || (0, _uuid.v4)().replace(/\x2D/g, '')
    }; // False alarm: indexer is a constant of type Symbol.
    // eslint-disable-next-line security/detect-object-injection

    _this[SYMBOL_DEVICE_INFO_DEFERRED] = (0, _pDeferEs.default)(); // False alarm: indexer is a constant of type Symbol.
    // eslint-disable-next-line security/detect-object-injection

    _this[SYMBOL_EVENTS] = new _Exports.EventSource(); // False alarm: indexer is a constant of type Symbol.
    // eslint-disable-next-line security/detect-object-injection

    _this[SYMBOL_FORMAT_DEFERRED] = (0, _pDeferEs.default)(); // False alarm: indexer is a constant of type Symbol.
    // eslint-disable-next-line security/detect-object-injection

    _this[SYMBOL_OPTIONS] = normalizedOptions;
    return _this;
  }

  (0, _createClass2.default)(CustomAudioInputStream, [{
    key: "events",
    get:
    /** Gets the event source for listening to events. */
    // ESLint: This code will only works in browsers other than IE11. Only works in ES5 is okay.
    // @ts-ignore Accessors are only available when targeting ECMAScript 5 and higher.ts(1056)
    function get() {
      // False alarm: indexer is a constant of type Symbol.
      // eslint-disable-next-line security/detect-object-injection
      return this[SYMBOL_EVENTS];
    }
    /** Gets the format of the audio stream. */
    // Speech SDK quirks: `AudioStreamFormatImpl` is internal implementation while `AudioStreamFormat` is public.
    //                    It is weird to expose `AudioStreamFormatImpl` instead of `AudioStreamFormat`.
    // Speech SDK quirks: It is weird to return a `Promise` in a property.
    // Speech SDK quirks: In normal speech recognition, getter of "format" is called only after "attach".
    //                    But in Direct Line Speech, it is called before "attach".
    // ESLint: This code will only works in browsers other than IE11. Only works in ES5 is okay.
    // @ts-ignore Accessors are only available when targeting ECMAScript 5 and higher.ts(1056)

  }, {
    key: "format",
    get: function get() {
      this.debug('Getting "format".'); // False alarm: indexer is a constant of type Symbol.
      // eslint-disable-next-line security/detect-object-injection

      return this[SYMBOL_FORMAT_DEFERRED].promise;
    }
    /** Gets the ID of this audio stream. */

  }, {
    key: "id",
    value: function id() {
      // False alarm: indexer is a constant of type Symbol.
      // eslint-disable-next-line security/detect-object-injection
      return this[SYMBOL_OPTIONS].id;
    }
    /** Emits an event. */
    // Speech SDK quirks: In JavaScript, onXxx means "listen to event XXX".
    //                    Instead, in Speech SDK, it means "emit event XXX".

  }, {
    key: "onEvent",
    value: function onEvent(event) {
      // False alarm: indexer is a constant of type Symbol.
      // eslint-disable-next-line security/detect-object-injection
      this[SYMBOL_EVENTS].onEvent(event);

      _Exports.Events.instance.onEvent(event);
    }
    /** Emits an `AudioSourceInitializingEvent`. */

  }, {
    key: "emitInitializing",
    value: function emitInitializing() {
      this.debug('Emitting "AudioSourceInitializingEvent".');
      this.onEvent(new _Exports.AudioSourceInitializingEvent(this.id()));
    }
    /** Emits an `AudioSourceReadyEvent`. */

  }, {
    key: "emitReady",
    value: function emitReady() {
      this.debug('Emitting "AudioSourceReadyEvent".');
      this.onEvent(new _Exports.AudioSourceReadyEvent(this.id()));
    }
    /** Emits an `AudioSourceErrorEvent`. */
    // Speech SDK quirks: Since "turnOn" is never called and "turnOff" does not work in Direct Line Speech, the "source error" event is not emitted at all.
    //                    Instead, we only emit "node error" event.

  }, {
    key: "emitError",
    value: function emitError(error) {
      this.debug('Emitting "AudioSourceErrorEvent".', {
        error: error
      }); // Speech SDK quirks: "error" is a string, instead of object of type "Error".

      this.onEvent(new _Exports.AudioSourceErrorEvent(this.id(), error.message));
    }
    /** Emits an `AudioStreamNodeAttachingEvent`. */

  }, {
    key: "emitNodeAttaching",
    value: function emitNodeAttaching(audioNodeId) {
      this.debug("Emitting \"AudioStreamNodeAttachingEvent\" for node \"".concat(audioNodeId, "\"."));
      this.onEvent(new _Exports.AudioStreamNodeAttachingEvent(this.id(), audioNodeId));
    }
    /** Emits an `AudioStreamNodeAttachedEvent`. */

  }, {
    key: "emitNodeAttached",
    value: function emitNodeAttached(audioNodeId) {
      this.debug("Emitting \"AudioStreamNodeAttachedEvent\" for node \"".concat(audioNodeId, "\"."));
      this.onEvent(new _Exports.AudioStreamNodeAttachedEvent(this.id(), audioNodeId));
    }
    /** Emits an `AudioStreamNodeErrorEvent`. */

  }, {
    key: "emitNodeError",
    value: function emitNodeError(audioNodeId, error) {
      this.debug("Emitting \"AudioStreamNodeErrorEvent\" for node \"".concat(audioNodeId, "\"."), {
        error: error
      }); // Speech SDK quirks: "error" is a string, instead of object of type "Error".

      this.onEvent(new _Exports.AudioStreamNodeErrorEvent(this.id(), audioNodeId, error.message));
    }
    /** Emits an `AudioStreamNodeDetachedEvent`. */

  }, {
    key: "emitNodeDetached",
    value: function emitNodeDetached(audioNodeId) {
      this.debug('Emitting "AudioStreamNodeDetachedEvent".');
      this.onEvent(new _Exports.AudioStreamNodeDetachedEvent(this.id(), audioNodeId));
    }
    /** Emits an `AudioSourceOffEvent`. */

  }, {
    key: "emitOff",
    value: function emitOff() {
      this.debug('Emitting "AudioSourceOffEvent".');
      this.onEvent(new _Exports.AudioSourceOffEvent(this.id()));
    } // Speech SDK quirks: Although "close" is marked as abstract, it is never called in our observations.
    // ESLint: Speech SDK requires this function, but we are not implementing it.

  }, {
    key: "close",
    value: function close() {
      this.debug('Callback for "close".');
      throw new Error('Not implemented');
    } // Speech SDK quirks: Although "turnOn" is implemented in Speech SDK Push/PullAudioInputStream, it is never called in our observations.

  }, {
    key: "turnOn",
    value: function turnOn() {
      this.debug('Callback for "turnOn".');
      throw new Error('Not implemented');
    } // Speech SDK quirks: Although "detach" is implemented in Speech SDK Push/PullAudioInputStream, it is never called in our observations.

  }, {
    key: "detach",
    value: function detach() {
      this.debug('Callback for "detach".');
      throw new Error('Not implemented');
    }
    /** Log the message to console if `debug` is set to `true`. */

  }, {
    key: "debug",
    value: function debug(message) {
      var _console;

      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      // ESLint: For debugging, will only log when "debug" is set to "true".
      // False alarm: indexer is a constant of type Symbol.
      // eslint-disable-next-line no-console, security/detect-object-injection
      this[SYMBOL_OPTIONS].debug && (_console = console).info.apply(_console, ["CustomAudioInputStream: ".concat(message)].concat(args));
    }
    /** Implements this function. When called, it should start recording and return an `IAudioStreamNode`. */

  }, {
    key: "attach",
    value:
    /** Attaches the device by returning an audio node. */
    function attach(audioNodeId) {
      var _this2 = this;

      this.debug("Callback for \"attach\" with \"".concat(audioNodeId, "\"."));
      this.emitNodeAttaching(audioNodeId);
      return Promise.resolve().then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
        var _yield$_this2$perform, audioStreamNode, deviceInfo, format;

        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _this2.emitInitializing();

                _context2.prev = 1;
                _context2.next = 4;
                return _this2.performAttach(audioNodeId);

              case 4:
                _yield$_this2$perform = _context2.sent;
                audioStreamNode = _yield$_this2$perform.audioStreamNode;
                deviceInfo = _yield$_this2$perform.deviceInfo;
                format = _yield$_this2$perform.format;

                // Although only getter of "format" is called before "attach" (in Direct Line Speech),
                // we are handling both "deviceInfo" and "format" in similar way for uniformity.
                // False alarm: indexer is a constant of type Symbol.
                // eslint-disable-next-line security/detect-object-injection
                _this2[SYMBOL_DEVICE_INFO_DEFERRED].resolve(deviceInfo); // False alarm: indexer is a constant of type Symbol.
                // eslint-disable-next-line security/detect-object-injection


                _this2[SYMBOL_FORMAT_DEFERRED].resolve(new _AudioStreamFormat.AudioStreamFormatImpl(format.samplesPerSec, format.bitsPerSample, format.channels));

                _this2.emitReady();

                _this2.emitNodeAttached(audioNodeId);

                return _context2.abrupt("return", {
                  detach: function () {
                    var _detach = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
                      return _regenerator.default.wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              _this2.debug("Detaching audio node \"".concat(audioNodeId, "\"."));

                              _context.next = 3;
                              return audioStreamNode.detach();

                            case 3:
                              // Speech SDK quirks: Since "turnOff" is not called in Direct Line Speech, we will emit event "source off" here instead.
                              _this2.emitOff();

                              _this2.emitNodeDetached(audioNodeId);

                            case 5:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee);
                    }));

                    function detach() {
                      return _detach.apply(this, arguments);
                    }

                    return detach;
                  }(),
                  id: function id() {
                    return audioStreamNode.id();
                  },
                  read: function read() {
                    _this2.debug('Reading');

                    return audioStreamNode.read();
                  }
                });

              case 15:
                _context2.prev = 15;
                _context2.t0 = _context2["catch"](1);

                _this2.emitNodeError(audioNodeId, _context2.t0);

                throw _context2.t0;

              case 19:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[1, 15]]);
      })));
    }
    /**
     * Implements this function. When called, it should stop recording. This is called before the `IAudioStreamNode.detach` function.
     *
     * Note: when using with Direct Line Speech, this function is never called.
     */
    // ESLint: We are not implementing this function because it is not called by Direct Line Speech.
    // eslint-disable-next-line class-methods-use-this

  }, {
    key: "performTurnOff",
    value: function performTurnOff() {
      // ESLint: "return" is required by TypeScript
      // eslint-disable-next-line no-useless-return
      return;
    }
    /** Turn off the audio device. This is called before detaching from the graph. */
    // Speech SDK quirks: It is confused to have both "turnOff" and "detach". "turnOff" is called before "detach".
    //                    Why don't we put all logics at "detach"?
    // Speech SDK quirks: Direct Line Speech never call "turnOff". "Source off" event need to be emitted during "detach" instead.
    //                    Also, custom implementation should be done at "detach" instead, such as ending and closing output streams.

  }, {
    key: "turnOff",
    value: function () {
      var _turnOff = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.debug("Callback for \"turnOff\".");
                _context3.next = 3;
                return this.performTurnOff();

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function turnOff() {
        return _turnOff.apply(this, arguments);
      }

      return turnOff;
    }()
    /** Gets the device information. */
    // ESLint: This code will only works in browsers other than IE11. Only works in ES5 is okay.
    // @ts-ignore Accessors are only available when targeting ECMAScript 5 and higher.ts(1056)

  }, {
    key: "deviceInfo",
    get: function get() {
      this.debug("Getting \"deviceInfo\"."); // False alarm: indexer is a constant of type Symbol.
      // eslint-disable-next-line security/detect-object-injection

      return Promise.all([this[SYMBOL_DEVICE_INFO_DEFERRED].promise, this[SYMBOL_FORMAT_DEFERRED].promise]).then(function (_ref2) {
        var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
            _ref3$ = _ref3[0],
            connectivity = _ref3$.connectivity,
            manufacturer = _ref3$.manufacturer,
            model = _ref3$.model,
            type = _ref3$.type,
            _ref3$2 = _ref3[1],
            bitsPerSample = _ref3$2.bitsPerSample,
            channels = _ref3$2.channels,
            samplesPerSec = _ref3$2.samplesPerSec;

        return {
          bitspersample: bitsPerSample,
          channelcount: channels,
          connectivity: typeof connectivity === 'string' && !(0, _botframeworkWebchatCore.isForbiddenPropertyName)(connectivity) ? // Mitigated through denylisting.
          // eslint-disable-next-line security/detect-object-injection
          _Exports2.connectivity[connectivity] : connectivity || _Exports2.connectivity.Unknown,
          manufacturer: manufacturer || '',
          model: model || '',
          samplerate: samplesPerSec,
          // Mitigated through denylisting.
          // eslint-disable-next-line security/detect-object-injection
          type: typeof type === 'string' && !(0, _botframeworkWebchatCore.isForbiddenPropertyName)(type) ? _Exports2.type[type] : type || _Exports2.type.Unknown
        };
      });
    }
  }]);
  return CustomAudioInputStream;
}(_microsoftCognitiveservicesSpeechSdk.AudioInputStream);

var _default = CustomAudioInputStream;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,