import { CardElement, Action } from "./card-elements";
import { SerializableObject, Version } from "./serialization";
/**
 * Describes whether a certain element can be parsed in a "singleton" context.
 * Specifically, is the element allowed to exist as an object in a context where the
 * parent expects an Array of elements (e.g. `AdaptiveCard.body`)
 *
 * @example - Singleton element in a container (note `items` contains an `object` rather than an `Array<object>`)
 * ```json
 * {
 *     "type": "Container",
 *     "items": {
 *         "type": "AllowedSingletonElement"
 *     }
 * }
 * ```
 */
export declare enum ElementSingletonBehavior {
    /** Element only valid in a singleton context. */
    Only = 0,
    /** Element is allowed in a singleton context, but not required to be a singleton. */
    Allowed = 1,
    /** Element is not allowed to exist in a singleton context. */
    NotAllowed = 2
}
export interface ITypeRegistration<T extends SerializableObject> {
    typeName: string;
    objectType: {
        new (): T;
    };
    schemaVersion: Version;
    singletonBehavior: ElementSingletonBehavior;
}
export declare class CardObjectRegistry<T extends SerializableObject> {
    private _items;
    findByName(typeName: string): ITypeRegistration<T> | undefined;
    clear(): void;
    copyTo(target: CardObjectRegistry<T>): void;
    register(typeName: string, objectType: {
        new (): T;
    }, schemaVersion?: Version, singletonBehavior?: ElementSingletonBehavior): void;
    unregister(typeName: string): void;
    createInstance(typeName: string, targetVersion: Version): T | undefined;
    getItemCount(): number;
    getItemAt(index: number): ITypeRegistration<T>;
}
export declare class GlobalRegistry {
    private static _elements?;
    private static _actions?;
    static populateWithDefaultElements(registry: CardObjectRegistry<CardElement>): void;
    static populateWithDefaultActions(registry: CardObjectRegistry<Action>): void;
    static readonly defaultElements: CardObjectRegistry<CardElement>;
    static readonly defaultActions: CardObjectRegistry<Action>;
    static get elements(): CardObjectRegistry<CardElement>;
    static get actions(): CardObjectRegistry<Action>;
    static reset(): void;
}
