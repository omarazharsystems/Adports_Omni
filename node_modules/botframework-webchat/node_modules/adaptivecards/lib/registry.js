"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalRegistry = exports.CardObjectRegistry = exports.ElementSingletonBehavior = void 0;
var serialization_1 = require("./serialization");
/**
 * Describes whether a certain element can be parsed in a "singleton" context.
 * Specifically, is the element allowed to exist as an object in a context where the
 * parent expects an Array of elements (e.g. `AdaptiveCard.body`)
 *
 * @example - Singleton element in a container (note `items` contains an `object` rather than an `Array<object>`)
 * ```json
 * {
 *     "type": "Container",
 *     "items": {
 *         "type": "AllowedSingletonElement"
 *     }
 * }
 * ```
 */
var ElementSingletonBehavior;
(function (ElementSingletonBehavior) {
    /** Element only valid in a singleton context. */
    ElementSingletonBehavior[ElementSingletonBehavior["Only"] = 0] = "Only";
    /** Element is allowed in a singleton context, but not required to be a singleton. */
    ElementSingletonBehavior[ElementSingletonBehavior["Allowed"] = 1] = "Allowed";
    /** Element is not allowed to exist in a singleton context. */
    ElementSingletonBehavior[ElementSingletonBehavior["NotAllowed"] = 2] = "NotAllowed";
})(ElementSingletonBehavior = exports.ElementSingletonBehavior || (exports.ElementSingletonBehavior = {}));
var CardObjectRegistry = /** @class */ (function () {
    function CardObjectRegistry() {
        this._items = {};
    }
    CardObjectRegistry.prototype.findByName = function (typeName) {
        return this._items.hasOwnProperty(typeName) ? this._items[typeName] : undefined;
    };
    CardObjectRegistry.prototype.clear = function () {
        this._items = {};
    };
    CardObjectRegistry.prototype.copyTo = function (target) {
        var keys = Object.keys(this._items);
        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
            var key = keys_1[_i];
            var typeRegistration = this._items[key];
            target.register(typeRegistration.typeName, typeRegistration.objectType, typeRegistration.schemaVersion, typeRegistration.singletonBehavior);
        }
    };
    CardObjectRegistry.prototype.register = function (typeName, objectType, schemaVersion, singletonBehavior) {
        if (schemaVersion === void 0) { schemaVersion = serialization_1.Versions.v1_0; }
        if (singletonBehavior === void 0) { singletonBehavior = ElementSingletonBehavior.NotAllowed; }
        var registrationInfo = this.findByName(typeName);
        if (registrationInfo !== undefined) {
            registrationInfo.objectType = objectType;
        }
        else {
            registrationInfo = {
                typeName: typeName,
                objectType: objectType,
                schemaVersion: schemaVersion,
                singletonBehavior: singletonBehavior
            };
        }
        this._items[typeName] = registrationInfo;
    };
    CardObjectRegistry.prototype.unregister = function (typeName) {
        delete this._items[typeName];
    };
    CardObjectRegistry.prototype.createInstance = function (typeName, targetVersion) {
        var registrationInfo = this.findByName(typeName);
        return registrationInfo && registrationInfo.schemaVersion.compareTo(targetVersion) <= 0
            ? new registrationInfo.objectType()
            : undefined;
    };
    CardObjectRegistry.prototype.getItemCount = function () {
        return Object.keys(this._items).length;
    };
    CardObjectRegistry.prototype.getItemAt = function (index) {
        var _this = this;
        return Object.keys(this._items).map(function (e) { return _this._items[e]; })[index];
    };
    return CardObjectRegistry;
}());
exports.CardObjectRegistry = CardObjectRegistry;
// eslint-disable-next-line @typescript-eslint/no-extraneous-class
var GlobalRegistry = /** @class */ (function () {
    function GlobalRegistry() {
    }
    GlobalRegistry.populateWithDefaultElements = function (registry) {
        registry.clear();
        GlobalRegistry.defaultElements.copyTo(registry);
    };
    GlobalRegistry.populateWithDefaultActions = function (registry) {
        registry.clear();
        GlobalRegistry.defaultActions.copyTo(registry);
    };
    Object.defineProperty(GlobalRegistry, "elements", {
        get: function () {
            if (!GlobalRegistry._elements) {
                GlobalRegistry._elements = new CardObjectRegistry();
                GlobalRegistry.populateWithDefaultElements(GlobalRegistry._elements);
            }
            return GlobalRegistry._elements;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GlobalRegistry, "actions", {
        get: function () {
            if (!GlobalRegistry._actions) {
                GlobalRegistry._actions = new CardObjectRegistry();
                GlobalRegistry.populateWithDefaultActions(GlobalRegistry._actions);
            }
            return GlobalRegistry._actions;
        },
        enumerable: false,
        configurable: true
    });
    GlobalRegistry.reset = function () {
        GlobalRegistry._elements = undefined;
        GlobalRegistry._actions = undefined;
    };
    GlobalRegistry.defaultElements = new CardObjectRegistry();
    GlobalRegistry.defaultActions = new CardObjectRegistry();
    return GlobalRegistry;
}());
exports.GlobalRegistry = GlobalRegistry;
//# sourceMappingURL=registry.js.map