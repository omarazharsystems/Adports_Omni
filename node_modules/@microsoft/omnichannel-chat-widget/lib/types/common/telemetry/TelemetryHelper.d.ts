import { BaseContract, TelemetryContract } from "./definitions/Contracts";
import { TelemetryData } from "./definitions/Payload";
import { LogLevel, TelemetryEvent, TelemetryInput } from "./TelemetryConstants";
import ChatConfig from "@microsoft/omnichannel-chat-sdk/lib/core/ChatConfig";
import { IInternalTelemetryData } from "./interfaces/IInternalTelemetryData";
import { ITelemetryConfig } from "./interfaces/ITelemetryConfig";
import LiveChatContext from "@microsoft/omnichannel-chat-sdk/lib/core/LiveChatContext";
import LiveWorkItemDetails from "@microsoft/omnichannel-chat-sdk/lib/core/LiveWorkItemDetails";
export interface TelemetryEventWrapper {
    Event: TelemetryEvent;
    Description?: string;
    ExceptionDetails?: any;
    ElapsedTimeInMilliseconds?: number;
    Data?: any;
}
export declare class TelemetryHelper {
    static callId: string;
    static elapsedTime: string;
    static buildTelemetryEvent(level: LogLevel, input: TelemetryInput): TelemetryContract;
    static populateBasicProperties(level: LogLevel, telemetryData: TelemetryData): BaseContract;
    private static populate;
    private static conformToActionsContract;
    private static conformToWebChatContract;
    private static conformToConfigValidationContract;
    private static conformToLoadContract;
    private static conformToIC3ClientContract;
    private static conformToACSAdapterContract;
    private static conformToCallingContract;
    private static conformToOCChatSDKContract;
    static addChatConfigDataToTelemetry(chatConfig: ChatConfig, telemetryInternalData: IInternalTelemetryData): IInternalTelemetryData;
    static addWidgetDataToTelemetry(telemetryConfig: ITelemetryConfig, telemetryInternalData: IInternalTelemetryData): IInternalTelemetryData;
    static addSessionDataToTelemetry(chatSession: LiveChatContext, telemetryInternalData: IInternalTelemetryData): IInternalTelemetryData;
    static addConversationDataToTelemetry(liveWorkItem: LiveWorkItemDetails, telemetryInternalData: IInternalTelemetryData): IInternalTelemetryData;
    static logCallingEvent: (logLevel: LogLevel, payload: TelemetryEventWrapper, callId?: string | undefined) => void;
    static logLoadingEvent: (logLevel: LogLevel, payload: TelemetryEventWrapper) => void;
    static logActionEvent: (logLevel: LogLevel, payload: TelemetryEventWrapper) => void;
    static logSDKEvent: (logLevel: LogLevel, payload: TelemetryEventWrapper) => void;
    static logConfigDataEvent: (logLevel: LogLevel, payload: TelemetryEventWrapper) => void;
    static logWebChatEvent: (logLevel: LogLevel, payload: TelemetryEventWrapper) => void;
}
