"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createOnNewAdapterActivityHandler = void 0;
var _TelemetryConstants = require("../common/telemetry/TelemetryConstants");
var _omnichannelChatComponents = require("@microsoft/omnichannel-chat-components");
var _Constants = require("../common/Constants");
var _TelemetryHelper = require("../common/telemetry/TelemetryHelper");
var _TelemetryManager = require("../common/telemetry/TelemetryManager");
const createOnNewAdapterActivityHandler = (chatId, userId) => {
  const onNewAdapterActivityHandler = activity => {
    var _activity$channelData, _activity$channelData2, _activity$channelData3;
    const isActivityMessage = (activity === null || activity === void 0 ? void 0 : activity.type) === _Constants.Constants.message;
    const isHistoryMessage = isActivityMessage && ((activity === null || activity === void 0 ? void 0 : (_activity$channelData = activity.channelData) === null || _activity$channelData === void 0 ? void 0 : (_activity$channelData2 = _activity$channelData.tags) === null || _activity$channelData2 === void 0 ? void 0 : _activity$channelData2.includes(_Constants.Constants.historyMessageTag)) || (activity === null || activity === void 0 ? void 0 : (_activity$channelData3 = activity.channelData) === null || _activity$channelData3 === void 0 ? void 0 : _activity$channelData3.fromList));
    raiseMessageEvent(activity, isHistoryMessage);
  };
  let isHistoryMessageReceivedEventRasied = false;
  const raiseMessageEvent = (activity, isHistoryMessage) => {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const polyfillMessagePayloadForEvent = payload => {
      var _activity$conversatio, _TelemetryManager$Int;
      return {
        ...payload,
        channelData: activity === null || activity === void 0 ? void 0 : activity.channelData,
        chatId: activity === null || activity === void 0 ? void 0 : (_activity$conversatio = activity.conversation) === null || _activity$conversatio === void 0 ? void 0 : _activity$conversatio.id,
        conversationId: (_TelemetryManager$Int = _TelemetryManager.TelemetryManager.InternalTelemetryData) === null || _TelemetryManager$Int === void 0 ? void 0 : _TelemetryManager$Int.conversationId,
        id: activity === null || activity === void 0 ? void 0 : activity.id,
        isChatComplete: false,
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        text: activity === null || activity === void 0 ? void 0 : activity.text
      };
    };
    if ((activity === null || activity === void 0 ? void 0 : activity.type) === _Constants.Constants.message) {
      var _text, _text2, _activity$channelData4, _activity$from;
      const payload = {
        // To identify hidden contents vs empty content
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        text: (activity === null || activity === void 0 ? void 0 : (_text = activity.text) === null || _text === void 0 ? void 0 : _text.length) >= 1 ? `*contents hidden (${activity === null || activity === void 0 ? void 0 : (_text2 = activity.text) === null || _text2 === void 0 ? void 0 : _text2.length} chars)*` : "",
        type: activity === null || activity === void 0 ? void 0 : activity.type,
        timestamp: activity === null || activity === void 0 ? void 0 : activity.timestamp,
        userId: userId,
        tags: activity === null || activity === void 0 ? void 0 : (_activity$channelData4 = activity.channelData) === null || _activity$channelData4 === void 0 ? void 0 : _activity$channelData4.tags,
        messageType: ""
      };
      if ((activity === null || activity === void 0 ? void 0 : (_activity$from = activity.from) === null || _activity$from === void 0 ? void 0 : _activity$from.role) === _Constants.Constants.userMessageTag) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        payload.messageType = _Constants.Constants.userMessageTag;
        const newMessageSentEvent = {
          eventName: _TelemetryConstants.BroadcastEvent.NewMessageSent,
          payload: polyfillMessagePayloadForEvent(payload)
        };
        _omnichannelChatComponents.BroadcastService.postMessage(newMessageSentEvent);
        _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.INFO, {
          Event: _TelemetryConstants.TelemetryEvent.MessageSent,
          Description: "New message sent"
        });
      } else {
        var _activity$channelData5, _activity$channelData6;
        if (activity !== null && activity !== void 0 && (_activity$channelData5 = activity.channelData) !== null && _activity$channelData5 !== void 0 && (_activity$channelData6 = _activity$channelData5.tags) !== null && _activity$channelData6 !== void 0 && _activity$channelData6.includes(_Constants.Constants.systemMessageTag)) {
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          payload.messageType = _Constants.Constants.systemMessageTag;
          _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.INFO, {
            Event: _TelemetryConstants.TelemetryEvent.SystemMessageReceived,
            Description: "System message received"
          });
        } else {
          var _activity$channelData7, _activity$channelData8, _activity$channelData9;
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          const messageHasNoText = !(activity !== null && activity !== void 0 && activity.text);
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          const messageHasNoTags = !(activity !== null && activity !== void 0 && activity.channelData) || !(activity !== null && activity !== void 0 && (_activity$channelData7 = activity.channelData) !== null && _activity$channelData7 !== void 0 && _activity$channelData7.tags) || (activity === null || activity === void 0 ? void 0 : (_activity$channelData8 = activity.channelData) === null || _activity$channelData8 === void 0 ? void 0 : (_activity$channelData9 = _activity$channelData8.tags) === null || _activity$channelData9 === void 0 ? void 0 : _activity$channelData9.length) === 0;
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          const messageHasNoAttachments = !(activity !== null && activity !== void 0 && activity.attachments) || (activity === null || activity === void 0 ? void 0 : activity.attachments.length) === 0;
          if (messageHasNoTags && messageHasNoText && messageHasNoAttachments) {
            return;
          }
          payload.messageType = _Constants.Constants.userMessageTag;
        }
        const newMessageReceivedEvent = {
          eventName: isHistoryMessage ? _TelemetryConstants.BroadcastEvent.HistoryMessageReceived : _TelemetryConstants.BroadcastEvent.NewMessageReceived,
          payload: polyfillMessagePayloadForEvent(payload)
        };
        _omnichannelChatComponents.BroadcastService.postMessage(newMessageReceivedEvent);
        if (!isHistoryMessage) {
          _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.INFO, {
            Event: _TelemetryConstants.TelemetryEvent.MessageReceived,
            Description: "New message received",
            Data: payload
          });
        } else {
          if (!isHistoryMessageReceivedEventRasied) {
            isHistoryMessageReceivedEventRasied = true;
            _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.INFO, {
              Event: _TelemetryConstants.TelemetryEvent.RehydrateMessageReceived,
              Description: "History message received",
              Data: payload
            });
          }
        }
      }
    }
  };
  return onNewAdapterActivityHandler;
};
exports.createOnNewAdapterActivityHandler = createOnNewAdapterActivityHandler;