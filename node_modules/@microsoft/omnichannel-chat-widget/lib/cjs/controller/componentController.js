"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shouldShowWebChatContainer = exports.shouldShowReconnectChatPane = exports.shouldShowProactiveChatPane = exports.shouldShowPreChatSurveyPane = exports.shouldShowPostChatSurveyPane = exports.shouldShowPostChatLoadingPane = exports.shouldShowOutOfOfficeHoursPane = exports.shouldShowLoadingPane = exports.shouldShowHeader = exports.shouldShowFooter = exports.shouldShowEmailTranscriptPane = exports.shouldShowConfirmationPane = exports.shouldShowChatButton = exports.shouldShowCallingContainer = void 0;
var _ConversationState = require("../contexts/common/ConversationState");
const shouldShowChatButton = state => {
  var _state$appStates;
  return (state.appStates.isMinimized || state.appStates.conversationState === _ConversationState.ConversationState.Closed) && (state === null || state === void 0 ? void 0 : (_state$appStates = state.appStates) === null || _state$appStates === void 0 ? void 0 : _state$appStates.hideStartChatButton) === false; // Do not show chat button in case of popout
};
exports.shouldShowChatButton = shouldShowChatButton;
const shouldShowProactiveChatPane = state => {
  return !state.appStates.isMinimized && state.appStates.conversationState === _ConversationState.ConversationState.ProactiveChat;
};
exports.shouldShowProactiveChatPane = shouldShowProactiveChatPane;
const shouldShowHeader = state => {
  return !state.appStates.isMinimized && state.appStates.conversationState !== _ConversationState.ConversationState.Closed && state.appStates.conversationState !== _ConversationState.ConversationState.ProactiveChat;
};
exports.shouldShowHeader = shouldShowHeader;
const shouldShowFooter = state => {
  return !state.appStates.isMinimized && (state.appStates.conversationState === _ConversationState.ConversationState.Active || state.appStates.conversationState === _ConversationState.ConversationState.InActive || state.appStates.conversationState === _ConversationState.ConversationState.Postchat);
};
exports.shouldShowFooter = shouldShowFooter;
const shouldShowEmailTranscriptPane = state => {
  return state.uiStates.showEmailTranscriptPane;
};
exports.shouldShowEmailTranscriptPane = shouldShowEmailTranscriptPane;
const shouldShowWebChatContainer = state => {
  return state.appStates.conversationState === _ConversationState.ConversationState.Active || state.appStates.conversationState === _ConversationState.ConversationState.InActive;
};
exports.shouldShowWebChatContainer = shouldShowWebChatContainer;
const shouldShowLoadingPane = state => {
  return !state.appStates.isMinimized && state.appStates.conversationState === _ConversationState.ConversationState.Loading;
};
exports.shouldShowLoadingPane = shouldShowLoadingPane;
const shouldShowReconnectChatPane = state => {
  return !state.appStates.isMinimized && state.appStates.conversationState === _ConversationState.ConversationState.ReconnectChat;
};
exports.shouldShowReconnectChatPane = shouldShowReconnectChatPane;
const shouldShowPostChatLoadingPane = state => {
  return !state.appStates.isMinimized && state.appStates.conversationState === _ConversationState.ConversationState.PostchatLoading;
};
exports.shouldShowPostChatLoadingPane = shouldShowPostChatLoadingPane;
const shouldShowOutOfOfficeHoursPane = state => {
  return !state.appStates.isMinimized && state.appStates.conversationState === _ConversationState.ConversationState.OutOfOffice;
};
exports.shouldShowOutOfOfficeHoursPane = shouldShowOutOfOfficeHoursPane;
const shouldShowPreChatSurveyPane = state => {
  return state.appStates.conversationState === _ConversationState.ConversationState.Prechat;
};
exports.shouldShowPreChatSurveyPane = shouldShowPreChatSurveyPane;
const shouldShowConfirmationPane = state => {
  return state.uiStates.showConfirmationPane;
};
exports.shouldShowConfirmationPane = shouldShowConfirmationPane;
const shouldShowPostChatSurveyPane = state => {
  return state.appStates.conversationState === _ConversationState.ConversationState.Postchat;
};
exports.shouldShowPostChatSurveyPane = shouldShowPostChatSurveyPane;
const shouldShowCallingContainer = state => {
  return state.appStates.conversationState === _ConversationState.ConversationState.Active && state.appStates.e2vvEnabled;
};
exports.shouldShowCallingContainer = shouldShowCallingContainer;