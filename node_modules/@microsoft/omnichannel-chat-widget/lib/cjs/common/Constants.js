"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WebChatMiddlewareConstants = exports.TranscriptConstants = exports.StorageType = exports.Regex = exports.ParticipantType = exports.MimeTypes = exports.LocaleConstants = exports.LiveWorkItemState = exports.HtmlIdNames = exports.HtmlElementSelectors = exports.HtmlClassNames = exports.HtmlAttributeNames = exports.EnvironmentVersion = exports.ElementType = exports.E2VVOptions = exports.ConversationMode = exports.ConversationEndEntity = exports.Constants = exports.ConfirmationState = exports.ChatSDKError = exports.AriaTelemetryConstants = exports.AMSConstants = void 0;
var _class;
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class Constants {}
exports.Constants = Constants;
_defineProperty(Constants, "magicCodeBroadcastChannel", "MagicCodeChannel");
_defineProperty(Constants, "magicCodeResponseBroadcastChannel", "MagicCodeResponseChannel");
_defineProperty(Constants, "systemMessageTag", "system");
_defineProperty(Constants, "userMessageTag", "user");
_defineProperty(Constants, "historyMessageTag", "history");
_defineProperty(Constants, "agentEndConversationMessageTag", "agentendconversation");
_defineProperty(Constants, "supervisorForceCloseMessageTag", "supervisorforceclosedconversation");
_defineProperty(Constants, "receivedMessageClassName", "ms_lcw_webchat_received_message");
_defineProperty(Constants, "sentMessageClassName", "ms_lcw_webchat_sent_message");
_defineProperty(Constants, "webchatChannelId", "webchat");
_defineProperty(Constants, "markdown", "markdown");
_defineProperty(Constants, "actionType", "actionType");
_defineProperty(Constants, "String", "string");
_defineProperty(Constants, "ChatMessagesJson", "chatMessagesJson");
_defineProperty(Constants, "truePascal", "True");
_defineProperty(Constants, "true", "true");
_defineProperty(Constants, "false", "false");
_defineProperty(Constants, "maximumUnreadMessageCount", 99);
_defineProperty(Constants, "userParticipantTypeTag", "User");
_defineProperty(Constants, "botParticipantTypeTag", "Bot");
// channelDataMiddleware
_defineProperty(Constants, "channelIdKey", "ChannelId-");
_defineProperty(Constants, "ChannelId", "lcw");
_defineProperty(Constants, "CustomerTag", "FromCustomer");
// gifUploadMiddleware
_defineProperty(Constants, "GifContentType", "image/gif");
// htmlPlayerMiddleware
_defineProperty(Constants, "video", "video");
_defineProperty(Constants, "audio", "audio");
_defineProperty(Constants, "controlsList", "controlsList");
_defineProperty(Constants, "nodownload", "nodownload");
// htmlTextMiddleware
_defineProperty(Constants, "activity", "activity");
_defineProperty(Constants, "payload", "payload");
_defineProperty(Constants, "text", "text");
_defineProperty(Constants, "blank", "_blank");
// activityMiddleware
_defineProperty(Constants, "visitorIdPrefix", "8:");
_defineProperty(Constants, "left", "left");
_defineProperty(Constants, "queuePositionMessageTag", "queueposition");
_defineProperty(Constants, "averageWaitTimeMessageTag", "averagewaittime");
_defineProperty(Constants, "message", "message");
_defineProperty(Constants, "hiddenTag", "Hidden");
// messageTimestampMiddleware
_defineProperty(Constants, "prefixTimestampTag", "ServerMessageTimestamp_");
_defineProperty(Constants, "acsChannel", "ACS_CHANNEL");
_defineProperty(Constants, "publicMessageTag", "public");
//attachmentMiddleware
_defineProperty(Constants, "supportedAdaptiveCardContentTypes", ["application/vnd.microsoft.card.adaptive", "application/vnd.microsoft.card.audio", "application/vnd.microsoft.card.hero", "application/vnd.microsoft.card.receipt", "application/vnd.microsoft.card.thumbnail", "application/vnd.microsoft.card.signin", "application/vnd.microsoft.card.oauth", "application/vnd.microsoft.card.video"]);
_defineProperty(Constants, "adaptiveCardContentTypePrefix", "application/vnd.microsoft.card");
_defineProperty(Constants, "maxUploadFileSize", "500000");
_defineProperty(Constants, "imageRegex", /(\.)(jpeg|jpg|jiff|png|gif|bmp|webp)$/i);
_defineProperty(Constants, "audioMediaRegex", /(\.)(aac|aiff|alac|amr|flac|mp2|mp3|pcm|wav|wma)$/i);
_defineProperty(Constants, "videoMediaRegex", /(\.)(avchd|avi|flv|mpe|mpeg|mpg|mpv|mp4|m4p|m4v|mov|qt|swf|webm|wmv)$/i);
_defineProperty(Constants, "chromeSupportedInlineMediaRegex", /(\.)(aac|mp3|wav|mp4)$/i);
_defineProperty(Constants, "firefoxSupportedInlineMediaRegex", /(\.)(aac|flac|mp3|wav|mp4|mov)$/i);
// calling container event names
_defineProperty(Constants, "CallAdded", "callAdded");
_defineProperty(Constants, "LocalVideoStreamAdded", "localVideoStreamAdded");
_defineProperty(Constants, "LocalVideoStreamRemoved", "localVideoStreamRemoved");
_defineProperty(Constants, "RemoteVideoStreamAdded", "remoteVideoStreamAdded");
_defineProperty(Constants, "RemoteVideoStreamRemoved", "remoteVideoStreamRemoved");
_defineProperty(Constants, "CallDisconnected", "callDisconnected");
_defineProperty(Constants, "IncomingCallEnded", "incomingCallEnded");
_defineProperty(Constants, "VoiceVideoInitialize", "voiceVideoInitialize");
_defineProperty(Constants, "VoiceVideoInitializeException", "voiceVideoInitializeOnException");
_defineProperty(Constants, "VoiceVideoLoading", "voiceVideoLoading");
_defineProperty(Constants, "VoiceVideoNotLoaded", "voiceVideoNotLoaded");
_defineProperty(Constants, "VoiceVideoLoadingException", "voiceVideoLoadingOnException");
_defineProperty(Constants, "VoiceVideoAcceptCallException", "voiceVideoAcceptCallOnException");
_defineProperty(Constants, "VoiceVideoAcceptCallWithVideoException", "voiceVideoAcceptCallWithVideoException");
// download transcript
_defineProperty(Constants, "defaultDownloadTranscriptError", "Download transcript failed.");
// proactive chat
_defineProperty(Constants, "ProactiveChatInviteTimeoutInMs", 60000);
// 1 minute
// prechat survey
_defineProperty(Constants, "InputSubmit", "InputSubmit");
// reconnect chat
_defineProperty(Constants, "ReconnectIdAttributeName", "oc.reconnectid");
_defineProperty(Constants, "LiveChatWidget", "LiveChatWidgetNew");
_defineProperty(Constants, "GuidPattern", "xx-x-4m-ym-xxx");
// Markdown plugin
_defineProperty(Constants, "Default", "default");
_defineProperty(Constants, "Zero", "zero");
_defineProperty(Constants, "Title", "title");
_defineProperty(Constants, "Target", "target");
_defineProperty(Constants, "Blank", "_blank");
_defineProperty(Constants, "TargetRelationship", "rel");
_defineProperty(Constants, "TargetRelationshipAttributes", "noopener noreferrer");
// Markdown icons
_defineProperty(Constants, "OpenLinkIconCssClass", "webchat__markdown__external-link-icon");
// internet connection test
_defineProperty(Constants, "internetConnectionTestUrl", "https://ocsdk-prod.azureedge.net/public/connecttest.txt");
_defineProperty(Constants, "internetConnectionTestUrlText", "Omnichannel Connect Test");
_defineProperty(Constants, "ChatWidgetStateChangedPrefix", "ChatWidgetStateChanged");
_defineProperty(Constants, "PostChatLoadingDurationInMs", 2000);
_defineProperty(Constants, "BrowserUnloadConfirmationMessage", "Do you want to leave chat?");
_defineProperty(Constants, "CacheTtlInMinutes", 15);
_defineProperty(Constants, "SessionCacheSuffix", "session");
_defineProperty(Constants, "PopoutCacheSuffix", "popout");
// Visibility timeout for conversation details
_defineProperty(Constants, "LWICheckOnVisibilityTimeout", 3 * 60 * 1000);
// 3 minute
// Popup mode custom context response event message name
_defineProperty(Constants, "InitContextParamsRequest", "initContextParamsRequest");
_defineProperty(Constants, "InitContextParamsResponse", "initContextParamsResponse");
_defineProperty(Constants, "OCOriginalMessageId", "OriginalMessageId");
_defineProperty(Constants, "WebchatSequenceIdAttribute", "webchat:sequence-id");
_defineProperty(Constants, "MessageSequenceIdOverride", "MessageSequenceIdOverride");
const Regex = (_class = class Regex {}, _defineProperty(_class, "EmailRegex", "(?:[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-zA-Z0-9-]*[a-zA-Z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])"), _class);
exports.Regex = Regex;
class HtmlIdNames {}
exports.HtmlIdNames = HtmlIdNames;
_defineProperty(HtmlIdNames, "MSLiveChatWidget", "MSLiveChatWidget");
class HtmlClassNames {}
exports.HtmlClassNames = HtmlClassNames;
_defineProperty(HtmlClassNames, "webChatBannerCloseButton", "webchat__toast__dismissButton");
_defineProperty(HtmlClassNames, "webChatBannerExpandButton", "webchat__toaster__expandIcon");
class HtmlElementSelectors {}
exports.HtmlElementSelectors = HtmlElementSelectors;
_defineProperty(HtmlElementSelectors, "sendBoxSelector", "textarea[data-id=\"webchat-sendbox-input\"]");
class HtmlAttributeNames {}
exports.HtmlAttributeNames = HtmlAttributeNames;
_defineProperty(HtmlAttributeNames, "role", "role");
_defineProperty(HtmlAttributeNames, "navigation", "navigation");
_defineProperty(HtmlAttributeNames, "ariaLabel", "aria-label");
_defineProperty(HtmlAttributeNames, "ariaLive", "aria-live");
_defineProperty(HtmlAttributeNames, "ariaDisabled", "aria-disabled");
_defineProperty(HtmlAttributeNames, "form", "form");
_defineProperty(HtmlAttributeNames, "ariaLabelledby", "aria-labelledby");
_defineProperty(HtmlAttributeNames, "tabindex", "tabindex");
_defineProperty(HtmlAttributeNames, "ariaRequired", "aria-required");
_defineProperty(HtmlAttributeNames, "ariaDesribedby", "aria-describedby");
_defineProperty(HtmlAttributeNames, "ariaHidden", "aria-hidden");
_defineProperty(HtmlAttributeNames, "disabled", "disabled");
_defineProperty(HtmlAttributeNames, "hidden", "hidden");
_defineProperty(HtmlAttributeNames, "download", "download");
_defineProperty(HtmlAttributeNames, "href", "href");
_defineProperty(HtmlAttributeNames, "region", "region");
_defineProperty(HtmlAttributeNames, "button", "button");
_defineProperty(HtmlAttributeNames, "input", "Input");
_defineProperty(HtmlAttributeNames, "style", "style");
_defineProperty(HtmlAttributeNames, "head", "head");
_defineProperty(HtmlAttributeNames, "type", "type");
_defineProperty(HtmlAttributeNames, "csstext", "text/css");
_defineProperty(HtmlAttributeNames, "listItem", "LI");
_defineProperty(HtmlAttributeNames, "unorderedList", "UL");
_defineProperty(HtmlAttributeNames, "div", "div");
_defineProperty(HtmlAttributeNames, "aTagName", "a");
_defineProperty(HtmlAttributeNames, "pTagName", "p");
_defineProperty(HtmlAttributeNames, "noopenerTag", "noopener");
_defineProperty(HtmlAttributeNames, "noreferrerTag", "noreferrer");
_defineProperty(HtmlAttributeNames, "adaptiveCardClassName", "ac-adaptiveCard");
_defineProperty(HtmlAttributeNames, "adaptiveCardTextBlockClassName", "ac-textBlock");
_defineProperty(HtmlAttributeNames, "adaptiveCardToggleInputClassName", "ac-toggleInput");
_defineProperty(HtmlAttributeNames, "adaptiveCardActionSetClassName", "ac-actionSet");
class WebChatMiddlewareConstants {}
exports.WebChatMiddlewareConstants = WebChatMiddlewareConstants;
_defineProperty(WebChatMiddlewareConstants, "nextVisibleActivity", "nextVisibleActivity");
_defineProperty(WebChatMiddlewareConstants, "timeBetweenTimestampGroups", 300000);
//5 minutes
_defineProperty(WebChatMiddlewareConstants, "maxTextLength", 6000);
_defineProperty(WebChatMiddlewareConstants, "adaptiveCard", "AdaptiveCard");
class AMSConstants {}
exports.AMSConstants = AMSConstants;
_defineProperty(AMSConstants, "supportedImagesMimeTypes", ["image/jpeg", "image/png", "image/gif", "image/heic", "image/webp"]);
_defineProperty(AMSConstants, "maxSupportedImageSize", 20);
// AMS max file limit outside of supported Images MIME Types.
_defineProperty(AMSConstants, "maxSupportedFileSize", 300);
class MimeTypes {}
exports.MimeTypes = MimeTypes;
_defineProperty(MimeTypes, "UnknownFileType", "application/octet-stream");
class LocaleConstants {}
exports.LocaleConstants = LocaleConstants;
_defineProperty(LocaleConstants, "RTL_LOCALES", ["1025", "1037"]);
let ElementType;
exports.ElementType = ElementType;
(function (ElementType) {
  ElementType["CallingContainerSDK"] = "CallingContainerSDK";
})(ElementType || (exports.ElementType = ElementType = {}));
let ChatSDKError;
exports.ChatSDKError = ChatSDKError;
(function (ChatSDKError) {
  ChatSDKError["WidgetUseOutsideOperatingHour"] = "WidgetUseOutsideOperatingHour";
  ChatSDKError["AuthContactIdNotFoundFailure"] = "AuthContactIdNotFoundFailure";
})(ChatSDKError || (exports.ChatSDKError = ChatSDKError = {}));
let EnvironmentVersion;
exports.EnvironmentVersion = EnvironmentVersion;
(function (EnvironmentVersion) {
  EnvironmentVersion["prod"] = "prod";
  EnvironmentVersion["dogfood"] = "df";
  EnvironmentVersion["int"] = "int";
  EnvironmentVersion["test"] = "test";
})(EnvironmentVersion || (exports.EnvironmentVersion = EnvironmentVersion = {}));
let E2VVOptions;
exports.E2VVOptions = E2VVOptions;
(function (E2VVOptions) {
  E2VVOptions["NoCalling"] = "192350000";
  E2VVOptions["VideoAndVoiceCalling"] = "192350001";
  E2VVOptions["VoiceOnly"] = "192350002";
})(E2VVOptions || (exports.E2VVOptions = E2VVOptions = {}));
let ConversationMode;
exports.ConversationMode = ConversationMode;
(function (ConversationMode) {
  ConversationMode["Regular"] = "192350000";
  ConversationMode["Persistent"] = "192350001";
})(ConversationMode || (exports.ConversationMode = ConversationMode = {}));
let LiveWorkItemState;
exports.LiveWorkItemState = LiveWorkItemState;
(function (LiveWorkItemState) {
  LiveWorkItemState["Active"] = "Active";
  LiveWorkItemState["Closed"] = "Closed";
  LiveWorkItemState["Open"] = "Open";
  LiveWorkItemState["Waiting"] = "Waiting";
  LiveWorkItemState["WrapUp"] = "WrapUp";
})(LiveWorkItemState || (exports.LiveWorkItemState = LiveWorkItemState = {}));
let StorageType;
exports.StorageType = StorageType;
(function (StorageType) {
  StorageType[StorageType["localStorage"] = 0] = "localStorage";
  StorageType[StorageType["sessionStorage"] = 1] = "sessionStorage";
})(StorageType || (exports.StorageType = StorageType = {}));
let ParticipantType;
exports.ParticipantType = ParticipantType;
(function (ParticipantType) {
  ParticipantType["User"] = "User";
  ParticipantType["Bot"] = "Bot";
})(ParticipantType || (exports.ParticipantType = ParticipantType = {}));
let ConversationEndEntity;
exports.ConversationEndEntity = ConversationEndEntity;
(function (ConversationEndEntity) {
  ConversationEndEntity["Customer"] = "Customer";
  ConversationEndEntity["Agent"] = "Agent";
  ConversationEndEntity["Bot"] = "Bot";
  ConversationEndEntity["NotSet"] = "NotSet";
})(ConversationEndEntity || (exports.ConversationEndEntity = ConversationEndEntity = {}));
let ConfirmationState;
exports.ConfirmationState = ConfirmationState;
(function (ConfirmationState) {
  ConfirmationState["Ok"] = "Ok";
  ConfirmationState["Cancel"] = "Cancel";
  ConfirmationState["NotSet"] = "NotSet";
})(ConfirmationState || (exports.ConfirmationState = ConfirmationState = {}));
class TranscriptConstants {}
exports.TranscriptConstants = TranscriptConstants;
_defineProperty(TranscriptConstants, "ChatTranscriptsBodyColor", "#F5F5F5");
_defineProperty(TranscriptConstants, "TranscriptMessageEmojiMessageType", "http://schema.skype.com/emoji");
_defineProperty(TranscriptConstants, "ChatTranscriptDownloadFile", "ChatTranscripts.html");
_defineProperty(TranscriptConstants, "DefaultFileAttachmentName", "Untitled.txt");
_defineProperty(TranscriptConstants, "CustomerDialogColor", "#E8E8E8");
_defineProperty(TranscriptConstants, "CustomerFontColor", "black");
_defineProperty(TranscriptConstants, "AdaptiveCardType", "adaptivecard");
_defineProperty(TranscriptConstants, "InternalMode", "internal");
_defineProperty(TranscriptConstants, "AgentDialogColor", "#2266E3");
_defineProperty(TranscriptConstants, "AgentFontColor", "white");
class AriaTelemetryConstants {}
exports.AriaTelemetryConstants = AriaTelemetryConstants;
// Aria Endpoint for different environment types.
_defineProperty(AriaTelemetryConstants, "GERMANY_ENDPOINT", "https://de.pipe.aria.microsoft.com/Collector/3.0/");
_defineProperty(AriaTelemetryConstants, "GCCH_ENDPOINT", "https://tb.pipe.aria.microsoft.com/Collector/3.0/");
_defineProperty(AriaTelemetryConstants, "DOD_ENDPOINT", "https://pf.pipe.aria.microsoft.com/Collector/3.0");
_defineProperty(AriaTelemetryConstants, "EUROPE_ENDPOINT", "https://eu-mobile.events.data.microsoft.com/Collector/3.0/");
// EUDB Collector URL
_defineProperty(AriaTelemetryConstants, "MOONCAKE_ENDPOINT", "");
// Add MoonCake ARIA Endpoint whenever available
// Environment types
_defineProperty(AriaTelemetryConstants, "Public", "Public");
_defineProperty(AriaTelemetryConstants, "EU", "Europe");
// EUR: crm4; FRA: crm12; GER: crm16; CHE: crm17; NOR: crm19
_defineProperty(AriaTelemetryConstants, "lcwEUDomainNames", ["crm4.omnichannelengagementhub.com", "crm12.omnichannelengagementhub.com", "crm16.omnichannelengagementhub.com", "crm17.omnichannelengagementhub.com", "crm19.omnichannelengagementhub.com"]);