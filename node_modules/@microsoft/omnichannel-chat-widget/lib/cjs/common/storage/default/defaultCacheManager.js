"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerBroadcastServiceForStorage = exports.defaultCacheManager = void 0;
var _omnichannelChatComponents = require("@microsoft/omnichannel-chat-components");
var _defaultClientDataStoreProvider = require("./defaultClientDataStoreProvider");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class defaultCacheManager {}

// eslint-disable-next-line @typescript-eslint/no-explicit-any
exports.defaultCacheManager = defaultCacheManager;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
_defineProperty(defaultCacheManager, "InternalCache", {});
const registerBroadcastServiceForStorage = (widgetCacheId, ttlInMins, storageType) => {
  _omnichannelChatComponents.BroadcastService.getMessageByEventName(widgetCacheId).subscribe(msg => {
    try {
      (0, _defaultClientDataStoreProvider.defaultClientDataStoreProvider)(ttlInMins, storageType).setData(widgetCacheId, JSON.stringify(msg.payload));
    } catch (error) {
      console.error("Error in setting data to localstorage", error);
    }
  });
};
exports.registerBroadcastServiceForStorage = registerBroadcastServiceForStorage;