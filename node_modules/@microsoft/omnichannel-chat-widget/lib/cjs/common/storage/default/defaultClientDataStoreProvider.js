"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isCookieAllowed = exports.defaultClientDataStoreProvider = void 0;
var _TelemetryConstants = require("../../telemetry/TelemetryConstants");
var _Constants = require("../../Constants");
var _TelemetryHelper = require("../../telemetry/TelemetryHelper");
var _defaultInMemoryDataStore = require("./defaultInMemoryDataStore");
/* eslint-disable @typescript-eslint/no-explicit-any */

const isCookieAllowed = () => {
  try {
    localStorage;
    sessionStorage;
    return true;
  } catch (error) {
    if (!window.TPCWarningLogged) {
      console.warn("Third party cookies blocked.");
      _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.WARN, {
        Event: _TelemetryConstants.TelemetryEvent.ThirdPartyCookiesBlocked,
        Description: "Third party cookies are blocked. Cannot access local storage or session storage."
      });
      window.TPCWarningLogged = true;
    }
    return false;
  }
};
exports.isCookieAllowed = isCookieAllowed;
const defaultClientDataStoreProvider = function () {
  let cacheTtlinMins = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  let storageType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Constants.StorageType.localStorage;
  let ttlInMs = 0;
  if (ttlInMs == 0) {
    ttlInMs = cacheTtlinMins * 60 * 1000;
  }
  const dataStoreProvider = {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    setData: (key, data) => {
      if (isCookieAllowed()) {
        try {
          if (key) {
            const now = new Date();
            const item = {
              data: data,
              expiry: now.getTime() + ttlInMs
            };
            const strItem = JSON.stringify(item);
            if (storageType === _Constants.StorageType.localStorage) {
              localStorage.setItem(key, strItem);
            } else {
              sessionStorage.setItem(key, strItem);
            }
          }
        } catch (error) {
          _TelemetryHelper.TelemetryHelper.logConfigDataEvent(_TelemetryConstants.LogLevel.ERROR, {
            Event: _TelemetryConstants.TelemetryEvent.ClientDataStoreProviderFailed,
            ExceptionDetails: error,
            Description: "Unable to store data in localStorage."
          });
        }
      } else {
        const dataToCache = {
          key: key,
          data: data,
          type: storageType == _Constants.StorageType.localStorage ? "localStorage" : "sessionStorage"
        };
        parent.postMessage(dataToCache, "*");
      }
    },
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getData: key => {
      if (isCookieAllowed()) {
        let item;
        if (storageType === _Constants.StorageType.localStorage) {
          item = localStorage.getItem(key);
        } else {
          item = sessionStorage.getItem(key);
        }
        //Return item if not expired
        let itemInJson = undefined;
        if (item !== null) {
          itemInJson = JSON.parse(item);
          const now = new Date();
          // compare the expiry time of the item with the current time
          if (now.getTime() > itemInJson.expiry) {
            // If the item is expired, delete the item from storage
            // and return null
            localStorage.removeItem(key);
            return null;
          }
          return itemInJson.data;
        }
      } else {
        // get data from in memory db when cookie is disabled
        return (0, _defaultInMemoryDataStore.inMemoryDataStore)().getData(key);
      }
    },
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    removeData: key => {
      if (isCookieAllowed()) {
        if (key) {
          if (storageType === _Constants.StorageType.localStorage) {
            return localStorage.removeItem(key);
          } else {
            return sessionStorage.removeItem(key);
          }
        }
      } else {
        // get data from in memory db when cookie is disabled
        return (0, _defaultInMemoryDataStore.inMemoryDataStore)().removeData(key);
      }
    }
  };
  return dataStoreProvider;
};
exports.defaultClientDataStoreProvider = defaultClientDataStoreProvider;