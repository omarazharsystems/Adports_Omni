"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.disposeLoggers = exports.TelemetryTimers = exports.TelemetryManager = exports.RegisterLoggers = void 0;
var _TelemetryConstants = require("./TelemetryConstants");
var _omnichannelChatComponents = require("@microsoft/omnichannel-chat-components");
var _ariaTelemetryLogger = require("./loggers/ariaTelemetryLogger");
var _consoleLogger = require("./loggers/consoleLogger");
var _defaultAriaConfig = require("./defaultConfigs/defaultAriaConfig");
var _TelemetryHelper = require("./TelemetryHelper");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class TelemetryTimers {}
exports.TelemetryTimers = TelemetryTimers;
_defineProperty(TelemetryTimers, "LcwLoadToChatButtonTimer", void 0);
_defineProperty(TelemetryTimers, "ProactiveChatScreenTimer", void 0);
_defineProperty(TelemetryTimers, "WidgetLoadTimer", void 0);
class TelemetryManager {}
exports.TelemetryManager = TelemetryManager;
_defineProperty(TelemetryManager, "InternalTelemetryData", void 0);
const loggers = [];
const disposeLoggers = () => {
  loggers.map(logger => {
    logger.dispose();
  });
};
exports.disposeLoggers = disposeLoggers;
const RegisterLoggers = () => {
  const registerLoggers = () => {
    var _TelemetryManager$Int, _TelemetryManager$Int2, _TelemetryManager$Int3, _TelemetryManager$Int4, _TelemetryManager$Int5, _TelemetryManager$Int6, _TelemetryManager$Int7, _TelemetryManager$Int8;
    if (((_TelemetryManager$Int = TelemetryManager.InternalTelemetryData) === null || _TelemetryManager$Int === void 0 ? void 0 : (_TelemetryManager$Int2 = _TelemetryManager$Int.telemetryConfig) === null || _TelemetryManager$Int2 === void 0 ? void 0 : _TelemetryManager$Int2.disableConsoleLog) === false || ((_TelemetryManager$Int3 = TelemetryManager.InternalTelemetryData) === null || _TelemetryManager$Int3 === void 0 ? void 0 : (_TelemetryManager$Int4 = _TelemetryManager$Int3.telemetryConfig) === null || _TelemetryManager$Int4 === void 0 ? void 0 : _TelemetryManager$Int4.telemetryDisabled) === false) {
      _omnichannelChatComponents.BroadcastService.getAnyMessage().subscribe(event => {
        if (event.payload && event.eventName in _TelemetryConstants.TelemetryEvent) {
          logTelemetry(event);
        }
      });
    }
    if (((_TelemetryManager$Int5 = TelemetryManager.InternalTelemetryData) === null || _TelemetryManager$Int5 === void 0 ? void 0 : (_TelemetryManager$Int6 = _TelemetryManager$Int5.telemetryConfig) === null || _TelemetryManager$Int6 === void 0 ? void 0 : _TelemetryManager$Int6.disableConsoleLog) === false) {
      loggers.push((0, _consoleLogger.consoleLogger)());
    }
    if (((_TelemetryManager$Int7 = TelemetryManager.InternalTelemetryData) === null || _TelemetryManager$Int7 === void 0 ? void 0 : (_TelemetryManager$Int8 = _TelemetryManager$Int7.telemetryConfig) === null || _TelemetryManager$Int8 === void 0 ? void 0 : _TelemetryManager$Int8.telemetryDisabled) === false) {
      var _TelemetryManager$Int9, _TelemetryManager$Int18, _TelemetryManager$Int19;
      if ((_TelemetryManager$Int9 = TelemetryManager.InternalTelemetryData) !== null && _TelemetryManager$Int9 !== void 0 && _TelemetryManager$Int9.ariaConfig) {
        var _TelemetryManager$Int10, _TelemetryManager$Int11, _TelemetryManager$Int12, _TelemetryManager$Int13, _TelemetryManager$Int14, _TelemetryManager$Int15, _TelemetryManager$Int16, _TelemetryManager$Int17;
        loggers.push((0, _ariaTelemetryLogger.ariaTelemetryLogger)(((_TelemetryManager$Int10 = TelemetryManager.InternalTelemetryData) === null || _TelemetryManager$Int10 === void 0 ? void 0 : (_TelemetryManager$Int11 = _TelemetryManager$Int10.ariaConfig) === null || _TelemetryManager$Int11 === void 0 ? void 0 : _TelemetryManager$Int11.ariaTelemetryKey) ?? _defaultAriaConfig.defaultAriaConfig.ariaTelemetryKey, ((_TelemetryManager$Int12 = TelemetryManager.InternalTelemetryData) === null || _TelemetryManager$Int12 === void 0 ? void 0 : (_TelemetryManager$Int13 = _TelemetryManager$Int12.ariaConfig) === null || _TelemetryManager$Int13 === void 0 ? void 0 : _TelemetryManager$Int13.disableCookieUsage) ?? _defaultAriaConfig.defaultAriaConfig.disableCookieUsage, ((_TelemetryManager$Int14 = TelemetryManager.InternalTelemetryData) === null || _TelemetryManager$Int14 === void 0 ? void 0 : (_TelemetryManager$Int15 = _TelemetryManager$Int14.ariaConfig) === null || _TelemetryManager$Int15 === void 0 ? void 0 : _TelemetryManager$Int15.collectorUriForTelemetry) ?? _defaultAriaConfig.defaultAriaConfig.collectorUriForTelemetry, ((_TelemetryManager$Int16 = TelemetryManager.InternalTelemetryData) === null || _TelemetryManager$Int16 === void 0 ? void 0 : (_TelemetryManager$Int17 = _TelemetryManager$Int16.ariaConfig) === null || _TelemetryManager$Int17 === void 0 ? void 0 : _TelemetryManager$Int17.ariaTelemetryApplicationName) ?? _defaultAriaConfig.defaultAriaConfig.ariaTelemetryApplicationName));
      }
      const customLoggers = (_TelemetryManager$Int18 = TelemetryManager.InternalTelemetryData) === null || _TelemetryManager$Int18 === void 0 ? void 0 : (_TelemetryManager$Int19 = _TelemetryManager$Int18.telemetryConfig) === null || _TelemetryManager$Int19 === void 0 ? void 0 : _TelemetryManager$Int19.telemetryLoggers;
      if (customLoggers) {
        customLoggers.map(logger => {
          loggers.push(logger);
        });
      }
    }
  };
  const parseInput = function (payload) {
    let scenarioType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _TelemetryConstants.ScenarioType.UNDEFINED;
    return {
      scenarioType: scenarioType == _TelemetryConstants.ScenarioType.UNDEFINED ? _TelemetryConstants.TelemetryConstants.mapEventToScenario(payload.Event) : scenarioType,
      payload: payload
    };
  };
  const logTelemetry = telemetryEvent => {
    loggers.map(logger => {
      var _payload, _telemetryInput$paylo;
      const logLevel = telemetryEvent.logLevel ?? _TelemetryConstants.LogLevel.INFO;
      const scenarioType = ((_payload = telemetryEvent.payload) === null || _payload === void 0 ? void 0 : _payload.scenarioType) ?? _TelemetryConstants.ScenarioType.UNDEFINED;
      const telemetryInput = parseInput(telemetryEvent === null || telemetryEvent === void 0 ? void 0 : telemetryEvent.payload, scenarioType);
      telemetryInput.telemetryInfo = {
        telemetryInfo: _TelemetryHelper.TelemetryHelper.buildTelemetryEvent(logLevel, telemetryInput)
      };
      //Do not log events without an Event Name
      if (telemetryInput !== null && telemetryInput !== void 0 && (_telemetryInput$paylo = telemetryInput.payload) !== null && _telemetryInput$paylo !== void 0 && _telemetryInput$paylo.Event) {
        logger.log(logLevel, telemetryInput);
      }
    });
  };
  return registerLoggers();
};
exports.RegisterLoggers = RegisterLoggers;