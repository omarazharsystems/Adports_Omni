"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ariaTelemetryLogger = void 0;
var _utils = require("../../utils");
var _AriaSDK = require("@microsoft/omnichannel-chat-sdk/lib/external/aria/webjs/AriaSDK");
var _Enums = require("@microsoft/omnichannel-chat-sdk/lib/external/aria/common/Enums");
var _Constants = require("../../Constants");
var _TelemetryManager = require("../TelemetryManager");
const AWTDefaultConfiguration = {
  collectorUri: "https://browser.pipe.aria.microsoft.com/Collector/3.0/",
  cacheMemorySizeLimitInNumberOfEvents: 10000,
  disableCookiesUsage: false,
  canSendStatEvent: eventName => {
    return true;
  },
  // eslint-disable-line @typescript-eslint/no-unused-vars
  clockSkewRefreshDurationInMins: 0
};
const ariaTelemetryLogger = (ariaTelemetryKey, disabledCookieUsage, collectiorUriForTelemetry, ariaTelemetryApplicationName) => {
  let _logger;

  // AWTLogManager is a global variable. Reset after a logEvent() is required to prevent collisions with other components using AWTLogManager.
  const resetAriaLogger = function () {
    let configuration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : AWTDefaultConfiguration;
    _AriaSDK.AWTLogManager.flushAndTeardown();
    _AriaSDK.AWTLogManager._isInitialized = false; // eslint-disable-line @typescript-eslint/no-explicit-any
    _AriaSDK.AWTLogManager._isDestroyed = false; // eslint-disable-line @typescript-eslint/no-explicit-any
    _logger = _AriaSDK.AWTLogManager.initialize(ariaTelemetryKey, configuration);
  };
  const logger = () => {
    if (!(0, _utils.isNullOrEmptyString)(ariaTelemetryKey)) {
      const configuration = {
        disableCookiesUsage: disabledCookieUsage
      };
      if (!(0, _utils.isNullOrEmptyString)(collectiorUriForTelemetry)) {
        configuration.collectorUri = collectiorUriForTelemetry;
      } else {
        if (_TelemetryManager.TelemetryManager.InternalTelemetryData.environmentVersion == _Constants.EnvironmentVersion.prod) {
          var _TelemetryManager$Int;
          const orgUrl = (_TelemetryManager$Int = _TelemetryManager.TelemetryManager.InternalTelemetryData) === null || _TelemetryManager$Int === void 0 ? void 0 : _TelemetryManager$Int.orgUrl;
          if (!(0, _utils.isNullOrUndefined)(orgUrl)) {
            // If the given org is a Production EU org, modify the Aria collector uri
            const region = (0, _utils.getDomain)(orgUrl);
            if (region === _Constants.AriaTelemetryConstants.EU) {
              configuration.collectorUri = _Constants.AriaTelemetryConstants.EUROPE_ENDPOINT;
            }
          }
        }
      }
      try {
        resetAriaLogger(configuration);
        if (_logger === undefined) {
          _logger = _AriaSDK.AWTLogManager.getLogger(ariaTelemetryKey);
        }
      } catch (error) {
        console.log(error);
      }
    }
    return _logger;
  };
  const ariaLogger = {
    log: (logLevel, telemetryInput) => {
      try {
        var _telemetryInput$telem;
        const telemetryInfo = telemetryInput === null || telemetryInput === void 0 ? void 0 : (_telemetryInput$telem = telemetryInput.telemetryInfo) === null || _telemetryInput$telem === void 0 ? void 0 : _telemetryInput$telem.telemetryInfo;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const eventProperties = {
          name: telemetryInput.scenarioType,
          properties: {}
        };
        if (telemetryInfo) {
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          Object.keys(telemetryInfo).forEach((key, index) => {
            if (!(0, _utils.isNullOrUndefined)(telemetryInfo[key]) && !(0, _utils.isNullOrEmptyString)(telemetryInfo[key])) {
              const property = {
                value: typeof telemetryInfo[key] === "object" ? JSON.stringify(telemetryInfo[key]) : telemetryInfo[key],
                type: typeof telemetryInfo[key] === "number" ? _Enums.AWTPropertyType.Double : _Enums.AWTPropertyType.String,
                pii: _Enums.AWTPiiKind.NotSet,
                cc: _Enums.AWTCustomerContentKind.NotSet
              };
              eventProperties.properties[key] = property;
            }
          });
          const nameProperty = {
            value: _Constants.Constants.LiveChatWidget,
            type: _Enums.AWTPropertyType.String,
            pii: _Enums.AWTPiiKind.GenericData,
            cc: _Enums.AWTCustomerContentKind.NotSet
          };
          eventProperties.properties[ariaTelemetryApplicationName] = nameProperty;
        }
        logger() ? logger().logEvent(eventProperties) : console.log("Unable to initialize aria logger");
        resetAriaLogger();
      } catch (error) {
        console.error("Error in logging telemetry to Aria logger:" + error);
      }
    },
    dispose: () => {
      _AriaSDK.AWTLogManager.flush(function () {
        console.log("Aria logger disposed");
      });
    }
  };
  return ariaLogger;
};
exports.ariaTelemetryLogger = ariaTelemetryLogger;