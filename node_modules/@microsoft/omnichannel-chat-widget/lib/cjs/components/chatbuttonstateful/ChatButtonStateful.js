"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ChatButtonStateful = void 0;
var _TelemetryConstants = require("../../common/telemetry/TelemetryConstants");
var _react = _interopRequireWildcard(require("react"));
var _omnichannelChatComponents = require("@microsoft/omnichannel-chat-components");
var _Constants = require("../../common/Constants");
var _ConversationState = require("../../contexts/common/ConversationState");
var _LiveChatWidgetActionType = require("../../contexts/common/LiveChatWidgetActionType");
var _TelemetryHelper = require("../../common/telemetry/TelemetryHelper");
var _TelemetryManager = require("../../common/telemetry/TelemetryManager");
var _defaultOutOfOfficeChatButtonStyleProps = require("./common/styleProps/defaultOutOfOfficeChatButtonStyleProps");
var _utils = require("../../common/utils");
var _useChatContextStore = _interopRequireDefault(require("../../hooks/useChatContextStore"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const ChatButtonStateful = props => {
  var _state$domainStates$l, _state$domainStates$l2, _buttonProps$controlP, _props$buttonProps, _props$buttonProps$co, _props$buttonProps2, _props$buttonProps2$c, _props$buttonProps3, _props$buttonProps3$c;
  const [state, dispatch] = (0, _useChatContextStore.default)();
  const {
    buttonProps,
    outOfOfficeButtonProps,
    startChat
  } = props;
  //Setting OutOfOperatingHours Flag
  const [outOfOperatingHours, setOutOfOperatingHours] = (0, _react.useState)(((_state$domainStates$l = state.domainStates.liveChatConfig) === null || _state$domainStates$l === void 0 ? void 0 : (_state$domainStates$l2 = _state$domainStates$l.LiveWSAndLiveChatEngJoin) === null || _state$domainStates$l2 === void 0 ? void 0 : _state$domainStates$l2.OutOfOperatingHours) === "True");
  const ref = (0, _react.useRef)(() => {
    return;
  });
  ref.current = async () => {
    _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.INFO, {
      Event: _TelemetryConstants.TelemetryEvent.LCWChatButtonClicked
    });
    if (state.appStates.isMinimized) {
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_MINIMIZED,
        payload: false
      });
    } else {
      await startChat();
    }
  };
  const outOfOfficeStyleProps = Object.assign({}, _defaultOutOfOfficeChatButtonStyleProps.defaultOutOfOfficeChatButtonStyleProps, outOfOfficeButtonProps === null || outOfOfficeButtonProps === void 0 ? void 0 : outOfOfficeButtonProps.styleProps);
  const controlProps = {
    id: "oc-lcw-chat-button",
    dir: state.domainStates.globalDir,
    titleText: "Let's Chat!",
    subtitleText: "We're online.",
    hideNotificationBubble: (buttonProps === null || buttonProps === void 0 ? void 0 : (_buttonProps$controlP = buttonProps.controlProps) === null || _buttonProps$controlP === void 0 ? void 0 : _buttonProps$controlP.hideNotificationBubble) === true || state.appStates.isMinimized === false,
    unreadMessageCount: state.appStates.unreadMessageCount ? state.appStates.unreadMessageCount > _Constants.Constants.maximumUnreadMessageCount ? (_props$buttonProps = props.buttonProps) === null || _props$buttonProps === void 0 ? void 0 : (_props$buttonProps$co = _props$buttonProps.controlProps) === null || _props$buttonProps$co === void 0 ? void 0 : _props$buttonProps$co.largeUnreadMessageString : state.appStates.unreadMessageCount.toString() : "0",
    onClick: () => ref.current(),
    unreadMessageString: (_props$buttonProps2 = props.buttonProps) === null || _props$buttonProps2 === void 0 ? void 0 : (_props$buttonProps2$c = _props$buttonProps2.controlProps) === null || _props$buttonProps2$c === void 0 ? void 0 : _props$buttonProps2$c.unreadMessageString,
    ...(buttonProps === null || buttonProps === void 0 ? void 0 : buttonProps.controlProps)
  };
  const outOfOfficeControlProps = {
    id: "oc-lcw-chat-button",
    dir: state.domainStates.globalDir,
    titleText: "We're Offline",
    subtitleText: "No agents available",
    onClick: async () => {
      _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.INFO, {
        Event: _TelemetryConstants.TelemetryEvent.LCWChatButtonClicked
      });
      if (state.appStates.isMinimized) {
        dispatch({
          type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_MINIMIZED,
          payload: false
        });
      } else {
        dispatch({
          type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_CONVERSATION_STATE,
          payload: _ConversationState.ConversationState.OutOfOffice
        });
      }
    },
    unreadMessageString: (_props$buttonProps3 = props.buttonProps) === null || _props$buttonProps3 === void 0 ? void 0 : (_props$buttonProps3$c = _props$buttonProps3.controlProps) === null || _props$buttonProps3$c === void 0 ? void 0 : _props$buttonProps3$c.unreadMessageString,
    ...(outOfOfficeButtonProps === null || outOfOfficeButtonProps === void 0 ? void 0 : outOfOfficeButtonProps.controlProps)
  };
  (0, _react.useEffect)(() => {
    if (state.appStates.outsideOperatingHours) {
      setOutOfOperatingHours(true);
    }
    _TelemetryHelper.TelemetryHelper.logLoadingEvent(_TelemetryConstants.LogLevel.INFO, {
      Event: _TelemetryConstants.TelemetryEvent.LCWChatButtonShow,
      ElapsedTimeInMilliseconds: _TelemetryManager.TelemetryTimers.LcwLoadToChatButtonTimer.milliSecondsElapsed
    });
    if (state.uiStates.focusChatButton) {
      (0, _utils.setFocusOnElement)(document.getElementById((controlProps === null || controlProps === void 0 ? void 0 : controlProps.id) ?? "oc-lcw-chat-button"));
    } else {
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_FOCUS_CHAT_BUTTON,
        payload: true
      });
    }
  }, []);
  return /*#__PURE__*/_react.default.createElement(_omnichannelChatComponents.ChatButton, {
    componentOverrides: buttonProps === null || buttonProps === void 0 ? void 0 : buttonProps.componentOverrides,
    controlProps: outOfOperatingHours ? outOfOfficeControlProps : controlProps,
    styleProps: outOfOperatingHours ? outOfOfficeStyleProps : buttonProps === null || buttonProps === void 0 ? void 0 : buttonProps.styleProps
  });
};
exports.ChatButtonStateful = ChatButtonStateful;
var _default = ChatButtonStateful;
exports.default = _default;