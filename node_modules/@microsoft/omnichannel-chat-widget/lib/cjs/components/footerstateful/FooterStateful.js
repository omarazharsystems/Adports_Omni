"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FooterStateful = void 0;
var _TelemetryConstants = require("../../common/telemetry/TelemetryConstants");
var _react = _interopRequireDefault(require("react"));
var _AudioNotificationStateful = _interopRequireDefault(require("./audionotificationstateful/AudioNotificationStateful"));
var _Constants = require("../../common/Constants");
var _omnichannelChatComponents = require("@microsoft/omnichannel-chat-components");
var _LiveChatWidgetActionType = require("../../contexts/common/LiveChatWidgetActionType");
var _Audios = require("../../assets/Audios");
var _NotificationHandler = require("../webchatcontainerstateful/webchatcontroller/notification/NotificationHandler");
var _NotificationScenarios = require("../webchatcontainerstateful/webchatcontroller/enums/NotificationScenarios");
var _TelemetryHelper = require("../../common/telemetry/TelemetryHelper");
var _DownloadTranscriptStateful = require("./downloadtranscriptstateful/DownloadTranscriptStateful");
var _useChatContextStore = _interopRequireDefault(require("../../hooks/useChatContextStore"));
var _useChatSDKStore = _interopRequireDefault(require("../../hooks/useChatSDKStore"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const FooterStateful = props => {
  var _footerProps$controlP3, _footerProps$controlP4;
  const [state, dispatch] = (0, _useChatContextStore.default)();
  // hideFooterDisplay - the purpose of this is to keep the footer always "active",
  // but hide it visually in certain states (e.g., loading state) and show in some other states (e.g. active state).
  // The reason for this approach is to make sure that state variables for audio notification work correctly after minimizing
  const {
    footerProps,
    downloadTranscriptProps,
    audioNotificationProps,
    hideFooterDisplay
  } = props;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const chatSDK = (0, _useChatSDKStore.default)();
  const controlProps = {
    id: "oc-lcw-footer",
    dir: state.domainStates.globalDir,
    onDownloadTranscriptClick: async () => {
      try {
        _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.INFO, {
          Event: _TelemetryConstants.TelemetryEvent.DownloadTranscriptButtonClicked,
          Description: "Download Transcript button clicked."
        });
        await (0, _DownloadTranscriptStateful.downloadTranscript)(chatSDK, downloadTranscriptProps, state);
      } catch (ex) {
        _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.ERROR, {
          Event: _TelemetryConstants.TelemetryEvent.DownloadTranscriptFailed,
          ExceptionDetails: {
            exception: ex
          }
        });
        _NotificationHandler.NotificationHandler.notifyError(_NotificationScenarios.NotificationScenarios.DownloadTranscriptError, (downloadTranscriptProps === null || downloadTranscriptProps === void 0 ? void 0 : downloadTranscriptProps.bannerMessageOnError) ?? _Constants.Constants.defaultDownloadTranscriptError);
      }
    },
    onEmailTranscriptClick: () => {
      var _footerProps$controlP, _footerProps$controlP2;
      _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.INFO, {
        Event: _TelemetryConstants.TelemetryEvent.EmailTranscriptButtonClicked,
        Description: "Email Transcript button clicked."
      });
      const emailTranscriptButtonId = (footerProps === null || footerProps === void 0 ? void 0 : (_footerProps$controlP = footerProps.controlProps) === null || _footerProps$controlP === void 0 ? void 0 : (_footerProps$controlP2 = _footerProps$controlP.emailTranscriptButtonProps) === null || _footerProps$controlP2 === void 0 ? void 0 : _footerProps$controlP2.id) ?? `${controlProps.id}-emailtranscript-button`;
      if (emailTranscriptButtonId) {
        dispatch({
          type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_PREVIOUS_FOCUSED_ELEMENT_ID,
          payload: emailTranscriptButtonId
        });
      }
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_SHOW_EMAIL_TRANSCRIPT_PANE,
        payload: true
      });
    },
    onAudioNotificationClick: () => {
      _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.INFO, {
        Event: _TelemetryConstants.TelemetryEvent.AudioToggleButtonClicked,
        Description: "Audio button clicked."
      });
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_AUDIO_NOTIFICATION,
        payload: !state.appStates.isAudioMuted
      });
    },
    ...(footerProps === null || footerProps === void 0 ? void 0 : footerProps.controlProps),
    audioNotificationButtonProps: {
      ...(footerProps === null || footerProps === void 0 ? void 0 : (_footerProps$controlP3 = footerProps.controlProps) === null || _footerProps$controlP3 === void 0 ? void 0 : _footerProps$controlP3.audioNotificationButtonProps),
      isAudioMuted: state.appStates.isAudioMuted
    }
  };
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, !hideFooterDisplay && /*#__PURE__*/_react.default.createElement(_omnichannelChatComponents.Footer, {
    componentOverrides: footerProps === null || footerProps === void 0 ? void 0 : footerProps.componentOverrides,
    controlProps: controlProps,
    styleProps: footerProps === null || footerProps === void 0 ? void 0 : footerProps.styleProps
  }), /*#__PURE__*/_react.default.createElement(_AudioNotificationStateful.default, {
    audioSrc: (audioNotificationProps === null || audioNotificationProps === void 0 ? void 0 : audioNotificationProps.audioSrc) ?? _Audios.NewMessageNotificationSoundBase64,
    isAudioMuted: state.appStates.isAudioMuted === null ? (footerProps === null || footerProps === void 0 ? void 0 : (_footerProps$controlP4 = footerProps.controlProps) === null || _footerProps$controlP4 === void 0 ? void 0 : _footerProps$controlP4.hideAudioNotificationButton) ?? false : state.appStates.isAudioMuted ?? false
  }));
};
exports.FooterStateful = FooterStateful;
var _default = FooterStateful;
exports.default = _default;