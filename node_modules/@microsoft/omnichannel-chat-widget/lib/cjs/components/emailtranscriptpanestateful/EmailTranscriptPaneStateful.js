"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.EmailTranscriptPaneStateful = void 0;
var _TelemetryConstants = require("../../common/telemetry/TelemetryConstants");
var _react = _interopRequireWildcard(require("react"));
var _utils = require("../../common/utils");
var _DimLayer = require("../dimlayer/DimLayer");
var _omnichannelChatComponents = require("@microsoft/omnichannel-chat-components");
var _LiveChatWidgetActionType = require("../../contexts/common/LiveChatWidgetActionType");
var _NotificationHandler = require("../webchatcontainerstateful/webchatcontroller/notification/NotificationHandler");
var _NotificationScenarios = require("../webchatcontainerstateful/webchatcontroller/enums/NotificationScenarios");
var _Constants = require("../../common/Constants");
var _TelemetryHelper = require("../../common/telemetry/TelemetryHelper");
var _useChatContextStore = _interopRequireDefault(require("../../hooks/useChatContextStore"));
var _useChatSDKStore = _interopRequireDefault(require("../../hooks/useChatSDKStore"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const EmailTranscriptPaneStateful = props => {
  var _props$controlProps;
  const initialTabIndexMap = new Map();
  let elements = [];
  const [state, dispatch] = (0, _useChatContextStore.default)();
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const chatSDK = (0, _useChatSDKStore.default)();
  const [initialEmail, setInitialEmail] = (0, _react.useState)("");
  const closeEmailTranscriptPane = () => {
    dispatch({
      type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_SHOW_EMAIL_TRANSCRIPT_PANE,
      payload: false
    });
    const previousFocusedElementId = state.appStates.previousElementIdOnFocusBeforeModalOpen;
    if (previousFocusedElementId) {
      (0, _utils.setFocusOnElement)("#" + previousFocusedElementId);
    } else {
      (0, _utils.setFocusOnSendBox)();
    }
    dispatch({
      type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_PREVIOUS_FOCUSED_ELEMENT_ID,
      payload: null
    });
    (0, _utils.setTabIndices)(elements, initialTabIndexMap, true);
  };
  const controlProps = {
    id: "oclcw-emailTranscriptDialogContainer",
    dir: state.domainStates.globalDir,
    onSend: async email => {
      closeEmailTranscriptPane();
      const chatTranscriptBody = {
        emailAddress: email,
        attachmentMessage: (props === null || props === void 0 ? void 0 : props.attachmentMessage) ?? "The following attachment was uploaded during the conversation:"
      };
      try {
        await (chatSDK === null || chatSDK === void 0 ? void 0 : chatSDK.emailLiveChatTranscript(chatTranscriptBody));
        _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.INFO, {
          Event: _TelemetryConstants.TelemetryEvent.EmailTranscriptSent,
          Description: "Transcript sent to email successfully."
        });
      } catch (ex) {
        _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.ERROR, {
          Event: _TelemetryConstants.TelemetryEvent.EmailTranscriptFailed,
          ExceptionDetails: {
            exception: ex
          }
        });
        _NotificationHandler.NotificationHandler.notifyError(_NotificationScenarios.NotificationScenarios.EmailTranscriptError, (props === null || props === void 0 ? void 0 : props.bannerMessageOnError) ?? "Email transcript to " + email + " failed.");
      }
    },
    onCancel: () => {
      _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.INFO, {
        Event: _TelemetryConstants.TelemetryEvent.EmailTranscriptCancelButtonClicked,
        Description: "Email Transcript cancel button clicked."
      });
      closeEmailTranscriptPane();
    },
    checkInput: function (input) {
      return new RegExp(_Constants.Regex.EmailRegex).test(input);
    },
    ...props.controlProps,
    inputInitialText: ((_props$controlProps = props.controlProps) === null || _props$controlProps === void 0 ? void 0 : _props$controlProps.inputInitialText) ?? initialEmail
  };

  // Move focus to the first button
  (0, _react.useEffect)(() => {
    (0, _utils.preventFocusToMoveOutOfElement)(controlProps.id);
    const focusableElements = (0, _utils.findAllFocusableElement)(`#${controlProps.id}`);
    if (focusableElements) {
      focusableElements[0].focus();
    }
    elements = (0, _utils.findParentFocusableElementsWithoutChildContainer)(controlProps.id);
    (0, _utils.setTabIndices)(elements, initialTabIndexMap, false);
    setInitialEmail(state.appStates.preChatResponseEmail);
    _TelemetryHelper.TelemetryHelper.logLoadingEvent(_TelemetryConstants.LogLevel.INFO, {
      Event: _TelemetryConstants.TelemetryEvent.EmailTranscriptLoaded
    });
  }, [initialEmail]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_DimLayer.DimLayer, {
    brightness: (controlProps === null || controlProps === void 0 ? void 0 : controlProps.brightnessValueOnDim) ?? "0.2"
  }), /*#__PURE__*/_react.default.createElement(_omnichannelChatComponents.InputValidationPane, {
    componentOverrides: props.componentOverrides,
    controlProps: controlProps,
    styleProps: props.styleProps
  }));
};
exports.EmailTranscriptPaneStateful = EmailTranscriptPaneStateful;
var _default = EmailTranscriptPaneStateful;
exports.default = _default;