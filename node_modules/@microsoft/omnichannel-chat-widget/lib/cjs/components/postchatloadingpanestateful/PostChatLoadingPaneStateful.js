"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PostChatLoadingPaneStateful = void 0;
var _react = _interopRequireWildcard(require("react"));
var _omnichannelChatComponents = require("@microsoft/omnichannel-chat-components");
var _defaultgeneralPostChatLoadingPaneStyleProps = require("./common/defaultgeneralPostChatLoadingPaneStyleProps");
var _utils = require("../../common/utils");
var _useChatContextStore = _interopRequireDefault(require("../../hooks/useChatContextStore"));
var _TelemetryHelper = require("../../common/telemetry/TelemetryHelper");
var _TelemetryConstants = require("../../common/telemetry/TelemetryConstants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const PostChatLoadingPaneStateful = props => {
  var _props$styleProps;
  const [state] = (0, _useChatContextStore.default)();
  const generalStyleProps = Object.assign({}, _defaultgeneralPostChatLoadingPaneStyleProps.defaultGeneralPostChatLoadingPaneStyleProps, (_props$styleProps = props.styleProps) === null || _props$styleProps === void 0 ? void 0 : _props$styleProps.generalStyleProps);
  const styleProps = {
    ...props.styleProps,
    generalStyleProps: generalStyleProps
  };
  const controlProps = {
    id: "oc-lcw-postchatloading-pane",
    dir: state.domainStates.globalDir,
    hideIcon: true,
    hideTitle: true,
    hideSpinner: true,
    hideSpinnerText: true,
    subtitleText: "Please take a moment to give us feedback about your chat experience. We are loading the survey for you now.",
    ...props.controlProps
  };

  // Move focus to the first button
  (0, _react.useEffect)(() => {
    const firstElement = (0, _utils.findAllFocusableElement)(`#${state.domainStates.widgetElementId}`);
    if (firstElement && firstElement[0]) {
      firstElement[0].focus();
    }
    _TelemetryHelper.TelemetryHelper.logLoadingEvent(_TelemetryConstants.LogLevel.INFO, {
      Event: _TelemetryConstants.TelemetryEvent.PostChatSurveyLoadingPaneLoaded
    });
  }, []);
  return /*#__PURE__*/_react.default.createElement(_omnichannelChatComponents.LoadingPane, {
    componentOverrides: props.componentOverrides,
    controlProps: controlProps,
    styleProps: styleProps
  });
};
exports.PostChatLoadingPaneStateful = PostChatLoadingPaneStateful;
var _default = PostChatLoadingPaneStateful;
exports.default = _default;