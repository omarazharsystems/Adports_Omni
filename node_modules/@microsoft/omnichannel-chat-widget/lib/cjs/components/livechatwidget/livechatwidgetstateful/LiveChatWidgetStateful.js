"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.LiveChatWidgetStateful = void 0;
var _TelemetryConstants = require("../../../common/telemetry/TelemetryConstants");
var _omnichannelChatComponents = require("@microsoft/omnichannel-chat-components");
var _botframeworkWebchat = require("botframework-webchat");
var _Constants = require("../../../common/Constants");
var _react = require("@fluentui/react");
var _react2 = _interopRequireWildcard(require("react"));
var _startChat = require("../common/startChat");
var _utils = require("../../../common/utils");
var _defaultClientDataStoreProvider = require("../../../common/storage/default/defaultClientDataStoreProvider");
var _endChat = require("../common/endChat");
var _reconnectChatHelper = require("../common/reconnectChatHelper");
var _componentController = require("../../../controller/componentController");
var _ActivityStreamHandler = require("../common/ActivityStreamHandler");
var _CallingContainerStateful = _interopRequireDefault(require("../../callingcontainerstateful/CallingContainerStateful"));
var _ChatButtonStateful = _interopRequireDefault(require("../../chatbuttonstateful/ChatButtonStateful"));
var _ConfirmationPaneStateful = _interopRequireDefault(require("../../confirmationpanestateful/ConfirmationPaneStateful"));
var _ConversationState = require("../../../contexts/common/ConversationState");
var _DataStoreManager = require("../../../common/contextDataStore/DataStoreManager");
var _DraggableChatWidget = _interopRequireDefault(require("../../draggable/DraggableChatWidget"));
var _EmailTranscriptPaneStateful = _interopRequireDefault(require("../../emailtranscriptpanestateful/EmailTranscriptPaneStateful"));
var _HeaderStateful = _interopRequireDefault(require("../../headerstateful/HeaderStateful"));
var _LiveChatWidgetActionType = require("../../../contexts/common/LiveChatWidgetActionType");
var _LoadingPaneStateful = _interopRequireDefault(require("../../loadingpanestateful/LoadingPaneStateful"));
var _OOOHPaneStateful = _interopRequireDefault(require("../../ooohpanestateful/OOOHPaneStateful"));
var _PostChatLoadingPaneStateful = _interopRequireDefault(require("../../postchatloadingpanestateful/PostChatLoadingPaneStateful"));
var _PostChatSurveyPaneStateful = _interopRequireDefault(require("../../postchatsurveypanestateful/PostChatSurveyPaneStateful"));
var _PreChatSurveyPaneStateful = _interopRequireDefault(require("../../prechatsurveypanestateful/PreChatSurveyPaneStateful"));
var _ProactiveChatPaneStateful = _interopRequireDefault(require("../../proactivechatpanestateful/ProactiveChatPaneStateful"));
var _ReconnectChatPaneStateful = _interopRequireDefault(require("../../reconnectchatpanestateful/ReconnectChatPaneStateful"));
var _TelemetryHelper = require("../../../common/telemetry/TelemetryHelper");
var _TelemetryManager = require("../../../common/telemetry/TelemetryManager");
var _WebChatContainerStateful = _interopRequireDefault(require("../../webchatcontainerstateful/WebChatContainerStateful"));
var _createDownloadTranscriptProps = _interopRequireDefault(require("../common/createDownloadTranscriptProps"));
var _createFooter = require("../common/createFooter");
var _createInternetConnectionChangeHandler = require("../common/createInternetConnectionChangeHandler");
var _defaultScrollBarProps = require("../common/defaultProps/defaultScrollBarProps");
var _defaultWebChatContainerStatefulProps = require("../../webchatcontainerstateful/common/defaultProps/defaultWebChatContainerStatefulProps");
var _disposeTelemetryLoggers = require("../common/disposeTelemetryLoggers");
var _getGeneralStylesForButton = require("../common/getGeneralStylesForButton");
var _chatDisconnectHelper = require("../common/chatDisconnectHelper");
var _initCallingSdk = require("../common/initCallingSdk");
var _initConfirmationPropsComposer = require("../common/initConfirmationPropsComposer");
var _initWebChatComposer = require("../common/initWebChatComposer");
var _defaultCacheManager = require("../../../common/storage/default/defaultCacheManager");
var _registerTelemetryLoggers = require("../common/registerTelemetryLoggers");
var _setPostChatContextAndLoadSurvey = require("../common/setPostChatContextAndLoadSurvey");
var _startProactiveChat = require("../common/startProactiveChat");
var _useChatAdapterStore = _interopRequireDefault(require("../../../hooks/useChatAdapterStore"));
var _useChatContextStore = _interopRequireDefault(require("../../../hooks/useChatContextStore"));
var _useChatSDKStore = _interopRequireDefault(require("../../../hooks/useChatSDKStore"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const LiveChatWidgetStateful = props => {
  var _props$webChatContain, _props$styleProps, _chatSDK$omnichannelC, _props$controlProps, _props$controlProps2, _state$appStates7, _props$webChatContain5, _state$appStates14, _props$webChatContain6, _props$controlProps11, _props$draggableChatW, _props$draggableChatW2, _props$draggableChatW3, _props$draggableChatW4, _props$draggableChatW5, _livechatProps$webCha, _livechatProps$styleP, _livechatProps$contro, _livechatProps$contro2, _livechatProps$compon, _livechatProps$contro3, _livechatProps$compon2, _livechatProps$contro4, _livechatProps$compon3, _livechatProps$contro5, _livechatProps$compon4, _livechatProps$contro6, _livechatProps$compon5, _livechatProps$contro7, _livechatProps$compon6, _livechatProps$contro8, _livechatProps$compon7, _livechatProps$contro9, _livechatProps$contro10, _livechatProps$compon8, _livechatProps$contro11, _livechatProps$compon9, _livechatProps$contro12, _livechatProps$compon10, _livechatProps$compon11, _livechatProps$compon12;
  const [state, dispatch] = (0, _useChatContextStore.default)();
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const [adapter, setAdapter] = (0, _useChatAdapterStore.default)();
  const [webChatStyles, setWebChatStyles] = (0, _react2.useState)({
    ..._defaultWebChatContainerStatefulProps.defaultWebChatContainerStatefulProps.webChatStyles,
    ...((_props$webChatContain = props.webChatContainerProps) === null || _props$webChatContain === void 0 ? void 0 : _props$webChatContain.webChatStyles)
  });
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const chatSDK = (0, _useChatSDKStore.default)();
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const [voiceVideoCallingSDK, setVoiceVideoCallingSDK] = (0, _react2.useState)(undefined);
  const {
    Composer
  } = _botframeworkWebchat.Components;
  const canStartProactiveChat = (0, _react2.useRef)(true);

  // Process general styles
  const generalStyles = {
    root: Object.assign({}, (0, _getGeneralStylesForButton.getGeneralStylesForButton)(state), (_props$styleProps = props.styleProps) === null || _props$styleProps === void 0 ? void 0 : _props$styleProps.generalStyles)
  };

  //Scrollbar styles
  const scrollbarProps = Object.assign({}, _defaultScrollBarProps.defaultScrollBarProps, props === null || props === void 0 ? void 0 : props.scrollBarProps);
  const broadcastServiceChannelName = (0, _utils.getBroadcastChannelName)(chatSDK === null || chatSDK === void 0 ? void 0 : (_chatSDK$omnichannelC = chatSDK.omnichannelConfig) === null || _chatSDK$omnichannelC === void 0 ? void 0 : _chatSDK$omnichannelC.widgetId, ((_props$controlProps = props.controlProps) === null || _props$controlProps === void 0 ? void 0 : _props$controlProps.widgetInstanceId) ?? "");
  (0, _omnichannelChatComponents.BroadcastServiceInitialize)(broadcastServiceChannelName);
  _TelemetryManager.TelemetryTimers.LcwLoadToChatButtonTimer = (0, _utils.createTimer)();
  const widgetElementId = ((_props$controlProps2 = props.controlProps) === null || _props$controlProps2 === void 0 ? void 0 : _props$controlProps2.id) || "oc-lcw";
  const currentMessageCountRef = (0, _react2.useRef)(0);
  let widgetStateEventId = "";
  const lastLWICheckTimeRef = (0, _react2.useRef)(0);
  let optionalParams;
  let activeCachedChatExist = false;
  const uwid = (0, _react2.useRef)(""); // its an uniqueid per chatr instance

  const setOptionalParams = () => {
    var _state$appStates, _state$domainStates, _state$appStates3;
    if (!(0, _utils.isUndefinedOrEmpty)((_state$appStates = state.appStates) === null || _state$appStates === void 0 ? void 0 : _state$appStates.reconnectId)) {
      var _state$appStates2;
      activeCachedChatExist = true;
      optionalParams = {
        reconnectId: state === null || state === void 0 ? void 0 : (_state$appStates2 = state.appStates) === null || _state$appStates2 === void 0 ? void 0 : _state$appStates2.reconnectId
      };
    } else if (!(0, _utils.isUndefinedOrEmpty)(state === null || state === void 0 ? void 0 : (_state$domainStates = state.domainStates) === null || _state$domainStates === void 0 ? void 0 : _state$domainStates.liveChatContext) && (state === null || state === void 0 ? void 0 : (_state$appStates3 = state.appStates) === null || _state$appStates3 === void 0 ? void 0 : _state$appStates3.conversationState) === _ConversationState.ConversationState.Active) {
      var _state$domainStates2;
      activeCachedChatExist = true;
      optionalParams = {
        liveChatContext: state === null || state === void 0 ? void 0 : (_state$domainStates2 = state.domainStates) === null || _state$domainStates2 === void 0 ? void 0 : _state$domainStates2.liveChatContext
      };
    } else {
      activeCachedChatExist = false;
      optionalParams = {};
    }
  };

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const startChat = async (props, localState) => {
    const isReconnectTriggered = async () => {
      if ((0, _reconnectChatHelper.isReconnectEnabled)(props.chatConfig) === true && !(0, _reconnectChatHelper.isPersistentEnabled)(props.chatConfig)) {
        const noValidReconnectId = await (0, _reconnectChatHelper.handleChatReconnect)(chatSDK, props, dispatch, setAdapter, _startChat.initStartChat, state);
        // If chat reconnect has kicked in chat state will become Active or Reconnect. So just exit, else go next
        if (!noValidReconnectId && (state.appStates.conversationState === _ConversationState.ConversationState.Active || state.appStates.conversationState === _ConversationState.ConversationState.ReconnectChat)) {
          return true;
        }
      }
      return false;
    };
    let isChatValid = false;
    //Start a chat from cache/reconnectid
    if (activeCachedChatExist === true) {
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_CONVERSATION_STATE,
        payload: _ConversationState.ConversationState.Loading
      });
      if (localState) {
        localState.appStates.conversationState = _ConversationState.ConversationState.Loading;
      }

      //Check if conversation state is not in wrapup or closed state
      isChatValid = await (0, _startChat.checkIfConversationStillValid)(chatSDK, dispatch, state);
      if (isChatValid === true) {
        const reconnectTriggered = await isReconnectTriggered();
        if (!reconnectTriggered) {
          await (0, _startChat.initStartChat)(chatSDK, dispatch, setAdapter, state, props, optionalParams);
        }
        return;
      }
    }
    if (isChatValid === false) {
      if (localState) {
        // adding the reconnect logic for the case when customer tries to reconnect from a new browser or InPrivate browser
        const reconnectTriggered = await isReconnectTriggered();
        if (!reconnectTriggered) {
          await (0, _startChat.setPreChatAndInitiateChat)(chatSDK, dispatch, setAdapter, undefined, undefined, localState, props);
        }
        return;
      } else {
        var _state$appStates4;
        // To avoid showing blank screen in popout
        if ((state === null || state === void 0 ? void 0 : (_state$appStates4 = state.appStates) === null || _state$appStates4 === void 0 ? void 0 : _state$appStates4.hideStartChatButton) === false) {
          dispatch({
            type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_CONVERSATION_STATE,
            payload: _ConversationState.ConversationState.Closed
          });
          return;
        }
        dispatch({
          type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_CONVERSATION_STATE,
          payload: _ConversationState.ConversationState.Loading
        });
      }
    }
  };

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const setupClientDataStore = () => {
    // Add default localStorage support for widget
    const widgetCacheId = (0, _utils.getWidgetCacheIdfromProps)(props);
    if (props.contextDataStore === undefined) {
      var _props$controlProps3;
      const cacheTtlInMins = (props === null || props === void 0 ? void 0 : (_props$controlProps3 = props.controlProps) === null || _props$controlProps3 === void 0 ? void 0 : _props$controlProps3.cacheTtlInMins) ?? _Constants.Constants.CacheTtlInMinutes;
      const storageType = (props === null || props === void 0 ? void 0 : props.useSessionStorage) === true ? _Constants.StorageType.sessionStorage : _Constants.StorageType.localStorage;
      _DataStoreManager.DataStoreManager.clientDataStore = (0, _defaultClientDataStoreProvider.defaultClientDataStoreProvider)(cacheTtlInMins, storageType);
      (0, _defaultCacheManager.registerBroadcastServiceForStorage)(widgetCacheId, cacheTtlInMins, storageType);
    } else {
      _DataStoreManager.DataStoreManager.clientDataStore = props.contextDataStore;
    }
  };
  (0, _react2.useEffect)(() => {
    var _props$controlProps4, _props$controlProps5, _props$controlProps6, _props$chatConfig, _props$chatConfig$Liv, _props$controlProps8, _props$chatConfig2, _props$chatConfig2$Ch, _state$appStates5;
    state.domainStates.confirmationPaneConfirmedOptionClicked = false;
    state.domainStates.confirmationState = _Constants.ConfirmationState.NotSet;
    setupClientDataStore();
    (0, _registerTelemetryLoggers.registerTelemetryLoggers)(props, dispatch);
    (0, _createInternetConnectionChangeHandler.createInternetConnectionChangeHandler)();
    uwid.current = (0, _utils.newGuid)();
    dispatch({
      type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_WIDGET_ELEMENT_ID,
      payload: widgetElementId
    });
    dispatch({
      type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_START_CHAT_BUTTON_DISPLAY,
      payload: ((_props$controlProps4 = props.controlProps) === null || _props$controlProps4 === void 0 ? void 0 : _props$controlProps4.hideStartChatButton) || false
    });
    dispatch({
      type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_E2VV_ENABLED,
      payload: false
    });
    if ((_props$controlProps5 = props.controlProps) !== null && _props$controlProps5 !== void 0 && _props$controlProps5.widgetInstanceId && !(0, _utils.isNullOrEmptyString)((_props$controlProps6 = props.controlProps) === null || _props$controlProps6 === void 0 ? void 0 : _props$controlProps6.widgetInstanceId)) {
      var _props$controlProps7;
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_WIDGET_INSTANCE_ID,
        payload: (_props$controlProps7 = props.controlProps) === null || _props$controlProps7 === void 0 ? void 0 : _props$controlProps7.widgetInstanceId
      });
    }
    if (((_props$chatConfig = props.chatConfig) === null || _props$chatConfig === void 0 ? void 0 : (_props$chatConfig$Liv = _props$chatConfig.LiveWSAndLiveChatEngJoin) === null || _props$chatConfig$Liv === void 0 ? void 0 : _props$chatConfig$Liv.msdyn_callingoptions) !== _Constants.E2VVOptions.NoCalling) {
      (0, _initCallingSdk.initCallingSdk)(chatSDK, setVoiceVideoCallingSDK).then(sdkCreated => {
        sdkCreated && dispatch({
          type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_E2VV_ENABLED,
          payload: true
        });
      });
    }
    if (props.initialCustomContext) {
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_CUSTOM_CONTEXT,
        payload: props.initialCustomContext
      });
    }

    // Initialize global dir
    const globalDir = ((_props$controlProps8 = props.controlProps) === null || _props$controlProps8 === void 0 ? void 0 : _props$controlProps8.dir) ?? (0, _utils.getLocaleDirection)((_props$chatConfig2 = props.chatConfig) === null || _props$chatConfig2 === void 0 ? void 0 : (_props$chatConfig2$Ch = _props$chatConfig2.ChatWidgetLanguage) === null || _props$chatConfig2$Ch === void 0 ? void 0 : _props$chatConfig2$Ch.msdyn_localeid);
    dispatch({
      type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_GLOBAL_DIR,
      payload: globalDir
    });
    setOptionalParams();

    // Unauth chat
    if ((state === null || state === void 0 ? void 0 : (_state$appStates5 = state.appStates) === null || _state$appStates5 === void 0 ? void 0 : _state$appStates5.hideStartChatButton) === false) {
      startChat(props);
    }
  }, []);

  // useEffect for when skip chat button rendering
  (0, _react2.useEffect)(() => {
    var _state$appStates6;
    if ((state === null || state === void 0 ? void 0 : (_state$appStates6 = state.appStates) === null || _state$appStates6 === void 0 ? void 0 : _state$appStates6.hideStartChatButton) === true) {
      var _props$chatConfig3, _props$chatConfig3$Li;
      //handle OOH pane
      if ((props === null || props === void 0 ? void 0 : (_props$chatConfig3 = props.chatConfig) === null || _props$chatConfig3 === void 0 ? void 0 : (_props$chatConfig3$Li = _props$chatConfig3.LiveWSAndLiveChatEngJoin) === null || _props$chatConfig3$Li === void 0 ? void 0 : _props$chatConfig3$Li.OutOfOperatingHours.toLowerCase()) === "true") {
        dispatch({
          type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_CONVERSATION_STATE,
          payload: _ConversationState.ConversationState.OutOfOffice
        });
        return;
      }
      _omnichannelChatComponents.BroadcastService.postMessage({
        eventName: _TelemetryConstants.BroadcastEvent.ChatInitiated
      });
      //Pass the state to avoid getting stale state
      startChat(props, state);
    }
  }, [state === null || state === void 0 ? void 0 : (_state$appStates7 = state.appStates) === null || _state$appStates7 === void 0 ? void 0 : _state$appStates7.hideStartChatButton]);

  // useEffect for custom context
  (0, _react2.useEffect)(() => {
    var _chatSDK$omnichannelC2, _chatSDK$omnichannelC3, _props$controlProps10;
    // Add the custom context on receiving the SetCustomContext event
    _omnichannelChatComponents.BroadcastService.getMessageByEventName(_TelemetryConstants.BroadcastEvent.SetCustomContext).subscribe(msg => {
      _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.INFO, {
        Event: _TelemetryConstants.TelemetryEvent.CustomContextReceived,
        Description: "CustomContext received."
      });
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_CUSTOM_CONTEXT,
        payload: msg === null || msg === void 0 ? void 0 : msg.payload
      });
    });
    _omnichannelChatComponents.BroadcastService.getMessageByEventName(_TelemetryConstants.BroadcastEvent.StartProactiveChat).subscribe(msg => {
      _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.INFO, {
        Event: _TelemetryConstants.TelemetryEvent.StartProactiveChatEventReceived,
        Description: "Start proactive chat event received."
      });
      if (canStartProactiveChat.current === true) {
        var _msg$payload, _msg$payload2, _msg$payload3;
        (0, _startProactiveChat.startProactiveChat)(dispatch, msg === null || msg === void 0 ? void 0 : (_msg$payload = msg.payload) === null || _msg$payload === void 0 ? void 0 : _msg$payload.notificationConfig, msg === null || msg === void 0 ? void 0 : (_msg$payload2 = msg.payload) === null || _msg$payload2 === void 0 ? void 0 : _msg$payload2.enablePreChat, msg === null || msg === void 0 ? void 0 : (_msg$payload3 = msg.payload) === null || _msg$payload3 === void 0 ? void 0 : _msg$payload3.inNewWindow);
      } else {
        _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.INFO, {
          Event: _TelemetryConstants.TelemetryEvent.ChatAlreadyTriggered,
          Description: "Start proactive chat method called, when chat was already triggered."
        });
      }
    });

    // Toggle chat visibility
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    _omnichannelChatComponents.BroadcastService.getMessageByEventName(_TelemetryConstants.BroadcastEvent.HideChatVisibilityChangeEvent).subscribe(async event => {
      var _event$payload;
      if ((event === null || event === void 0 ? void 0 : (_event$payload = event.payload) === null || _event$payload === void 0 ? void 0 : _event$payload.isChatHidden) !== undefined) {
        var _props$controlProps9;
        if ((_props$controlProps9 = props.controlProps) !== null && _props$controlProps9 !== void 0 && _props$controlProps9.hideStartChatButton) {
          var _event$payload2;
          dispatch({
            type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_MINIMIZED,
            payload: event === null || event === void 0 ? void 0 : (_event$payload2 = event.payload) === null || _event$payload2 === void 0 ? void 0 : _event$payload2.isChatHidden
          });
        }
        const dateNow = Date.now();
        if (dateNow - lastLWICheckTimeRef.current > _Constants.Constants.LWICheckOnVisibilityTimeout) {
          const conversationDetails = await (0, _utils.getConversationDetailsCall)(chatSDK);
          lastLWICheckTimeRef.current = dateNow;
          if ((conversationDetails === null || conversationDetails === void 0 ? void 0 : conversationDetails.state) === _Constants.LiveWorkItemState.WrapUp || (conversationDetails === null || conversationDetails === void 0 ? void 0 : conversationDetails.state) === _Constants.LiveWorkItemState.Closed) {
            dispatch({
              type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_CHAT_DISCONNECT_EVENT_RECEIVED,
              payload: true
            });
            _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.INFO, {
              Event: _TelemetryConstants.TelemetryEvent.ChatDisconnectThreadEventReceived,
              Description: "Chat disconnected due to timeout, left or removed."
            });
          }
        }
      }
    });

    // Start chat from SDK Event
    _omnichannelChatComponents.BroadcastService.getMessageByEventName(_TelemetryConstants.BroadcastEvent.StartChat).subscribe(() => {
      _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.INFO, {
        Event: _TelemetryConstants.TelemetryEvent.StartChatEventRecevied,
        Description: "Start chat event received."
      });

      // DataStoreManager.clientDataStore?.swtichToSessionStorage(true);
      const persistedState = (0, _utils.getStateFromCache)((0, _utils.getWidgetCacheIdfromProps)(props));

      // Chat not found in cache - scenario: explicitly clearing cache and calling startChat SDK method
      if (persistedState === undefined) {
        _omnichannelChatComponents.BroadcastService.postMessage({
          eventName: _TelemetryConstants.BroadcastEvent.ChatInitiated
        });
        (0, _startChat.prepareStartChat)(props, chatSDK, state, dispatch, setAdapter);
        return;
      }

      // Chat exist in cache
      if (persistedState) {
        var _persistedState$appSt, _persistedState$appSt2, _persistedState$appSt3, _persistedState$appSt4;
        // Only initiate new chat if widget state in cache in one of the followings
        if (((_persistedState$appSt = persistedState.appStates) === null || _persistedState$appSt === void 0 ? void 0 : _persistedState$appSt.conversationState) === _ConversationState.ConversationState.Closed || ((_persistedState$appSt2 = persistedState.appStates) === null || _persistedState$appSt2 === void 0 ? void 0 : _persistedState$appSt2.conversationState) === _ConversationState.ConversationState.InActive || ((_persistedState$appSt3 = persistedState.appStates) === null || _persistedState$appSt3 === void 0 ? void 0 : _persistedState$appSt3.conversationState) === _ConversationState.ConversationState.Postchat) {
          _omnichannelChatComponents.BroadcastService.postMessage({
            eventName: _TelemetryConstants.BroadcastEvent.ChatInitiated
          });
          (0, _startChat.prepareStartChat)(props, chatSDK, state, dispatch, setAdapter);
          return;
        }

        // If minimized, maximize the chat
        if ((persistedState === null || persistedState === void 0 ? void 0 : (_persistedState$appSt4 = persistedState.appStates) === null || _persistedState$appSt4 === void 0 ? void 0 : _persistedState$appSt4.isMinimized) === true) {
          var _persistedState$domai, _persistedState$domai2, _persistedState$domai3, _persistedState$domai4;
          dispatch({
            type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_MINIMIZED,
            payload: false
          });
          _omnichannelChatComponents.BroadcastService.postMessage({
            eventName: _TelemetryConstants.BroadcastEvent.MaximizeChat,
            payload: {
              height: persistedState === null || persistedState === void 0 ? void 0 : (_persistedState$domai = persistedState.domainStates) === null || _persistedState$domai === void 0 ? void 0 : (_persistedState$domai2 = _persistedState$domai.widgetSize) === null || _persistedState$domai2 === void 0 ? void 0 : _persistedState$domai2.height,
              width: persistedState === null || persistedState === void 0 ? void 0 : (_persistedState$domai3 = persistedState.domainStates) === null || _persistedState$domai3 === void 0 ? void 0 : (_persistedState$domai4 = _persistedState$domai3.widgetSize) === null || _persistedState$domai4 === void 0 ? void 0 : _persistedState$domai4.width
            }
          });
        }
      }
    });

    // End chat
    _omnichannelChatComponents.BroadcastService.getMessageByEventName(_TelemetryConstants.BroadcastEvent.InitiateEndChat).subscribe(async () => {
      // This is to ensure to get latest state from cache in multitab
      const persistedState = (0, _utils.getStateFromCache)((0, _utils.getWidgetCacheIdfromProps)(props));
      if (persistedState && persistedState.appStates.conversationState === _ConversationState.ConversationState.Active) {
        dispatch({
          type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_CONVERSATION_ENDED_BY,
          payload: _Constants.ConversationEndEntity.Customer
        });
      } else {
        const skipEndChatSDK = true;
        const skipCloseChat = false;
        (0, _endChat.endChat)(props, chatSDK, state, dispatch, setAdapter, setWebChatStyles, adapter, skipEndChatSDK, skipCloseChat);
      }
      _omnichannelChatComponents.BroadcastService.postMessage({
        eventName: _TelemetryConstants.BroadcastEvent.CloseChat
      });
    });

    // End chat on browser unload
    _omnichannelChatComponents.BroadcastService.getMessageByEventName(_TelemetryConstants.BroadcastEvent.InitiateEndChatOnBrowserUnload).subscribe(() => {
      initiateEndChatOnBrowserUnload();
    });

    // Listen to end chat event from other tabs
    const endChatEventName = (0, _utils.getWidgetEndChatEventName)(chatSDK === null || chatSDK === void 0 ? void 0 : (_chatSDK$omnichannelC2 = chatSDK.omnichannelConfig) === null || _chatSDK$omnichannelC2 === void 0 ? void 0 : _chatSDK$omnichannelC2.orgId, chatSDK === null || chatSDK === void 0 ? void 0 : (_chatSDK$omnichannelC3 = chatSDK.omnichannelConfig) === null || _chatSDK$omnichannelC3 === void 0 ? void 0 : _chatSDK$omnichannelC3.widgetId, ((_props$controlProps10 = props.controlProps) === null || _props$controlProps10 === void 0 ? void 0 : _props$controlProps10.widgetInstanceId) ?? "");
    _omnichannelChatComponents.BroadcastService.getMessageByEventName(endChatEventName).subscribe(msg => {
      console.log("Receiving end chat event", JSON.stringify(msg.payload));
      if (msg.payload !== uwid.current) {
        (0, _endChat.endChat)(props, chatSDK, state, dispatch, setAdapter, setWebChatStyles, adapter, true, false, false);
        return;
      }
    });

    //Listen to WidgetSize, used for minimize to maximize
    _omnichannelChatComponents.BroadcastService.getMessageByEventName("WidgetSize").subscribe(msg => {
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_WIDGET_SIZE,
        payload: msg === null || msg === void 0 ? void 0 : msg.payload
      });
    });

    // Reset state variables
    _omnichannelChatComponents.BroadcastService.getMessageByEventName(_TelemetryConstants.BroadcastEvent.RaiseErrorEvent).subscribe(() => {
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_LIVE_CHAT_CONFIG,
        payload: undefined
      });
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_CUSTOM_CONTEXT,
        payload: undefined
      });
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_CHAT_TOKEN,
        payload: undefined
      });
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_LIVE_CHAT_CONTEXT,
        payload: undefined
      });
    });

    // Check for TPC and log in telemetry if blocked
    (0, _defaultClientDataStoreProvider.isCookieAllowed)();
    return () => {
      (0, _disposeTelemetryLoggers.disposeTelemetryLoggers)();
    };
  }, []);
  (0, _react2.useEffect)(() => {
    // On new message
    if (state.appStates.conversationState === _ConversationState.ConversationState.Active) {
      chatSDK === null || chatSDK === void 0 ? void 0 : chatSDK.onNewMessage(() => {
        // Track the message count
        currentMessageCountRef.current++;
        dispatch({
          type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_UNREAD_MESSAGE_COUNT,
          payload: currentMessageCountRef.current + 1
        });

        // New message notification
        _omnichannelChatComponents.BroadcastService.postMessage({
          eventName: _TelemetryConstants.BroadcastEvent.NewMessageNotification
        });
      });
    }
    if (state.appStates.conversationState === _ConversationState.ConversationState.InActive) {
      var _props$webChatContain2, _props$webChatContain3;
      if ((props === null || props === void 0 ? void 0 : (_props$webChatContain2 = props.webChatContainerProps) === null || _props$webChatContain2 === void 0 ? void 0 : (_props$webChatContain3 = _props$webChatContain2.renderingMiddlewareProps) === null || _props$webChatContain3 === void 0 ? void 0 : _props$webChatContain3.hideSendboxOnConversationEnd) !== false) {
        setWebChatStyles(styles => {
          return {
            ...styles,
            hideSendBox: true
          };
        });
      }
    }
  }, [state.appStates.conversationState]);
  (0, _react2.useEffect)(() => {
    canStartProactiveChat.current = state.appStates.conversationState === _ConversationState.ConversationState.Closed && !state.appStates.proactiveChatStates.proactiveChatInNewWindow;
  }, [state.appStates.conversationState, state.appStates.proactiveChatStates.proactiveChatInNewWindow]);

  // Reset the UnreadMessageCount when minimized is toggled and broadcast it.
  (0, _react2.useEffect)(() => {
    if (state.appStates.isMinimized) {
      _ActivityStreamHandler.ActivityStreamHandler.cork();
    } else {
      setTimeout(() => _ActivityStreamHandler.ActivityStreamHandler.uncork(), 500);
    }
    currentMessageCountRef.current = -1;
    dispatch({
      type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_UNREAD_MESSAGE_COUNT,
      payload: 0
    });
    const customEvent = {
      elementType: _omnichannelChatComponents.ElementType.Custom,
      eventName: _TelemetryConstants.BroadcastEvent.UnreadMessageCount,
      payload: 0
    };
    _omnichannelChatComponents.BroadcastService.postMessage(customEvent);
  }, [state.appStates.isMinimized]);

  // Broadcast the UnreadMessageCount state on any change.
  (0, _react2.useEffect)(() => {
    if (state.appStates.isMinimized === true && state.appStates.unreadMessageCount > 0) {
      const customEvent = {
        elementType: _omnichannelChatComponents.ElementType.Custom,
        eventName: _TelemetryConstants.BroadcastEvent.UnreadMessageCount,
        payload: `${state.appStates.unreadMessageCount}`
      };
      _omnichannelChatComponents.BroadcastService.postMessage(customEvent);
    }
  }, [state.appStates.unreadMessageCount]);
  (0, _react2.useEffect)(() => {
    var _props$webChatContain4;
    setWebChatStyles({
      ...webChatStyles,
      ...((_props$webChatContain4 = props.webChatContainerProps) === null || _props$webChatContain4 === void 0 ? void 0 : _props$webChatContain4.webChatStyles)
    });
  }, [(_props$webChatContain5 = props.webChatContainerProps) === null || _props$webChatContain5 === void 0 ? void 0 : _props$webChatContain5.webChatStyles]);
  (0, _react2.useEffect)(() => {
    //Confirmation pane dismissing through OK option, so proceed with end chat
    if (state.domainStates.confirmationState === _Constants.ConfirmationState.Ok) {
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_CONVERSATION_ENDED_BY,
        payload: _Constants.ConversationEndEntity.Customer
      });
    }
  }, [state.domainStates.confirmationState]);
  (0, _react2.useEffect)(() => {
    var _state$appStates8, _state$appStates9, _state$appStates10, _state$appStates11, _state$appStates12, _state$appStates13;
    // Do not process anything during initialization
    if ((state === null || state === void 0 ? void 0 : (_state$appStates8 = state.appStates) === null || _state$appStates8 === void 0 ? void 0 : _state$appStates8.conversationEndedBy) === _Constants.ConversationEndEntity.NotSet) {
      return;
    }

    // If start chat failed, and C2 is trying to close chat widget
    if (state !== null && state !== void 0 && (_state$appStates9 = state.appStates) !== null && _state$appStates9 !== void 0 && _state$appStates9.startChatFailed || (state === null || state === void 0 ? void 0 : (_state$appStates10 = state.appStates) === null || _state$appStates10 === void 0 ? void 0 : _state$appStates10.conversationState) === _ConversationState.ConversationState.Postchat) {
      (0, _endChat.endChat)(props, chatSDK, state, dispatch, setAdapter, setWebChatStyles, adapter, true, false, true, uwid.current);
      return;
    }

    // Scenario -> Chat was InActive and closing the chat (Refresh scenario on post chat)
    if ((state === null || state === void 0 ? void 0 : (_state$appStates11 = state.appStates) === null || _state$appStates11 === void 0 ? void 0 : _state$appStates11.conversationState) === _ConversationState.ConversationState.InActive) {
      (0, _endChat.endChat)(props, chatSDK, state, dispatch, setAdapter, setWebChatStyles, adapter, false, false, true, uwid.current);
      return;
    }
    if ((state === null || state === void 0 ? void 0 : (_state$appStates12 = state.appStates) === null || _state$appStates12 === void 0 ? void 0 : _state$appStates12.conversationEndedBy) === _Constants.ConversationEndEntity.Agent || (state === null || state === void 0 ? void 0 : (_state$appStates13 = state.appStates) === null || _state$appStates13 === void 0 ? void 0 : _state$appStates13.conversationEndedBy) === _Constants.ConversationEndEntity.Bot) {
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_CONVERSATION_STATE,
        payload: _ConversationState.ConversationState.InActive
      });
    }

    // All other cases
    (0, _endChat.prepareEndChat)(props, chatSDK, state, dispatch, setAdapter, setWebChatStyles, adapter, uwid.current);
  }, [state === null || state === void 0 ? void 0 : (_state$appStates14 = state.appStates) === null || _state$appStates14 === void 0 ? void 0 : _state$appStates14.conversationEndedBy]);

  // Publish chat widget state
  (0, _react2.useEffect)(() => {
    // Only activate these windows events when conversation state is active and chat widget is in popout mode
    // Ghost chat scenarios
    /* COMMENTING THIS CODE FOR PARITY WITH OLD LCW
    if (state.appStates.conversationState === ConversationState.Active &&
        props.controlProps?.hideStartChatButton === true) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
          window.onbeforeunload = function () {
            const prompt = Constants.BrowserUnloadConfirmationMessage;
            return prompt;
        };
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
        window.onunload = function () {
            initiateEndChatOnBrowserUnload();
        };
    }*/

    widgetStateEventId = (0, _utils.getWidgetCacheIdfromProps)(props);
    const chatWidgetStateChangeEvent = {
      eventName: widgetStateEventId,
      payload: {
        ...state
      }
    };
    _omnichannelChatComponents.BroadcastService.postMessage(chatWidgetStateChangeEvent);
  }, [state]);

  // Handle Chat disconnect cases
  (0, _react2.useEffect)(() => {
    if (state.appStates.chatDisconnectEventReceived) {
      (0, _chatDisconnectHelper.handleChatDisconnect)(props, state, setWebChatStyles);
    }
  }, [state.appStates.chatDisconnectEventReceived]);
  const initiateEndChatOnBrowserUnload = () => {
    var _DataStoreManager$cli;
    _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.INFO, {
      Event: _TelemetryConstants.TelemetryEvent.BrowserUnloadEventStarted,
      Description: "Browser unload event received."
    });
    (0, _endChat.endChat)(props, chatSDK, state, dispatch, setAdapter, setWebChatStyles, adapter, false, false, false);
    // Clean local storage
    (_DataStoreManager$cli = _DataStoreManager.DataStoreManager.clientDataStore) === null || _DataStoreManager$cli === void 0 ? void 0 : _DataStoreManager$cli.removeData(widgetStateEventId);

    //Dispose calling instance
    if (voiceVideoCallingSDK) {
      voiceVideoCallingSDK === null || voiceVideoCallingSDK === void 0 ? void 0 : voiceVideoCallingSDK.close();
    }
    //Message for clearing window[popouTab]
    _omnichannelChatComponents.BroadcastService.postMessage({
      eventName: _TelemetryConstants.BroadcastEvent.ClosePopoutWindow
    });
  };
  const webChatProps = (0, _initWebChatComposer.initWebChatComposer)(props, state, dispatch, chatSDK);
  const setPostChatContextRelay = () => (0, _setPostChatContextAndLoadSurvey.setPostChatContextAndLoadSurvey)(chatSDK, dispatch);
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const endChatRelay = (adapter, skipEndChatSDK, skipCloseChat, postMessageToOtherTab) => (0, _endChat.endChat)(props, chatSDK, state, dispatch, setAdapter, setWebChatStyles, adapter, skipEndChatSDK, skipCloseChat, postMessageToOtherTab, uwid.current);
  const prepareStartChatRelay = () => (0, _startChat.prepareStartChat)(props, chatSDK, state, dispatch, setAdapter);
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const initStartChatRelay = (optionalParams, persistedState) => (0, _startChat.initStartChat)(chatSDK, dispatch, setAdapter, state, props, optionalParams, persistedState);
  const confirmationPaneProps = (0, _initConfirmationPropsComposer.initConfirmationPropsComposer)(props);
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const prepareEndChatRelay = () => (0, _endChat.prepareEndChat)(props, chatSDK, state, dispatch, setAdapter, setWebChatStyles, adapter, uwid.current);
  const downloadTranscriptProps = (0, _createDownloadTranscriptProps.default)(props.downloadTranscriptProps, {
    ...(_defaultWebChatContainerStatefulProps.defaultWebChatContainerStatefulProps === null || _defaultWebChatContainerStatefulProps.defaultWebChatContainerStatefulProps === void 0 ? void 0 : _defaultWebChatContainerStatefulProps.defaultWebChatContainerStatefulProps.webChatStyles),
    ...((_props$webChatContain6 = props.webChatContainerProps) === null || _props$webChatContain6 === void 0 ? void 0 : _props$webChatContain6.webChatStyles)
  }, props.webChatContainerProps);
  const livechatProps = {
    ...props,
    downloadTranscriptProps
  };
  const chatWidgetDraggableConfig = {
    elementId: widgetElementId,
    channel: ((_props$controlProps11 = props.controlProps) === null || _props$controlProps11 === void 0 ? void 0 : _props$controlProps11.widgetInstanceId) ?? "lcw",
    disabled: ((_props$draggableChatW = props.draggableChatWidgetProps) === null || _props$draggableChatW === void 0 ? void 0 : _props$draggableChatW.disabled) === true ?? false // Draggable by default, unless explicitly disabled
  };

  // Disable receiving IDraggableEvent in current window
  if (((_props$draggableChatW2 = props.draggableChatWidgetProps) === null || _props$draggableChatW2 === void 0 ? void 0 : _props$draggableChatW2.disabled) === false && (_props$draggableChatW3 = props.draggableChatWidgetProps) !== null && _props$draggableChatW3 !== void 0 && _props$draggableChatW3.targetIframe) {
    chatWidgetDraggableConfig.disabled = true;
  }
  const headerDraggableConfig = {
    draggableEventChannel: chatWidgetDraggableConfig.channel ?? "lcw",
    draggableEventEmitterTargetWindow: (_props$draggableChatW4 = props.draggableChatWidgetProps) !== null && _props$draggableChatW4 !== void 0 && _props$draggableChatW4.targetIframe ? window.parent : window,
    draggable: ((_props$draggableChatW5 = props.draggableChatWidgetProps) === null || _props$draggableChatW5 === void 0 ? void 0 : _props$draggableChatW5.disabled) !== true // Draggable by default, unless explicitly disabled
  };

  return /*#__PURE__*/_react2.default.createElement(_react2.default.Fragment, null, /*#__PURE__*/_react2.default.createElement("style", null, `
            ::-webkit-scrollbar {
                width: ${scrollbarProps.width};
            }

            ::-webkit-scrollbar-track {
                background: ${scrollbarProps.trackBackgroundColor};
            }

            ::-webkit-scrollbar-thumb {
                background: ${scrollbarProps.thumbBackgroundColor};
                border-radius: ${scrollbarProps.thumbBorderRadius};
            }

            ::-webkit-scrollbar-thumb:hover {
                background: ${scrollbarProps.thumbHoverColor};
            }
            `), /*#__PURE__*/_react2.default.createElement(_DraggableChatWidget.default, chatWidgetDraggableConfig, /*#__PURE__*/_react2.default.createElement(Composer, _extends({}, webChatProps, {
    styleOptions: webChatStyles,
    directLine: ((_livechatProps$webCha = livechatProps.webChatContainerProps) === null || _livechatProps$webCha === void 0 ? void 0 : _livechatProps$webCha.directLine) ?? adapter ?? _defaultWebChatContainerStatefulProps.defaultWebChatContainerStatefulProps.directLine
  }), /*#__PURE__*/_react2.default.createElement(_react.Stack, {
    id: widgetElementId,
    styles: generalStyles,
    className: (_livechatProps$styleP = livechatProps.styleProps) === null || _livechatProps$styleP === void 0 ? void 0 : _livechatProps$styleP.className
  }, !((_livechatProps$contro = livechatProps.controlProps) !== null && _livechatProps$contro !== void 0 && _livechatProps$contro.hideChatButton) && !((_livechatProps$contro2 = livechatProps.controlProps) !== null && _livechatProps$contro2 !== void 0 && _livechatProps$contro2.hideStartChatButton) && (0, _componentController.shouldShowChatButton)(state) && ((0, _omnichannelChatComponents.decodeComponentString)((_livechatProps$compon = livechatProps.componentOverrides) === null || _livechatProps$compon === void 0 ? void 0 : _livechatProps$compon.chatButton) || /*#__PURE__*/_react2.default.createElement(_ChatButtonStateful.default, {
    buttonProps: livechatProps.chatButtonProps,
    outOfOfficeButtonProps: livechatProps.outOfOfficeChatButtonProps,
    startChat: prepareStartChatRelay
  })), !((_livechatProps$contro3 = livechatProps.controlProps) !== null && _livechatProps$contro3 !== void 0 && _livechatProps$contro3.hideProactiveChatPane) && (0, _componentController.shouldShowProactiveChatPane)(state) && ((0, _omnichannelChatComponents.decodeComponentString)((_livechatProps$compon2 = livechatProps.componentOverrides) === null || _livechatProps$compon2 === void 0 ? void 0 : _livechatProps$compon2.proactiveChatPane) || /*#__PURE__*/_react2.default.createElement(_ProactiveChatPaneStateful.default, {
    proactiveChatProps: livechatProps.proactiveChatPaneProps,
    startChat: prepareStartChatRelay
  })), !((_livechatProps$contro4 = livechatProps.controlProps) !== null && _livechatProps$contro4 !== void 0 && _livechatProps$contro4.hideHeader) && (0, _componentController.shouldShowHeader)(state) && ((0, _omnichannelChatComponents.decodeComponentString)((_livechatProps$compon3 = livechatProps.componentOverrides) === null || _livechatProps$compon3 === void 0 ? void 0 : _livechatProps$compon3.header) || /*#__PURE__*/_react2.default.createElement(_HeaderStateful.default, _extends({
    headerProps: livechatProps.headerProps,
    outOfOfficeHeaderProps: livechatProps.outOfOfficeHeaderProps,
    endChat: endChatRelay
  }, headerDraggableConfig))), !((_livechatProps$contro5 = livechatProps.controlProps) !== null && _livechatProps$contro5 !== void 0 && _livechatProps$contro5.hideLoadingPane) && (0, _componentController.shouldShowLoadingPane)(state) && ((0, _omnichannelChatComponents.decodeComponentString)((_livechatProps$compon4 = livechatProps.componentOverrides) === null || _livechatProps$compon4 === void 0 ? void 0 : _livechatProps$compon4.loadingPane) || /*#__PURE__*/_react2.default.createElement(_LoadingPaneStateful.default, {
    loadingPaneProps: livechatProps.loadingPaneProps,
    startChatErrorPaneProps: livechatProps.startChatErrorPaneProps
  })), !((_livechatProps$contro6 = livechatProps.controlProps) !== null && _livechatProps$contro6 !== void 0 && _livechatProps$contro6.hideOutOfOfficeHoursPane) && (0, _componentController.shouldShowOutOfOfficeHoursPane)(state) && ((0, _omnichannelChatComponents.decodeComponentString)((_livechatProps$compon5 = livechatProps.componentOverrides) === null || _livechatProps$compon5 === void 0 ? void 0 : _livechatProps$compon5.outOfOfficeHoursPane) || /*#__PURE__*/_react2.default.createElement(_OOOHPaneStateful.default, livechatProps.outOfOfficeHoursPaneProps)), !((_livechatProps$contro7 = livechatProps.controlProps) !== null && _livechatProps$contro7 !== void 0 && _livechatProps$contro7.hideReconnectChatPane) && (0, _componentController.shouldShowReconnectChatPane)(state) && ((0, _omnichannelChatComponents.decodeComponentString)((_livechatProps$compon6 = livechatProps.componentOverrides) === null || _livechatProps$compon6 === void 0 ? void 0 : _livechatProps$compon6.reconnectChatPane) || /*#__PURE__*/_react2.default.createElement(_ReconnectChatPaneStateful.default, {
    reconnectChatProps: livechatProps.reconnectChatPaneProps,
    initStartChat: initStartChatRelay
  })), !((_livechatProps$contro8 = livechatProps.controlProps) !== null && _livechatProps$contro8 !== void 0 && _livechatProps$contro8.hidePreChatSurveyPane) && (0, _componentController.shouldShowPreChatSurveyPane)(state) && ((0, _omnichannelChatComponents.decodeComponentString)((_livechatProps$compon7 = livechatProps.componentOverrides) === null || _livechatProps$compon7 === void 0 ? void 0 : _livechatProps$compon7.preChatSurveyPane) || /*#__PURE__*/_react2.default.createElement(_PreChatSurveyPaneStateful.default, {
    surveyProps: livechatProps.preChatSurveyPaneProps,
    initStartChat: initStartChatRelay
  })), !((_livechatProps$contro9 = livechatProps.controlProps) !== null && _livechatProps$contro9 !== void 0 && _livechatProps$contro9.hideCallingContainer) && (0, _componentController.shouldShowCallingContainer)(state) && /*#__PURE__*/_react2.default.createElement(_CallingContainerStateful.default, _extends({
    voiceVideoCallingSdk: voiceVideoCallingSDK
  }, livechatProps.callingContainerProps)), !((_livechatProps$contro10 = livechatProps.controlProps) !== null && _livechatProps$contro10 !== void 0 && _livechatProps$contro10.hideWebChatContainer) && (0, _componentController.shouldShowWebChatContainer)(state) && ((0, _omnichannelChatComponents.decodeComponentString)((_livechatProps$compon8 = livechatProps.componentOverrides) === null || _livechatProps$compon8 === void 0 ? void 0 : _livechatProps$compon8.webChatContainer) || /*#__PURE__*/_react2.default.createElement(_WebChatContainerStateful.default, livechatProps)), !((_livechatProps$contro11 = livechatProps.controlProps) !== null && _livechatProps$contro11 !== void 0 && _livechatProps$contro11.hideConfirmationPane) && (0, _componentController.shouldShowConfirmationPane)(state) && ((0, _omnichannelChatComponents.decodeComponentString)((_livechatProps$compon9 = livechatProps.componentOverrides) === null || _livechatProps$compon9 === void 0 ? void 0 : _livechatProps$compon9.confirmationPane) || /*#__PURE__*/_react2.default.createElement(_ConfirmationPaneStateful.default, _extends({}, confirmationPaneProps, {
    setPostChatContext: setPostChatContextRelay,
    prepareEndChat: prepareEndChatRelay
  }))), !((_livechatProps$contro12 = livechatProps.controlProps) !== null && _livechatProps$contro12 !== void 0 && _livechatProps$contro12.hidePostChatLoadingPane) && (0, _componentController.shouldShowPostChatLoadingPane)(state) && ((0, _omnichannelChatComponents.decodeComponentString)((_livechatProps$compon10 = livechatProps.componentOverrides) === null || _livechatProps$compon10 === void 0 ? void 0 : _livechatProps$compon10.postChatLoadingPane) || /*#__PURE__*/_react2.default.createElement(_PostChatLoadingPaneStateful.default, livechatProps.postChatLoadingPaneProps)), (0, _componentController.shouldShowPostChatSurveyPane)(state) && ((0, _omnichannelChatComponents.decodeComponentString)((_livechatProps$compon11 = livechatProps.componentOverrides) === null || _livechatProps$compon11 === void 0 ? void 0 : _livechatProps$compon11.postChatSurveyPane) || /*#__PURE__*/_react2.default.createElement(_PostChatSurveyPaneStateful.default, _extends({}, livechatProps.postChatSurveyPaneProps, livechatProps.chatSDK))), (0, _createFooter.createFooter)(livechatProps, state), (0, _componentController.shouldShowEmailTranscriptPane)(state) && ((0, _omnichannelChatComponents.decodeComponentString)((_livechatProps$compon12 = livechatProps.componentOverrides) === null || _livechatProps$compon12 === void 0 ? void 0 : _livechatProps$compon12.emailTranscriptPane) || /*#__PURE__*/_react2.default.createElement(_EmailTranscriptPaneStateful.default, livechatProps.emailTranscriptPane))))));
};
exports.LiveChatWidgetStateful = LiveChatWidgetStateful;
var _default = LiveChatWidgetStateful;
exports.default = _default;