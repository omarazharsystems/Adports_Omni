"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAdapter = void 0;
var _NotificationHandler = require("../../webchatcontainerstateful/webchatcontroller/notification/NotificationHandler");
var _NotificationLevel = require("../../webchatcontainerstateful/webchatcontroller/enums/NotificationLevel");
var _NotificationScenarios = require("../../webchatcontainerstateful/webchatcontroller/enums/NotificationScenarios");
var _defaultMiddlewareLocalizedTexts = require("../../webchatcontainerstateful/common/defaultProps/defaultMiddlewareLocalizedTexts");
var _ChatAdapterShim = require("./ChatAdapterShim");
var _PauseActivitySubscriber = require("./ActivitySubscriber/PauseActivitySubscriber");
var _BotAuthActivitySubscriber = require("./ActivitySubscriber/BotAuthActivitySubscriber");
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const createAdapter = async chatSDK => {
  const chatAdapterOptionalParams = {
    IC3Adapter: {
      options: {
        callbackOnNotification: notification => {
          if (notification.id === _NotificationScenarios.NotificationScenarios.InternetConnection && notification.level == _NotificationLevel.NotificationLevel.Error) {
            notification.message = _defaultMiddlewareLocalizedTexts.defaultMiddlewareLocalizedTexts.MIDDLEWARE_BANNER_NO_INTERNET_CONNECTION;
          }
          if (notification.id === _NotificationScenarios.NotificationScenarios.InternetConnection && notification.level == _NotificationLevel.NotificationLevel.Success) {
            notification.message = _defaultMiddlewareLocalizedTexts.defaultMiddlewareLocalizedTexts.MIDDLEWARE_BANNER_INTERNET_BACK_ONLINE;
          }
          if (notification.id && notification.message) {
            _NotificationHandler.NotificationHandler.notifyWithLevel(notification.id, notification.message, notification.level);
          }
        }
      }
    }
  };
  let adapter = await chatSDK.createChatAdapter(chatAdapterOptionalParams);
  //so far, there is no need to convert to the shim adapter when using visual tests
  if (chatSDK.isMockModeOn !== true) {
    adapter = new _ChatAdapterShim.ChatAdapterShim(adapter);
    adapter.addSubscriber(new _PauseActivitySubscriber.PauseActivitySubscriber());
    adapter.addSubscriber(new _BotAuthActivitySubscriber.BotAuthActivitySubscriber());
    return adapter.chatAdapter;
  }
  return adapter;
};
exports.createAdapter = createAdapter;