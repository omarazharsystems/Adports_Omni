"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createInternetConnectionChangeHandler = void 0;
var _Constants = require("../../../common/Constants");
var _NotificationHandler = require("../../webchatcontainerstateful/webchatcontroller/notification/NotificationHandler");
var _NotificationScenarios = require("../../webchatcontainerstateful/webchatcontroller/enums/NotificationScenarios");
var _defaultMiddlewareLocalizedTexts = require("../../webchatcontainerstateful/common/defaultProps/defaultMiddlewareLocalizedTexts");
var _TelemetryHelper = require("../../../common/telemetry/TelemetryHelper");
var _TelemetryConstants = require("../../../common/telemetry/TelemetryConstants");
const isInternetConnected = async () => {
  try {
    const response = await fetch(_Constants.Constants.internetConnectionTestUrl);
    const text = await response.text();
    return text === _Constants.Constants.internetConnectionTestUrlText;
  } catch {
    return false;
  }
};
const createInternetConnectionChangeHandler = async () => {
  const handler = async () => {
    const connected = await isInternetConnected();
    if (!connected) {
      _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.WARN, {
        Event: _TelemetryConstants.TelemetryEvent.NetworkDisconnected
      });
      _NotificationHandler.NotificationHandler.notifyError(_NotificationScenarios.NotificationScenarios.InternetConnection, _defaultMiddlewareLocalizedTexts.defaultMiddlewareLocalizedTexts.MIDDLEWARE_BANNER_NO_INTERNET_CONNECTION);
    } else {
      _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.WARN, {
        Event: _TelemetryConstants.TelemetryEvent.NetworkReconnected
      });
      _NotificationHandler.NotificationHandler.notifySuccess(_NotificationScenarios.NotificationScenarios.InternetConnection, _defaultMiddlewareLocalizedTexts.defaultMiddlewareLocalizedTexts.MIDDLEWARE_BANNER_INTERNET_BACK_ONLINE);
    }
  };

  // Checking connection status on online & offline events due to possible false positives
  window.addEventListener("online", () => handler(), false);
  window.addEventListener("offline", () => handler(), false);
};
exports.createInternetConnectionChangeHandler = createInternetConnectionChangeHandler;