"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChatAdapterShim = void 0;
var _DefaultActivitySubscriber = require("./ActivitySubscriber/DefaultActivitySubscriber");
var _shareObservable = require("./shareObservable");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ChatAdapterShim {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any

  // eslint-disable-next-line @typescript-eslint/no-explicit-any

  // eslint-disable-next-line @typescript-eslint/no-explicit-any

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  constructor(chatAdapter) {
    _defineProperty(this, "chatAdapter", void 0);
    _defineProperty(this, "activityObserver", void 0);
    _defineProperty(this, "subscribers", void 0);
    this.subscribers = [];
    this.chatAdapter = {
      ...chatAdapter,
      activity$: (0, _shareObservable.shareObservable)(
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      new window.Observable(observer => {
        this.activityObserver = observer;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const abortController = new window.AbortController();
        (async () => {
          try {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            for await (let activity of chatAdapter.activities({
              signal: abortController.signal
            })) {
              for (const subscriber of [...this.subscribers, new _DefaultActivitySubscriber.DefaultActivitySubscriber()]) {
                subscriber.observer = this.activityObserver;
                activity = await subscriber.next(activity);
                if (!activity) {
                  break;
                }
              }
            }
            observer.complete();
          } catch (error) {
            observer.error(error);
          }
        })();
        return () => {
          abortController.abort();
        };
      }))
    };
  }

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  addSubscriber(subscriber) {
    this.subscribers.push(subscriber);
  }
}
exports.ChatAdapterShim = ChatAdapterShim;