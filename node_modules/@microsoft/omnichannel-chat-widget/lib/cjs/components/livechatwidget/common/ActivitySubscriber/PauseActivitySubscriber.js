"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PauseActivitySubscriber = void 0;
var _ActivityStreamHandler = require("../ActivityStreamHandler");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class PauseActivitySubscriber {
  constructor() {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    _defineProperty(this, "observer", void 0);
  }
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  async apply(activity) {
    await _ActivityStreamHandler.ActivityStreamHandler.restorePromise;
    return activity;
  }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any
  applicable(activity) {
    return true;
  }

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  async next(activity) {
    if (this.applicable(activity)) {
      return await this.apply(activity);
    }
    return activity;
  }
}
exports.PauseActivitySubscriber = PauseActivitySubscriber;