"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setWidgetStateToInactive = exports.initiatePostChat = exports.getPostChatContext = exports.checkPostChatEnabled = void 0;
var _Constants = require("../../../common/Constants");
var _TelemetryConstants = require("../../../common/telemetry/TelemetryConstants");
var _TelemetryHelper = require("../../../common/telemetry/TelemetryHelper");
var _utils = require("../../../common/utils");
var _ConversationState = require("../../../contexts/common/ConversationState");
var _LiveChatWidgetActionType = require("../../../contexts/common/LiveChatWidgetActionType");
var _PostChatSurveyMode = require("../../postchatsurveypanestateful/enums/PostChatSurveyMode");
// eslint-disable-next-line @typescript-eslint/no-explicit-any
let conversationDetails = undefined;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
let postChatSurveyMode = undefined;
const getBotSurveyMode = (props, state) => {
  var _props$chatConfig, _props$chatConfig$Liv, _state$domainStates$l, _state$domainStates$l2;
  return ((_props$chatConfig = props.chatConfig) === null || _props$chatConfig === void 0 ? void 0 : (_props$chatConfig$Liv = _props$chatConfig.LiveWSAndLiveChatEngJoin) === null || _props$chatConfig$Liv === void 0 ? void 0 : _props$chatConfig$Liv.msdyn_postconversationsurveybotsurveymode) ?? ((_state$domainStates$l = state.domainStates.liveChatConfig) === null || _state$domainStates$l === void 0 ? void 0 : (_state$domainStates$l2 = _state$domainStates$l.LiveWSAndLiveChatEngJoin) === null || _state$domainStates$l2 === void 0 ? void 0 : _state$domainStates$l2.msdyn_postconversationsurveybotsurveymode);
};
const getUserSurveyMode = (props, state) => {
  var _props$chatConfig2, _props$chatConfig2$Li, _props$chatConfig3, _props$chatConfig3$Li;
  if (!((_props$chatConfig2 = props.chatConfig) !== null && _props$chatConfig2 !== void 0 && (_props$chatConfig2$Li = _props$chatConfig2.LiveWSAndLiveChatEngJoin) !== null && _props$chatConfig2$Li !== void 0 && _props$chatConfig2$Li.msdyn_postconversationsurveymode)) {
    var _state$domainStates, _state$domainStates$l3, _state$domainStates$l4;
    return (state === null || state === void 0 ? void 0 : (_state$domainStates = state.domainStates) === null || _state$domainStates === void 0 ? void 0 : (_state$domainStates$l3 = _state$domainStates.liveChatConfig) === null || _state$domainStates$l3 === void 0 ? void 0 : (_state$domainStates$l4 = _state$domainStates$l3.LiveWSAndLiveChatEngJoin) === null || _state$domainStates$l4 === void 0 ? void 0 : _state$domainStates$l4.msdyn_postconversationsurveymode) ?? _PostChatSurveyMode.PostChatSurveyMode.Embed;
  }
  return (_props$chatConfig3 = props.chatConfig) === null || _props$chatConfig3 === void 0 ? void 0 : (_props$chatConfig3$Li = _props$chatConfig3.LiveWSAndLiveChatEngJoin) === null || _props$chatConfig3$Li === void 0 ? void 0 : _props$chatConfig3$Li.msdyn_postconversationsurveymode;
};

// Set Survey mode based on conversation ended by entity
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const setSurveyMode = async (props, participantType, state, dispatch) => {
  if (participantType === _Constants.ParticipantType.User) {
    postChatSurveyMode = getUserSurveyMode(props, state);
    dispatch({
      type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_SURVEY_MODE,
      payload: postChatSurveyMode
    });
    return;
  }
  if (participantType === _Constants.ParticipantType.Bot) {
    postChatSurveyMode = getBotSurveyMode(props, state);
    dispatch({
      type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_SURVEY_MODE,
      payload: postChatSurveyMode
    });
    return;
  }
};
const renderSurvey = async (state, dispatch) => {
  if (postChatSurveyMode === _PostChatSurveyMode.PostChatSurveyMode.Link) {
    setWidgetStateToInactive(dispatch);
    return;
  }
  if (postChatSurveyMode === _PostChatSurveyMode.PostChatSurveyMode.Embed) {
    await embedModePostChatWorkflow(state, dispatch);
  }
};

// Function for embed mode postchat workflow which is essentially same for both customer and agent
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const embedModePostChatWorkflow = async (state, dispatch) => {
  var _state$domainStates2;
  _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.INFO, {
    Event: _TelemetryConstants.TelemetryEvent.EmbedModePostChatWorkflowStarted
  });
  if (state !== null && state !== void 0 && (_state$domainStates2 = state.domainStates) !== null && _state$domainStates2 !== void 0 && _state$domainStates2.postChatContext) {
    dispatch({
      type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_CONVERSATION_STATE,
      payload: _ConversationState.ConversationState.PostchatLoading
    });
    await (0, _utils.addDelayInMs)(_Constants.Constants.PostChatLoadingDurationInMs);
    dispatch({
      type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_CONVERSATION_STATE,
      payload: _ConversationState.ConversationState.Postchat
    });
  } else {
    const error = `Conversation was Ended but App State was not set correctly: postChatContext = ${state.domainStates.postChatContext}`;
    _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.ERROR, {
      Event: _TelemetryConstants.TelemetryEvent.AppStatesException,
      ExceptionDetails: {
        exception: error
      }
    });
  }
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const initiatePostChat = async (props, conversationDetailsParam, state, dispatch, postchatContext) => {
  var _conversationDetails;
  conversationDetails = conversationDetailsParam;
  const participantType = ((_conversationDetails = conversationDetails) === null || _conversationDetails === void 0 ? void 0 : _conversationDetails.participantType) ?? postchatContext.participantType;
  await setSurveyMode(props, participantType, state, dispatch);
  await renderSurvey(state, dispatch);
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any
exports.initiatePostChat = initiatePostChat;
const isPostChatEnabled = (props, state) => {
  var _props$chatConfig4, _props$chatConfig4$Li, _state$domainStates$l5, _state$domainStates$l6;
  const isPostChatEnabled = ((_props$chatConfig4 = props.chatConfig) === null || _props$chatConfig4 === void 0 ? void 0 : (_props$chatConfig4$Li = _props$chatConfig4.LiveWSAndLiveChatEngJoin) === null || _props$chatConfig4$Li === void 0 ? void 0 : _props$chatConfig4$Li.msdyn_postconversationsurveyenable) ?? ((_state$domainStates$l5 = state.domainStates.liveChatConfig) === null || _state$domainStates$l5 === void 0 ? void 0 : (_state$domainStates$l6 = _state$domainStates$l5.LiveWSAndLiveChatEngJoin) === null || _state$domainStates$l6 === void 0 ? void 0 : _state$domainStates$l6.msdyn_postconversationsurveyenable);
  return isPostChatEnabled === _Constants.Constants.true;
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any
exports.checkPostChatEnabled = isPostChatEnabled;
const getPostChatContext = async (chatSDK, state, dispatch) => {
  try {
    var _state$domainStates3;
    if ((state === null || state === void 0 ? void 0 : (_state$domainStates3 = state.domainStates) === null || _state$domainStates3 === void 0 ? void 0 : _state$domainStates3.postChatContext) === undefined) {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const context = await chatSDK.getPostChatSurveyContext();
      _TelemetryHelper.TelemetryHelper.logSDKEvent(_TelemetryConstants.LogLevel.INFO, {
        Event: _TelemetryConstants.TelemetryEvent.PostChatContextCallSucceed,
        Description: "Postchat context call succeed."
      });
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_POST_CHAT_CONTEXT,
        payload: context
      });
    }
  } catch (error) {
    _TelemetryHelper.TelemetryHelper.logSDKEvent(_TelemetryConstants.LogLevel.INFO, {
      Event: _TelemetryConstants.TelemetryEvent.PostChatContextCallFailed,
      Description: "Failed to get post chat context."
    });
  }
};

// Function for link mode postchat workflow which is essentially same for both customer and agent
// eslint-disable-next-line @typescript-eslint/no-explicit-any
exports.getPostChatContext = getPostChatContext;
const setWidgetStateToInactive = async dispatch => {
  dispatch({
    type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_CONVERSATION_STATE,
    payload: _ConversationState.ConversationState.InActive
  });
};
exports.setWidgetStateToInactive = setWidgetStateToInactive;