"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateSessionDataForTelemetry = void 0;
var _TelemetryConstants = require("../../../common/telemetry/TelemetryConstants");
var _omnichannelChatComponents = require("@microsoft/omnichannel-chat-components");
var _LiveChatWidgetActionType = require("../../../contexts/common/LiveChatWidgetActionType");
var _TelemetryHelper = require("../../../common/telemetry/TelemetryHelper");
var _TelemetryManager = require("../../../common/telemetry/TelemetryManager");
var _utils = require("../../../common/utils");
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const updateSessionDataForTelemetry = async (chatSDK, dispatch) => {
  if (chatSDK) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const chatSession = await chatSDK.getCurrentLiveChatContext();
    const telemetryData = _TelemetryHelper.TelemetryHelper.addSessionDataToTelemetry(chatSession, _TelemetryManager.TelemetryManager.InternalTelemetryData);
    dispatch({
      type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_TELEMETRY_DATA,
      payload: telemetryData
    });
    _omnichannelChatComponents.BroadcastService.postMessage({
      eventName: _TelemetryConstants.BroadcastEvent.UpdateSessionDataForTelemetry,
      payload: {
        chatSession
      }
    });
    await updateConversationDataForTelemetry(chatSDK, dispatch);
  }
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any
exports.updateSessionDataForTelemetry = updateSessionDataForTelemetry;
const updateConversationDataForTelemetry = async (chatSDK, dispatch) => {
  if (chatSDK) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const liveWorkItem = await (0, _utils.getConversationDetailsCall)(chatSDK);
    const telemetryData = _TelemetryHelper.TelemetryHelper.addConversationDataToTelemetry(liveWorkItem, _TelemetryManager.TelemetryManager.InternalTelemetryData);
    dispatch({
      type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_TELEMETRY_DATA,
      payload: telemetryData
    });
    _omnichannelChatComponents.BroadcastService.postMessage({
      eventName: _TelemetryConstants.BroadcastEvent.UpdateConversationDataForTelemetry,
      payload: {
        liveWorkItem
      }
    });
  }
};