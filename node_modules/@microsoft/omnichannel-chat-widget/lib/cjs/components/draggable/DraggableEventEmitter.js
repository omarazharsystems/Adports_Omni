"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _DraggableEventNames = _interopRequireDefault(require("./DraggableEventNames"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * Trigger component which would send IDraggableEvent to the receiver to update the draggable component position
 *
 * @param props IDraggableEventEmitterProps
 * @returns
 */
const DraggableEventEmitter = props => {
  const [initialized, setInitialized] = (0, _react.useState)(false);
  const postMessage = (0, _react.useCallback)(data => {
    const targetWindow = props.targetWindow ?? window;
    targetWindow.postMessage(data, "*");
  }, [props.targetWindow]);
  const dragStart = (0, _react.useCallback)(event => {
    postMessage({
      channel: props.channel,
      eventName: _DraggableEventNames.default.DragStart
    });
    let cursor = {
      x: event.screenX,
      y: event.screenY
    }; // Cursor init position
    const dragging = event => {
      event.preventDefault();
      const newX = event.screenX;
      const newY = event.screenY;
      const offset = {
        x: newX - cursor.x,
        y: newY - cursor.y
      }; // Calculate cursor position diff
      cursor = {
        ...cursor,
        x: newX,
        y: newY
      }; // Update cursor new position

      postMessage({
        channel: props.channel,
        eventName: _DraggableEventNames.default.Dragging,
        offset
      });
    };
    const dragEnd = () => {
      postMessage({
        channel: props.channel,
        eventName: _DraggableEventNames.default.DragEnd
      });
      document.removeEventListener("mousemove", dragging);
      document.removeEventListener("mouseup", dragEnd);
    };
    document.addEventListener("mousemove", dragging);
    document.addEventListener("mouseup", dragEnd);
  }, [props.channel]);
  (0, _react.useEffect)(() => {
    if (!initialized && props.elementId) {
      const element = document.getElementById(props.elementId);
      element === null || element === void 0 ? void 0 : element.addEventListener("mousedown", dragStart);
      setInitialized(true);
    }
  }, [dragStart, props.elementId, initialized]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, " ", props.children, " ");
};
var _default = DraggableEventEmitter;
exports.default = _default;