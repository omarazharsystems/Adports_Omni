"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _DraggableEventReceiver = _interopRequireDefault(require("./DraggableEventReceiver"));
var _DraggableEventNames = _interopRequireDefault(require("./DraggableEventNames"));
var _useChatContextStore = _interopRequireDefault(require("../../hooks/useChatContextStore"));
var _ConversationState = require("../../contexts/common/ConversationState");
var _utils = require("../../common/utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const DraggableChatWidget = props => {
  const [state] = (0, _useChatContextStore.default)();
  const [initialPosition, setInitialPosition] = (0, _react.useState)({
    offsetLeft: 0,
    offsetTop: 0
  });
  const [cachedPosition, setCachedPosition] = (0, _react.useState)(undefined);
  const [position, setPosition] = (0, _react.useState)({
    offsetLeft: 0,
    offsetTop: 0
  });
  const [delta, setDelta] = (0, _react.useState)({
    left: 0,
    top: 0
  });
  const repositionElement = (draggableElement, offsetLeft, offsetTop) => {
    draggableElement.style.left = `${offsetLeft}px`;
    draggableElement.style.top = `${offsetTop}px`;
  };
  const calculateOffsetsWithinViewport = (0, _react.useCallback)((id, offset, delta) => {
    const draggableElement = document.getElementById(id);
    const positionRelativeToViewport = draggableElement.getBoundingClientRect();
    if ((0, _utils.isNullOrUndefined)(draggableElement) || (0, _utils.isNullOrUndefined)(positionRelativeToViewport) || (0, _utils.isNullOrUndefined)(offset.offsetLeft) || (0, _utils.isNullOrUndefined)(offset.offsetTop)) {
      return;
    }
    let offsetLeft = offset.offsetLeft;
    let offsetTop = offset.offsetTop;

    // Widget size larger than viewport would not have any restriction
    if (positionRelativeToViewport.width > window.innerWidth) {
      return;
    }
    if (positionRelativeToViewport.height > window.innerHeight) {
      return;
    }

    // Ensures widget is within viewport
    if (positionRelativeToViewport.x < 0) {
      offsetLeft = 0 - delta.left;
    }
    if (positionRelativeToViewport.y < 0) {
      offsetTop = 0 - delta.top;
    }
    if (positionRelativeToViewport.x + positionRelativeToViewport.width > window.innerWidth) {
      offsetLeft = window.innerWidth - positionRelativeToViewport.width - delta.left;
    }
    if (positionRelativeToViewport.y + positionRelativeToViewport.height > window.innerHeight) {
      offsetTop = window.innerHeight - positionRelativeToViewport.height - delta.top;
    }
    repositionElement(draggableElement, offsetLeft, offsetTop);
    setPosition({
      offsetLeft,
      offsetTop
    });
  }, []);
  const resetPosition = (0, _react.useCallback)(targetPosition => {
    calculateOffsetsWithinViewport(props.elementId, targetPosition, delta); // Ensure viewport restriction
  }, [delta]);
  (0, _react.useEffect)(() => {
    if (props.disabled === true) {
      return;
    }
    const cacheInitialPosition = () => {
      const draggableElement = document.getElementById(props.elementId);
      const offsetLeft = draggableElement.offsetLeft;
      const offsetTop = draggableElement.offsetTop;
      setInitialPosition({
        offsetLeft,
        offsetTop
      });
    };
    const calculateOffsets = () => {
      const draggableElement = document.getElementById(props.elementId);
      const offsetLeft = draggableElement.offsetLeft;
      const offsetTop = draggableElement.offsetTop;

      // Calculates the delta between the position of the widget and the position of the widget relative to the viewport which will be used for repositioning
      const positionRelativeToViewport = draggableElement.getBoundingClientRect();
      const left = positionRelativeToViewport.left - offsetLeft;
      const top = positionRelativeToViewport.top - offsetTop;
      setDelta({
        left,
        top
      });
      calculateOffsetsWithinViewport(props.elementId, {
        offsetLeft,
        offsetTop
      }, {
        left,
        top
      });
    };
    calculateOffsets();
    cacheInitialPosition();
    window.addEventListener("resize", calculateOffsets);
    return () => {
      window.removeEventListener("resize", calculateOffsets);
    };
  }, [props.disabled]);
  (0, _react.useEffect)(() => {
    if (props.disabled === true) {
      return;
    }
    if (state.appStates.conversationState == _ConversationState.ConversationState.Closed) {
      resetPosition(initialPosition);
    } else if (state.appStates.isMinimized) {
      const draggableElement = document.getElementById(props.elementId);
      const offsetLeft = draggableElement.offsetLeft;
      const offsetTop = draggableElement.offsetTop;
      if (!cachedPosition) {
        setCachedPosition({
          offsetLeft,
          offsetTop
        });
      }
      resetPosition(initialPosition);
    } else if (!(0, _utils.isNullOrUndefined)(state.appStates.isMinimized) && !state.appStates.isMinimized) {
      if (cachedPosition) {
        resetPosition(cachedPosition);
        setCachedPosition(undefined);
      }
    }
  }, [props.disabled, state.appStates.isMinimized, state.appStates.conversationState, initialPosition, cachedPosition]);
  const onEvent = (0, _react.useCallback)(event => {
    if (event.eventName === _DraggableEventNames.default.Dragging) {
      if (event.offset) {
        const offsetLeft = position.offsetLeft + event.offset.x;
        const offsetTop = position.offsetTop + event.offset.y;

        // Update position via DOM manipulation to prevent <Stack/> continuously rendering on style change causing high CPU spike
        const draggableElement = document.getElementById(props.elementId);
        repositionElement(draggableElement, offsetLeft, offsetTop);
        setPosition({
          offsetLeft,
          offsetTop
        });
        calculateOffsetsWithinViewport(props.elementId, {
          offsetLeft,
          offsetTop
        }, delta);
      }
    }
  }, [position, delta]);
  if (props.disabled === true) {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, props.children);
  }
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_DraggableEventReceiver.default, {
    channel: props.channel ?? "lcw",
    onEvent: onEvent
  }, props.children));
};
var _default = DraggableChatWidget;
exports.default = _default;