"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PreChatSurveyPaneStateful = void 0;
var _Constants = require("../../common/Constants");
var _TelemetryConstants = require("../../common/telemetry/TelemetryConstants");
var _react = _interopRequireWildcard(require("react"));
var _utils = require("../../common/utils");
var _markdownIt = _interopRequireDefault(require("markdown-it"));
var _ConversationState = require("../../contexts/common/ConversationState");
var _LiveChatWidgetActionType = require("../../contexts/common/LiveChatWidgetActionType");
var _omnichannelChatComponents = require("@microsoft/omnichannel-chat-components");
var _TelemetryHelper = require("../../common/telemetry/TelemetryHelper");
var _defaultGeneralPreChatSurveyPaneStyleProps = require("./common/defaultStyles/defaultGeneralPreChatSurveyPaneStyleProps");
var _defaultPreChatSurveyLocalizedTexts = require("./common/defaultProps/defaultPreChatSurveyLocalizedTexts");
var _useChatContextStore = _interopRequireDefault(require("../../hooks/useChatContextStore"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const PreChatSurveyPaneStateful = props => {
  var _surveyProps$stylePro, _props$surveyProps, _props$surveyProps$co;
  // Set MarkDown global variable to be used for prechat adaptive cards
  window["markdownit"] = _markdownIt.default;
  const [state, dispatch] = (0, _useChatContextStore.default)();
  const {
    surveyProps,
    initStartChat
  } = props;
  const generalStyleProps = Object.assign({}, _defaultGeneralPreChatSurveyPaneStyleProps.defaultGeneralPreChatSurveyPaneStyleProps, surveyProps === null || surveyProps === void 0 ? void 0 : (_surveyProps$stylePro = surveyProps.styleProps) === null || _surveyProps$stylePro === void 0 ? void 0 : _surveyProps$stylePro.generalStyleProps, {
    display: state.appStates.isMinimized ? "none" : ""
  });

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const setPreChatResponseEmail = preChatResponse => {
    if (preChatResponse) {
      for (let index = 0; index < preChatResponse.length; index++) {
        if (new RegExp(_Constants.Regex.EmailRegex).test(preChatResponse[index].value)) {
          dispatch({
            type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_PRECHAT_RESPONSE_EMAIL,
            payload: preChatResponse[index].value
          });
        }
      }
    }
  };
  const getAdaptiveCardPayload = (payload, requiredFieldMissingMessage) => {
    try {
      return (0, _utils.parseAdaptiveCardPayload)(payload, requiredFieldMissingMessage);
    } catch (ex) {
      _TelemetryHelper.TelemetryHelper.logConfigDataEvent(_TelemetryConstants.LogLevel.ERROR, {
        Event: _TelemetryConstants.TelemetryEvent.ParseAdaptiveCardFailed,
        Description: "Adaptive Card JSON Parse Failed.",
        ExceptionDetails: {
          exception: ex
        }
      });
    }
  };
  const requiredFieldMissingMessage = ((_props$surveyProps = props.surveyProps) === null || _props$surveyProps === void 0 ? void 0 : (_props$surveyProps$co = _props$surveyProps.controlProps) === null || _props$surveyProps$co === void 0 ? void 0 : _props$surveyProps$co.requiredFieldMissingMessage) ?? _defaultPreChatSurveyLocalizedTexts.defaultPreChatSurveyLocalizedTexts.PRECHAT_REQUIRED_FIELD_MISSING_MESSAGE;
  const controlProps = {
    id: "oc-lcw-prechatsurvey-pane",
    dir: state.domainStates.globalDir,
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    payload: getAdaptiveCardPayload(state.domainStates.preChatSurveyResponse, requiredFieldMissingMessage),
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    onSubmit: async values => {
      _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.INFO, {
        Event: _TelemetryConstants.TelemetryEvent.PrechatSubmitted
      });
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_CONVERSATION_STATE,
        payload: _ConversationState.ConversationState.Loading
      });
      try {
        var _state$domainStates, _state$domainStates$t, _state$domainStates$t2, _persistedState$domai, _persistedState$appSt, _state$appStates;
        const widgetInstanceId = (0, _utils.getWidgetCacheId)(((_state$domainStates = state.domainStates) === null || _state$domainStates === void 0 ? void 0 : (_state$domainStates$t = _state$domainStates.telemetryInternalData) === null || _state$domainStates$t === void 0 ? void 0 : _state$domainStates$t.orgId) ?? "", ((_state$domainStates$t2 = state.domainStates.telemetryInternalData) === null || _state$domainStates$t2 === void 0 ? void 0 : _state$domainStates$t2.widgetId) ?? "", state.domainStates.widgetInstanceId ?? "");
        const persistedState = (0, _utils.getStateFromCache)(widgetInstanceId);
        let optionalParams = {};

        //Connect to Active chats and chat is not popout
        if (persistedState && !(0, _utils.isUndefinedOrEmpty)(persistedState === null || persistedState === void 0 ? void 0 : (_persistedState$domai = persistedState.domainStates) === null || _persistedState$domai === void 0 ? void 0 : _persistedState$domai.liveChatContext) && (persistedState === null || persistedState === void 0 ? void 0 : (_persistedState$appSt = persistedState.appStates) === null || _persistedState$appSt === void 0 ? void 0 : _persistedState$appSt.conversationState) === _ConversationState.ConversationState.Active && (state === null || state === void 0 ? void 0 : (_state$appStates = state.appStates) === null || _state$appStates === void 0 ? void 0 : _state$appStates.hideStartChatButton) === false) {
          var _persistedState$domai2;
          optionalParams = {
            liveChatContext: persistedState === null || persistedState === void 0 ? void 0 : (_persistedState$domai2 = persistedState.domainStates) === null || _persistedState$domai2 === void 0 ? void 0 : _persistedState$domai2.liveChatContext
          };
          await initStartChat(optionalParams, persistedState);
        } else {
          const prechatResponseValues = (0, _utils.extractPreChatSurveyResponseValues)(state.domainStates.preChatSurveyResponse, values);
          optionalParams = {
            preChatResponse: prechatResponseValues
          };
          setPreChatResponseEmail(values);
          await initStartChat(optionalParams);
        }
      } catch (ex) {
        _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.ERROR, {
          Event: _TelemetryConstants.TelemetryEvent.PreChatSurveyStartChatMethodFailed,
          Description: "PreChat survey start chat failed.",
          ExceptionDetails: {
            exception: `PreChat survey start chat failed: ${ex}`
          }
        });
      }
    },
    ...(surveyProps === null || surveyProps === void 0 ? void 0 : surveyProps.controlProps)
  };
  const styleProps = {
    ...(surveyProps === null || surveyProps === void 0 ? void 0 : surveyProps.styleProps),
    generalStyleProps: generalStyleProps
  };
  (0, _react.useEffect)(() => {
    // Set Aria-Label Attribute for Inputs
    const adaptiveCardElements = document.getElementsByClassName(_Constants.HtmlAttributeNames.adaptiveCardClassName);
    if (adaptiveCardElements && adaptiveCardElements.length > 0) {
      const children = adaptiveCardElements[0].children;
      let value = "";
      for (let index = 0; index < children.length; index++) {
        const current = children[index];
        if (current && current.className == _Constants.HtmlAttributeNames.adaptiveCardTextBlockClassName) {
          value = current.innerHTML;
          if (current.childElementCount > 0) {
            const paragraph = current.children[0];
            if (paragraph.tagName.toLowerCase() == _Constants.HtmlAttributeNames.pTagName) {
              value = paragraph.innerHTML;
            }
          }
        }
        if (current && current.tagName.toLowerCase() == _Constants.HtmlAttributeNames.div && current.childElementCount > 0) {
          const input = current.children[0].children;
          if ((input === null || input === void 0 ? void 0 : input.length) > 0 && input[0].className != _Constants.HtmlAttributeNames.adaptiveCardToggleInputClassName && input[0].className != _Constants.HtmlAttributeNames.adaptiveCardActionSetClassName) {
            input[0].setAttribute(_Constants.HtmlAttributeNames.ariaLabel, value);
          }
        }
      }
    }
    // Move focus to the first button
    const firstElement = (0, _utils.findAllFocusableElement)(`#${controlProps.id}`);
    if (firstElement && firstElement[0]) {
      firstElement[0].focus();
    }
    _TelemetryHelper.TelemetryHelper.logLoadingEvent(_TelemetryConstants.LogLevel.INFO, {
      Event: _TelemetryConstants.TelemetryEvent.PrechatSurveyLoaded
    });
  }, []);
  return /*#__PURE__*/_react.default.createElement(_omnichannelChatComponents.PreChatSurveyPane, {
    controlProps: controlProps,
    styleProps: styleProps
  });
};
exports.PreChatSurveyPaneStateful = PreChatSurveyPaneStateful;
var _default = PreChatSurveyPaneStateful;
exports.default = _default;