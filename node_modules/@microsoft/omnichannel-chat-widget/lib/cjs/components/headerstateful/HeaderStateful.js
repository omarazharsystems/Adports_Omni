"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.HeaderStateful = void 0;
var _TelemetryConstants = require("../../common/telemetry/TelemetryConstants");
var _react = _interopRequireWildcard(require("react"));
var _ConversationState = require("../../contexts/common/ConversationState");
var _omnichannelChatComponents = require("@microsoft/omnichannel-chat-components");
var _LiveChatWidgetActionType = require("../../contexts/common/LiveChatWidgetActionType");
var _TelemetryHelper = require("../../common/telemetry/TelemetryHelper");
var _defaultOutOfOfficeHeaderStyleProps = require("./common/styleProps/defaultOutOfOfficeHeaderStyleProps");
var _useChatAdapterStore = _interopRequireDefault(require("../../hooks/useChatAdapterStore"));
var _useChatContextStore = _interopRequireDefault(require("../../hooks/useChatContextStore"));
var _Constants = require("../../common/Constants");
var _DraggableEventEmitter = _interopRequireDefault(require("../draggable/DraggableEventEmitter"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const HeaderStateful = props => {
  var _state$domainStates$l, _state$domainStates$l2, _state$domainStates, _headerProps$controlP, _headerProps$controlP2, _headerProps$controlP3, _outOfOfficeHeaderPro, _state$domainStates3;
  const [state, dispatch] = (0, _useChatContextStore.default)();
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const [adapter] = (0, _useChatAdapterStore.default)();
  const {
    headerProps,
    outOfOfficeHeaderProps,
    endChat
  } = props;
  //Setting OutOfOperatingHours Flag
  const [outOfOperatingHours, setOutOfOperatingHours] = (0, _react.useState)(((_state$domainStates$l = state.domainStates.liveChatConfig) === null || _state$domainStates$l === void 0 ? void 0 : (_state$domainStates$l2 = _state$domainStates$l.LiveWSAndLiveChatEngJoin) === null || _state$domainStates$l2 === void 0 ? void 0 : _state$domainStates$l2.OutOfOperatingHours) === "True");
  const outOfOfficeStyleProps = Object.assign({}, _defaultOutOfOfficeHeaderStyleProps.defaultOutOfOfficeHeaderStyleProps, outOfOfficeHeaderProps === null || outOfOfficeHeaderProps === void 0 ? void 0 : outOfOfficeHeaderProps.styleProps);

  // For some reason state object is not getting updated values in this component
  const localConfirmationPaneState = (0, _react.useRef)(state === null || state === void 0 ? void 0 : (_state$domainStates = state.domainStates) === null || _state$domainStates === void 0 ? void 0 : _state$domainStates.confirmationState);
  const controlProps = {
    id: "oc-lcw-header",
    dir: state.domainStates.globalDir,
    onMinimizeClick: () => {
      _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.INFO, {
        Event: _TelemetryConstants.TelemetryEvent.HeaderMinimizeButtonClicked,
        Description: "Header Minimize button clicked."
      });
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_MINIMIZED,
        payload: true
      });
    },
    onCloseClick: async () => {
      var _props$headerProps, _props$headerProps$co, _props$headerProps$co2;
      _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.INFO, {
        Event: _TelemetryConstants.TelemetryEvent.HeaderCloseButtonClicked,
        Description: "Header Close button clicked."
      });
      if (localConfirmationPaneState.current !== _Constants.ConfirmationState.Ok) {
        dispatch({
          type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_SHOW_CONFIRMATION,
          payload: true
        });
      } else {
        const skipEndChatSDK = true;
        const skipCloseChat = false;
        const postMessageToOtherTabs = true;
        await endChat(adapter, skipEndChatSDK, skipCloseChat, postMessageToOtherTabs);
      }
      const closeButtonId = ((_props$headerProps = props.headerProps) === null || _props$headerProps === void 0 ? void 0 : (_props$headerProps$co = _props$headerProps.controlProps) === null || _props$headerProps$co === void 0 ? void 0 : (_props$headerProps$co2 = _props$headerProps$co.closeButtonProps) === null || _props$headerProps$co2 === void 0 ? void 0 : _props$headerProps$co2.id) ?? `${controlProps.id}-close-button`;
      if (closeButtonId) {
        dispatch({
          type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_PREVIOUS_FOCUSED_ELEMENT_ID,
          payload: closeButtonId
        });
      }
    },
    ...(headerProps === null || headerProps === void 0 ? void 0 : headerProps.controlProps),
    hideTitle: state.appStates.conversationState === _ConversationState.ConversationState.Loading && !state.appStates.startChatFailed || state.appStates.conversationState === _ConversationState.ConversationState.PostchatLoading || (headerProps === null || headerProps === void 0 ? void 0 : (_headerProps$controlP = headerProps.controlProps) === null || _headerProps$controlP === void 0 ? void 0 : _headerProps$controlP.hideTitle),
    hideIcon: state.appStates.conversationState === _ConversationState.ConversationState.Loading && !state.appStates.startChatFailed || state.appStates.conversationState === _ConversationState.ConversationState.PostchatLoading || (headerProps === null || headerProps === void 0 ? void 0 : (_headerProps$controlP2 = headerProps.controlProps) === null || _headerProps$controlP2 === void 0 ? void 0 : _headerProps$controlP2.hideIcon),
    hideCloseButton: state.appStates.conversationState === _ConversationState.ConversationState.Loading && !state.appStates.startChatFailed || state.appStates.conversationState === _ConversationState.ConversationState.PostchatLoading || state.appStates.conversationState === _ConversationState.ConversationState.Prechat || state.appStates.conversationState === _ConversationState.ConversationState.ReconnectChat || (headerProps === null || headerProps === void 0 ? void 0 : (_headerProps$controlP3 = headerProps.controlProps) === null || _headerProps$controlP3 === void 0 ? void 0 : _headerProps$controlP3.hideCloseButton)
  };
  const outOfOfficeControlProps = {
    id: "oc-lcw-header",
    dir: state.domainStates.globalDir,
    headerTitleProps: {
      text: "We're Offline"
    },
    onMinimizeClick: () => {
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_MINIMIZED,
        payload: true
      });
    },
    ...(outOfOfficeHeaderProps === null || outOfOfficeHeaderProps === void 0 ? void 0 : outOfOfficeHeaderProps.controlProps),
    hideCloseButton: state.appStates.conversationState === _ConversationState.ConversationState.OutOfOffice || (outOfOfficeHeaderProps === null || outOfOfficeHeaderProps === void 0 ? void 0 : (_outOfOfficeHeaderPro = outOfOfficeHeaderProps.controlProps) === null || _outOfOfficeHeaderPro === void 0 ? void 0 : _outOfOfficeHeaderPro.hideCloseButton)
  };
  (0, _react.useEffect)(() => {
    if (state.appStates.outsideOperatingHours) {
      setOutOfOperatingHours(true);
    }
  }, []);
  (0, _react.useEffect)(() => {
    var _state$domainStates2;
    localConfirmationPaneState.current = state === null || state === void 0 ? void 0 : (_state$domainStates2 = state.domainStates) === null || _state$domainStates2 === void 0 ? void 0 : _state$domainStates2.confirmationState;
  }, [state === null || state === void 0 ? void 0 : (_state$domainStates3 = state.domainStates) === null || _state$domainStates3 === void 0 ? void 0 : _state$domainStates3.confirmationState]);
  const draggableEventEmitterProps = {
    channel: props.draggableEventChannel ?? "lcw",
    elementId: outOfOperatingHours || state.appStates.conversationState === _ConversationState.ConversationState.OutOfOffice ? outOfOfficeControlProps.id : controlProps.id,
    targetWindow: props.draggableEventEmitterTargetWindow ?? window
  };
  if (props.draggable === true) {
    var _generalStyleProps;
    const styleProps = outOfOperatingHours || state.appStates.conversationState === _ConversationState.ConversationState.OutOfOffice ? outOfOfficeStyleProps : headerProps === null || headerProps === void 0 ? void 0 : headerProps.styleProps;
    const draggableSelectors = {
      "&:hover": {
        cursor: "move"
      }
    };
    const selectors = Object.assign({}, (styleProps === null || styleProps === void 0 ? void 0 : (_generalStyleProps = styleProps.generalStyleProps) === null || _generalStyleProps === void 0 ? void 0 : _generalStyleProps.selectors) || {}, draggableSelectors); // eslint-disable-line @typescript-eslint/no-explicit-any
    const generalStyleProps = Object.assign({}, styleProps === null || styleProps === void 0 ? void 0 : styleProps.generalStyleProps, {
      selectors
    });
    const draggableStyleProps = Object.assign({}, styleProps, {
      generalStyleProps
    });
    return /*#__PURE__*/_react.default.createElement(_DraggableEventEmitter.default, draggableEventEmitterProps, /*#__PURE__*/_react.default.createElement(_omnichannelChatComponents.Header, {
      componentOverrides: headerProps === null || headerProps === void 0 ? void 0 : headerProps.componentOverrides,
      controlProps: outOfOperatingHours || state.appStates.conversationState === _ConversationState.ConversationState.OutOfOffice ? outOfOfficeControlProps : controlProps,
      styleProps: draggableStyleProps
    }));
  }
  return /*#__PURE__*/_react.default.createElement(_omnichannelChatComponents.Header, {
    componentOverrides: headerProps === null || headerProps === void 0 ? void 0 : headerProps.componentOverrides,
    controlProps: outOfOperatingHours || state.appStates.conversationState === _ConversationState.ConversationState.OutOfOffice ? outOfOfficeControlProps : controlProps,
    styleProps: outOfOperatingHours || state.appStates.conversationState === _ConversationState.ConversationState.OutOfOffice ? outOfOfficeStyleProps : headerProps === null || headerProps === void 0 ? void 0 : headerProps.styleProps
  });
};
exports.HeaderStateful = HeaderStateful;
var _default = HeaderStateful;
exports.default = _default;