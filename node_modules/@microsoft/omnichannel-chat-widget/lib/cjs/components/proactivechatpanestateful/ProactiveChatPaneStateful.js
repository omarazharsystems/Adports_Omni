"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ProactiveChatPaneStateful = void 0;
var _TelemetryConstants = require("../../common/telemetry/TelemetryConstants");
var _react = _interopRequireWildcard(require("react"));
var _utils = require("../../common/utils");
var _omnichannelChatComponents = require("@microsoft/omnichannel-chat-components");
var _Constants = require("../../common/Constants");
var _ConversationState = require("../../contexts/common/ConversationState");
var _LiveChatWidgetActionType = require("../../contexts/common/LiveChatWidgetActionType");
var _TelemetryHelper = require("../../common/telemetry/TelemetryHelper");
var _TelemetryManager = require("../../common/telemetry/TelemetryManager");
var _useChatContextStore = _interopRequireDefault(require("../../hooks/useChatContextStore"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const ProactiveChatPaneStateful = props => {
  var _proactiveChatProps$c;
  const [state, dispatch] = (0, _useChatContextStore.default)();
  const {
    proactiveChatProps,
    startChat
  } = props;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const [timeoutRemoved, setTimeoutRemoved] = (0, _react.useState)(false);
  const handleProactiveChatInviteTimeout = () => {
    if (!timeoutRemoved) {
      setTimeoutRemoved(true);
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_PROACTIVE_CHAT_PARAMS,
        payload: {
          proactiveChatBodyTitle: "",
          proactiveChatEnablePrechat: false,
          proactiveChatInNewWindow: false
        }
      });
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_CONVERSATION_STATE,
        payload: _ConversationState.ConversationState.Closed
      });
      _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.INFO, {
        Event: _TelemetryConstants.TelemetryEvent.ProactiveChatRejected,
        ElapsedTimeInMilliseconds: _TelemetryManager.TelemetryTimers.LcwLoadToChatButtonTimer.milliSecondsElapsed,
        Description: "Proactive chat invitation timed out."
      });
    }
  };
  const controlProps = {
    id: "oc-lcw-proactivechat",
    dir: state.domainStates.globalDir,
    onStart: async () => {
      var _state$domainStates$l, _state$domainStates$l2;
      setTimeoutRemoved(true);
      _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.INFO, {
        Event: _TelemetryConstants.TelemetryEvent.ProactiveChatAccepted,
        Description: "Proactive chat accepted."
      });
      if (state.appStates.proactiveChatStates.proactiveChatInNewWindow) {
        var _state$appStates, _state$appStates$proa;
        // TODO: BroadcastService: replace with the sdk broadcast service, when in place
        const startPopoutChatEvent = {
          eventName: _TelemetryConstants.BroadcastEvent.ProactiveChatStartPopoutChat,
          payload: {
            enablePrechat: (state === null || state === void 0 ? void 0 : (_state$appStates = state.appStates) === null || _state$appStates === void 0 ? void 0 : (_state$appStates$proa = _state$appStates.proactiveChatStates) === null || _state$appStates$proa === void 0 ? void 0 : _state$appStates$proa.proactiveChatEnablePrechat) === true
          }
        };
        _omnichannelChatComponents.BroadcastService.postMessage(startPopoutChatEvent);
        dispatch({
          type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_CONVERSATION_STATE,
          payload: _ConversationState.ConversationState.Closed
        });
      } else if (((_state$domainStates$l = state.domainStates.liveChatConfig) === null || _state$domainStates$l === void 0 ? void 0 : (_state$domainStates$l2 = _state$domainStates$l.LiveWSAndLiveChatEngJoin) === null || _state$domainStates$l2 === void 0 ? void 0 : _state$domainStates$l2.OutOfOperatingHours) === "True") {
        dispatch({
          type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_OUTSIDE_OPERATING_HOURS,
          payload: true
        });
        dispatch({
          type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_CONVERSATION_STATE,
          payload: _ConversationState.ConversationState.OutOfOffice
        });
      } else {
        const proactiveChatStarted = {
          eventName: _TelemetryConstants.BroadcastEvent.ProactiveChatStartChat
        };
        _omnichannelChatComponents.BroadcastService.postMessage(proactiveChatStarted);
        await startChat();
      }
    },
    onClose: () => {
      setTimeoutRemoved(true);
      _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.INFO, {
        Event: _TelemetryConstants.TelemetryEvent.ProactiveChatClosed,
        Description: "Proactive chat closed."
      });
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_PROACTIVE_CHAT_PARAMS,
        payload: {
          proactiveChatBodyTitle: "",
          proactiveChatEnablePrechat: false,
          proactiveChatInNewWindow: false
        }
      });
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_CONVERSATION_STATE,
        payload: _ConversationState.ConversationState.Closed
      });
    },
    ...(proactiveChatProps === null || proactiveChatProps === void 0 ? void 0 : proactiveChatProps.controlProps),
    bodyTitleText: state.appStates.proactiveChatStates.proactiveChatBodyTitle ? state.appStates.proactiveChatStates.proactiveChatBodyTitle : proactiveChatProps === null || proactiveChatProps === void 0 ? void 0 : (_proactiveChatProps$c = proactiveChatProps.controlProps) === null || _proactiveChatProps$c === void 0 ? void 0 : _proactiveChatProps$c.bodyTitleText
  };
  (0, _react.useEffect)(() => {
    (0, _utils.setFocusOnElement)(document.getElementById(controlProps.id + "-startbutton"));
    _TelemetryManager.TelemetryTimers.ProactiveChatScreenTimer = (0, _utils.createTimer)();
    const timeoutEvent = setTimeout(() => {
      handleProactiveChatInviteTimeout();
    }, (proactiveChatProps === null || proactiveChatProps === void 0 ? void 0 : proactiveChatProps.ProactiveChatInviteTimeoutInMs) ?? _Constants.Constants.ProactiveChatInviteTimeoutInMs);
    _TelemetryHelper.TelemetryHelper.logLoadingEvent(_TelemetryConstants.LogLevel.INFO, {
      Event: _TelemetryConstants.TelemetryEvent.ProactiveChatPaneLoaded
    });
    return () => {
      clearTimeout(timeoutEvent);
    };
  }, []);
  return /*#__PURE__*/_react.default.createElement(_omnichannelChatComponents.ProactiveChatPane, {
    componentOverrides: proactiveChatProps === null || proactiveChatProps === void 0 ? void 0 : proactiveChatProps.componentOverrides,
    controlProps: controlProps,
    styleProps: proactiveChatProps === null || proactiveChatProps === void 0 ? void 0 : proactiveChatProps.styleProps
  });
};
exports.ProactiveChatPaneStateful = ProactiveChatPaneStateful;
var _default = ProactiveChatPaneStateful;
exports.default = _default;