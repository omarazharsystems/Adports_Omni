"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ReconnectChatPaneStateful = void 0;
var _TelemetryConstants = require("../../common/telemetry/TelemetryConstants");
var _react = _interopRequireWildcard(require("react"));
var _ConversationState = require("../../contexts/common/ConversationState");
var _LiveChatWidgetActionType = require("../../contexts/common/LiveChatWidgetActionType");
var _omnichannelChatComponents = require("@microsoft/omnichannel-chat-components");
var _TelemetryHelper = require("../../common/telemetry/TelemetryHelper");
var _utils = require("../../common/utils");
var _useChatContextStore = _interopRequireDefault(require("../../hooks/useChatContextStore"));
var _useChatSDKStore = _interopRequireDefault(require("../../hooks/useChatSDKStore"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const ReconnectChatPaneStateful = props => {
  const [state, dispatch] = (0, _useChatContextStore.default)();
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const chatSDK = (0, _useChatSDKStore.default)();
  const {
    reconnectChatProps,
    initStartChat
  } = props;
  const startChat = async continueChat => {
    dispatch({
      type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_CONVERSATION_STATE,
      payload: _ConversationState.ConversationState.Loading
    });
    if (continueChat && state.appStates.reconnectId) {
      const optionalParams = {
        reconnectId: state.appStates.reconnectId
      };
      await initStartChat(optionalParams);
    } else {
      var _state$domainStates;
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_RECONNECT_ID,
        payload: undefined
      });
      if (state !== null && state !== void 0 && (_state$domainStates = state.domainStates) !== null && _state$domainStates !== void 0 && _state$domainStates.initialChatSdkRequestId) {
        var _state$domainStates2;
        chatSDK.requestId = state === null || state === void 0 ? void 0 : (_state$domainStates2 = state.domainStates) === null || _state$domainStates2 === void 0 ? void 0 : _state$domainStates2.initialChatSdkRequestId;
      }
      const parseToJson = false;
      const preChatSurveyResponse = await chatSDK.getPreChatSurvey(parseToJson);
      if (preChatSurveyResponse) {
        dispatch({
          type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_PRE_CHAT_SURVEY_RESPONSE,
          payload: preChatSurveyResponse
        });
        dispatch({
          type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_CONVERSATION_STATE,
          payload: _ConversationState.ConversationState.Prechat
        });
      } else {
        dispatch({
          type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_CONVERSATION_STATE,
          payload: _ConversationState.ConversationState.Loading
        });
        await initStartChat();
      }
    }
  };
  const controlProps = {
    id: "lcw-components-reconnect-chat-pane",
    dir: state.domainStates.globalDir,
    onContinueChat: () => {
      _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.INFO, {
        Event: _TelemetryConstants.TelemetryEvent.ReconnectChatContinueConversation,
        Description: "Reconnect chat continue conversation button clicked."
      });
      startChat(true);
    },
    onStartNewChat: () => {
      _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.INFO, {
        Event: _TelemetryConstants.TelemetryEvent.ReconnectChatStartNewConversation,
        Description: "Reconnect chat start new conversation button clicked."
      });
      startChat(false);
    },
    onMinimize: () => {
      _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.INFO, {
        Event: _TelemetryConstants.TelemetryEvent.ReconnectChatMinimize,
        Description: "Reconnect chat minimized."
      });
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_MINIMIZED,
        payload: true
      });
    },
    ...(reconnectChatProps === null || reconnectChatProps === void 0 ? void 0 : reconnectChatProps.controlProps)
  };
  (0, _react.useEffect)(() => {
    (0, _utils.setFocusOnElement)(document.getElementById(controlProps.id));
    _TelemetryHelper.TelemetryHelper.logLoadingEvent(_TelemetryConstants.LogLevel.INFO, {
      Event: _TelemetryConstants.TelemetryEvent.ReconnectChatPaneLoaded
    });
  }, []);
  return /*#__PURE__*/_react.default.createElement(_omnichannelChatComponents.ReconnectChatPane, {
    componentOverrides: reconnectChatProps === null || reconnectChatProps === void 0 ? void 0 : reconnectChatProps.componentOverrides,
    controlProps: controlProps,
    styleProps: reconnectChatProps === null || reconnectChatProps === void 0 ? void 0 : reconnectChatProps.styleProps
  });
};
exports.ReconnectChatPaneStateful = ReconnectChatPaneStateful;
var _default = ReconnectChatPaneStateful;
exports.default = _default;