"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.CallingContainerStateful = void 0;
var _TelemetryConstants = require("../../common/telemetry/TelemetryConstants");
var _react = _interopRequireWildcard(require("react"));
var _omnichannelChatComponents = require("@microsoft/omnichannel-chat-components");
var _LiveChatWidgetActionType = require("../../contexts/common/LiveChatWidgetActionType");
var _TelemetryHelper = require("../../common/telemetry/TelemetryHelper");
var _useChatContextStore = _interopRequireDefault(require("../../hooks/useChatContextStore"));
var _useChatSDKStore = _interopRequireDefault(require("../../hooks/useChatSDKStore"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const CallingContainerStateful = props => {
  var _props$controlProps, _props$controlProps2, _props$controlProps2$, _props$controlProps3, _props$controlProps3$, _props$controlProps3$2, _props$controlProps4, _props$controlProps4$, _props$controlProps4$2, _props$controlProps5;
  //TODO : Close button confirmation implmentation is pending

  const [state, dispatch] = (0, _useChatContextStore.default)();
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const chatSDK = (0, _useChatSDKStore.default)();

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const {
    voiceVideoCallingSdk
  } = props;
  let callId;
  const resetCallingStates = reset => {
    if (reset) {
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SHOW_CALLING_CONTAINER,
        payload: false
      });
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_INCOMING_CALL,
        payload: true
      });
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.DISABLE_VIDEO_CALL,
        payload: true
      });
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.DISABLE_LOCAL_VIDEO,
        payload: true
      });
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.DISABLE_REMOTE_VIDEO,
        payload: true
      });
    }
  };
  (0, _react.useEffect)(() => {
    const init = async () => {
      try {
        var _controlProps$current, _controlProps$current2, _controlProps$current3, _controlProps$current4;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        _TelemetryHelper.TelemetryHelper.callId = callId;
        await voiceVideoCallingSdk.initialize({
          chatToken: state.domainStates.chatToken,
          selfVideoHTMLElementId: (_controlProps$current = controlProps.currentCallControlProps) === null || _controlProps$current === void 0 ? void 0 : (_controlProps$current2 = _controlProps$current.nonActionIds) === null || _controlProps$current2 === void 0 ? void 0 : _controlProps$current2.selfVideoTileId,
          // HTML element id where video stream of the agent will be rendered
          remoteVideoHTMLElementId: (_controlProps$current3 = controlProps.currentCallControlProps) === null || _controlProps$current3 === void 0 ? void 0 : (_controlProps$current4 = _controlProps$current3.nonActionIds) === null || _controlProps$current4 === void 0 ? void 0 : _controlProps$current4.remoteVideoTileId,
          // HTML element id where video stream of the customer will be rendered
          OCClient: chatSDK === null || chatSDK === void 0 ? void 0 : chatSDK.OCClient
        });
      } catch (e) {
        _TelemetryHelper.TelemetryHelper.logCallingEvent(_TelemetryConstants.LogLevel.ERROR, {
          Event: _TelemetryConstants.TelemetryEvent.VoiceVideoSdkInitializeException,
          Description: `Failed to initialize VideoVoiceCalling Sdk:  ${e}`
        });
      }
    };
    init().then(() => {
      if (voiceVideoCallingSdk) {
        _TelemetryHelper.TelemetryHelper.logCallingEvent(_TelemetryConstants.LogLevel.INFO, {
          Event: _TelemetryConstants.TelemetryEvent.VoiceVideoSdkInitialize,
          Description: "Initialize VideoVoiceCalling Sdk Success"
        }, callId);
        voiceVideoCallingSdk.onCallAdded(() => {
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          callId = voiceVideoCallingSdk.callId;
          _TelemetryHelper.TelemetryHelper.logCallingEvent(_TelemetryConstants.LogLevel.INFO, {
            Event: _TelemetryConstants.TelemetryEvent.CallAdded
          }, callId);
          dispatch({
            type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SHOW_CALLING_CONTAINER,
            payload: true
          });
          dispatch({
            type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_INCOMING_CALL,
            payload: true
          });
        });
        voiceVideoCallingSdk.onRemoteVideoStreamAdded(() => {
          _TelemetryHelper.TelemetryHelper.logCallingEvent(_TelemetryConstants.LogLevel.INFO, {
            Event: _TelemetryConstants.TelemetryEvent.RemoteVideoStreamAdded
          }, callId);
          const isRemoteVideoDisabled = !voiceVideoCallingSdk.isRemoteVideoEnabled();
          const isLocalVideoDisabled = !voiceVideoCallingSdk.isLocalVideoEnabled();
          dispatch({
            type: _LiveChatWidgetActionType.LiveChatWidgetActionType.DISABLE_VIDEO_CALL,
            payload: false
          });
          dispatch({
            type: _LiveChatWidgetActionType.LiveChatWidgetActionType.DISABLE_LOCAL_VIDEO,
            payload: isLocalVideoDisabled
          });
          dispatch({
            type: _LiveChatWidgetActionType.LiveChatWidgetActionType.DISABLE_REMOTE_VIDEO,
            payload: isRemoteVideoDisabled
          });
        });
        voiceVideoCallingSdk.onLocalVideoStreamAdded(() => {
          _TelemetryHelper.TelemetryHelper.logCallingEvent(_TelemetryConstants.LogLevel.INFO, {
            Event: _TelemetryConstants.TelemetryEvent.LocalVideoStreamAdded
          }, callId);
          const isLocalVideoDisabled = !voiceVideoCallingSdk.isLocalVideoEnabled();
          const isRemoteVideoDisabled = !voiceVideoCallingSdk.isRemoteVideoEnabled();
          dispatch({
            type: _LiveChatWidgetActionType.LiveChatWidgetActionType.DISABLE_VIDEO_CALL,
            payload: false
          });
          dispatch({
            type: _LiveChatWidgetActionType.LiveChatWidgetActionType.DISABLE_REMOTE_VIDEO,
            payload: isRemoteVideoDisabled
          });
          dispatch({
            type: _LiveChatWidgetActionType.LiveChatWidgetActionType.DISABLE_LOCAL_VIDEO,
            payload: isLocalVideoDisabled
          });
        });
        voiceVideoCallingSdk.onRemoteVideoStreamRemoved(() => {
          _TelemetryHelper.TelemetryHelper.logCallingEvent(_TelemetryConstants.LogLevel.INFO, {
            Event: _TelemetryConstants.TelemetryEvent.RemoteVideoStreamRemoved
          }, callId);
          const isRemoteVideoDisabled = !voiceVideoCallingSdk.isRemoteVideoEnabled();
          const isLocalVideoDisabled = !voiceVideoCallingSdk.isLocalVideoEnabled();
          if (isRemoteVideoDisabled && isLocalVideoDisabled) {
            dispatch({
              type: _LiveChatWidgetActionType.LiveChatWidgetActionType.DISABLE_VIDEO_CALL,
              payload: true
            });
          }
          dispatch({
            type: _LiveChatWidgetActionType.LiveChatWidgetActionType.DISABLE_REMOTE_VIDEO,
            payload: isRemoteVideoDisabled
          });
        });
        voiceVideoCallingSdk.onLocalVideoStreamRemoved(() => {
          _TelemetryHelper.TelemetryHelper.logCallingEvent(_TelemetryConstants.LogLevel.INFO, {
            Event: _TelemetryConstants.TelemetryEvent.LocalVideoStreamRemoved
          }, callId);
          const isLocalVideoDisabled = !voiceVideoCallingSdk.isLocalVideoEnabled();
          const isRemoteVideoDisabled = !voiceVideoCallingSdk.isRemoteVideoEnabled();
          if (isRemoteVideoDisabled && isLocalVideoDisabled) {
            dispatch({
              type: _LiveChatWidgetActionType.LiveChatWidgetActionType.DISABLE_VIDEO_CALL,
              payload: true
            });
          }
          dispatch({
            type: _LiveChatWidgetActionType.LiveChatWidgetActionType.DISABLE_LOCAL_VIDEO,
            payload: isLocalVideoDisabled
          });
        });
        voiceVideoCallingSdk.onCallDisconnected(() => {
          _TelemetryHelper.TelemetryHelper.logCallingEvent(_TelemetryConstants.LogLevel.INFO, {
            Event: _TelemetryConstants.TelemetryEvent.CallDisconnected
          }, callId);
          resetCallingStates(true);
        });
        voiceVideoCallingSdk.addEventListener(_TelemetryConstants.TelemetryEvent.IncomingCallEnded, () => {
          _TelemetryHelper.TelemetryHelper.logCallingEvent(_TelemetryConstants.LogLevel.INFO, {
            Event: _TelemetryConstants.TelemetryEvent.IncomingCallEnded
          }, callId);
          resetCallingStates(true);
        });
      }
    });
    window.addEventListener("beforeunload", () => {
      if (state.uiStates.isIncomingCall) {
        voiceVideoCallingSdk === null || voiceVideoCallingSdk === void 0 ? void 0 : voiceVideoCallingSdk.rejectCall();
      } else {
        voiceVideoCallingSdk === null || voiceVideoCallingSdk === void 0 ? void 0 : voiceVideoCallingSdk.stopCall();
      }
      voiceVideoCallingSdk === null || voiceVideoCallingSdk === void 0 ? void 0 : voiceVideoCallingSdk.close();
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_E2VV_ENABLED,
        payload: false
      });
      resetCallingStates(true);
    });
  }, []);
  const controlProps = {
    id: "oc-lcw-callingcontainer",
    dir: state.domainStates.globalDir,
    isIncomingCall: state.uiStates.isIncomingCall,
    hideCallingContainer: state.appStates.isMinimized ? true : false,
    ...(props === null || props === void 0 ? void 0 : props.controlProps),
    incomingCallControlProps: {
      onDeclineCallClick: (0, _react.useCallback)(async () => {
        try {
          voiceVideoCallingSdk.rejectCall();
          _TelemetryHelper.TelemetryHelper.logCallingEvent(_TelemetryConstants.LogLevel.INFO, {
            Event: _TelemetryConstants.TelemetryEvent.CallRejectClick
          }, callId);
          resetCallingStates(true);
        } catch (error) {
          _TelemetryHelper.TelemetryHelper.logCallingEvent(_TelemetryConstants.LogLevel.ERROR, {
            Event: _TelemetryConstants.TelemetryEvent.CallRejectClickException,
            ExceptionDetails: {
              exception: `Failed to reject call:  ${error}`
            }
          }, callId);
        }
      }, [voiceVideoCallingSdk]),
      onAudioCallClick: (0, _react.useCallback)(() => {
        try {
          voiceVideoCallingSdk.acceptCall({
            withVideo: false
          });
          _TelemetryHelper.TelemetryHelper.logCallingEvent(_TelemetryConstants.LogLevel.INFO, {
            Event: _TelemetryConstants.TelemetryEvent.VoiceCallAcceptButtonClick
          }, callId);
        } catch (err) {
          _TelemetryHelper.TelemetryHelper.logCallingEvent(_TelemetryConstants.LogLevel.ERROR, {
            Event: _TelemetryConstants.TelemetryEvent.VoiceVideoAcceptCallException,
            ExceptionDetails: {
              exception: `Failed to accept call without video:  ${err}`
            }
          }, callId);
        }
        dispatch({
          type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_INCOMING_CALL,
          payload: false
        });
        dispatch({
          type: _LiveChatWidgetActionType.LiveChatWidgetActionType.DISABLE_VIDEO_CALL,
          payload: true
        });
      }, []),
      onVideoCallClick: (0, _react.useCallback)(() => {
        try {
          voiceVideoCallingSdk.acceptCall({
            withVideo: true
          });
          _TelemetryHelper.TelemetryHelper.logCallingEvent(_TelemetryConstants.LogLevel.INFO, {
            Event: _TelemetryConstants.TelemetryEvent.VideoCallAcceptButtonClick
          }, callId);
        } catch (err) {
          _TelemetryHelper.TelemetryHelper.logCallingEvent(_TelemetryConstants.LogLevel.ERROR, {
            Event: _TelemetryConstants.TelemetryEvent.VoiceVideoAcceptCallWithVideoException,
            ExceptionDetails: {
              exception: `Failed to accept call with video:  ${err}`
            }
          }, callId);
        }
        dispatch({
          type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_INCOMING_CALL,
          payload: false
        });
        dispatch({
          type: _LiveChatWidgetActionType.LiveChatWidgetActionType.DISABLE_LOCAL_VIDEO,
          payload: false
        });
      }, []),
      ...(props === null || props === void 0 ? void 0 : (_props$controlProps = props.controlProps) === null || _props$controlProps === void 0 ? void 0 : _props$controlProps.incomingCallControlProps)
    },
    currentCallControlProps: {
      hideCallTimer: true,
      onEndCallClick: (0, _react.useCallback)(() => {
        try {
          voiceVideoCallingSdk.stopCall();
          _TelemetryHelper.TelemetryHelper.logCallingEvent(_TelemetryConstants.LogLevel.INFO, {
            Event: _TelemetryConstants.TelemetryEvent.EndCallButtonClick
          }, callId);
          resetCallingStates(true);
        } catch (error) {
          _TelemetryHelper.TelemetryHelper.logCallingEvent(_TelemetryConstants.LogLevel.ERROR, {
            Event: _TelemetryConstants.TelemetryEvent.EndCallButtonClickException,
            ExceptionDetails: {
              exception: `Failed to End Call:  ${error}`
            }
          }, callId);
        }
      }, []),
      onMicCallClick: (0, _react.useCallback)(() => {
        try {
          voiceVideoCallingSdk.toggleMute();
          _TelemetryHelper.TelemetryHelper.logCallingEvent(_TelemetryConstants.LogLevel.INFO, {
            Event: _TelemetryConstants.TelemetryEvent.ToggleMuteButtonClick
          }, callId);
        } catch (error) {
          _TelemetryHelper.TelemetryHelper.logCallingEvent(_TelemetryConstants.LogLevel.ERROR, {
            Event: _TelemetryConstants.TelemetryEvent.ToggleMuteButtonClickException,
            ExceptionDetails: {
              exception: `Failed to toggle mute button :  ${error}`
            }
          }, callId);
        }
      }, []),
      onVideoOffClick: (0, _react.useCallback)(() => {
        try {
          voiceVideoCallingSdk.toggleLocalVideo();
          _TelemetryHelper.TelemetryHelper.logCallingEvent(_TelemetryConstants.LogLevel.INFO, {
            Event: _TelemetryConstants.TelemetryEvent.ToggleCameraButtonClick
          }, callId);
        } catch (error) {
          _TelemetryHelper.TelemetryHelper.logCallingEvent(_TelemetryConstants.LogLevel.ERROR, {
            Event: _TelemetryConstants.TelemetryEvent.ToggleCameraButtonClickException,
            ExceptionDetails: {
              exception: `Failed to toggle video button :  ${error}`
            }
          }, callId);
        }
      }, []),
      nonActionIds: {
        ...(props === null || props === void 0 ? void 0 : (_props$controlProps2 = props.controlProps) === null || _props$controlProps2 === void 0 ? void 0 : (_props$controlProps2$ = _props$controlProps2.currentCallControlProps) === null || _props$controlProps2$ === void 0 ? void 0 : _props$controlProps2$.nonActionIds),
        selfVideoTileId: (props === null || props === void 0 ? void 0 : (_props$controlProps3 = props.controlProps) === null || _props$controlProps3 === void 0 ? void 0 : (_props$controlProps3$ = _props$controlProps3.currentCallControlProps) === null || _props$controlProps3$ === void 0 ? void 0 : (_props$controlProps3$2 = _props$controlProps3$.nonActionIds) === null || _props$controlProps3$2 === void 0 ? void 0 : _props$controlProps3$2.selfVideoTileId) ?? "selfVideo",
        remoteVideoTileId: (props === null || props === void 0 ? void 0 : (_props$controlProps4 = props.controlProps) === null || _props$controlProps4 === void 0 ? void 0 : (_props$controlProps4$ = _props$controlProps4.currentCallControlProps) === null || _props$controlProps4$ === void 0 ? void 0 : (_props$controlProps4$2 = _props$controlProps4$.nonActionIds) === null || _props$controlProps4$2 === void 0 ? void 0 : _props$controlProps4$2.remoteVideoTileId) ?? "remoteVideo"
      },
      videoCallDisabled: state.uiStates.disableVideoCall,
      selfVideoDisabled: state.uiStates.disableSelfVideo,
      remoteVideoDisabled: state.uiStates.disableRemoteVideo,
      ...(props === null || props === void 0 ? void 0 : (_props$controlProps5 = props.controlProps) === null || _props$controlProps5 === void 0 ? void 0 : _props$controlProps5.currentCallControlProps)
    }
  };
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, state.uiStates.showCallingPopup && /*#__PURE__*/_react.default.createElement(_omnichannelChatComponents.CallingContainer, {
    controlProps: controlProps,
    styleProps: props === null || props === void 0 ? void 0 : props.styleProps
  }));
};
exports.CallingContainerStateful = CallingContainerStateful;
var _default = CallingContainerStateful;
exports.default = _default;