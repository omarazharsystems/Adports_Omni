"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ConfirmationPaneStateful = void 0;
var _TelemetryConstants = require("../../common/telemetry/TelemetryConstants");
var _omnichannelChatComponents = require("@microsoft/omnichannel-chat-components");
var _react = _interopRequireWildcard(require("react"));
var _utils = require("../../common/utils");
var _DimLayer = require("../dimlayer/DimLayer");
var _LiveChatWidgetActionType = require("../../contexts/common/LiveChatWidgetActionType");
var _TelemetryHelper = require("../../common/telemetry/TelemetryHelper");
var _useChatContextStore = _interopRequireDefault(require("../../hooks/useChatContextStore"));
var _Constants = require("../../common/Constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const ConfirmationPaneStateful = props => {
  const initialTabIndexMap = new Map();
  let elements = [];
  const [state, dispatch] = (0, _useChatContextStore.default)();
  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars
  const controlProps = {
    id: "oc-lcw-confirmation-pane",
    dir: state.domainStates.globalDir,
    onConfirm: async () => {
      _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.INFO, {
        Event: _TelemetryConstants.TelemetryEvent.ConfirmationConfirmButtonClicked,
        Description: "Confirmation pane Confirm button clicked"
      });
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_SHOW_CONFIRMATION,
        payload: false
      });
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_CONFIRMATION_STATE,
        payload: _Constants.ConfirmationState.Ok
      });
      (0, _utils.setTabIndices)(elements, initialTabIndexMap, true);
      _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.INFO, {
        Event: _TelemetryConstants.TelemetryEvent.ConversationEndedByCustomer,
        Description: "Conversation is ended by customer."
      });
    },
    onCancel: () => {
      _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.INFO, {
        Event: _TelemetryConstants.TelemetryEvent.ConfirmationCancelButtonClicked,
        Description: "Confirmation pane Cancel button clicked."
      });
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_SHOW_CONFIRMATION,
        payload: false
      });
      dispatch({
        type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_CONFIRMATION_STATE,
        payload: _Constants.ConfirmationState.Cancel
      });
      const previousFocusedElementId = state.appStates.previousElementIdOnFocusBeforeModalOpen;
      if (previousFocusedElementId) {
        (0, _utils.setFocusOnElement)("#" + previousFocusedElementId);
        dispatch({
          type: _LiveChatWidgetActionType.LiveChatWidgetActionType.SET_PREVIOUS_FOCUSED_ELEMENT_ID,
          payload: null
        });
      } else {
        (0, _utils.setFocusOnSendBox)();
      }
      (0, _utils.setTabIndices)(elements, initialTabIndexMap, true);
    },
    ...(props === null || props === void 0 ? void 0 : props.controlProps)
  };

  // Move focus to the first button
  (0, _react.useEffect)(() => {
    (0, _utils.preventFocusToMoveOutOfElement)(controlProps.id);
    const focusableElements = (0, _utils.findAllFocusableElement)(`#${controlProps.id}`);
    if (focusableElements) {
      focusableElements[0].focus();
    }
    elements = (0, _utils.findParentFocusableElementsWithoutChildContainer)(controlProps.id);
    (0, _utils.setTabIndices)(elements, initialTabIndexMap, false);
    _TelemetryHelper.TelemetryHelper.logLoadingEvent(_TelemetryConstants.LogLevel.INFO, {
      Event: _TelemetryConstants.TelemetryEvent.ConfirmationPaneLoaded
    });
  }, []);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_DimLayer.DimLayer, {
    brightness: (controlProps === null || controlProps === void 0 ? void 0 : controlProps.brightnessValueOnDim) ?? "0.2"
  }), /*#__PURE__*/_react.default.createElement(_omnichannelChatComponents.ConfirmationPane, {
    componentOverrides: props === null || props === void 0 ? void 0 : props.componentOverrides,
    controlProps: controlProps,
    styleProps: props === null || props === void 0 ? void 0 : props.styleProps
  }));
};
exports.ConfirmationPaneStateful = ConfirmationPaneStateful;
var _default = ConfirmationPaneStateful;
exports.default = _default;