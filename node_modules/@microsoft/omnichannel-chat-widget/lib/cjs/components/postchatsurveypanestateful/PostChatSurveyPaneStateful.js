"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PostChatSurveyPaneStateful = void 0;
var _TelemetryConstants = require("../../common/telemetry/TelemetryConstants");
var _react = _interopRequireWildcard(require("react"));
var _Constants = require("../../common/Constants");
var _CustomerVoiceEvents = require("./enums/CustomerVoiceEvents");
var _PostChatSurveyMode = require("./enums/PostChatSurveyMode");
var _omnichannelChatComponents = require("@microsoft/omnichannel-chat-components");
var _TelemetryHelper = require("../../common/telemetry/TelemetryHelper");
var _defaultgeneralPostChatSurveyPaneStyleProps = require("./common/defaultStyleProps/defaultgeneralPostChatSurveyPaneStyleProps");
var _utils = require("../../common/utils");
var _useChatContextStore = _interopRequireDefault(require("../../hooks/useChatContextStore"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const generateSurveyInviteLink = function (surveyInviteLink, isEmbed, locale, compact) {
  let showMultiLingual = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  const surveyLink = `${surveyInviteLink}
            &embed=${isEmbed.toString()}
            &compact=${compact.toString() ?? "true"}
            &lang=${locale ?? "en-us"}
            &showmultilingual=${showMultiLingual.toString() ?? "false"}`;
  return surveyLink;
};
const PostChatSurveyPaneStateful = props => {
  var _props$styleProps, _state$appStates, _state$appStates2, _props$controlProps;
  const [state] = (0, _useChatContextStore.default)();
  const generalStyleProps = Object.assign({}, _defaultgeneralPostChatSurveyPaneStyleProps.defaultGeneralPostChatSurveyPaneStyleProps, (_props$styleProps = props.styleProps) === null || _props$styleProps === void 0 ? void 0 : _props$styleProps.generalStyleProps, {
    display: state.appStates.isMinimized ? "none" : "contents"
  });
  let surveyInviteLink = "";
  const surveyMode = (state === null || state === void 0 ? void 0 : (_state$appStates = state.appStates) === null || _state$appStates === void 0 ? void 0 : _state$appStates.selectedSurveyMode) === _PostChatSurveyMode.PostChatSurveyMode.Embed;
  if ((state === null || state === void 0 ? void 0 : (_state$appStates2 = state.appStates) === null || _state$appStates2 === void 0 ? void 0 : _state$appStates2.conversationEndedBy) === _Constants.ConversationEndEntity.Bot && state.domainStates.postChatContext.botSurveyInviteLink) {
    surveyInviteLink = generateSurveyInviteLink(state.domainStates.postChatContext.botSurveyInviteLink, surveyMode, state.domainStates.postChatContext.botFormsProLocale, props.isCustomerVoiceSurveyCompact ?? true);
  } else {
    surveyInviteLink = generateSurveyInviteLink(state.domainStates.postChatContext.surveyInviteLink, surveyMode, state.domainStates.postChatContext.formsProLocale, props.isCustomerVoiceSurveyCompact ?? true);
  }
  const styleProps = {
    ...props.styleProps,
    generalStyleProps: generalStyleProps
  };
  const controlProps = {
    id: "oc-lcw-postchatsurvey-pane",
    surveyURL: ((_props$controlProps = props.controlProps) === null || _props$controlProps === void 0 ? void 0 : _props$controlProps.surveyURL) ?? surveyInviteLink,
    ...props.controlProps
  };

  // Move focus to the first button
  (0, _react.useEffect)(() => {
    const firstElement = (0, _utils.findAllFocusableElement)(`#${controlProps.id}`);
    if (firstElement && firstElement[0]) {
      firstElement[0].focus();
    }
    _TelemetryHelper.TelemetryHelper.logLoadingEvent(_TelemetryConstants.LogLevel.INFO, {
      Event: _TelemetryConstants.TelemetryEvent.PostChatSurveyLoaded
    });

    //Customer Voice Telemetry Events
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    window.addEventListener("message", message => {
      const {
        data
      } = message;
      if (!data) return;
      if (data === _CustomerVoiceEvents.CustomerVoiceEvents.ResponsePageLoaded) {
        _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.INFO, {
          Event: _TelemetryConstants.TelemetryEvent.CustomerVoiceResponsePageLoaded
        });
      } else if (data === _CustomerVoiceEvents.CustomerVoiceEvents.FormResponseSubmitted) {
        _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.INFO, {
          Event: _TelemetryConstants.TelemetryEvent.CustomerVoiceFormResponseSubmitted
        });
      } else if (data === _CustomerVoiceEvents.CustomerVoiceEvents.FormResponseError) {
        _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.ERROR, {
          Event: _TelemetryConstants.TelemetryEvent.CustomerVoiceFormResponseError
        });
      }
    });
  }, []);
  return /*#__PURE__*/_react.default.createElement(_omnichannelChatComponents.PostChatSurveyPane, {
    controlProps: controlProps,
    styleProps: styleProps
  });
};
exports.PostChatSurveyPaneStateful = PostChatSurveyPaneStateful;
var _default = PostChatSurveyPaneStateful;
exports.default = _default;