"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isInlineMediaSupported = exports.getFileAttachmentIconData = void 0;
var _Icons = require("../../../../assets/Icons");
var _BrowserInfo = require("./BrowserInfo");
var _BrowserVendor = require("../../webchatcontroller/enums/BrowserVendor");
var _Constants = require("../../../../common/Constants");
const FileAttachmentIconMap = {
  "aac": _Icons.AudioIcon,
  "aiff": _Icons.AudioIcon,
  "alac": _Icons.AudioIcon,
  "amr": _Icons.AudioIcon,
  "avchd": _Icons.VideoIcon,
  "avi": _Icons.VideoIcon,
  "bmp": _Icons.ImageIcon,
  "doc": _Icons.WordIcon,
  "docx": _Icons.WordIcon,
  "flac": _Icons.AudioIcon,
  "flv": _Icons.VideoIcon,
  "gif": _Icons.ImageIcon,
  "jiff": _Icons.ImageIcon,
  "jpeg": _Icons.ImageIcon,
  "jpg": _Icons.ImageIcon,
  "mpe": _Icons.VideoIcon,
  "mpeg": _Icons.VideoIcon,
  "mpg": _Icons.VideoIcon,
  "mpv": _Icons.VideoIcon,
  "mp2": _Icons.AudioIcon,
  "mp3": _Icons.AudioIcon,
  "mp4": _Icons.VideoIcon,
  "m4p": _Icons.VideoIcon,
  "m4v": _Icons.VideoIcon,
  "mov": _Icons.VideoIcon,
  "one": _Icons.OneNoteIcon,
  "pcm": _Icons.AudioIcon,
  "pdf": _Icons.PDFIcon,
  "png": _Icons.ImageIcon,
  "ppt": _Icons.PowerpointIcon,
  "pptx": _Icons.PowerpointIcon,
  "qt": _Icons.VideoIcon,
  "rar": _Icons.ArchiveIcon,
  "swf": _Icons.VideoIcon,
  "tar": _Icons.ArchiveIcon,
  "tar.gz": _Icons.ArchiveIcon,
  "tgz": _Icons.ArchiveIcon,
  "txt": _Icons.BlankIcon,
  "vsd": _Icons.VisioIcon,
  "vsdx": _Icons.VisioIcon,
  "wav": _Icons.AudioIcon,
  "webm": _Icons.VideoIcon,
  "webp": _Icons.ImageIcon,
  "wma": _Icons.AudioIcon,
  "wmv": _Icons.VideoIcon,
  "xls": _Icons.ExcelIcon,
  "xlsx": _Icons.ExcelIcon,
  "zip": _Icons.ArchiveIcon,
  "zipx": _Icons.ArchiveIcon,
  "7z": _Icons.ArchiveIcon
};

/**
 * Get file attachment icon image depending on extension.
 *
 * @param extension File extension
*/
const getFileAttachmentIconData = extension => {
  const key = extension.startsWith(".") ? extension.slice(1) : extension || "";
  const icon = FileAttachmentIconMap[key.toLowerCase()] || _Icons.BlankIcon;
  return icon;
};

// Check if browser supports inline media playing for current media format
exports.getFileAttachmentIconData = getFileAttachmentIconData;
const isInlineMediaSupported = attachmentName => {
  switch ((0, _BrowserInfo.getBrowserName)()) {
    case _BrowserVendor.BrowserVendor.CHROME:
    case _BrowserVendor.BrowserVendor.OPERA:
      return _Constants.Constants.chromeSupportedInlineMediaRegex.test(attachmentName);
    case _BrowserVendor.BrowserVendor.FIREFOX:
      return _Constants.Constants.firefoxSupportedInlineMediaRegex.test(attachmentName);
    case _BrowserVendor.BrowserVendor.EDGE:
      return (0, _BrowserInfo.isChromiumEdge)() && _Constants.Constants.chromeSupportedInlineMediaRegex.test(attachmentName);
    default:
      return false;
  }
};
exports.isInlineMediaSupported = isInlineMediaSupported;