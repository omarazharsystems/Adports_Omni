"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isChromiumEdge = exports.getUserAgent = exports.getBrowserVersion = exports.getBrowserName = void 0;
var _BrowserVendor = require("../../webchatcontroller/enums/BrowserVendor");
const REGEX_VERSION = "([\\d,.]+)";
const UNKNOWN_VERSION = "U";
let userAgent = undefined;
const getUserAgent = () => {
  if (!userAgent) {
    userAgent = window.navigator.userAgent;
  }
  return userAgent;
};
exports.getUserAgent = getUserAgent;
const userAgentContainsString = searchString => {
  const userAgent = getUserAgent();
  return userAgent.indexOf(searchString) > -1;
};
const isEdge = () => {
  return userAgentContainsString(_BrowserVendor.BrowserVendor.EDGE) || userAgentContainsString(_BrowserVendor.BrowserVendor.EDGE_CHROMIUM);
};
const isChromiumEdge = () => {
  return userAgentContainsString(_BrowserVendor.BrowserVendor.EDGE_CHROMIUM) && !userAgentContainsString(_BrowserVendor.BrowserVendor.EDGE);
};
exports.isChromiumEdge = isChromiumEdge;
const isOpera = () => {
  return userAgentContainsString("OPR/");
};
const getBrowserName = () => {
  if (isOpera()) {
    return _BrowserVendor.BrowserVendor.OPERA;
  }
  if (isEdge()) {
    return _BrowserVendor.BrowserVendor.EDGE;
  }
  if (userAgentContainsString(_BrowserVendor.BrowserVendor.CHROME)) {
    return _BrowserVendor.BrowserVendor.CHROME;
  }
  if (userAgentContainsString(_BrowserVendor.BrowserVendor.FIREFOX)) {
    return _BrowserVendor.BrowserVendor.FIREFOX;
  }
  if (userAgentContainsString(_BrowserVendor.BrowserVendor.SAFARI)) {
    return _BrowserVendor.BrowserVendor.SAFARI;
  }
  return _BrowserVendor.BrowserVendor.UNKNOWN;
};
exports.getBrowserName = getBrowserName;
const getBrowserVersion = () => {
  let browserString = getBrowserName();
  const browserVersion = UNKNOWN_VERSION;
  let matches;
  if (browserString === _BrowserVendor.BrowserVendor.SAFARI) {
    browserString = "Version";
  }

  // eslint-disable-next-line prefer-const
  matches = getUserAgent().match(new RegExp(browserString + "/" + REGEX_VERSION));
  if (matches) {
    return matches[1];
  }
  return browserVersion;
};
exports.getBrowserVersion = getBrowserVersion;