"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("rxjs/add/operator/share");
require("rxjs/add/observable/of");
var _botframeworkDirectlinejs = require("botframework-directlinejs");
var _rxjs = require("rxjs");
var _Observable = require("rxjs/Observable");
var _omnichannelChatSdk = require("@microsoft/omnichannel-chat-sdk");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class MockAdapter {
  constructor() {
    _defineProperty(this, "activityObserver", void 0);
    _defineProperty(this, "activity$", void 0);
    _defineProperty(this, "connectionStatus$", new _rxjs.BehaviorSubject(_botframeworkDirectlinejs.ConnectionStatus.Uninitialized));
    this.activity$ = new _Observable.Observable(observer => {
      this.activityObserver = observer;
      Promise.resolve().then(async () => {
        this.connectionStatus$.next(_botframeworkDirectlinejs.ConnectionStatus.Online);
        try {
          if (this.connectionStatus$) {
            this.connectionStatus$.next(_botframeworkDirectlinejs.ConnectionStatus.Online);
          }
        } catch (err) {
          this.connectionStatus$.next(_botframeworkDirectlinejs.ConnectionStatus.FailedToConnect);
          console.error(err);
        }
      });
    }).share();
  }
  postActivity(activity) {
    if (activity) {
      var _activity$text;
      let modActivity;
      let typingActivity;
      const userId = "userId",
        botId = "botId";
      if ((_activity$text = activity.text) !== null && _activity$text !== void 0 && _activity$text.startsWith(":")) {
        var _this$activityObserve, _this$activityObserve2;
        modActivity = {
          ...activity,
          id: (0, _omnichannelChatSdk.uuidv4)(),
          from: {
            ...activity.from,
            id: botId,
            name: "Bot",
            role: "bot"
          },
          text: activity.text.substr(1)
        };
        typingActivity = {
          id: (0, _omnichannelChatSdk.uuidv4)(),
          from: {
            id: (0, _omnichannelChatSdk.uuidv4)(),
            name: "Bot",
            role: "bot"
          },
          type: "typing"
        };
        (_this$activityObserve = this.activityObserver) === null || _this$activityObserve === void 0 ? void 0 : _this$activityObserve.next(modActivity); // mock echo message
        (_this$activityObserve2 = this.activityObserver) === null || _this$activityObserve2 === void 0 ? void 0 : _this$activityObserve2.next(typingActivity); // mock typing
      } else {
        var _this$activityObserve3;
        modActivity = {
          ...activity,
          id: (0, _omnichannelChatSdk.uuidv4)(),
          from: {
            ...activity.from,
            id: userId,
            name: "User",
            role: "user"
          }
        };
        (_this$activityObserve3 = this.activityObserver) === null || _this$activityObserve3 === void 0 ? void 0 : _this$activityObserve3.next(modActivity); // mock message sent
      }
    }

    return _Observable.Observable.of(activity.id || "");
  }
  end() {
    return;
  }
}
exports.default = MockAdapter;