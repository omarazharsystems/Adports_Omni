"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _dompurify = _interopRequireDefault(require("dompurify"));
var _TelemetryConstants = require("../../../../../common/telemetry/TelemetryConstants");
var _TelemetryHelper = require("../../../../../common/telemetry/TelemetryHelper");
var _WebChatActionType = require("../../enums/WebChatActionType");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/******
 * SanitizationMiddleware
 * 
 * Sanitizes the text.
 ******/

// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars
const sanitizationMiddleware = _ref => {
  let {
    dispatch
  } = _ref;
  return next => action => {
    if (action.type === _WebChatActionType.WebChatActionType.WEB_CHAT_SEND_MESSAGE) {
      try {
        var _action$payload;
        let text = (_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.text;
        if (text) {
          text = _dompurify.default.sanitize(text) ?? " ";
        }
      } catch (e) {
        const copyDataForTelemetry = {
          ...action,
          payload: {
            ...action.payload,
            text: undefined
          }
        };
        let errorMessage = "Failed to apply action: ";
        try {
          errorMessage += JSON.stringify(copyDataForTelemetry);
        } catch (e) {
          errorMessage += " (unable to stringify action)";
        }
        _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.ERROR, {
          Event: _TelemetryConstants.TelemetryEvent.ProcessingSanitizationMiddlewareFailed,
          ExceptionDetails: {
            ErrorData: errorMessage,
            Exception: e
          }
        });
      }
    }
    return next(action);
  };
};
var _default = sanitizationMiddleware;
exports.default = _default;