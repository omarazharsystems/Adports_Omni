"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.groupActivitiesMiddleware = void 0;
var _Constants = require("../../../../../common/Constants");
/******
 * GroupActivitiesMiddleware
 * 
 * This middleware controls which messages are grouped together regarding to timestamps. It does the following processing:
 * 1. Distinguishes different messages by sender name and whether it is a system message
 ******/

function bin(items, grouping) {
  let lastBin;
  const bins = [];
  let lastItem;
  if (items.length > 0) {
    items.forEach(item => {
      if (lastItem && grouping(lastItem, item)) {
        lastBin.push(item);
      } else {
        lastBin = [item];
        bins.push(lastBin);
      }
      lastItem = item;
    });
  }
  return bins;
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any
const groupActivitiesMiddleware = () => next => args => {
  const {
    activities
  } = args;
  if (activities != null && activities.length > 0) {
    const {
      status
    } = next({
      activities
    });
    return {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      sender: bin(activities, (x, y) => {
        const roleX = x.channelData && x.channelData.tags ? x.channelData.tags.includes(_Constants.Constants.systemMessageTag) ? _Constants.Constants.systemMessageTag : x.from.name : x.from.name;
        const roleY = y.channelData && y.channelData.tags ? y.channelData.tags.includes(_Constants.Constants.systemMessageTag) ? _Constants.Constants.systemMessageTag : y.from.name : y.from.name;
        return roleX === roleY;
      }),
      status
    };
  } else {
    return () => false;
  }
};
exports.groupActivitiesMiddleware = groupActivitiesMiddleware;