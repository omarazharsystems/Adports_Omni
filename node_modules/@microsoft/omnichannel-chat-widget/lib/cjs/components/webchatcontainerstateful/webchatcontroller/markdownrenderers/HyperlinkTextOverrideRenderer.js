"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _dompurify = _interopRequireDefault(require("dompurify"));
var _Constants = require("../../../../common/Constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class HyperlinkTextOverrideRenderer {
  constructor(hyperlinkTextOverride) {
    _defineProperty(this, "hyperlinkTextOverride", void 0);
    this.hyperlinkTextOverride = hyperlinkTextOverride;
  }
  convertTextToHtmlNode(text) {
    const htmlNode = document.createElement(_Constants.HtmlAttributeNames.div);
    try {
      text = _dompurify.default.sanitize(text); // eslint-disable-line @typescript-eslint/no-explicit-any
      htmlNode.innerHTML = text;
    } catch {
      return htmlNode;
    }
    return htmlNode;
  }
  processANode(htmlNode) {
    // eslint-disable-line @typescript-eslint/no-explicit-any
    const aTags = htmlNode.getElementsByTagName(_Constants.HtmlAttributeNames.aTagName);
    for (let index = 0; index < aTags.length; index++) {
      const aNode = aTags[index];
      if (!aNode || !aNode.tagName || aNode.tagName.toLowerCase() !== _Constants.HtmlAttributeNames.aTagName || !aNode.href) continue;
      if (aNode.href !== aNode.text.trim()) {
        aNode.text = aNode.href;
      }
    }
  }
  applicable(text) {
    if (!this.hyperlinkTextOverride) {
      return false;
    }
    try {
      const htmlNode = this.convertTextToHtmlNode(text);
      const aNodes = htmlNode.getElementsByTagName(_Constants.HtmlAttributeNames.aTagName);
      return !!aNodes && aNodes.length && aNodes.length > 0;
    } catch {
      return false;
    }
  }
  render(text) {
    if (!this.applicable(text)) {
      return text;
    }
    const htmlNode = this.convertTextToHtmlNode(text);
    this.processANode(htmlNode);
    text = htmlNode.innerHTML;
    return text;
  }
}
var _default = HyperlinkTextOverrideRenderer;
exports.default = _default;