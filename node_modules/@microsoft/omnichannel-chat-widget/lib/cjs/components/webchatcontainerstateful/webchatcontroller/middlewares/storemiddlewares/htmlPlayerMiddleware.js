"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Constants = require("../../../../../common/Constants");
var _WebChatActionType = require("../../enums/WebChatActionType");
/******
 * HTMLPlayerMiddleware
 * 
 * Ensures that video/audio attachment are properly rendered.
 ******/

const disableHTMLPlayerDownloadButton = htmlTag => {
  setTimeout(() => {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const elements = document.getElementsByTagName(htmlTag);
    for (let index = 0; index < elements.length; index++) {
      if (!elements[index].getAttribute(_Constants.Constants.controlsList)) {
        elements[index].setAttribute(_Constants.Constants.controlsList, _Constants.Constants.nodownload);
      } else {
        if (elements[index].getAttribute(_Constants.Constants.controlsList).indexOf(_Constants.Constants.nodownload) === -1) {
          const currentControlsListValue = elements[index].getAttribute(_Constants.Constants.controlsList);
          elements[index].setAttribute(_Constants.Constants.controlsList, `${currentControlsListValue} ${_Constants.Constants.nodownload}`);
        }
      }
    }
  }, 500);
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars
const htmlPlayerMiddleware = _ref => {
  let {
    dispatch
  } = _ref;
  return next => action => {
    var _action$payload, _action$payload$activ, _action$payload$activ2;
    if (action.type === _WebChatActionType.WebChatActionType.DIRECT_LINE_INCOMING_ACTIVITY && ((_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : (_action$payload$activ = _action$payload.activity) === null || _action$payload$activ === void 0 ? void 0 : (_action$payload$activ2 = _action$payload$activ.attachments) === null || _action$payload$activ2 === void 0 ? void 0 : _action$payload$activ2.length) > 0) {
      disableHTMLPlayerDownloadButton(_Constants.Constants.video);
      disableHTMLPlayerDownloadButton(_Constants.Constants.audio);
    }
    return next(action);
  };
};
var _default = htmlPlayerMiddleware;
exports.default = _default;