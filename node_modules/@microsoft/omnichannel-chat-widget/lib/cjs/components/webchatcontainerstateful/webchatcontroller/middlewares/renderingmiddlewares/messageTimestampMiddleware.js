"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _WebChatActionType = require("../../enums/WebChatActionType");
var _Constants = require("../../../../../common/Constants");
// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars
const createMessageTimeStampMiddleware = _ref => {
  let {
    dispatch
  } = _ref;
  return next => action => {
    if (isApplicable(action)) {
      return next(evaluateTagsAndOverrideTimeStamp(action));
    }
    return next(action);
  };
};
const isApplicable = action => {
  return action.type === _WebChatActionType.WebChatActionType.DIRECT_LINE_INCOMING_ACTIVITY && isPVAConversation(action) && isPayloadValid(action) && isValidChannel(action);
};
const isPayloadValid = action => {
  var _action$payload;
  return action === null || action === void 0 ? void 0 : (_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.activity;
};
const isValidChannel = action => {
  var _action$payload2, _action$payload2$acti;
  return (action === null || action === void 0 ? void 0 : (_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : (_action$payload2$acti = _action$payload2.activity) === null || _action$payload2$acti === void 0 ? void 0 : _action$payload2$acti.channelId) === _Constants.Constants.acsChannel;
};
const isPVAConversation = action => {
  return !isTagIncluded(action, _Constants.Constants.systemMessageTag) && !isTagIncluded(action, _Constants.Constants.publicMessageTag) && !isRoleUserOn(action);
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const isTagIncluded = (action, tag) => {
  return isDataTagsPresent(action) && action.payload.activity.channelData.tags.includes(tag);
};
const isRoleUserOn = action => {
  var _action$payload3, _action$payload3$acti, _action$payload3$acti2;
  return (action === null || action === void 0 ? void 0 : (_action$payload3 = action.payload) === null || _action$payload3 === void 0 ? void 0 : (_action$payload3$acti = _action$payload3.activity) === null || _action$payload3$acti === void 0 ? void 0 : (_action$payload3$acti2 = _action$payload3$acti.from) === null || _action$payload3$acti2 === void 0 ? void 0 : _action$payload3$acti2.role) === _Constants.Constants.userMessageTag;
};
const overrideTimeStamp = (timestampOriginal, timeStampNew) => {
  return isTimestampValid(timeStampNew) ? timeStampNew : timestampOriginal;
};
const isTimestampValid = timeStamp => {
  const regex = /(\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])(T)(\d{2})(:{1})(\d{2})(:{1})(\d{2})(.\d+)([Z]{1}))/;
  return regex.test(timeStamp);
};
const isDataTagsPresent = action => {
  var _action$payload4, _action$payload4$acti, _action$payload4$acti2;
  return (action === null || action === void 0 ? void 0 : (_action$payload4 = action.payload) === null || _action$payload4 === void 0 ? void 0 : (_action$payload4$acti = _action$payload4.activity) === null || _action$payload4$acti === void 0 ? void 0 : (_action$payload4$acti2 = _action$payload4$acti.channelData) === null || _action$payload4$acti2 === void 0 ? void 0 : _action$payload4$acti2.tags) && action.payload.activity.channelData.tags.length > 0;
};
const evaluateTagsAndOverrideTimeStamp = action => {
  const tagValue = tagLookup(action, _Constants.Constants.prefixTimestampTag);
  if (tagValue) {
    const newTimestamp = extractTimeStamp(tagValue);
    action.payload.activity.timestamp = overrideTimeStamp(action.payload.activity.timestamp, newTimestamp);
  }
  return action;
};
const extractTimeStamp = timeStamp => {
  if (timeStamp && timeStamp.length > 0) {
    const ts = timeStamp.split(_Constants.Constants.prefixTimestampTag);
    if (ts && ts.length > 1) {
      return ts[1];
    }
  }
  return timeStamp;
};
const tagLookup = (action, tag) => {
  if (!isDataTagsPresent(action)) {
    return null;
  }
  const tags = action.payload.activity.channelData.tags;
  let value;
  if (tags && tags.length > 0) {
    for (let i = 0; i < tags.length; i++) {
      value = tags[i];
      if (value && value.indexOf(tag) > -1) {
        return value;
      }
    }
  }
  return null;
};
var _default = createMessageTimeStampMiddleware;
exports.default = _default;