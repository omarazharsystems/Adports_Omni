"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Constants = require("../../../../../common/Constants");
var _dompurify = _interopRequireDefault(require("dompurify"));
var _WebChatActionType = require("../../enums/WebChatActionType");
var _TelemetryHelper = require("../../../../../common/telemetry/TelemetryHelper");
var _TelemetryConstants = require("../../../../../common/telemetry/TelemetryConstants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/******
 * HTMLTextMiddleware
 * 
 * Ensures that links within messages are processed so that the caller website cannot be traced.
 ******/

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const convertTextToHtmlNode = text => {
  if (!text) return "";
  const element = document.createElement(_Constants.HtmlAttributeNames.div);
  try {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    text = _dompurify.default.sanitize(text);
    element.innerHTML = text;
  } catch (e) {
    const errorMessage = `Failed to purify and set innertHTML with text: ${text}`;
    _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.ERROR, {
      Event: _TelemetryConstants.TelemetryEvent.ProcessingHTMLTextMiddlewareFailed,
      ExceptionDetails: {
        ErrorData: errorMessage,
        Exception: e
      }
    });
  }
  return element;
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const processHTMLText = (action, text) => {
  const htmlNode = convertTextToHtmlNode(text);
  const aNodes = htmlNode.getElementsByTagName(_Constants.HtmlAttributeNames.aTagName);
  if ((aNodes === null || aNodes === void 0 ? void 0 : aNodes.length) > 0) {
    try {
      for (let index = 0; index < aNodes.length; index++) {
        var _aNode$tagName;
        const aNode = aNodes[index];
        // Skip if the node is not valid or the node's tag name is not equal to 'a', or the node href is empty.
        if (((_aNode$tagName = aNode.tagName) === null || _aNode$tagName === void 0 ? void 0 : _aNode$tagName.toLowerCase()) !== _Constants.HtmlAttributeNames.aTagName || !aNode.href) {
          continue;
        }

        // Add target to 'a' node if target is missing or does not equal to blank
        if (!aNode.target || aNode.target !== _Constants.Constants.blank) {
          aNode.target = _Constants.Constants.blank;
        }

        // If rel is missing or rel does not include noopener and noreferrer, add them
        if (!aNode.rel) {
          aNode.rel = `${_Constants.HtmlAttributeNames.noopenerTag} ${_Constants.HtmlAttributeNames.noreferrerTag}`;
        } else {
          if (aNode.rel.indexOf(_Constants.HtmlAttributeNames.noopenerTag) === -1) {
            aNode.rel += ` ${_Constants.HtmlAttributeNames.noopenerTag}`;
          }
          if (aNode.rel.indexOf(_Constants.HtmlAttributeNames.noreferrerTag) === -1) {
            aNode.rel += ` ${_Constants.HtmlAttributeNames.noreferrerTag}`;
          }
        }
      }

      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      action = window.simpleUpdateIn(action, [_Constants.Constants.payload, _Constants.Constants.activity, _Constants.Constants.text], () => htmlNode.innerHTML);
    } catch (e) {
      let errorMessage = "Failed to apply action: ";
      try {
        errorMessage += JSON.stringify(action);
      } catch (e) {
        errorMessage += " (unable to stringify action)";
      }
      _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.ERROR, {
        Event: _TelemetryConstants.TelemetryEvent.ProcessingHTMLTextMiddlewareFailed,
        ExceptionDetails: {
          ErrorData: errorMessage,
          Exception: e
        }
      });
    }
  }
  return action;
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars
const htmlTextMiddleware = _ref => {
  let {
    dispatch
  } = _ref;
  return next => action => {
    if (action.type === _WebChatActionType.WebChatActionType.DIRECT_LINE_INCOMING_ACTIVITY) {
      try {
        var _action$payload, _action$payload$activ;
        const text = (_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : (_action$payload$activ = _action$payload.activity) === null || _action$payload$activ === void 0 ? void 0 : _action$payload$activ.text;
        if (text) {
          action = processHTMLText(action, text);
        }
      } catch (e) {
        let errorMessage = "Failed to validate action.";
        try {
          errorMessage += JSON.stringify(action);
        } catch (e) {
          errorMessage += " (unable to stringify action)";
        }
        _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.ERROR, {
          Event: _TelemetryConstants.TelemetryEvent.ProcessingHTMLTextMiddlewareFailed,
          ExceptionDetails: {
            ErrorData: errorMessage,
            Exception: e
          }
        });
      }
    }
    return next(action);
  };
};
var _default = htmlTextMiddleware;
exports.default = _default;