"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Constants = require("../../../../../common/Constants");
var _react = _interopRequireDefault(require("react"));
var _FileAttachmentIconManager = require("../../../common/utils/FileAttachmentIconManager");
var _TelemetryConstants = require("../../../../../common/telemetry/TelemetryConstants");
var _omnichannelChatComponents = require("@microsoft/omnichannel-chat-components");
var _WebChatActionType = require("../../enums/WebChatActionType");
var _defaultAtttachmentAdaptiveCardStyles = require("./defaultStyles/defaultAtttachmentAdaptiveCardStyles");
var _defaultAttachmentContentStyles = require("./defaultStyles/defaultAttachmentContentStyles");
var _defaultAttachmentDividerStyles = require("./defaultStyles/defaultAttachmentDividerStyles");
var _defaultAttachmentDownloadIconStyles = require("./defaultStyles/defaultAttachmentDownloadIconStyles");
var _defaultAttachmentFileNameStyles = require("./defaultStyles/defaultAttachmentFileNameStyles");
var _defaultAtttachmentIconStyles = require("./defaultStyles/defaultAtttachmentIconStyles");
var _defaultAttachmentProps = require("../../../common/defaultProps/defaultAttachmentProps");
var _defaultAttachmentSizeStyles = require("./defaultStyles/defaultAttachmentSizeStyles");
var _defaultAtttachmentStyles = require("./defaultStyles/defaultAtttachmentStyles");
var _ = require("../../../../..");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/* eslint-disable @typescript-eslint/no-explicit-any */
/******
 * AttachmentMiddleware
 * 
 * Handles attachment downloading.
 ******/

const AttachmentContent = props => {
  return /*#__PURE__*/_react.default.createElement("div", {
    id: props.id,
    style: props.style
  }, props.children);
};
const AttachmentIcon = props => {
  return /*#__PURE__*/_react.default.createElement("div", {
    id: props.id,
    style: props.style
  }, /*#__PURE__*/_react.default.createElement("img", {
    src: props.src ?? (0, _FileAttachmentIconManager.getFileAttachmentIconData)("txt")
  }));
};
const Attachment = props => {
  var _state$domainStates$r, _state$domainStates$r2, _state$domainStates$r3, _state$domainStates$r4, _state$domainStates$r5, _state$domainStates$r6, _state$domainStates$r7, _state$domainStates$r8, _state$domainStates$r9;
  const {
    iconData,
    imageCard,
    textCard,
    renderer
  } = props;
  const [state] = (0, _.useChatContextStore)();
  const attachmentId = ((_state$domainStates$r = state.domainStates.renderingMiddlewareProps) === null || _state$domainStates$r === void 0 ? void 0 : (_state$domainStates$r2 = _state$domainStates$r.attachmentProps) === null || _state$domainStates$r2 === void 0 ? void 0 : _state$domainStates$r2.webChatAttachmentId) ?? _defaultAttachmentProps.defaultAttachmentProps.webChatAttachmentId;
  const attachmentDividerStyles = {
    ..._defaultAttachmentDividerStyles.defaultAttachmentDividerStyles,
    ...((_state$domainStates$r3 = state.domainStates.renderingMiddlewareProps) === null || _state$domainStates$r3 === void 0 ? void 0 : _state$domainStates$r3.attachmentDividerStyles)
  };
  const attachmentIconStyles = {
    ..._defaultAtttachmentIconStyles.defaultAttachmentIconStyles,
    ...((_state$domainStates$r4 = state.domainStates.renderingMiddlewareProps) === null || _state$domainStates$r4 === void 0 ? void 0 : _state$domainStates$r4.attachmentIconStyles)
  };
  const attachmentStyles = {
    ..._defaultAtttachmentStyles.defaultAttachmentStyles,
    ...((_state$domainStates$r5 = state.domainStates.renderingMiddlewareProps) === null || _state$domainStates$r5 === void 0 ? void 0 : _state$domainStates$r5.attachmentStyles)
  };
  const attachmentSizeStylesString = Object.entries({
    ..._defaultAttachmentSizeStyles.defaultAttachmentSizeStyles,
    ...((_state$domainStates$r6 = state.domainStates.renderingMiddlewareProps) === null || _state$domainStates$r6 === void 0 ? void 0 : _state$domainStates$r6.attachmentSizeStyles)
  }).map(_ref => {
    let [k, v] = _ref;
    return `${k.replace(/[A-Z]/g, match => `-${match.toLowerCase()}`)}:${v}`;
  }).join(";");
  const attachmentContentStylesString = Object.entries({
    ..._defaultAttachmentContentStyles.defaultAttachmentContentStyles,
    ...((_state$domainStates$r7 = state.domainStates.renderingMiddlewareProps) === null || _state$domainStates$r7 === void 0 ? void 0 : _state$domainStates$r7.attachmentContentStyles)
  }).map(_ref2 => {
    let [k, v] = _ref2;
    return `${k.replace(/[A-Z]/g, match => `-${match.toLowerCase()}`)}:${v}`;
  }).join(";");
  const attachmentFileNameStylesString = Object.entries({
    ..._defaultAttachmentFileNameStyles.defaultAttachmentFileNameStyles,
    ...((_state$domainStates$r8 = state.domainStates.renderingMiddlewareProps) === null || _state$domainStates$r8 === void 0 ? void 0 : _state$domainStates$r8.attachmentFileNameStyles)
  }).map(_ref3 => {
    let [k, v] = _ref3;
    return `${k.replace(/[A-Z]/g, match => `-${match.toLowerCase()}`)}:${v}`;
  }).join(";");
  const attachmentDownloadIconStylesString = Object.entries({
    ..._defaultAttachmentDownloadIconStyles.defaultAttachmentDownloadIconStyles,
    ...((_state$domainStates$r9 = state.domainStates.renderingMiddlewareProps) === null || _state$domainStates$r9 === void 0 ? void 0 : _state$domainStates$r9.attachmentDownloadIconStyles)
  }).map(_ref4 => {
    let [k, v] = _ref4;
    return `${k.replace(/[A-Z]/g, match => `-${match.toLowerCase()}`)}:${v}`;
  }).join(";");
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("style", null, `
            .webchat__fileContent__size { ${attachmentSizeStylesString} }
            .webchat__fileContent { ${attachmentContentStylesString} }
            .webchat__fileContent__fileName { ${attachmentFileNameStylesString} }
            .webchat__fileContent__downloadIcon { ${attachmentDownloadIconStylesString} }
        `), /*#__PURE__*/_react.default.createElement("div", {
    dir: state.domainStates.globalDir
  }, imageCard && renderer(imageCard), imageCard && /*#__PURE__*/_react.default.createElement("hr", {
    id: attachmentId + "-divider",
    style: attachmentDividerStyles
  }), /*#__PURE__*/_react.default.createElement(AttachmentContent, {
    attachment: textCard.attachment,
    id: attachmentId,
    style: attachmentStyles
  }, /*#__PURE__*/_react.default.createElement(AttachmentIcon, {
    src: iconData,
    id: attachmentId + "-icon",
    style: attachmentIconStyles
  }), textCard && renderer(textCard))));
};

/**
* Patch card with different attachment data.
* @param card
* @param newAttachment
*/
const patchAttachment = (card, newAttachment) => {
  const {
    activity,
    attachment
  } = card;
  const patchedAttachment = Object.assign({}, attachment);
  patchedAttachment.contentType = newAttachment.contentType;
  patchedAttachment.thumbnailUrl = newAttachment.thumbnailUrl;
  const patchedAttachments = activity.attachments.map(target => target === attachment ? patchedAttachment : target);
  const patchedActivity = Object.assign({}, activity);
  patchedActivity.attachments = patchedAttachments;
  return {
    activity: patchedActivity,
    attachment: patchedAttachment
  };
};
const genPreviewCardWithAttachment = (card, iconData, next) => {
  const patchedTextCard = patchAttachment(card, {
    contentType: _Constants.MimeTypes.UnknownFileType,
    thumbnailUrl: undefined
  });
  return /*#__PURE__*/_react.default.createElement(Attachment, {
    iconData: iconData,
    imageCard: card,
    textCard: patchedTextCard,
    renderer: next
  });
};
const createAttachmentMiddleware = enableInlinePlaying => {
  // eslint-disable-next-line react/display-name   
  const attachmentMiddleware = () => next => function () {
    var _state$domainStates$r10, _state$domainStates$r11, _state$domainStates$r12, _card$activity$channe;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    const [card] = args;
    if (!(card !== null && card !== void 0 && card.activity)) {
      return next(...args);
    }
    const {
      activity: {
        attachments
      },
      attachment
    } = card;
    // No attachment
    if (!attachments || !attachments.length || !attachment) {
      return next(...args);
    }

    // Check for Adaptive cards
    // eslint-disable-next-line prefer-const
    let {
      content,
      contentType
    } = attachment || {
      content: "",
      contentType: ""
    };
    let {
      type
    } = content || {
      type: ""
    };
    if (!type && content && _Constants.Constants.supportedAdaptiveCardContentTypes.indexOf(contentType) >= 0) {
      try {
        content = JSON.parse(content);
        type = content.type;
        card.attachment.content = content;
      } catch (e) {
        const errorData = "Unable to parse the adaptive card format";
        _omnichannelChatComponents.BroadcastService.postMessage({
          eventName: _TelemetryConstants.BroadcastEvent.InvalidAdaptiveCardFormat,
          payload: {
            Message: errorData,
            ExceptionDetails: e
          }
        });
      }
    }
    const [state] = (0, _.useChatContextStore)();
    const attachmentId = ((_state$domainStates$r10 = state.domainStates.renderingMiddlewareProps) === null || _state$domainStates$r10 === void 0 ? void 0 : (_state$domainStates$r11 = _state$domainStates$r10.attachmentProps) === null || _state$domainStates$r11 === void 0 ? void 0 : _state$domainStates$r11.adaptiveCardAttachmentId) ?? _defaultAttachmentProps.defaultAttachmentProps.adaptiveCardAttachmentId;
    const atttachmentAdaptiveCardStyles = {
      ..._defaultAtttachmentAdaptiveCardStyles.defaultAttachmentAdaptiveCardStyles,
      ...((_state$domainStates$r12 = state.domainStates.renderingMiddlewareProps) === null || _state$domainStates$r12 === void 0 ? void 0 : _state$domainStates$r12.attachmentAdaptiveCardStyles)
    };
    if (type === _Constants.WebChatMiddlewareConstants.adaptiveCard || _Constants.Constants.supportedAdaptiveCardContentTypes.indexOf(contentType) >= 0) {
      return /*#__PURE__*/_react.default.createElement("div", {
        id: attachmentId,
        style: atttachmentAdaptiveCardStyles
      }, next(...args));
    } else if (contentType.startsWith(_Constants.Constants.adaptiveCardContentTypePrefix)) {
      console.warn(`${contentType} adaptive card type is currently not supported.`);
    }
    if ((_card$activity$channe = card.activity.channelData) !== null && _card$activity$channe !== void 0 && _card$activity$channe.middlewareData) {
      attachment.contentUrl = card.activity.channelData.middlewareData[attachment.name];
    } else if (attachment !== null && attachment !== void 0 && attachment.tempContentUrl) {
      attachment.contentUrl = attachment.tempContentUrl;
    }
    if (!attachment.name) {
      return next(...args);
    }
    const fileExtension = attachment.name.substring(attachment.name.lastIndexOf(".") + 1, attachment.name.length) || attachment.name;
    const imageExtension = _Constants.Constants.imageRegex.test(attachment.name);
    const audioExtension = _Constants.Constants.audioMediaRegex.test(attachment.name);
    const videoExtension = _Constants.Constants.videoMediaRegex.test(attachment.name);
    const iconData = (0, _FileAttachmentIconManager.getFileAttachmentIconData)(fileExtension);
    if (imageExtension) {
      return genPreviewCardWithAttachment(card, iconData, next);
    }
    if (audioExtension || videoExtension) {
      if (enableInlinePlaying && card.activity.actionType && card.activity.actionType === _WebChatActionType.WebChatActionType.DIRECT_LINE_INCOMING_ACTIVITY && (0, _FileAttachmentIconManager.isInlineMediaSupported)(attachment.name)) {
        return genPreviewCardWithAttachment(card, iconData, next);
      }
      return /*#__PURE__*/_react.default.createElement(Attachment, {
        iconData: iconData,
        textCard: patchAttachment(card, {
          contentType: _Constants.MimeTypes.UnknownFileType,
          thumbnailUrl: undefined
        }),
        renderer: next
      });
    }
    const isUnknownImageObject = contentType.toLowerCase().includes("image") && !imageExtension;
    if (fileExtension === "txt" || isUnknownImageObject) {
      return /*#__PURE__*/_react.default.createElement(Attachment, {
        iconData: iconData,
        textCard: patchAttachment(card, {
          contentType: _Constants.MimeTypes.UnknownFileType,
          thumbnailUrl: undefined
        }),
        renderer: next
      });
    }
    return /*#__PURE__*/_react.default.createElement(Attachment, {
      iconData: iconData,
      textCard: card,
      renderer: next
    });
  };
  return attachmentMiddleware;
};
var _default = createAttachmentMiddleware;
exports.default = _default;