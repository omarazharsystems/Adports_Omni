"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TelemetryConstants = require("../../../../../common/telemetry/TelemetryConstants");
var _NotificationHandler = require("../../notification/NotificationHandler");
var _NotificationScenarios = require("../../enums/NotificationScenarios");
var _WebChatActionType = require("../../enums/WebChatActionType");
var _TelemetryHelper = require("../../../../../common/telemetry/TelemetryHelper");
var _Constants = require("../../../../../common/Constants");
/******
 * AttachmentUploadValidatorMiddleware
 * 
 * Checks if the attachment being uploaded satisfies Omnichannel's requirement on file extensions and file size.
 ******/

const MBtoBRatio = 1000000;

/*
* If an attachment is invalid, delete this attachment from the attachments list
* If the result attachment list is empty, return a dummy action
*/
const validateAttachment = (action, allowedFileExtensions, maxFileSizeSupportedByDynamics, localizedTexts) => {
  var _action$payload, _action$payload$activ, _action$payload2, _action$payload2$acti, _action$payload2$acti2, _action$payload3, _action$payload3$acti, _action$payload3$acti2;
  const attachments = action === null || action === void 0 ? void 0 : (_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : (_action$payload$activ = _action$payload.activity) === null || _action$payload$activ === void 0 ? void 0 : _action$payload$activ.attachments;
  const attachmentSizes = action === null || action === void 0 ? void 0 : (_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : (_action$payload2$acti = _action$payload2.activity) === null || _action$payload2$acti === void 0 ? void 0 : (_action$payload2$acti2 = _action$payload2$acti.channelData) === null || _action$payload2$acti2 === void 0 ? void 0 : _action$payload2$acti2.attachmentSizes;
  if (attachments) {
    for (let i = 0; i < attachments.length; i++) {
      const maxUploadFileSize = getMaxUploadFileSize(maxFileSizeSupportedByDynamics, attachments[i].contentType);
      const fileExtensionValid = validateFileExtension(attachments[i], allowedFileExtensions);
      const fileSizeValid = validateFileSize(attachmentSizes[i], maxUploadFileSize);
      const fileIsEmpty = parseInt(attachmentSizes[i]) == 0;
      if (!fileExtensionValid || !fileSizeValid || fileIsEmpty) {
        _NotificationHandler.NotificationHandler.notifyError(_NotificationScenarios.NotificationScenarios.AttachmentError, buildErrorMessage(attachments[i].name, fileExtensionValid, fileSizeValid, fileIsEmpty, maxUploadFileSize.toString(), maxFileSizeSupportedByDynamics, localizedTexts));
        attachments.splice(i, 1);
        attachmentSizes.splice(i, 1);
        i--;
      }
    }
  }
  if ((action === null || action === void 0 ? void 0 : (_action$payload3 = action.payload) === null || _action$payload3 === void 0 ? void 0 : (_action$payload3$acti = _action$payload3.activity) === null || _action$payload3$acti === void 0 ? void 0 : (_action$payload3$acti2 = _action$payload3$acti.attachments) === null || _action$payload3$acti2 === void 0 ? void 0 : _action$payload3$acti2.length) > 0) {
    return action;
  } else {
    return {
      type: "",
      payload: null
    };
  }
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const validateFileExtension = (attachment, allowedFileExtensions) => {
  if (!allowedFileExtensions) {
    return true;
  }
  const fileName = attachment.name.toLowerCase();
  const index = fileName.lastIndexOf(".");
  if (!index) {
    return false;
  }
  const fileExtension = fileName.substring(index);
  const allExtensions = allowedFileExtensions === null || allowedFileExtensions === void 0 ? void 0 : allowedFileExtensions.toLowerCase().split(",");
  return allExtensions.indexOf(fileExtension) > -1;
};
const validateFileSize = (attachmentSize, maxUploadFileSize) => {
  return maxUploadFileSize * MBtoBRatio > parseInt(attachmentSize);
};
const getMaxUploadFileSize = (maxFileSizeSupportedByDynamicsStr, contentType) => {
  const maxFileSizeSupportedByDynamics = maxFileSizeSupportedByDynamicsStr && parseInt(maxFileSizeSupportedByDynamicsStr) ? parseInt(maxFileSizeSupportedByDynamicsStr) : _Constants.AMSConstants.maxSupportedFileSize;
  const amsAttachmentSizeLimit = isImage(contentType) ? _Constants.AMSConstants.maxSupportedImageSize : _Constants.AMSConstants.maxSupportedFileSize;
  // Takes the smallest max file size configure betteween AMS and Dynamics Config
  return maxFileSizeSupportedByDynamics < amsAttachmentSizeLimit ? maxFileSizeSupportedByDynamics : amsAttachmentSizeLimit;
};
const isImage = contentType => {
  return _Constants.AMSConstants.supportedImagesMimeTypes.includes(contentType);
};
const textEllipsis = function (str) {
  let maxLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;
  const ellipsis = "...";
  return str.length > maxLength ? str.slice(0, maxLength - ellipsis.length) + ellipsis : str;
};
const buildErrorMessage = (fileName, supportedFileExtension, supportedFileSize, fileIsEmpty, maxUploadFileSize, maxFileSizeSupportedByDynamics, localizedTexts) => {
  let errorMessage = "";
  if (!fileName || !maxUploadFileSize) {
    _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.ERROR, {
      Event: _TelemetryConstants.TelemetryEvent.AttachmentUploadValidatorMiddlewareFailed,
      Description: "Attachment validation failed",
      ExceptionDetails: {
        ErrorDetails: "File provided is null"
      }
    });
    return localizedTexts.MIDDLEWARE_BANNER_FILE_NULL_ERROR ?? "";
  }
  if (!supportedFileExtension && !supportedFileSize) {
    errorMessage = getFileSizeAndFileExtensionErrorMessage(fileName, maxUploadFileSize, maxFileSizeSupportedByDynamics, localizedTexts);
  } else if (!supportedFileSize) {
    errorMessage = getFileSizeErrorMessage(fileName, maxUploadFileSize, maxFileSizeSupportedByDynamics, localizedTexts);
  } else if (!supportedFileExtension) {
    errorMessage = getFileExtensionErrorMessage(fileName, localizedTexts);
  } else if (fileIsEmpty) {
    var _errorMessage;
    _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.ERROR, {
      Event: _TelemetryConstants.TelemetryEvent.AttachmentUploadValidatorMiddlewareFailed,
      Description: "Attachment validation failed",
      ExceptionDetails: {
        ErrorDetails: "File provided is empty"
      }
    });
    errorMessage = localizedTexts.MIDDLEWARE_BANNER_FILE_IS_EMPTY_ERROR || "";
    if ((_errorMessage = errorMessage) !== null && _errorMessage !== void 0 && _errorMessage.includes("{2}")) errorMessage = errorMessage.replace("{2}", textEllipsis(fileName));
  } else {
    _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.ERROR, {
      Event: _TelemetryConstants.TelemetryEvent.AttachmentUploadValidatorMiddlewareFailed,
      Description: "Attachment validation failed",
      ExceptionDetails: {
        ErrorDetails: `Unexpected error: supportedFileExtension=${supportedFileExtension} supportedFileSize=${supportedFileSize} fileIsEmpty=${!fileIsEmpty}`
      }
    });
    errorMessage = localizedTexts.MIDDLEWARE_BANNER_ERROR_MESSAGE ?? "";
  }
  return errorMessage;
};
const getFileSizeAndFileExtensionErrorMessage = (fileName, maxUploadFileSize, maxFileSizeSupportedByDynamics, localizedTexts) => {
  var _errorMessage3;
  const index = fileName.lastIndexOf(".");
  let errorMessage, exceptionDetails;
  if (index < 0) {
    errorMessage = localizedTexts.MIDDLEWARE_BANNER_FILE_SIZE_WITHOUT_EXTENSION_ERROR;
    exceptionDetails = `File exceeded the allowed limit of ${maxUploadFileSize} MB and File provided without file extension`;
  } else {
    var _errorMessage2;
    const fileExtension = fileName.substring(index);
    errorMessage = localizedTexts.MIDDLEWARE_BANNER_FILE_SIZE_EXTENSION_ERROR;
    if ((_errorMessage2 = errorMessage) !== null && _errorMessage2 !== void 0 && _errorMessage2.includes("{1}")) errorMessage = errorMessage.replace("{1}", fileExtension);
    exceptionDetails = `File exceeds the allowed limit of ${maxUploadFileSize} MB and ${fileExtension} files are not supported`;
  }
  _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.ERROR, {
    Event: _TelemetryConstants.TelemetryEvent.AttachmentUploadValidatorMiddlewareFailed,
    Description: "Attachment validation failed",
    ExceptionDetails: {
      ErrorDetails: `${exceptionDetails} Dynamics file size limit=${maxFileSizeSupportedByDynamics} AMS image size limit=${_Constants.AMSConstants.maxSupportedImageSize} AMS file size limit=${_Constants.AMSConstants.maxSupportedFileSize}`
    }
  });
  if ((_errorMessage3 = errorMessage) !== null && _errorMessage3 !== void 0 && _errorMessage3.includes("{0}")) errorMessage = errorMessage.replace("{0}", maxUploadFileSize);
  return errorMessage ? errorMessage.includes("{2}") ? errorMessage.replace("{2}", textEllipsis(fileName)) : errorMessage : "";
};
const getFileExtensionErrorMessage = (fileName, localizedTexts) => {
  const index = fileName.lastIndexOf(".");
  let errorMessage;
  if (index < 0) {
    _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.ERROR, {
      Event: _TelemetryConstants.TelemetryEvent.AttachmentUploadValidatorMiddlewareFailed,
      Description: "Attachment validation failed",
      ExceptionDetails: {
        ErrorDetails: "File provided without file extension"
      }
    });
    errorMessage = localizedTexts.MIDDLEWARE_BANNER_FILE_WITHOUT_EXTENSION;
    return errorMessage ? errorMessage.includes("{2}") ? errorMessage.replace("{2}", textEllipsis(fileName)) : errorMessage : "";
  } else {
    var _errorMessage4, _errorMessage5;
    const fileExtension = fileName.substring(index);
    _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.ERROR, {
      Event: _TelemetryConstants.TelemetryEvent.AttachmentUploadValidatorMiddlewareFailed,
      Description: "Attachment validation failed",
      ExceptionDetails: {
        ErrorDetails: `${fileExtension} files extension is not supported.`
      }
    });
    errorMessage = localizedTexts.MIDDLEWARE_BANNER_FILE_EXTENSION_ERROR;
    if ((_errorMessage4 = errorMessage) !== null && _errorMessage4 !== void 0 && _errorMessage4.includes("{0}")) errorMessage = errorMessage.replace("{0}", fileExtension); //keeping backwards compatibility for this localized string
    if ((_errorMessage5 = errorMessage) !== null && _errorMessage5 !== void 0 && _errorMessage5.includes("{1}")) errorMessage = errorMessage.replace("{1}", fileExtension);
    return errorMessage && errorMessage.length > 0 ? errorMessage : "";
  }
};
const getFileSizeErrorMessage = (fileName, maxUploadFileSize, maxFileSizeSupportedByDynamics, localizedTexts) => {
  var _errorMessage6;
  _TelemetryHelper.TelemetryHelper.logActionEvent(_TelemetryConstants.LogLevel.ERROR, {
    Event: _TelemetryConstants.TelemetryEvent.AttachmentUploadValidatorMiddlewareFailed,
    Description: "Attachment validation failed",
    ExceptionDetails: {
      ErrorDetails: `File exceeds the allowed limit of ${maxUploadFileSize}MB. Dynamics file size limit=${maxFileSizeSupportedByDynamics} AMS image size limit=${_Constants.AMSConstants.maxSupportedImageSize} AMS file size limit=${_Constants.AMSConstants.maxSupportedFileSize}`
    }
  });
  let errorMessage = localizedTexts.MIDDLEWARE_BANNER_FILE_SIZE_ERROR;
  if ((_errorMessage6 = errorMessage) !== null && _errorMessage6 !== void 0 && _errorMessage6.includes("{0}")) errorMessage = errorMessage.replace("{0}", maxUploadFileSize);
  return errorMessage ? errorMessage.includes("{2}") ? errorMessage.replace("{2}", textEllipsis(fileName)) : errorMessage : "";
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars
const createAttachmentUploadValidatorMiddleware = (allowedFileExtensions, maxFileSizeSupportedByDynamics, localizedTexts) => _ref => {
  let {
    dispatch
  } = _ref;
  return next => action => {
    if (action.type === _WebChatActionType.WebChatActionType.DIRECT_LINE_POST_ACTIVITY) {
      var _payload$activity, _payload$activity2, _payload$activity2$ch, _payload$activity3, _payload$activity3$at, _payload$activity4, _payload$activity4$ch, _payload$activity4$ch2;
      const {
        payload
      } = action;
      if (payload !== null && payload !== void 0 && (_payload$activity = payload.activity) !== null && _payload$activity !== void 0 && _payload$activity.attachments && payload !== null && payload !== void 0 && (_payload$activity2 = payload.activity) !== null && _payload$activity2 !== void 0 && (_payload$activity2$ch = _payload$activity2.channelData) !== null && _payload$activity2$ch !== void 0 && _payload$activity2$ch.attachmentSizes && (payload === null || payload === void 0 ? void 0 : (_payload$activity3 = payload.activity) === null || _payload$activity3 === void 0 ? void 0 : (_payload$activity3$at = _payload$activity3.attachments) === null || _payload$activity3$at === void 0 ? void 0 : _payload$activity3$at.length) === (payload === null || payload === void 0 ? void 0 : (_payload$activity4 = payload.activity) === null || _payload$activity4 === void 0 ? void 0 : (_payload$activity4$ch = _payload$activity4.channelData) === null || _payload$activity4$ch === void 0 ? void 0 : (_payload$activity4$ch2 = _payload$activity4$ch.attachmentSizes) === null || _payload$activity4$ch2 === void 0 ? void 0 : _payload$activity4$ch2.length)) {
        return next(validateAttachment(action, allowedFileExtensions, maxFileSizeSupportedByDynamics, localizedTexts));
      }
    }
    return next(action);
  };
};
var _default = createAttachmentUploadValidatorMiddleware;
exports.default = _default;