"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.LoadingPaneStateful = void 0;
var _TelemetryConstants = require("../../common/telemetry/TelemetryConstants");
var _react = _interopRequireWildcard(require("react"));
var _omnichannelChatComponents = require("@microsoft/omnichannel-chat-components");
var _TelemetryHelper = require("../../common/telemetry/TelemetryHelper");
var _defaultgeneralLoadingPaneStyleProps = require("./common/defaultStyleProps/defaultgeneralLoadingPaneStyleProps");
var _errorUILoadingPaneStyleProps = require("./common/errorUIStyleProps/errorUILoadingPaneStyleProps");
var _utils = require("../../common/utils");
var _useChatContextStore = _interopRequireDefault(require("../../hooks/useChatContextStore"));
var _useWindowDimensions = _interopRequireDefault(require("../../hooks/useWindowDimensions"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const LoadingPaneStateful = props => {
  var _loadingPaneProps$sty, _startChatErrorPanePr, _startChatErrorPanePr2;
  const [state] = (0, _useChatContextStore.default)();
  const {
    loadingPaneProps,
    startChatErrorPaneProps
  } = props;
  const generalLoadingPaneStyleProps = Object.assign({}, _defaultgeneralLoadingPaneStyleProps.defaultGeneralLoadingPaneStyleProps, loadingPaneProps === null || loadingPaneProps === void 0 ? void 0 : (_loadingPaneProps$sty = loadingPaneProps.styleProps) === null || _loadingPaneProps$sty === void 0 ? void 0 : _loadingPaneProps$sty.generalStyleProps);
  const loadingPaneStyleProps = {
    ...(loadingPaneProps === null || loadingPaneProps === void 0 ? void 0 : loadingPaneProps.styleProps),
    generalStyleProps: generalLoadingPaneStyleProps
  };
  const errorUIStyleProps = {
    ..._errorUILoadingPaneStyleProps.errorUILoadingPaneStyleProps
  };
  const loadingPaneControlProps = {
    id: "oc-lcw-loading-pane",
    dir: state.domainStates.globalDir,
    ...(loadingPaneProps === null || loadingPaneProps === void 0 ? void 0 : loadingPaneProps.controlProps)
  };
  const errorUIControlProps = {
    ...(loadingPaneProps === null || loadingPaneProps === void 0 ? void 0 : loadingPaneProps.controlProps),
    id: "oc-lcw-alert-pane",
    dir: state.domainStates.globalDir,
    titleText: (startChatErrorPaneProps === null || startChatErrorPaneProps === void 0 ? void 0 : (_startChatErrorPanePr = startChatErrorPaneProps.controlProps) === null || _startChatErrorPanePr === void 0 ? void 0 : _startChatErrorPanePr.titleText) ?? "We are unable to load chat at this time.",
    subtitleText: (startChatErrorPaneProps === null || startChatErrorPaneProps === void 0 ? void 0 : (_startChatErrorPanePr2 = startChatErrorPaneProps.controlProps) === null || _startChatErrorPanePr2 === void 0 ? void 0 : _startChatErrorPanePr2.subtitleText) ?? "Please try again later.",
    hideSpinner: true,
    hideSpinnerText: true
  };
  const {
    height,
    width
  } = (0, _useWindowDimensions.default)();

  // Move focus to the first button
  (0, _react.useEffect)(() => {
    const firstElement = (0, _utils.findAllFocusableElement)(`#${state.domainStates.widgetElementId}`);
    if (firstElement && firstElement[0]) {
      firstElement[0].focus();
    }
    _TelemetryHelper.TelemetryHelper.logLoadingEvent(_TelemetryConstants.LogLevel.INFO, {
      Event: _TelemetryConstants.TelemetryEvent.LoadingPaneLoaded,
      Description: "Loading pane loaded."
    });
  }, []);
  return /*#__PURE__*/_react.default.createElement(_omnichannelChatComponents.LoadingPane, {
    componentOverrides: loadingPaneProps === null || loadingPaneProps === void 0 ? void 0 : loadingPaneProps.componentOverrides,
    controlProps: state.appStates.startChatFailed ? errorUIControlProps : loadingPaneControlProps,
    styleProps: state.appStates.startChatFailed ? errorUIStyleProps : loadingPaneStyleProps,
    windowWidth: width,
    windowHeight: height
  });
};
exports.LoadingPaneStateful = LoadingPaneStateful;
var _default = LoadingPaneStateful;
exports.default = _default;