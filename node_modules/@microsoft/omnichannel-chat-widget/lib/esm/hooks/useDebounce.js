import { useRef, useEffect } from "react";
export default function useDebounce(func) {
  let delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;
  const timer = useRef();
  useEffect(() => {
    return () => {
      if (!timer.current) return;
      clearTimeout(timer.current);
    };
  }, []);
  const debouncedFunction = function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    const newTimer = setTimeout(() => {
      func(...args);
    }, delay);
    clearTimeout(timer.current);
    timer.current = newTimer;
  };
  return debouncedFunction;
}