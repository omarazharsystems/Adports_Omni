import { LogLevel, TelemetryEvent } from "../../common/telemetry/TelemetryConstants";
import { ConfirmationPane } from "@microsoft/omnichannel-chat-components";
import React, { useEffect } from "react";
import { findAllFocusableElement, findParentFocusableElementsWithoutChildContainer, preventFocusToMoveOutOfElement, setFocusOnElement, setFocusOnSendBox, setTabIndices } from "../../common/utils";
import { DimLayer } from "../dimlayer/DimLayer";
import { LiveChatWidgetActionType } from "../../contexts/common/LiveChatWidgetActionType";
import { TelemetryHelper } from "../../common/telemetry/TelemetryHelper";
import useChatContextStore from "../../hooks/useChatContextStore";
import { ConfirmationState } from "../../common/Constants";

// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const ConfirmationPaneStateful = props => {
  const initialTabIndexMap = new Map();
  let elements = [];
  const [state, dispatch] = useChatContextStore();
  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars
  const controlProps = {
    id: "oc-lcw-confirmation-pane",
    dir: state.domainStates.globalDir,
    onConfirm: async () => {
      TelemetryHelper.logActionEvent(LogLevel.INFO, {
        Event: TelemetryEvent.ConfirmationConfirmButtonClicked,
        Description: "Confirmation pane Confirm button clicked"
      });
      dispatch({
        type: LiveChatWidgetActionType.SET_SHOW_CONFIRMATION,
        payload: false
      });
      dispatch({
        type: LiveChatWidgetActionType.SET_CONFIRMATION_STATE,
        payload: ConfirmationState.Ok
      });
      setTabIndices(elements, initialTabIndexMap, true);
      TelemetryHelper.logActionEvent(LogLevel.INFO, {
        Event: TelemetryEvent.ConversationEndedByCustomer,
        Description: "Conversation is ended by customer."
      });
    },
    onCancel: () => {
      TelemetryHelper.logActionEvent(LogLevel.INFO, {
        Event: TelemetryEvent.ConfirmationCancelButtonClicked,
        Description: "Confirmation pane Cancel button clicked."
      });
      dispatch({
        type: LiveChatWidgetActionType.SET_SHOW_CONFIRMATION,
        payload: false
      });
      dispatch({
        type: LiveChatWidgetActionType.SET_CONFIRMATION_STATE,
        payload: ConfirmationState.Cancel
      });
      const previousFocusedElementId = state.appStates.previousElementIdOnFocusBeforeModalOpen;
      if (previousFocusedElementId) {
        setFocusOnElement("#" + previousFocusedElementId);
        dispatch({
          type: LiveChatWidgetActionType.SET_PREVIOUS_FOCUSED_ELEMENT_ID,
          payload: null
        });
      } else {
        setFocusOnSendBox();
      }
      setTabIndices(elements, initialTabIndexMap, true);
    },
    ...(props === null || props === void 0 ? void 0 : props.controlProps)
  };

  // Move focus to the first button
  useEffect(() => {
    preventFocusToMoveOutOfElement(controlProps.id);
    const focusableElements = findAllFocusableElement(`#${controlProps.id}`);
    if (focusableElements) {
      focusableElements[0].focus();
    }
    elements = findParentFocusableElementsWithoutChildContainer(controlProps.id);
    setTabIndices(elements, initialTabIndexMap, false);
    TelemetryHelper.logLoadingEvent(LogLevel.INFO, {
      Event: TelemetryEvent.ConfirmationPaneLoaded
    });
  }, []);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DimLayer, {
    brightness: (controlProps === null || controlProps === void 0 ? void 0 : controlProps.brightnessValueOnDim) ?? "0.2"
  }), /*#__PURE__*/React.createElement(ConfirmationPane, {
    componentOverrides: props === null || props === void 0 ? void 0 : props.componentOverrides,
    controlProps: controlProps,
    styleProps: props === null || props === void 0 ? void 0 : props.styleProps
  }));
};
export default ConfirmationPaneStateful;