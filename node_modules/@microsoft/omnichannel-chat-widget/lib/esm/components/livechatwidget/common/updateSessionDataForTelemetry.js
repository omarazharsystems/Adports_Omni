import { BroadcastEvent } from "../../../common/telemetry/TelemetryConstants";
import { BroadcastService } from "@microsoft/omnichannel-chat-components";
import { LiveChatWidgetActionType } from "../../../contexts/common/LiveChatWidgetActionType";
import { TelemetryHelper } from "../../../common/telemetry/TelemetryHelper";
import { TelemetryManager } from "../../../common/telemetry/TelemetryManager";
import { getConversationDetailsCall } from "../../../common/utils";

// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const updateSessionDataForTelemetry = async (chatSDK, dispatch) => {
  if (chatSDK) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const chatSession = await chatSDK.getCurrentLiveChatContext();
    const telemetryData = TelemetryHelper.addSessionDataToTelemetry(chatSession, TelemetryManager.InternalTelemetryData);
    dispatch({
      type: LiveChatWidgetActionType.SET_TELEMETRY_DATA,
      payload: telemetryData
    });
    BroadcastService.postMessage({
      eventName: BroadcastEvent.UpdateSessionDataForTelemetry,
      payload: {
        chatSession
      }
    });
    await updateConversationDataForTelemetry(chatSDK, dispatch);
  }
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const updateConversationDataForTelemetry = async (chatSDK, dispatch) => {
  if (chatSDK) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const liveWorkItem = await getConversationDetailsCall(chatSDK);
    const telemetryData = TelemetryHelper.addConversationDataToTelemetry(liveWorkItem, TelemetryManager.InternalTelemetryData);
    dispatch({
      type: LiveChatWidgetActionType.SET_TELEMETRY_DATA,
      payload: telemetryData
    });
    BroadcastService.postMessage({
      eventName: BroadcastEvent.UpdateConversationDataForTelemetry,
      payload: {
        liveWorkItem
      }
    });
  }
};