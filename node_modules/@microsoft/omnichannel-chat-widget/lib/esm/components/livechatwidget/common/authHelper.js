import { LogLevel, TelemetryEvent } from "../../../common/telemetry/TelemetryConstants";
import { TelemetryHelper } from "../../../common/telemetry/TelemetryHelper";
import { isNullOrEmptyString } from "../../../common/utils";
const getAuthClientFunction = chatConfig => {
  let authClientFunction = undefined;
  if (chatConfig !== null && chatConfig !== void 0 && chatConfig.LiveChatConfigAuthSettings) {
    var _chatConfig$LiveChatC;
    authClientFunction = (chatConfig === null || chatConfig === void 0 ? void 0 : (_chatConfig$LiveChatC = chatConfig.LiveChatConfigAuthSettings) === null || _chatConfig$LiveChatC === void 0 ? void 0 : _chatConfig$LiveChatC.msdyn_javascriptclientfunction) ?? undefined;
  }
  return authClientFunction;
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const handleAuthentication = async (chatSDK, chatConfig, getAuthToken) => {
  const authClientFunction = getAuthClientFunction(chatConfig);
  if (getAuthToken && authClientFunction) {
    TelemetryHelper.logActionEvent(LogLevel.INFO, {
      Event: TelemetryEvent.GetAuthTokenCalled
    });
    const token = await getAuthToken(authClientFunction);
    if (!isNullOrEmptyString(token)) {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      chatSDK.setAuthTokenProvider(async () => {
        return token;
      });
      return true;
    } else {
      TelemetryHelper.logActionEvent(LogLevel.ERROR, {
        Event: TelemetryEvent.ReceivedNullOrEmptyToken
      });
      return false;
    }
  }
  return false;
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const removeAuthTokenProvider = chatSDK => {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  chatSDK.authenticatedUserToken = null;
};
export { getAuthClientFunction, handleAuthentication, removeAuthTokenProvider };