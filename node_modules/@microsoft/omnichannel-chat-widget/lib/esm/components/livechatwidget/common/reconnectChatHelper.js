import "regenerator-runtime/runtime";
import { BroadcastEvent, LogLevel, TelemetryEvent } from "../../../common/telemetry/TelemetryConstants";
import { checkContactIdError, isNullOrEmptyString, isNullOrUndefined } from "../../../common/utils";
import { handleAuthentication, removeAuthTokenProvider } from "./authHelper";
import { BroadcastService } from "@microsoft/omnichannel-chat-components";
import { ConversationMode } from "../../../common/Constants";
import { ConversationState } from "../../../contexts/common/ConversationState";
import { LiveChatWidgetActionType } from "../../../contexts/common/LiveChatWidgetActionType";
import { TelemetryHelper } from "../../../common/telemetry/TelemetryHelper";

// Return value: should start normal chat flow when reconnect is enabled
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const handleChatReconnect = async (chatSDK, props, dispatch, setAdapter, initStartChat, state) => {
  var _props$chatConfig, _props$chatConfig$Liv;
  if (!isReconnectEnabled(props.chatConfig) || isPersistentEnabled(props.chatConfig)) return false;

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const isAuthenticatedChat = (_props$chatConfig = props.chatConfig) !== null && _props$chatConfig !== void 0 && (_props$chatConfig$Liv = _props$chatConfig.LiveChatConfigAuthSettings) !== null && _props$chatConfig$Liv !== void 0 && _props$chatConfig$Liv.msdyn_javascriptclientfunction ? true : false;

  // Get chat reconnect context
  const reconnectChatContext = await getChatReconnectContext(chatSDK, props.chatConfig, props, isAuthenticatedChat);

  //Redirect if enabled
  if (reconnectChatContext !== null && reconnectChatContext !== void 0 && reconnectChatContext.redirectURL) {
    var _props$reconnectChatP;
    redirectPage(reconnectChatContext.redirectURL, (_props$reconnectChatP = props.reconnectChatPaneProps) === null || _props$reconnectChatP === void 0 ? void 0 : _props$reconnectChatP.redirectInSameWindow);
    return false;
  }
  if (hasReconnectId(reconnectChatContext)) {
    var _props$reconnectChatP2, _props$reconnectChatP3;
    //if reconnect id is provided in props, don't show reconnect pane
    if ((_props$reconnectChatP2 = props.reconnectChatPaneProps) !== null && _props$reconnectChatP2 !== void 0 && _props$reconnectChatP2.reconnectId && !isNullOrEmptyString((_props$reconnectChatP3 = props.reconnectChatPaneProps) === null || _props$reconnectChatP3 === void 0 ? void 0 : _props$reconnectChatP3.reconnectId)) {
      await setReconnectIdAndStartChat(isAuthenticatedChat, chatSDK, state, props, dispatch, setAdapter, reconnectChatContext.reconnectId ?? "", initStartChat);
      return false;
    }

    //show reconnect pane
    state.appStates.conversationState = ConversationState.ReconnectChat;
    dispatch({
      type: LiveChatWidgetActionType.SET_RECONNECT_ID,
      payload: reconnectChatContext.reconnectId ?? ""
    });
    dispatch({
      type: LiveChatWidgetActionType.SET_CONVERSATION_STATE,
      payload: ConversationState.ReconnectChat
    });
    return false;
  }

  // If we have reached this point, it means there is no valid reconnect id or redirectUrl
  // This is a unauth reconnect refresh scenario - returns true so that we can start normal hydration process
  return true;
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const getChatReconnectContext = async (chatSDK, chatConfig, props, isAuthenticatedChat) => {
  try {
    var _props$reconnectChatP4;
    TelemetryHelper.logSDKEvent(LogLevel.INFO, {
      Event: TelemetryEvent.GetChatReconnectContextSDKCallStarted,
      Description: "Reconnect context SDK call started"
    });
    const chatReconnectOptionalParams = {
      reconnectId: (_props$reconnectChatP4 = props.reconnectChatPaneProps) === null || _props$reconnectChatP4 === void 0 ? void 0 : _props$reconnectChatP4.reconnectId
    };
    // Get auth token for getting chat reconnect context
    if (isAuthenticatedChat) {
      await handleAuthentication(chatSDK, chatConfig, props.getAuthToken);
    }
    const reconnectChatContext = await (chatSDK === null || chatSDK === void 0 ? void 0 : chatSDK.getChatReconnectContext(chatReconnectOptionalParams));
    if (isAuthenticatedChat) {
      // remove auth token after reconnectId is fetched
      // AuthToken will be reset later at start chat
      removeAuthTokenProvider(chatSDK);
    }
    return reconnectChatContext;
  } catch (error) {
    checkContactIdError(error);
    TelemetryHelper.logSDKEvent(LogLevel.ERROR, {
      Event: TelemetryEvent.GetChatReconnectContextSDKCallFailed,
      ExceptionDetails: {
        exception: error
      }
    });
  }
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const setReconnectIdAndStartChat = async (isAuthenticatedChat, chatSDK, state, props, dispatch, setAdapter, reconnectId, initStartChat) => {
  if (!isAuthenticatedChat) {
    const startUnauthenticatedReconnectChat = {
      eventName: BroadcastEvent.StartUnauthenticatedReconnectChat
    };
    BroadcastService.postMessage(startUnauthenticatedReconnectChat);
  }
  const optionalParams = {
    reconnectId: reconnectId
  };
  dispatch({
    type: LiveChatWidgetActionType.SET_RECONNECT_ID,
    payload: reconnectId
  });
  dispatch({
    type: LiveChatWidgetActionType.SET_CONVERSATION_STATE,
    payload: ConversationState.Loading
  });
  await initStartChat(chatSDK, dispatch, setAdapter, state, props, optionalParams);
};
const redirectPage = (redirectURL, redirectInSameWindow) => {
  const redirectPageRequest = {
    eventName: BroadcastEvent.RedirectPageRequest,
    payload: {
      redirectURL: redirectURL
    }
  };
  BroadcastService.postMessage(redirectPageRequest);
  if (redirectInSameWindow) {
    window.location.href = redirectURL;
  }
};
const isReconnectEnabled = chatConfig => {
  if (chatConfig) {
    var _chatConfig$LiveWSAnd, _chatConfig$LiveWSAnd2;
    const reconnectEnabled = ((_chatConfig$LiveWSAnd = chatConfig.LiveWSAndLiveChatEngJoin) === null || _chatConfig$LiveWSAnd === void 0 ? void 0 : (_chatConfig$LiveWSAnd2 = _chatConfig$LiveWSAnd.msdyn_enablechatreconnect) === null || _chatConfig$LiveWSAnd2 === void 0 ? void 0 : _chatConfig$LiveWSAnd2.toLowerCase()) === "true";
    return reconnectEnabled;
  }
  return false;
};
const isPersistentEnabled = chatConfig => {
  if (chatConfig) {
    var _chatConfig$LiveWSAnd3, _chatConfig$LiveWSAnd4;
    const persistentEnabled = ((_chatConfig$LiveWSAnd3 = chatConfig.LiveWSAndLiveChatEngJoin) === null || _chatConfig$LiveWSAnd3 === void 0 ? void 0 : (_chatConfig$LiveWSAnd4 = _chatConfig$LiveWSAnd3.msdyn_conversationmode) === null || _chatConfig$LiveWSAnd4 === void 0 ? void 0 : _chatConfig$LiveWSAnd4.toLowerCase()) === ConversationMode.Persistent;
    return persistentEnabled;
  }
  return false;
};
const hasReconnectId = reconnectAvailabilityResponse => {
  return reconnectAvailabilityResponse && !isNullOrUndefined(reconnectAvailabilityResponse.reconnectId);
};
export { handleChatReconnect, isReconnectEnabled, isPersistentEnabled, getChatReconnectContext };