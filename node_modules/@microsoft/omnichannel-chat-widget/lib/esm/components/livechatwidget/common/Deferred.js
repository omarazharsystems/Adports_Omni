function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
export class Deferred {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any

  constructor() {
    _defineProperty(this, "_promise", void 0);
    _defineProperty(this, "_resolve", void 0);
    _defineProperty(this, "_reject", () => {
      return;
    });
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    _defineProperty(this, "resolve", value => {
      this._resolve(value);
    });
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    _defineProperty(this, "reject", value => {
      this._reject(value);
    });
    this._promise = new Promise((resolve, reject) => {
      this._resolve = resolve;
      this._reject = reject;
    });
  }
  get promise() {
    return this._promise;
  }
}