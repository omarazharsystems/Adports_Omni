function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-explicit-any */
import { BroadcastService } from "@microsoft/omnichannel-chat-components";
import { BroadcastEvent, LogLevel, TelemetryEvent } from "../../../../common/telemetry/TelemetryConstants";
import { TelemetryHelper } from "../../../../common/telemetry/TelemetryHelper";
const supportedSignInCardContentTypes = ["application/vnd.microsoft.card.signin", "application/vnd.microsoft.card.oauth"];
const botOauthUrlRegex = /[\S]+.botframework.com\/api\/oauth\/signin\?signin=([\S]+)/;
const delay = t => new Promise(resolve => setTimeout(resolve, t));
const fetchBotAuthConfigRetries = 3;
const fetchBotAuthConfigRetryInterval = 1000;
let response;
const extractSignInId = signInUrl => {
  const result = botOauthUrlRegex.exec(signInUrl);
  if (result && result[1]) {
    return result[1];
  }
  return "";
};
const extractSasUrl = async attachment => {
  let sasUrl = undefined;
  if (attachment && attachment.content && attachment.content.tokenPostResource && attachment.content.tokenPostResource.sasUrl) {
    sasUrl = attachment.content.tokenPostResource.sasUrl;
  }
  if (!sasUrl) {
    const signInId = extractSignInId(attachment.content.buttons[0].value);
    const getTestUrlEndpoint = `https://token.botframework.com/api/sas/gettesturl?signInId=${signInId}`;
    try {
      const response = await window.fetch(getTestUrlEndpoint);
      if (response.status === 200) {
        const responseJson = await response.json();
        sasUrl = responseJson.sasUrl;
      }
    } catch {
      sasUrl = undefined;
    }
  }
  return sasUrl;
};
const fetchBotAuthConfig = async retries => {
  TelemetryHelper.logLoadingEvent(LogLevel.INFO, {
    Event: TelemetryEvent.SetBotAuthProviderFetchConfig
  });
  const botAuthConfigRequestEvent = {
    eventName: BroadcastEvent.BotAuthConfigRequest
  };
  BroadcastService.postMessage(botAuthConfigRequestEvent);
  const listener = BroadcastService.getMessageByEventName(BroadcastEvent.BotAuthConfigResponse).subscribe(data => {
    var _data$payload, _data$payload2;
    response = ((_data$payload = data.payload) === null || _data$payload === void 0 ? void 0 : _data$payload.response) !== undefined ? (_data$payload2 = data.payload) === null || _data$payload2 === void 0 ? void 0 : _data$payload2.response : response;
    listener.unsubscribe();
  });
  if (response !== undefined) {
    //return response;
    return response;
  }
  if (retries === 1) {
    // Base Case
    throw new Error();
  }
  await delay(fetchBotAuthConfigRetryInterval);
  return await fetchBotAuthConfig(--retries);
};
export class BotAuthActivitySubscriber {
  constructor() {
    _defineProperty(this, "observer", void 0);
    _defineProperty(this, "signInCardSeen", void 0);
    this.signInCardSeen = new Set();
  }
  applicable(activity) {
    var _activity$attachments;
    return (activity === null || activity === void 0 ? void 0 : (_activity$attachments = activity.attachments) === null || _activity$attachments === void 0 ? void 0 : _activity$attachments.length) > 0 && activity.attachments[0] && supportedSignInCardContentTypes.indexOf(activity.attachments[0].contentType) >= 0;
  }
  async apply(activity) {
    this.observer.next(false); // Hides card
    const attachment = activity.attachments[0];
    const signInUrl = attachment.content.buttons[0].value;
    const signInId = extractSignInId(signInUrl);
    if (!signInId) {
      TelemetryHelper.logLoadingEvent(LogLevel.INFO, {
        Event: TelemetryEvent.BotAuthActivityUndefinedSignInId
      });
      return activity;
    }
    if (this.signInCardSeen.has(signInId)) {
      // Prevents duplicate auth
      return;
    }
    this.signInCardSeen.add(signInId);
    const sasUrl = await extractSasUrl(attachment);
    const event = {
      eventName: BroadcastEvent.SigninCardReceived,
      payload: {
        sasUrl
      }
    };
    if (!sasUrl) {
      TelemetryHelper.logLoadingEvent(LogLevel.INFO, {
        Event: TelemetryEvent.BotAuthActivityEmptySasUrl,
        Description: "SaS Url is empty"
      });
      return activity;
    } else {
      BroadcastService.postMessage(event);
    }
    try {
      const response = await fetchBotAuthConfig(fetchBotAuthConfigRetries);
      if (response === false) {
        TelemetryHelper.logLoadingEvent(LogLevel.INFO, {
          Event: TelemetryEvent.SetBotAuthProviderHideCard
        });
      } else {
        TelemetryHelper.logLoadingEvent(LogLevel.INFO, {
          Event: TelemetryEvent.SetBotAuthProviderDisplayCard
        });
        return activity;
      }
    } catch {
      TelemetryHelper.logLoadingEvent(LogLevel.INFO, {
        Event: TelemetryEvent.SetBotAuthProviderNotFound
      });
      //this is to ensure listener continues waiting for response
      if (this.signInCardSeen.has(signInId)) {
        this.signInCardSeen.delete(signInId);
      }
      return activity;
    }
  }
  async next(activity) {
    if (this.applicable(activity)) {
      return await this.apply(activity);
    }
    return activity;
  }
}