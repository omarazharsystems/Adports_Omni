function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { Deferred } from "./Deferred";
export class ActivityStreamHandler {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any

  // eslint-disable-next-line @typescript-eslint/no-explicit-any

  /**
   * Use of a deferred pattern, to hold the execution of the activity.
   * 
   * */
  static cork() {
    ActivityStreamHandler.restoreDeferred = new Deferred();
    ActivityStreamHandler.restorePromise = ActivityStreamHandler.restoreDeferred.promise;
  }

  /**
   * Resolve the promise, releasing it to continue with the execution of the activity.
   * 
   * */
  static uncork() {
    ActivityStreamHandler.restoreDeferred.resolve();
  }
}
_defineProperty(ActivityStreamHandler, "restoreDeferred", {
  resolve: () => {
    return "initialState";
  }
});
_defineProperty(ActivityStreamHandler, "restorePromise", void 0);