import { LogLevel, TelemetryEvent } from "../../common/telemetry/TelemetryConstants";
import React, { useEffect, useRef, useState } from "react";
import { ChatButton } from "@microsoft/omnichannel-chat-components";
import { Constants } from "../../common/Constants";
import { ConversationState } from "../../contexts/common/ConversationState";
import { LiveChatWidgetActionType } from "../../contexts/common/LiveChatWidgetActionType";
import { TelemetryHelper } from "../../common/telemetry/TelemetryHelper";
import { TelemetryTimers } from "../../common/telemetry/TelemetryManager";
import { defaultOutOfOfficeChatButtonStyleProps } from "./common/styleProps/defaultOutOfOfficeChatButtonStyleProps";
import { setFocusOnElement } from "../../common/utils";
import useChatContextStore from "../../hooks/useChatContextStore";
export const ChatButtonStateful = props => {
  var _state$domainStates$l, _state$domainStates$l2, _buttonProps$controlP, _props$buttonProps, _props$buttonProps$co, _props$buttonProps2, _props$buttonProps2$c, _props$buttonProps3, _props$buttonProps3$c;
  const [state, dispatch] = useChatContextStore();
  const {
    buttonProps,
    outOfOfficeButtonProps,
    startChat
  } = props;
  //Setting OutOfOperatingHours Flag
  const [outOfOperatingHours, setOutOfOperatingHours] = useState(((_state$domainStates$l = state.domainStates.liveChatConfig) === null || _state$domainStates$l === void 0 ? void 0 : (_state$domainStates$l2 = _state$domainStates$l.LiveWSAndLiveChatEngJoin) === null || _state$domainStates$l2 === void 0 ? void 0 : _state$domainStates$l2.OutOfOperatingHours) === "True");
  const ref = useRef(() => {
    return;
  });
  ref.current = async () => {
    TelemetryHelper.logActionEvent(LogLevel.INFO, {
      Event: TelemetryEvent.LCWChatButtonClicked
    });
    if (state.appStates.isMinimized) {
      dispatch({
        type: LiveChatWidgetActionType.SET_MINIMIZED,
        payload: false
      });
    } else {
      await startChat();
    }
  };
  const outOfOfficeStyleProps = Object.assign({}, defaultOutOfOfficeChatButtonStyleProps, outOfOfficeButtonProps === null || outOfOfficeButtonProps === void 0 ? void 0 : outOfOfficeButtonProps.styleProps);
  const controlProps = {
    id: "oc-lcw-chat-button",
    dir: state.domainStates.globalDir,
    titleText: "Let's Chat!",
    subtitleText: "We're online.",
    hideNotificationBubble: (buttonProps === null || buttonProps === void 0 ? void 0 : (_buttonProps$controlP = buttonProps.controlProps) === null || _buttonProps$controlP === void 0 ? void 0 : _buttonProps$controlP.hideNotificationBubble) === true || state.appStates.isMinimized === false,
    unreadMessageCount: state.appStates.unreadMessageCount ? state.appStates.unreadMessageCount > Constants.maximumUnreadMessageCount ? (_props$buttonProps = props.buttonProps) === null || _props$buttonProps === void 0 ? void 0 : (_props$buttonProps$co = _props$buttonProps.controlProps) === null || _props$buttonProps$co === void 0 ? void 0 : _props$buttonProps$co.largeUnreadMessageString : state.appStates.unreadMessageCount.toString() : "0",
    onClick: () => ref.current(),
    unreadMessageString: (_props$buttonProps2 = props.buttonProps) === null || _props$buttonProps2 === void 0 ? void 0 : (_props$buttonProps2$c = _props$buttonProps2.controlProps) === null || _props$buttonProps2$c === void 0 ? void 0 : _props$buttonProps2$c.unreadMessageString,
    ...(buttonProps === null || buttonProps === void 0 ? void 0 : buttonProps.controlProps)
  };
  const outOfOfficeControlProps = {
    id: "oc-lcw-chat-button",
    dir: state.domainStates.globalDir,
    titleText: "We're Offline",
    subtitleText: "No agents available",
    onClick: async () => {
      TelemetryHelper.logActionEvent(LogLevel.INFO, {
        Event: TelemetryEvent.LCWChatButtonClicked
      });
      if (state.appStates.isMinimized) {
        dispatch({
          type: LiveChatWidgetActionType.SET_MINIMIZED,
          payload: false
        });
      } else {
        dispatch({
          type: LiveChatWidgetActionType.SET_CONVERSATION_STATE,
          payload: ConversationState.OutOfOffice
        });
      }
    },
    unreadMessageString: (_props$buttonProps3 = props.buttonProps) === null || _props$buttonProps3 === void 0 ? void 0 : (_props$buttonProps3$c = _props$buttonProps3.controlProps) === null || _props$buttonProps3$c === void 0 ? void 0 : _props$buttonProps3$c.unreadMessageString,
    ...(outOfOfficeButtonProps === null || outOfOfficeButtonProps === void 0 ? void 0 : outOfOfficeButtonProps.controlProps)
  };
  useEffect(() => {
    if (state.appStates.outsideOperatingHours) {
      setOutOfOperatingHours(true);
    }
    TelemetryHelper.logLoadingEvent(LogLevel.INFO, {
      Event: TelemetryEvent.LCWChatButtonShow,
      ElapsedTimeInMilliseconds: TelemetryTimers.LcwLoadToChatButtonTimer.milliSecondsElapsed
    });
    if (state.uiStates.focusChatButton) {
      setFocusOnElement(document.getElementById((controlProps === null || controlProps === void 0 ? void 0 : controlProps.id) ?? "oc-lcw-chat-button"));
    } else {
      dispatch({
        type: LiveChatWidgetActionType.SET_FOCUS_CHAT_BUTTON,
        payload: true
      });
    }
  }, []);
  return /*#__PURE__*/React.createElement(ChatButton, {
    componentOverrides: buttonProps === null || buttonProps === void 0 ? void 0 : buttonProps.componentOverrides,
    controlProps: outOfOperatingHours ? outOfOfficeControlProps : controlProps,
    styleProps: outOfOperatingHours ? outOfOfficeStyleProps : buttonProps === null || buttonProps === void 0 ? void 0 : buttonProps.styleProps
  });
};
export default ChatButtonStateful;