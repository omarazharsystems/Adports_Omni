import { LogLevel, TelemetryEvent } from "../../common/telemetry/TelemetryConstants";
import React, { useEffect, useState } from "react";
import { findAllFocusableElement, findParentFocusableElementsWithoutChildContainer, preventFocusToMoveOutOfElement, setFocusOnElement, setFocusOnSendBox, setTabIndices } from "../../common/utils";
import { DimLayer } from "../dimlayer/DimLayer";
import { InputValidationPane } from "@microsoft/omnichannel-chat-components";
import { LiveChatWidgetActionType } from "../../contexts/common/LiveChatWidgetActionType";
import { NotificationHandler } from "../webchatcontainerstateful/webchatcontroller/notification/NotificationHandler";
import { NotificationScenarios } from "../webchatcontainerstateful/webchatcontroller/enums/NotificationScenarios";
import { Regex } from "../../common/Constants";
import { TelemetryHelper } from "../../common/telemetry/TelemetryHelper";
import useChatContextStore from "../../hooks/useChatContextStore";
import useChatSDKStore from "../../hooks/useChatSDKStore";
export const EmailTranscriptPaneStateful = props => {
  var _props$controlProps;
  const initialTabIndexMap = new Map();
  let elements = [];
  const [state, dispatch] = useChatContextStore();
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const chatSDK = useChatSDKStore();
  const [initialEmail, setInitialEmail] = useState("");
  const closeEmailTranscriptPane = () => {
    dispatch({
      type: LiveChatWidgetActionType.SET_SHOW_EMAIL_TRANSCRIPT_PANE,
      payload: false
    });
    const previousFocusedElementId = state.appStates.previousElementIdOnFocusBeforeModalOpen;
    if (previousFocusedElementId) {
      setFocusOnElement("#" + previousFocusedElementId);
    } else {
      setFocusOnSendBox();
    }
    dispatch({
      type: LiveChatWidgetActionType.SET_PREVIOUS_FOCUSED_ELEMENT_ID,
      payload: null
    });
    setTabIndices(elements, initialTabIndexMap, true);
  };
  const controlProps = {
    id: "oclcw-emailTranscriptDialogContainer",
    dir: state.domainStates.globalDir,
    onSend: async email => {
      closeEmailTranscriptPane();
      const chatTranscriptBody = {
        emailAddress: email,
        attachmentMessage: (props === null || props === void 0 ? void 0 : props.attachmentMessage) ?? "The following attachment was uploaded during the conversation:"
      };
      try {
        await (chatSDK === null || chatSDK === void 0 ? void 0 : chatSDK.emailLiveChatTranscript(chatTranscriptBody));
        TelemetryHelper.logActionEvent(LogLevel.INFO, {
          Event: TelemetryEvent.EmailTranscriptSent,
          Description: "Transcript sent to email successfully."
        });
      } catch (ex) {
        TelemetryHelper.logActionEvent(LogLevel.ERROR, {
          Event: TelemetryEvent.EmailTranscriptFailed,
          ExceptionDetails: {
            exception: ex
          }
        });
        NotificationHandler.notifyError(NotificationScenarios.EmailTranscriptError, (props === null || props === void 0 ? void 0 : props.bannerMessageOnError) ?? "Email transcript to " + email + " failed.");
      }
    },
    onCancel: () => {
      TelemetryHelper.logActionEvent(LogLevel.INFO, {
        Event: TelemetryEvent.EmailTranscriptCancelButtonClicked,
        Description: "Email Transcript cancel button clicked."
      });
      closeEmailTranscriptPane();
    },
    checkInput: function (input) {
      return new RegExp(Regex.EmailRegex).test(input);
    },
    ...props.controlProps,
    inputInitialText: ((_props$controlProps = props.controlProps) === null || _props$controlProps === void 0 ? void 0 : _props$controlProps.inputInitialText) ?? initialEmail
  };

  // Move focus to the first button
  useEffect(() => {
    preventFocusToMoveOutOfElement(controlProps.id);
    const focusableElements = findAllFocusableElement(`#${controlProps.id}`);
    if (focusableElements) {
      focusableElements[0].focus();
    }
    elements = findParentFocusableElementsWithoutChildContainer(controlProps.id);
    setTabIndices(elements, initialTabIndexMap, false);
    setInitialEmail(state.appStates.preChatResponseEmail);
    TelemetryHelper.logLoadingEvent(LogLevel.INFO, {
      Event: TelemetryEvent.EmailTranscriptLoaded
    });
  }, [initialEmail]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DimLayer, {
    brightness: (controlProps === null || controlProps === void 0 ? void 0 : controlProps.brightnessValueOnDim) ?? "0.2"
  }), /*#__PURE__*/React.createElement(InputValidationPane, {
    componentOverrides: props.componentOverrides,
    controlProps: controlProps,
    styleProps: props.styleProps
  }));
};
export default EmailTranscriptPaneStateful;