import { LogLevel, TelemetryEvent } from "../../common/telemetry/TelemetryConstants";
import React, { useEffect } from "react";
import { ConversationEndEntity } from "../../common/Constants";
import { CustomerVoiceEvents } from "./enums/CustomerVoiceEvents";
import { PostChatSurveyMode } from "./enums/PostChatSurveyMode";
import { PostChatSurveyPane } from "@microsoft/omnichannel-chat-components";
import { TelemetryHelper } from "../../common/telemetry/TelemetryHelper";
import { defaultGeneralPostChatSurveyPaneStyleProps } from "./common/defaultStyleProps/defaultgeneralPostChatSurveyPaneStyleProps";
import { findAllFocusableElement } from "../../common/utils";
import useChatContextStore from "../../hooks/useChatContextStore";
const generateSurveyInviteLink = function (surveyInviteLink, isEmbed, locale, compact) {
  let showMultiLingual = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  const surveyLink = `${surveyInviteLink}
            &embed=${isEmbed.toString()}
            &compact=${compact.toString() ?? "true"}
            &lang=${locale ?? "en-us"}
            &showmultilingual=${showMultiLingual.toString() ?? "false"}`;
  return surveyLink;
};
export const PostChatSurveyPaneStateful = props => {
  var _props$styleProps, _state$appStates, _state$appStates2, _props$controlProps;
  const [state] = useChatContextStore();
  const generalStyleProps = Object.assign({}, defaultGeneralPostChatSurveyPaneStyleProps, (_props$styleProps = props.styleProps) === null || _props$styleProps === void 0 ? void 0 : _props$styleProps.generalStyleProps, {
    display: state.appStates.isMinimized ? "none" : "contents"
  });
  let surveyInviteLink = "";
  const surveyMode = (state === null || state === void 0 ? void 0 : (_state$appStates = state.appStates) === null || _state$appStates === void 0 ? void 0 : _state$appStates.selectedSurveyMode) === PostChatSurveyMode.Embed;
  if ((state === null || state === void 0 ? void 0 : (_state$appStates2 = state.appStates) === null || _state$appStates2 === void 0 ? void 0 : _state$appStates2.conversationEndedBy) === ConversationEndEntity.Bot && state.domainStates.postChatContext.botSurveyInviteLink) {
    surveyInviteLink = generateSurveyInviteLink(state.domainStates.postChatContext.botSurveyInviteLink, surveyMode, state.domainStates.postChatContext.botFormsProLocale, props.isCustomerVoiceSurveyCompact ?? true);
  } else {
    surveyInviteLink = generateSurveyInviteLink(state.domainStates.postChatContext.surveyInviteLink, surveyMode, state.domainStates.postChatContext.formsProLocale, props.isCustomerVoiceSurveyCompact ?? true);
  }
  const styleProps = {
    ...props.styleProps,
    generalStyleProps: generalStyleProps
  };
  const controlProps = {
    id: "oc-lcw-postchatsurvey-pane",
    surveyURL: ((_props$controlProps = props.controlProps) === null || _props$controlProps === void 0 ? void 0 : _props$controlProps.surveyURL) ?? surveyInviteLink,
    ...props.controlProps
  };

  // Move focus to the first button
  useEffect(() => {
    const firstElement = findAllFocusableElement(`#${controlProps.id}`);
    if (firstElement && firstElement[0]) {
      firstElement[0].focus();
    }
    TelemetryHelper.logLoadingEvent(LogLevel.INFO, {
      Event: TelemetryEvent.PostChatSurveyLoaded
    });

    //Customer Voice Telemetry Events
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    window.addEventListener("message", message => {
      const {
        data
      } = message;
      if (!data) return;
      if (data === CustomerVoiceEvents.ResponsePageLoaded) {
        TelemetryHelper.logActionEvent(LogLevel.INFO, {
          Event: TelemetryEvent.CustomerVoiceResponsePageLoaded
        });
      } else if (data === CustomerVoiceEvents.FormResponseSubmitted) {
        TelemetryHelper.logActionEvent(LogLevel.INFO, {
          Event: TelemetryEvent.CustomerVoiceFormResponseSubmitted
        });
      } else if (data === CustomerVoiceEvents.FormResponseError) {
        TelemetryHelper.logActionEvent(LogLevel.ERROR, {
          Event: TelemetryEvent.CustomerVoiceFormResponseError
        });
      }
    });
  }, []);
  return /*#__PURE__*/React.createElement(PostChatSurveyPane, {
    controlProps: controlProps,
    styleProps: styleProps
  });
};
export default PostChatSurveyPaneStateful;