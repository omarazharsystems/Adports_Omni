import { HtmlAttributeNames, Regex } from "../../common/Constants";
import { LogLevel, TelemetryEvent } from "../../common/telemetry/TelemetryConstants";
import React, { useEffect } from "react";
import { extractPreChatSurveyResponseValues, findAllFocusableElement, getStateFromCache, getWidgetCacheId, isUndefinedOrEmpty, parseAdaptiveCardPayload } from "../../common/utils";
import MarkdownIt from "markdown-it";
import { ConversationState } from "../../contexts/common/ConversationState";
import { LiveChatWidgetActionType } from "../../contexts/common/LiveChatWidgetActionType";
import { PreChatSurveyPane } from "@microsoft/omnichannel-chat-components";
import { TelemetryHelper } from "../../common/telemetry/TelemetryHelper";
import { defaultGeneralPreChatSurveyPaneStyleProps } from "./common/defaultStyles/defaultGeneralPreChatSurveyPaneStyleProps";
import { defaultPreChatSurveyLocalizedTexts } from "./common/defaultProps/defaultPreChatSurveyLocalizedTexts";
import useChatContextStore from "../../hooks/useChatContextStore";

// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const PreChatSurveyPaneStateful = props => {
  var _surveyProps$stylePro, _props$surveyProps, _props$surveyProps$co;
  // Set MarkDown global variable to be used for prechat adaptive cards
  window["markdownit"] = MarkdownIt;
  const [state, dispatch] = useChatContextStore();
  const {
    surveyProps,
    initStartChat
  } = props;
  const generalStyleProps = Object.assign({}, defaultGeneralPreChatSurveyPaneStyleProps, surveyProps === null || surveyProps === void 0 ? void 0 : (_surveyProps$stylePro = surveyProps.styleProps) === null || _surveyProps$stylePro === void 0 ? void 0 : _surveyProps$stylePro.generalStyleProps, {
    display: state.appStates.isMinimized ? "none" : ""
  });

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const setPreChatResponseEmail = preChatResponse => {
    if (preChatResponse) {
      for (let index = 0; index < preChatResponse.length; index++) {
        if (new RegExp(Regex.EmailRegex).test(preChatResponse[index].value)) {
          dispatch({
            type: LiveChatWidgetActionType.SET_PRECHAT_RESPONSE_EMAIL,
            payload: preChatResponse[index].value
          });
        }
      }
    }
  };
  const getAdaptiveCardPayload = (payload, requiredFieldMissingMessage) => {
    try {
      return parseAdaptiveCardPayload(payload, requiredFieldMissingMessage);
    } catch (ex) {
      TelemetryHelper.logConfigDataEvent(LogLevel.ERROR, {
        Event: TelemetryEvent.ParseAdaptiveCardFailed,
        Description: "Adaptive Card JSON Parse Failed.",
        ExceptionDetails: {
          exception: ex
        }
      });
    }
  };
  const requiredFieldMissingMessage = ((_props$surveyProps = props.surveyProps) === null || _props$surveyProps === void 0 ? void 0 : (_props$surveyProps$co = _props$surveyProps.controlProps) === null || _props$surveyProps$co === void 0 ? void 0 : _props$surveyProps$co.requiredFieldMissingMessage) ?? defaultPreChatSurveyLocalizedTexts.PRECHAT_REQUIRED_FIELD_MISSING_MESSAGE;
  const controlProps = {
    id: "oc-lcw-prechatsurvey-pane",
    dir: state.domainStates.globalDir,
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    payload: getAdaptiveCardPayload(state.domainStates.preChatSurveyResponse, requiredFieldMissingMessage),
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    onSubmit: async values => {
      TelemetryHelper.logActionEvent(LogLevel.INFO, {
        Event: TelemetryEvent.PrechatSubmitted
      });
      dispatch({
        type: LiveChatWidgetActionType.SET_CONVERSATION_STATE,
        payload: ConversationState.Loading
      });
      try {
        var _state$domainStates, _state$domainStates$t, _state$domainStates$t2, _persistedState$domai, _persistedState$appSt, _state$appStates;
        const widgetInstanceId = getWidgetCacheId(((_state$domainStates = state.domainStates) === null || _state$domainStates === void 0 ? void 0 : (_state$domainStates$t = _state$domainStates.telemetryInternalData) === null || _state$domainStates$t === void 0 ? void 0 : _state$domainStates$t.orgId) ?? "", ((_state$domainStates$t2 = state.domainStates.telemetryInternalData) === null || _state$domainStates$t2 === void 0 ? void 0 : _state$domainStates$t2.widgetId) ?? "", state.domainStates.widgetInstanceId ?? "");
        const persistedState = getStateFromCache(widgetInstanceId);
        let optionalParams = {};

        //Connect to Active chats and chat is not popout
        if (persistedState && !isUndefinedOrEmpty(persistedState === null || persistedState === void 0 ? void 0 : (_persistedState$domai = persistedState.domainStates) === null || _persistedState$domai === void 0 ? void 0 : _persistedState$domai.liveChatContext) && (persistedState === null || persistedState === void 0 ? void 0 : (_persistedState$appSt = persistedState.appStates) === null || _persistedState$appSt === void 0 ? void 0 : _persistedState$appSt.conversationState) === ConversationState.Active && (state === null || state === void 0 ? void 0 : (_state$appStates = state.appStates) === null || _state$appStates === void 0 ? void 0 : _state$appStates.hideStartChatButton) === false) {
          var _persistedState$domai2;
          optionalParams = {
            liveChatContext: persistedState === null || persistedState === void 0 ? void 0 : (_persistedState$domai2 = persistedState.domainStates) === null || _persistedState$domai2 === void 0 ? void 0 : _persistedState$domai2.liveChatContext
          };
          await initStartChat(optionalParams, persistedState);
        } else {
          const prechatResponseValues = extractPreChatSurveyResponseValues(state.domainStates.preChatSurveyResponse, values);
          optionalParams = {
            preChatResponse: prechatResponseValues
          };
          setPreChatResponseEmail(values);
          await initStartChat(optionalParams);
        }
      } catch (ex) {
        TelemetryHelper.logActionEvent(LogLevel.ERROR, {
          Event: TelemetryEvent.PreChatSurveyStartChatMethodFailed,
          Description: "PreChat survey start chat failed.",
          ExceptionDetails: {
            exception: `PreChat survey start chat failed: ${ex}`
          }
        });
      }
    },
    ...(surveyProps === null || surveyProps === void 0 ? void 0 : surveyProps.controlProps)
  };
  const styleProps = {
    ...(surveyProps === null || surveyProps === void 0 ? void 0 : surveyProps.styleProps),
    generalStyleProps: generalStyleProps
  };
  useEffect(() => {
    // Set Aria-Label Attribute for Inputs
    const adaptiveCardElements = document.getElementsByClassName(HtmlAttributeNames.adaptiveCardClassName);
    if (adaptiveCardElements && adaptiveCardElements.length > 0) {
      const children = adaptiveCardElements[0].children;
      let value = "";
      for (let index = 0; index < children.length; index++) {
        const current = children[index];
        if (current && current.className == HtmlAttributeNames.adaptiveCardTextBlockClassName) {
          value = current.innerHTML;
          if (current.childElementCount > 0) {
            const paragraph = current.children[0];
            if (paragraph.tagName.toLowerCase() == HtmlAttributeNames.pTagName) {
              value = paragraph.innerHTML;
            }
          }
        }
        if (current && current.tagName.toLowerCase() == HtmlAttributeNames.div && current.childElementCount > 0) {
          const input = current.children[0].children;
          if ((input === null || input === void 0 ? void 0 : input.length) > 0 && input[0].className != HtmlAttributeNames.adaptiveCardToggleInputClassName && input[0].className != HtmlAttributeNames.adaptiveCardActionSetClassName) {
            input[0].setAttribute(HtmlAttributeNames.ariaLabel, value);
          }
        }
      }
    }
    // Move focus to the first button
    const firstElement = findAllFocusableElement(`#${controlProps.id}`);
    if (firstElement && firstElement[0]) {
      firstElement[0].focus();
    }
    TelemetryHelper.logLoadingEvent(LogLevel.INFO, {
      Event: TelemetryEvent.PrechatSurveyLoaded
    });
  }, []);
  return /*#__PURE__*/React.createElement(PreChatSurveyPane, {
    controlProps: controlProps,
    styleProps: styleProps
  });
};
export default PreChatSurveyPaneStateful;