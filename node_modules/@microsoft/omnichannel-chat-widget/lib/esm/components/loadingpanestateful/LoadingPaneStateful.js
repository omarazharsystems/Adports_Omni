import { LogLevel, TelemetryEvent } from "../../common/telemetry/TelemetryConstants";
import React, { useEffect } from "react";
import { LoadingPane } from "@microsoft/omnichannel-chat-components";
import { TelemetryHelper } from "../../common/telemetry/TelemetryHelper";
import { defaultGeneralLoadingPaneStyleProps } from "./common/defaultStyleProps/defaultgeneralLoadingPaneStyleProps";
import { errorUILoadingPaneStyleProps } from "./common/errorUIStyleProps/errorUILoadingPaneStyleProps";
import { findAllFocusableElement } from "../../common/utils";
import useChatContextStore from "../../hooks/useChatContextStore";
import useWindowDimensions from "../../hooks/useWindowDimensions";

// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const LoadingPaneStateful = props => {
  var _loadingPaneProps$sty, _startChatErrorPanePr, _startChatErrorPanePr2;
  const [state] = useChatContextStore();
  const {
    loadingPaneProps,
    startChatErrorPaneProps
  } = props;
  const generalLoadingPaneStyleProps = Object.assign({}, defaultGeneralLoadingPaneStyleProps, loadingPaneProps === null || loadingPaneProps === void 0 ? void 0 : (_loadingPaneProps$sty = loadingPaneProps.styleProps) === null || _loadingPaneProps$sty === void 0 ? void 0 : _loadingPaneProps$sty.generalStyleProps);
  const loadingPaneStyleProps = {
    ...(loadingPaneProps === null || loadingPaneProps === void 0 ? void 0 : loadingPaneProps.styleProps),
    generalStyleProps: generalLoadingPaneStyleProps
  };
  const errorUIStyleProps = {
    ...errorUILoadingPaneStyleProps
  };
  const loadingPaneControlProps = {
    id: "oc-lcw-loading-pane",
    dir: state.domainStates.globalDir,
    ...(loadingPaneProps === null || loadingPaneProps === void 0 ? void 0 : loadingPaneProps.controlProps)
  };
  const errorUIControlProps = {
    ...(loadingPaneProps === null || loadingPaneProps === void 0 ? void 0 : loadingPaneProps.controlProps),
    id: "oc-lcw-alert-pane",
    dir: state.domainStates.globalDir,
    titleText: (startChatErrorPaneProps === null || startChatErrorPaneProps === void 0 ? void 0 : (_startChatErrorPanePr = startChatErrorPaneProps.controlProps) === null || _startChatErrorPanePr === void 0 ? void 0 : _startChatErrorPanePr.titleText) ?? "We are unable to load chat at this time.",
    subtitleText: (startChatErrorPaneProps === null || startChatErrorPaneProps === void 0 ? void 0 : (_startChatErrorPanePr2 = startChatErrorPaneProps.controlProps) === null || _startChatErrorPanePr2 === void 0 ? void 0 : _startChatErrorPanePr2.subtitleText) ?? "Please try again later.",
    hideSpinner: true,
    hideSpinnerText: true
  };
  const {
    height,
    width
  } = useWindowDimensions();

  // Move focus to the first button
  useEffect(() => {
    const firstElement = findAllFocusableElement(`#${state.domainStates.widgetElementId}`);
    if (firstElement && firstElement[0]) {
      firstElement[0].focus();
    }
    TelemetryHelper.logLoadingEvent(LogLevel.INFO, {
      Event: TelemetryEvent.LoadingPaneLoaded,
      Description: "Loading pane loaded."
    });
  }, []);
  return /*#__PURE__*/React.createElement(LoadingPane, {
    componentOverrides: loadingPaneProps === null || loadingPaneProps === void 0 ? void 0 : loadingPaneProps.componentOverrides,
    controlProps: state.appStates.startChatFailed ? errorUIControlProps : loadingPaneControlProps,
    styleProps: state.appStates.startChatFailed ? errorUIStyleProps : loadingPaneStyleProps,
    windowWidth: width,
    windowHeight: height
  });
};
export default LoadingPaneStateful;