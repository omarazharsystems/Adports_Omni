import { LogLevel, TelemetryEvent } from "../../common/telemetry/TelemetryConstants";
import React, { useCallback, useEffect } from "react";
import { CallingContainer } from "@microsoft/omnichannel-chat-components";
import { LiveChatWidgetActionType } from "../../contexts/common/LiveChatWidgetActionType";
import { TelemetryHelper } from "../../common/telemetry/TelemetryHelper";
import useChatContextStore from "../../hooks/useChatContextStore";
import useChatSDKStore from "../../hooks/useChatSDKStore";
export const CallingContainerStateful = props => {
  var _props$controlProps, _props$controlProps2, _props$controlProps2$, _props$controlProps3, _props$controlProps3$, _props$controlProps3$2, _props$controlProps4, _props$controlProps4$, _props$controlProps4$2, _props$controlProps5;
  //TODO : Close button confirmation implmentation is pending

  const [state, dispatch] = useChatContextStore();
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const chatSDK = useChatSDKStore();

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const {
    voiceVideoCallingSdk
  } = props;
  let callId;
  const resetCallingStates = reset => {
    if (reset) {
      dispatch({
        type: LiveChatWidgetActionType.SHOW_CALLING_CONTAINER,
        payload: false
      });
      dispatch({
        type: LiveChatWidgetActionType.SET_INCOMING_CALL,
        payload: true
      });
      dispatch({
        type: LiveChatWidgetActionType.DISABLE_VIDEO_CALL,
        payload: true
      });
      dispatch({
        type: LiveChatWidgetActionType.DISABLE_LOCAL_VIDEO,
        payload: true
      });
      dispatch({
        type: LiveChatWidgetActionType.DISABLE_REMOTE_VIDEO,
        payload: true
      });
    }
  };
  useEffect(() => {
    const init = async () => {
      try {
        var _controlProps$current, _controlProps$current2, _controlProps$current3, _controlProps$current4;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        TelemetryHelper.callId = callId;
        await voiceVideoCallingSdk.initialize({
          chatToken: state.domainStates.chatToken,
          selfVideoHTMLElementId: (_controlProps$current = controlProps.currentCallControlProps) === null || _controlProps$current === void 0 ? void 0 : (_controlProps$current2 = _controlProps$current.nonActionIds) === null || _controlProps$current2 === void 0 ? void 0 : _controlProps$current2.selfVideoTileId,
          // HTML element id where video stream of the agent will be rendered
          remoteVideoHTMLElementId: (_controlProps$current3 = controlProps.currentCallControlProps) === null || _controlProps$current3 === void 0 ? void 0 : (_controlProps$current4 = _controlProps$current3.nonActionIds) === null || _controlProps$current4 === void 0 ? void 0 : _controlProps$current4.remoteVideoTileId,
          // HTML element id where video stream of the customer will be rendered
          OCClient: chatSDK === null || chatSDK === void 0 ? void 0 : chatSDK.OCClient
        });
      } catch (e) {
        TelemetryHelper.logCallingEvent(LogLevel.ERROR, {
          Event: TelemetryEvent.VoiceVideoSdkInitializeException,
          Description: `Failed to initialize VideoVoiceCalling Sdk:  ${e}`
        });
      }
    };
    init().then(() => {
      if (voiceVideoCallingSdk) {
        TelemetryHelper.logCallingEvent(LogLevel.INFO, {
          Event: TelemetryEvent.VoiceVideoSdkInitialize,
          Description: "Initialize VideoVoiceCalling Sdk Success"
        }, callId);
        voiceVideoCallingSdk.onCallAdded(() => {
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          callId = voiceVideoCallingSdk.callId;
          TelemetryHelper.logCallingEvent(LogLevel.INFO, {
            Event: TelemetryEvent.CallAdded
          }, callId);
          dispatch({
            type: LiveChatWidgetActionType.SHOW_CALLING_CONTAINER,
            payload: true
          });
          dispatch({
            type: LiveChatWidgetActionType.SET_INCOMING_CALL,
            payload: true
          });
        });
        voiceVideoCallingSdk.onRemoteVideoStreamAdded(() => {
          TelemetryHelper.logCallingEvent(LogLevel.INFO, {
            Event: TelemetryEvent.RemoteVideoStreamAdded
          }, callId);
          const isRemoteVideoDisabled = !voiceVideoCallingSdk.isRemoteVideoEnabled();
          const isLocalVideoDisabled = !voiceVideoCallingSdk.isLocalVideoEnabled();
          dispatch({
            type: LiveChatWidgetActionType.DISABLE_VIDEO_CALL,
            payload: false
          });
          dispatch({
            type: LiveChatWidgetActionType.DISABLE_LOCAL_VIDEO,
            payload: isLocalVideoDisabled
          });
          dispatch({
            type: LiveChatWidgetActionType.DISABLE_REMOTE_VIDEO,
            payload: isRemoteVideoDisabled
          });
        });
        voiceVideoCallingSdk.onLocalVideoStreamAdded(() => {
          TelemetryHelper.logCallingEvent(LogLevel.INFO, {
            Event: TelemetryEvent.LocalVideoStreamAdded
          }, callId);
          const isLocalVideoDisabled = !voiceVideoCallingSdk.isLocalVideoEnabled();
          const isRemoteVideoDisabled = !voiceVideoCallingSdk.isRemoteVideoEnabled();
          dispatch({
            type: LiveChatWidgetActionType.DISABLE_VIDEO_CALL,
            payload: false
          });
          dispatch({
            type: LiveChatWidgetActionType.DISABLE_REMOTE_VIDEO,
            payload: isRemoteVideoDisabled
          });
          dispatch({
            type: LiveChatWidgetActionType.DISABLE_LOCAL_VIDEO,
            payload: isLocalVideoDisabled
          });
        });
        voiceVideoCallingSdk.onRemoteVideoStreamRemoved(() => {
          TelemetryHelper.logCallingEvent(LogLevel.INFO, {
            Event: TelemetryEvent.RemoteVideoStreamRemoved
          }, callId);
          const isRemoteVideoDisabled = !voiceVideoCallingSdk.isRemoteVideoEnabled();
          const isLocalVideoDisabled = !voiceVideoCallingSdk.isLocalVideoEnabled();
          if (isRemoteVideoDisabled && isLocalVideoDisabled) {
            dispatch({
              type: LiveChatWidgetActionType.DISABLE_VIDEO_CALL,
              payload: true
            });
          }
          dispatch({
            type: LiveChatWidgetActionType.DISABLE_REMOTE_VIDEO,
            payload: isRemoteVideoDisabled
          });
        });
        voiceVideoCallingSdk.onLocalVideoStreamRemoved(() => {
          TelemetryHelper.logCallingEvent(LogLevel.INFO, {
            Event: TelemetryEvent.LocalVideoStreamRemoved
          }, callId);
          const isLocalVideoDisabled = !voiceVideoCallingSdk.isLocalVideoEnabled();
          const isRemoteVideoDisabled = !voiceVideoCallingSdk.isRemoteVideoEnabled();
          if (isRemoteVideoDisabled && isLocalVideoDisabled) {
            dispatch({
              type: LiveChatWidgetActionType.DISABLE_VIDEO_CALL,
              payload: true
            });
          }
          dispatch({
            type: LiveChatWidgetActionType.DISABLE_LOCAL_VIDEO,
            payload: isLocalVideoDisabled
          });
        });
        voiceVideoCallingSdk.onCallDisconnected(() => {
          TelemetryHelper.logCallingEvent(LogLevel.INFO, {
            Event: TelemetryEvent.CallDisconnected
          }, callId);
          resetCallingStates(true);
        });
        voiceVideoCallingSdk.addEventListener(TelemetryEvent.IncomingCallEnded, () => {
          TelemetryHelper.logCallingEvent(LogLevel.INFO, {
            Event: TelemetryEvent.IncomingCallEnded
          }, callId);
          resetCallingStates(true);
        });
      }
    });
    window.addEventListener("beforeunload", () => {
      if (state.uiStates.isIncomingCall) {
        voiceVideoCallingSdk === null || voiceVideoCallingSdk === void 0 ? void 0 : voiceVideoCallingSdk.rejectCall();
      } else {
        voiceVideoCallingSdk === null || voiceVideoCallingSdk === void 0 ? void 0 : voiceVideoCallingSdk.stopCall();
      }
      voiceVideoCallingSdk === null || voiceVideoCallingSdk === void 0 ? void 0 : voiceVideoCallingSdk.close();
      dispatch({
        type: LiveChatWidgetActionType.SET_E2VV_ENABLED,
        payload: false
      });
      resetCallingStates(true);
    });
  }, []);
  const controlProps = {
    id: "oc-lcw-callingcontainer",
    dir: state.domainStates.globalDir,
    isIncomingCall: state.uiStates.isIncomingCall,
    hideCallingContainer: state.appStates.isMinimized ? true : false,
    ...(props === null || props === void 0 ? void 0 : props.controlProps),
    incomingCallControlProps: {
      onDeclineCallClick: useCallback(async () => {
        try {
          voiceVideoCallingSdk.rejectCall();
          TelemetryHelper.logCallingEvent(LogLevel.INFO, {
            Event: TelemetryEvent.CallRejectClick
          }, callId);
          resetCallingStates(true);
        } catch (error) {
          TelemetryHelper.logCallingEvent(LogLevel.ERROR, {
            Event: TelemetryEvent.CallRejectClickException,
            ExceptionDetails: {
              exception: `Failed to reject call:  ${error}`
            }
          }, callId);
        }
      }, [voiceVideoCallingSdk]),
      onAudioCallClick: useCallback(() => {
        try {
          voiceVideoCallingSdk.acceptCall({
            withVideo: false
          });
          TelemetryHelper.logCallingEvent(LogLevel.INFO, {
            Event: TelemetryEvent.VoiceCallAcceptButtonClick
          }, callId);
        } catch (err) {
          TelemetryHelper.logCallingEvent(LogLevel.ERROR, {
            Event: TelemetryEvent.VoiceVideoAcceptCallException,
            ExceptionDetails: {
              exception: `Failed to accept call without video:  ${err}`
            }
          }, callId);
        }
        dispatch({
          type: LiveChatWidgetActionType.SET_INCOMING_CALL,
          payload: false
        });
        dispatch({
          type: LiveChatWidgetActionType.DISABLE_VIDEO_CALL,
          payload: true
        });
      }, []),
      onVideoCallClick: useCallback(() => {
        try {
          voiceVideoCallingSdk.acceptCall({
            withVideo: true
          });
          TelemetryHelper.logCallingEvent(LogLevel.INFO, {
            Event: TelemetryEvent.VideoCallAcceptButtonClick
          }, callId);
        } catch (err) {
          TelemetryHelper.logCallingEvent(LogLevel.ERROR, {
            Event: TelemetryEvent.VoiceVideoAcceptCallWithVideoException,
            ExceptionDetails: {
              exception: `Failed to accept call with video:  ${err}`
            }
          }, callId);
        }
        dispatch({
          type: LiveChatWidgetActionType.SET_INCOMING_CALL,
          payload: false
        });
        dispatch({
          type: LiveChatWidgetActionType.DISABLE_LOCAL_VIDEO,
          payload: false
        });
      }, []),
      ...(props === null || props === void 0 ? void 0 : (_props$controlProps = props.controlProps) === null || _props$controlProps === void 0 ? void 0 : _props$controlProps.incomingCallControlProps)
    },
    currentCallControlProps: {
      hideCallTimer: true,
      onEndCallClick: useCallback(() => {
        try {
          voiceVideoCallingSdk.stopCall();
          TelemetryHelper.logCallingEvent(LogLevel.INFO, {
            Event: TelemetryEvent.EndCallButtonClick
          }, callId);
          resetCallingStates(true);
        } catch (error) {
          TelemetryHelper.logCallingEvent(LogLevel.ERROR, {
            Event: TelemetryEvent.EndCallButtonClickException,
            ExceptionDetails: {
              exception: `Failed to End Call:  ${error}`
            }
          }, callId);
        }
      }, []),
      onMicCallClick: useCallback(() => {
        try {
          voiceVideoCallingSdk.toggleMute();
          TelemetryHelper.logCallingEvent(LogLevel.INFO, {
            Event: TelemetryEvent.ToggleMuteButtonClick
          }, callId);
        } catch (error) {
          TelemetryHelper.logCallingEvent(LogLevel.ERROR, {
            Event: TelemetryEvent.ToggleMuteButtonClickException,
            ExceptionDetails: {
              exception: `Failed to toggle mute button :  ${error}`
            }
          }, callId);
        }
      }, []),
      onVideoOffClick: useCallback(() => {
        try {
          voiceVideoCallingSdk.toggleLocalVideo();
          TelemetryHelper.logCallingEvent(LogLevel.INFO, {
            Event: TelemetryEvent.ToggleCameraButtonClick
          }, callId);
        } catch (error) {
          TelemetryHelper.logCallingEvent(LogLevel.ERROR, {
            Event: TelemetryEvent.ToggleCameraButtonClickException,
            ExceptionDetails: {
              exception: `Failed to toggle video button :  ${error}`
            }
          }, callId);
        }
      }, []),
      nonActionIds: {
        ...(props === null || props === void 0 ? void 0 : (_props$controlProps2 = props.controlProps) === null || _props$controlProps2 === void 0 ? void 0 : (_props$controlProps2$ = _props$controlProps2.currentCallControlProps) === null || _props$controlProps2$ === void 0 ? void 0 : _props$controlProps2$.nonActionIds),
        selfVideoTileId: (props === null || props === void 0 ? void 0 : (_props$controlProps3 = props.controlProps) === null || _props$controlProps3 === void 0 ? void 0 : (_props$controlProps3$ = _props$controlProps3.currentCallControlProps) === null || _props$controlProps3$ === void 0 ? void 0 : (_props$controlProps3$2 = _props$controlProps3$.nonActionIds) === null || _props$controlProps3$2 === void 0 ? void 0 : _props$controlProps3$2.selfVideoTileId) ?? "selfVideo",
        remoteVideoTileId: (props === null || props === void 0 ? void 0 : (_props$controlProps4 = props.controlProps) === null || _props$controlProps4 === void 0 ? void 0 : (_props$controlProps4$ = _props$controlProps4.currentCallControlProps) === null || _props$controlProps4$ === void 0 ? void 0 : (_props$controlProps4$2 = _props$controlProps4$.nonActionIds) === null || _props$controlProps4$2 === void 0 ? void 0 : _props$controlProps4$2.remoteVideoTileId) ?? "remoteVideo"
      },
      videoCallDisabled: state.uiStates.disableVideoCall,
      selfVideoDisabled: state.uiStates.disableSelfVideo,
      remoteVideoDisabled: state.uiStates.disableRemoteVideo,
      ...(props === null || props === void 0 ? void 0 : (_props$controlProps5 = props.controlProps) === null || _props$controlProps5 === void 0 ? void 0 : _props$controlProps5.currentCallControlProps)
    }
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, state.uiStates.showCallingPopup && /*#__PURE__*/React.createElement(CallingContainer, {
    controlProps: controlProps,
    styleProps: props === null || props === void 0 ? void 0 : props.styleProps
  }));
};
export default CallingContainerStateful;