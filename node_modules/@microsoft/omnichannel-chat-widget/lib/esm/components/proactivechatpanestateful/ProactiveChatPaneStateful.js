import { BroadcastEvent, LogLevel, TelemetryEvent } from "../../common/telemetry/TelemetryConstants";
import React, { useEffect, useState } from "react";
import { createTimer, setFocusOnElement } from "../../common/utils";
import { BroadcastService } from "@microsoft/omnichannel-chat-components";
import { Constants } from "../../common/Constants";
import { ConversationState } from "../../contexts/common/ConversationState";
import { LiveChatWidgetActionType } from "../../contexts/common/LiveChatWidgetActionType";
import { ProactiveChatPane } from "@microsoft/omnichannel-chat-components";
import { TelemetryHelper } from "../../common/telemetry/TelemetryHelper";
import { TelemetryTimers } from "../../common/telemetry/TelemetryManager";
import useChatContextStore from "../../hooks/useChatContextStore";

// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const ProactiveChatPaneStateful = props => {
  var _proactiveChatProps$c;
  const [state, dispatch] = useChatContextStore();
  const {
    proactiveChatProps,
    startChat
  } = props;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const [timeoutRemoved, setTimeoutRemoved] = useState(false);
  const handleProactiveChatInviteTimeout = () => {
    if (!timeoutRemoved) {
      setTimeoutRemoved(true);
      dispatch({
        type: LiveChatWidgetActionType.SET_PROACTIVE_CHAT_PARAMS,
        payload: {
          proactiveChatBodyTitle: "",
          proactiveChatEnablePrechat: false,
          proactiveChatInNewWindow: false
        }
      });
      dispatch({
        type: LiveChatWidgetActionType.SET_CONVERSATION_STATE,
        payload: ConversationState.Closed
      });
      TelemetryHelper.logActionEvent(LogLevel.INFO, {
        Event: TelemetryEvent.ProactiveChatRejected,
        ElapsedTimeInMilliseconds: TelemetryTimers.LcwLoadToChatButtonTimer.milliSecondsElapsed,
        Description: "Proactive chat invitation timed out."
      });
    }
  };
  const controlProps = {
    id: "oc-lcw-proactivechat",
    dir: state.domainStates.globalDir,
    onStart: async () => {
      var _state$domainStates$l, _state$domainStates$l2;
      setTimeoutRemoved(true);
      TelemetryHelper.logActionEvent(LogLevel.INFO, {
        Event: TelemetryEvent.ProactiveChatAccepted,
        Description: "Proactive chat accepted."
      });
      if (state.appStates.proactiveChatStates.proactiveChatInNewWindow) {
        var _state$appStates, _state$appStates$proa;
        // TODO: BroadcastService: replace with the sdk broadcast service, when in place
        const startPopoutChatEvent = {
          eventName: BroadcastEvent.ProactiveChatStartPopoutChat,
          payload: {
            enablePrechat: (state === null || state === void 0 ? void 0 : (_state$appStates = state.appStates) === null || _state$appStates === void 0 ? void 0 : (_state$appStates$proa = _state$appStates.proactiveChatStates) === null || _state$appStates$proa === void 0 ? void 0 : _state$appStates$proa.proactiveChatEnablePrechat) === true
          }
        };
        BroadcastService.postMessage(startPopoutChatEvent);
        dispatch({
          type: LiveChatWidgetActionType.SET_CONVERSATION_STATE,
          payload: ConversationState.Closed
        });
      } else if (((_state$domainStates$l = state.domainStates.liveChatConfig) === null || _state$domainStates$l === void 0 ? void 0 : (_state$domainStates$l2 = _state$domainStates$l.LiveWSAndLiveChatEngJoin) === null || _state$domainStates$l2 === void 0 ? void 0 : _state$domainStates$l2.OutOfOperatingHours) === "True") {
        dispatch({
          type: LiveChatWidgetActionType.SET_OUTSIDE_OPERATING_HOURS,
          payload: true
        });
        dispatch({
          type: LiveChatWidgetActionType.SET_CONVERSATION_STATE,
          payload: ConversationState.OutOfOffice
        });
      } else {
        const proactiveChatStarted = {
          eventName: BroadcastEvent.ProactiveChatStartChat
        };
        BroadcastService.postMessage(proactiveChatStarted);
        await startChat();
      }
    },
    onClose: () => {
      setTimeoutRemoved(true);
      TelemetryHelper.logActionEvent(LogLevel.INFO, {
        Event: TelemetryEvent.ProactiveChatClosed,
        Description: "Proactive chat closed."
      });
      dispatch({
        type: LiveChatWidgetActionType.SET_PROACTIVE_CHAT_PARAMS,
        payload: {
          proactiveChatBodyTitle: "",
          proactiveChatEnablePrechat: false,
          proactiveChatInNewWindow: false
        }
      });
      dispatch({
        type: LiveChatWidgetActionType.SET_CONVERSATION_STATE,
        payload: ConversationState.Closed
      });
    },
    ...(proactiveChatProps === null || proactiveChatProps === void 0 ? void 0 : proactiveChatProps.controlProps),
    bodyTitleText: state.appStates.proactiveChatStates.proactiveChatBodyTitle ? state.appStates.proactiveChatStates.proactiveChatBodyTitle : proactiveChatProps === null || proactiveChatProps === void 0 ? void 0 : (_proactiveChatProps$c = proactiveChatProps.controlProps) === null || _proactiveChatProps$c === void 0 ? void 0 : _proactiveChatProps$c.bodyTitleText
  };
  useEffect(() => {
    setFocusOnElement(document.getElementById(controlProps.id + "-startbutton"));
    TelemetryTimers.ProactiveChatScreenTimer = createTimer();
    const timeoutEvent = setTimeout(() => {
      handleProactiveChatInviteTimeout();
    }, (proactiveChatProps === null || proactiveChatProps === void 0 ? void 0 : proactiveChatProps.ProactiveChatInviteTimeoutInMs) ?? Constants.ProactiveChatInviteTimeoutInMs);
    TelemetryHelper.logLoadingEvent(LogLevel.INFO, {
      Event: TelemetryEvent.ProactiveChatPaneLoaded
    });
    return () => {
      clearTimeout(timeoutEvent);
    };
  }, []);
  return /*#__PURE__*/React.createElement(ProactiveChatPane, {
    componentOverrides: proactiveChatProps === null || proactiveChatProps === void 0 ? void 0 : proactiveChatProps.componentOverrides,
    controlProps: controlProps,
    styleProps: proactiveChatProps === null || proactiveChatProps === void 0 ? void 0 : proactiveChatProps.styleProps
  });
};
export default ProactiveChatPaneStateful;