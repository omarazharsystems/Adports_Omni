import React, { useCallback, useEffect, useState } from "react";
import DraggableEventNames from "./DraggableEventNames";
/**
 * Trigger component which would send IDraggableEvent to the receiver to update the draggable component position
 *
 * @param props IDraggableEventEmitterProps
 * @returns
 */
const DraggableEventEmitter = props => {
  const [initialized, setInitialized] = useState(false);
  const postMessage = useCallback(data => {
    const targetWindow = props.targetWindow ?? window;
    targetWindow.postMessage(data, "*");
  }, [props.targetWindow]);
  const dragStart = useCallback(event => {
    postMessage({
      channel: props.channel,
      eventName: DraggableEventNames.DragStart
    });
    let cursor = {
      x: event.screenX,
      y: event.screenY
    }; // Cursor init position
    const dragging = event => {
      event.preventDefault();
      const newX = event.screenX;
      const newY = event.screenY;
      const offset = {
        x: newX - cursor.x,
        y: newY - cursor.y
      }; // Calculate cursor position diff
      cursor = {
        ...cursor,
        x: newX,
        y: newY
      }; // Update cursor new position

      postMessage({
        channel: props.channel,
        eventName: DraggableEventNames.Dragging,
        offset
      });
    };
    const dragEnd = () => {
      postMessage({
        channel: props.channel,
        eventName: DraggableEventNames.DragEnd
      });
      document.removeEventListener("mousemove", dragging);
      document.removeEventListener("mouseup", dragEnd);
    };
    document.addEventListener("mousemove", dragging);
    document.addEventListener("mouseup", dragEnd);
  }, [props.channel]);
  useEffect(() => {
    if (!initialized && props.elementId) {
      const element = document.getElementById(props.elementId);
      element === null || element === void 0 ? void 0 : element.addEventListener("mousedown", dragStart);
      setInitialized(true);
    }
  }, [dragStart, props.elementId, initialized]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, " ", props.children, " ");
};
export default DraggableEventEmitter;