import { LogLevel, TelemetryEvent } from "../../common/telemetry/TelemetryConstants";
import React from "react";
import AudioNotificationStateful from "./audionotificationstateful/AudioNotificationStateful";
import { Constants } from "../../common/Constants";
import { Footer } from "@microsoft/omnichannel-chat-components";
import { LiveChatWidgetActionType } from "../../contexts/common/LiveChatWidgetActionType";
import { NewMessageNotificationSoundBase64 } from "../../assets/Audios";
import { NotificationHandler } from "../webchatcontainerstateful/webchatcontroller/notification/NotificationHandler";
import { NotificationScenarios } from "../webchatcontainerstateful/webchatcontroller/enums/NotificationScenarios";
import { TelemetryHelper } from "../../common/telemetry/TelemetryHelper";
import { downloadTranscript } from "./downloadtranscriptstateful/DownloadTranscriptStateful";
import useChatContextStore from "../../hooks/useChatContextStore";
import useChatSDKStore from "../../hooks/useChatSDKStore";

// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const FooterStateful = props => {
  var _footerProps$controlP3, _footerProps$controlP4;
  const [state, dispatch] = useChatContextStore();
  // hideFooterDisplay - the purpose of this is to keep the footer always "active",
  // but hide it visually in certain states (e.g., loading state) and show in some other states (e.g. active state).
  // The reason for this approach is to make sure that state variables for audio notification work correctly after minimizing
  const {
    footerProps,
    downloadTranscriptProps,
    audioNotificationProps,
    hideFooterDisplay
  } = props;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const chatSDK = useChatSDKStore();
  const controlProps = {
    id: "oc-lcw-footer",
    dir: state.domainStates.globalDir,
    onDownloadTranscriptClick: async () => {
      try {
        TelemetryHelper.logActionEvent(LogLevel.INFO, {
          Event: TelemetryEvent.DownloadTranscriptButtonClicked,
          Description: "Download Transcript button clicked."
        });
        await downloadTranscript(chatSDK, downloadTranscriptProps, state);
      } catch (ex) {
        TelemetryHelper.logActionEvent(LogLevel.ERROR, {
          Event: TelemetryEvent.DownloadTranscriptFailed,
          ExceptionDetails: {
            exception: ex
          }
        });
        NotificationHandler.notifyError(NotificationScenarios.DownloadTranscriptError, (downloadTranscriptProps === null || downloadTranscriptProps === void 0 ? void 0 : downloadTranscriptProps.bannerMessageOnError) ?? Constants.defaultDownloadTranscriptError);
      }
    },
    onEmailTranscriptClick: () => {
      var _footerProps$controlP, _footerProps$controlP2;
      TelemetryHelper.logActionEvent(LogLevel.INFO, {
        Event: TelemetryEvent.EmailTranscriptButtonClicked,
        Description: "Email Transcript button clicked."
      });
      const emailTranscriptButtonId = (footerProps === null || footerProps === void 0 ? void 0 : (_footerProps$controlP = footerProps.controlProps) === null || _footerProps$controlP === void 0 ? void 0 : (_footerProps$controlP2 = _footerProps$controlP.emailTranscriptButtonProps) === null || _footerProps$controlP2 === void 0 ? void 0 : _footerProps$controlP2.id) ?? `${controlProps.id}-emailtranscript-button`;
      if (emailTranscriptButtonId) {
        dispatch({
          type: LiveChatWidgetActionType.SET_PREVIOUS_FOCUSED_ELEMENT_ID,
          payload: emailTranscriptButtonId
        });
      }
      dispatch({
        type: LiveChatWidgetActionType.SET_SHOW_EMAIL_TRANSCRIPT_PANE,
        payload: true
      });
    },
    onAudioNotificationClick: () => {
      TelemetryHelper.logActionEvent(LogLevel.INFO, {
        Event: TelemetryEvent.AudioToggleButtonClicked,
        Description: "Audio button clicked."
      });
      dispatch({
        type: LiveChatWidgetActionType.SET_AUDIO_NOTIFICATION,
        payload: !state.appStates.isAudioMuted
      });
    },
    ...(footerProps === null || footerProps === void 0 ? void 0 : footerProps.controlProps),
    audioNotificationButtonProps: {
      ...(footerProps === null || footerProps === void 0 ? void 0 : (_footerProps$controlP3 = footerProps.controlProps) === null || _footerProps$controlP3 === void 0 ? void 0 : _footerProps$controlP3.audioNotificationButtonProps),
      isAudioMuted: state.appStates.isAudioMuted
    }
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, !hideFooterDisplay && /*#__PURE__*/React.createElement(Footer, {
    componentOverrides: footerProps === null || footerProps === void 0 ? void 0 : footerProps.componentOverrides,
    controlProps: controlProps,
    styleProps: footerProps === null || footerProps === void 0 ? void 0 : footerProps.styleProps
  }), /*#__PURE__*/React.createElement(AudioNotificationStateful, {
    audioSrc: (audioNotificationProps === null || audioNotificationProps === void 0 ? void 0 : audioNotificationProps.audioSrc) ?? NewMessageNotificationSoundBase64,
    isAudioMuted: state.appStates.isAudioMuted === null ? (footerProps === null || footerProps === void 0 ? void 0 : (_footerProps$controlP4 = footerProps.controlProps) === null || _footerProps$controlP4 === void 0 ? void 0 : _footerProps$controlP4.hideAudioNotificationButton) ?? false : state.appStates.isAudioMuted ?? false
  }));
};
export default FooterStateful;