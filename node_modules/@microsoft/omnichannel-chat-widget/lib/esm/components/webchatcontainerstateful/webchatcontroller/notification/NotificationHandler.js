import { HtmlClassNames, HtmlIdNames } from "../../../../common/Constants";
import { NotificationLevel } from "../enums/NotificationLevel";
import { WebChatActionType } from "../enums/WebChatActionType";
import { WebChatStoreLoader } from "../WebChatStoreLoader";
import { setFocusOnSendBox } from "../../../../common/utils";
export class NotificationHandler {
  static notify(id, level, message) {
    if (WebChatStoreLoader.store) {
      WebChatStoreLoader.store.dispatch({
        type: WebChatActionType.WEB_CHAT_SET_NOTIFICATION,
        payload: {
          id,
          level,
          message
        }
      });
      NotificationHandler.setFocusOnNotificationCloseButton();
    }
  }
  static dismissNotification(id) {
    if (WebChatStoreLoader.store) {
      WebChatStoreLoader.store.dispatch({
        type: WebChatActionType.WEB_CHAT_DISMISS_NOTIFICATION,
        payload: {
          id
        }
      });
    }
  }
  static notifyError(id, message) {
    this.notify(id, NotificationLevel.Error, message);
  }
  static notifyWarning(id, message) {
    this.notify(id, NotificationLevel.Warning, message);
  }
  static notifyInfo(id, message) {
    this.notify(id, NotificationLevel.Info, message);
  }
  static notifySuccess(id, message) {
    this.notify(id, NotificationLevel.Success, message);
  }
  static notifyWithLevel(id, message, level) {
    if (!level) {
      this.notifyInfo(id, message);
    } else {
      this.notify(id, level, message);
    }
  }

  /* Bypass WebChat behavior and focus on banner close button */
  static setFocusOnNotificationCloseButton() {
    const expandButton = document.querySelector(`#${HtmlIdNames.MSLiveChatWidget} .${HtmlClassNames.webChatBannerExpandButton}`);
    if (expandButton) {
      expandButton.focus();
      return;
    }
    const closeButton = document.querySelector(`#${HtmlIdNames.MSLiveChatWidget} .${HtmlClassNames.webChatBannerCloseButton}`);
    if (closeButton) {
      closeButton.focus();
      NotificationHandler.registerOnCloseEvent(closeButton);
      return;
    }
  }
  static registerOnCloseEvent(button) {
    button.onclick = () => {
      setFocusOnSendBox();
    };
  }
}