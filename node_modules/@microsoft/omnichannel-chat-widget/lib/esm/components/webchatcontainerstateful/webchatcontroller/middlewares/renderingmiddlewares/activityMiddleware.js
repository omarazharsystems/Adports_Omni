/******
 * ActivityMiddleware
 * 
 * This middleware handles each message bubble in a default Microsoft LiveChatWidget approach. It does the following processing:
 * 1. Renders system messages differently, according to Microsoft LiveChatWidget styles
 * 2. Changes the font size of user messages
 * 3. Decodes certain html characters that came through from chat services
 ******/

import { LogLevel, TelemetryEvent } from "../../../../../common/telemetry/TelemetryConstants";
import { Constants } from "../../../../../common/Constants";
import { DirectLineActivityType } from "../../enums/DirectLineActivityType";
import { DirectLineSenderRole } from "../../enums/DirectLineSenderRole";
import { MessageTypes } from "../../enums/MessageType";
import React from "react";
import { TelemetryHelper } from "../../../../../common/telemetry/TelemetryHelper";
import { defaultSystemMessageStyles } from "./defaultStyles/defaultSystemMessageStyles";
import { defaultUserMessageStyles } from "./defaultStyles/defaultUserMessageStyles";
import { escapeHtml } from "../../../../../common/utils";
const loggedSystemMessages = new Array();

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const handleSystemMessage = (next, args, card, systemMessageStyleProps) => {
  var _card$activity, _card$activity$channe, _card$activity$channe2, _card$activity2, _card$activity2$chann, _card$activity3, _card$activity3$chann, _card$activity3$chann2, _card$activity4, _card$activity4$chann, _card$activity5, _card$activity5$chann, _card$nextVisibleActi, _card$nextVisibleActi2, _card$activity6, _card$activity6$chann, _card$activity7, _card$nextVisibleActi3, _card$activity8;
  const systemMessageStyles = {
    ...defaultSystemMessageStyles,
    ...systemMessageStyleProps
  };
  if ((_card$activity = card.activity) !== null && _card$activity !== void 0 && (_card$activity$channe = _card$activity.channelData) !== null && _card$activity$channe !== void 0 && (_card$activity$channe2 = _card$activity$channe.tags) !== null && _card$activity$channe2 !== void 0 && _card$activity$channe2.includes(Constants.averageWaitTimeMessageTag) && loggedSystemMessages.indexOf((_card$activity2 = card.activity) === null || _card$activity2 === void 0 ? void 0 : (_card$activity2$chann = _card$activity2.channelData) === null || _card$activity2$chann === void 0 ? void 0 : _card$activity2$chann.clientmessageid) < 0) {
    TelemetryHelper.logActionEvent(LogLevel.INFO, {
      Event: TelemetryEvent.AverageWaitTimeMessageRecieved,
      Description: "Average wait time message was received"
    });
    loggedSystemMessages.push(card.activity.channelData.clientmessageid);
  }
  if ((_card$activity3 = card.activity) !== null && _card$activity3 !== void 0 && (_card$activity3$chann = _card$activity3.channelData) !== null && _card$activity3$chann !== void 0 && (_card$activity3$chann2 = _card$activity3$chann.tags) !== null && _card$activity3$chann2 !== void 0 && _card$activity3$chann2.includes(Constants.queuePositionMessageTag) && loggedSystemMessages.indexOf((_card$activity4 = card.activity) === null || _card$activity4 === void 0 ? void 0 : (_card$activity4$chann = _card$activity4.channelData) === null || _card$activity4$chann === void 0 ? void 0 : _card$activity4$chann.clientmessageid) < 0) {
    TelemetryHelper.logActionEvent(LogLevel.INFO, {
      Event: TelemetryEvent.QueuePositionMessageRecieved,
      Description: "Queue position message was received"
    });
    loggedSystemMessages.push(card.activity.channelData.clientmessageid);
  }
  if ((_card$activity5 = card.activity) !== null && _card$activity5 !== void 0 && (_card$activity5$chann = _card$activity5.channelData) !== null && _card$activity5$chann !== void 0 && _card$activity5$chann.clientmessageid && ((_card$nextVisibleActi = card.nextVisibleActivity) === null || _card$nextVisibleActi === void 0 ? void 0 : (_card$nextVisibleActi2 = _card$nextVisibleActi.channelData) === null || _card$nextVisibleActi2 === void 0 ? void 0 : _card$nextVisibleActi2.clientmessageid) === ((_card$activity6 = card.activity) === null || _card$activity6 === void 0 ? void 0 : (_card$activity6$chann = _card$activity6.channelData) === null || _card$activity6$chann === void 0 ? void 0 : _card$activity6$chann.clientmessageid) || (_card$activity7 = card.activity) !== null && _card$activity7 !== void 0 && _card$activity7.messageid && ((_card$nextVisibleActi3 = card.nextVisibleActivity) === null || _card$nextVisibleActi3 === void 0 ? void 0 : _card$nextVisibleActi3.messageid) === ((_card$activity8 = card.activity) === null || _card$activity8 === void 0 ? void 0 : _card$activity8.messageid)) {
    return () => false;
  }

  // eslint-disable-next-line react/display-name, @typescript-eslint/no-explicit-any
  return () => /*#__PURE__*/React.createElement("div", {
    key: card.activity.id,
    style: systemMessageStyles,
    "aria-hidden": "true"
  }, card.activity.text);
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const isTagIncluded = (card, tag) => {
  return isDataTagsPresent(card) && card.activity.channelData.tags.includes(tag);
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const isDataTagsPresent = card => {
  return card && card.activity && card.activity.channelData && card.activity.channelData.tags && card.activity.channelData.tags.length > 0;
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const createActivityMiddleware = (systemMessageStyleProps, userMessageStyleProps) => () => next => function () {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  const [card] = args;
  if (card.activity) {
    var _card$activity$from;
    if (((_card$activity$from = card.activity.from) === null || _card$activity$from === void 0 ? void 0 : _card$activity$from.role) === DirectLineSenderRole.Channel) {
      var _card$activity$channe3;
      if (((_card$activity$channe3 = card.activity.channelData) === null || _card$activity$channe3 === void 0 ? void 0 : _card$activity$channe3.type) === MessageTypes.Thread) {
        TelemetryHelper.logActionEvent(LogLevel.INFO, {
          Event: TelemetryEvent.IC3ThreadUpdateEventReceived,
          Description: "IC3 ThreadUpdateEvent Received"
        });
      }
      return () => false;
    }
    if (isTagIncluded(card, Constants.hiddenTag)) {
      return () => false;
    }
    if (isTagIncluded(card, Constants.systemMessageTag)) {
      return handleSystemMessage(next, args, card, systemMessageStyleProps);
    } else if (card.activity.text && card.activity.type === DirectLineActivityType.Message) {
      if (!card.activity.channelData.isHtmlEncoded && card.activity.channelId === Constants.webchatChannelId) {
        card.activity.text = escapeHtml(card.activity.text);
        card.activity.channelData.isHtmlEncoded = true;
      }
      const userMessageStyles = {
        ...defaultUserMessageStyles,
        ...userMessageStyleProps
      };
      // eslint-disable-next-line react/display-name, @typescript-eslint/no-explicit-any
      return function () {
        return /*#__PURE__*/React.createElement("div", {
          className: card.activity.from.role === DirectLineSenderRole.User ? Constants.sentMessageClassName : Constants.receivedMessageClassName,
          style: userMessageStyles,
          "aria-hidden": "true"
        }, next(...args)(...arguments));
      };
    }
  }
  return next(...args);
};