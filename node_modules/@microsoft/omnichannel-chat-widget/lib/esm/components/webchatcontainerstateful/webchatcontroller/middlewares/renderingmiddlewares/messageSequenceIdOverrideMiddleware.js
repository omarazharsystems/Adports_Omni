import { WebChatActionType } from "../../enums/WebChatActionType";
import { Constants } from "../../../../../common/Constants";
// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars
const createMessageSequenceIdOverrideMiddleware = _ref => {
  let {
    dispatch
  } = _ref;
  return next => action => {
    if (isApplicable(action)) {
      return next(overrideSequenceIdWithOriginalMessageId(action));
    }
    return next(action);
  };
};
const isApplicable = action => {
  return action.type === WebChatActionType.DIRECT_LINE_INCOMING_ACTIVITY && isValidChannel(action) && isWebSequenceIdPresent(action) && lookupOriginalMessageId(action) !== undefined;
};
const isValidChannel = action => {
  var _action$payload, _action$payload$activ;
  return (action === null || action === void 0 ? void 0 : (_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : (_action$payload$activ = _action$payload.activity) === null || _action$payload$activ === void 0 ? void 0 : _action$payload$activ.channelId) === Constants.acsChannel;
};
const isChannelDataPresent = action => {
  var _action$payload2, _action$payload2$acti, _action$payload3, _action$payload3$acti;
  return (action === null || action === void 0 ? void 0 : (_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : (_action$payload2$acti = _action$payload2.activity) === null || _action$payload2$acti === void 0 ? void 0 : _action$payload2$acti.channelData) !== undefined && (action === null || action === void 0 ? void 0 : (_action$payload3 = action.payload) === null || _action$payload3 === void 0 ? void 0 : (_action$payload3$acti = _action$payload3.activity) === null || _action$payload3$acti === void 0 ? void 0 : _action$payload3$acti.channelData) !== null;
};
const isWebSequenceIdPresent = action => {
  if (!isChannelDataPresent(action)) return false;
  const channelData = action.payload.activity.channelData;
  return Object.keys(channelData).some(key => {
    return key === Constants.WebchatSequenceIdAttribute;
  });
};
const overrideSequenceIdWithOriginalMessageId = action => {
  const originalMessageId = extractOriginalMessageId(action);
  const channelData = action.payload.activity.channelData;
  if (originalMessageId === undefined) return action;
  Object.keys(channelData).forEach(function (key) {
    if (key === Constants.WebchatSequenceIdAttribute && action.payload.activity.channelData[key] !== originalMessageId) {
      action.payload.activity.channelData[key] = originalMessageId;
    }
  });
  return action;
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars
const extractOriginalMessageId = action => {
  const originalMessageId = lookupOriginalMessageId(action);
  if (typeof originalMessageId !== "string" || originalMessageId === "") {
    return undefined;
  }
  const originalMessageIdResult = parseInt(originalMessageId);
  return isNaN(originalMessageIdResult) ? undefined : originalMessageIdResult;
};
const lookupOriginalMessageId = action => {
  var _action$payload4, _action$payload4$acti, _action$payload4$acti2, _action$payload4$acti3;
  return action === null || action === void 0 ? void 0 : (_action$payload4 = action.payload) === null || _action$payload4 === void 0 ? void 0 : (_action$payload4$acti = _action$payload4.activity) === null || _action$payload4$acti === void 0 ? void 0 : (_action$payload4$acti2 = _action$payload4$acti.channelData) === null || _action$payload4$acti2 === void 0 ? void 0 : (_action$payload4$acti3 = _action$payload4$acti2.metadata) === null || _action$payload4$acti3 === void 0 ? void 0 : _action$payload4$acti3.OriginalMessageId;
};
export default createMessageSequenceIdOverrideMiddleware;