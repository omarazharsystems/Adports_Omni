/******
 * TypingIndicatorMiddleware
 *
 * This middleware changes the component that shows who's actively typing. It uses the default Microsoft LiveChatWidget styles.
 ******/

import React, { useCallback } from "react";
import { DirectLineSenderRole } from "../../enums/DirectLineSenderRole";
import { debounceLeading } from "../../../../../common/utils";
import { defaultMiddlewareLocalizedTexts } from "../../../common/defaultProps/defaultMiddlewareLocalizedTexts";
import { defaultTypingIndicatorBubbleStyles } from "./defaultStyles/defaultTypingIndicatorBubbleStyles";
import { defaultTypingIndicatorContainerStyles } from "./defaultStyles/defaultTypingIndicatorContainerStyles";
import { defaultTypingIndicatorMessageStyles } from "./defaultStyles/defaultTypingIndicatorMessageStyles";
import { useChatContextStore } from "../../../../..";
import useChatSDKStore from "../../../../../hooks/useChatSDKStore";

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const TypingIndicator = _ref => {
  var _state$domainStates$l, _state$domainStates$r, _state$domainStates$r2, _state$domainStates$r3;
  let {
    activeTyping,
    visible
  } = _ref;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const chatSDK = useChatSDKStore();
  const [state] = useChatContextStore();
  const debounceTyping = useCallback(debounceLeading(() => chatSDK === null || chatSDK === void 0 ? void 0 : chatSDK.sendTypingEvent()), []);
  if (!activeTyping || Object.keys(activeTyping).length === 0 || ((_state$domainStates$l = state.domainStates.liveChatConfig) === null || _state$domainStates$l === void 0 ? void 0 : _state$domainStates$l.LiveChatVersion) === 1 && !visible) {
    return null;
  }
  activeTyping = Object.keys(activeTyping).map(key => activeTyping[key]);
  for (let i = 0; i < activeTyping.length; i++) {
    if (activeTyping[i].role && activeTyping[i].role === DirectLineSenderRole.User) {
      var _state$domainStates$l2;
      //visible is set to false if the current user is typing, in which case, we just send typing indicator to OC
      if (((_state$domainStates$l2 = state.domainStates.liveChatConfig) === null || _state$domainStates$l2 === void 0 ? void 0 : _state$domainStates$l2.LiveChatVersion) === 2 && !visible) {
        debounceTyping();
        return null;
      }
      activeTyping.splice(i, 1);
      i--;
    }
  }
  const localizedTexts = {
    ...defaultMiddlewareLocalizedTexts,
    ...state.domainStates.middlewareLocalizedTexts
  };
  const message = getTypingIndicatorMessage(activeTyping, localizedTexts);
  const typingIndicatorStyles = {
    ...defaultTypingIndicatorContainerStyles,
    ...((_state$domainStates$r = state.domainStates.renderingMiddlewareProps) === null || _state$domainStates$r === void 0 ? void 0 : _state$domainStates$r.typingIndicatorStyleProps)
  };
  const typingIndicatorBubbleStyles = {
    ...defaultTypingIndicatorBubbleStyles,
    ...((_state$domainStates$r2 = state.domainStates.renderingMiddlewareProps) === null || _state$domainStates$r2 === void 0 ? void 0 : _state$domainStates$r2.typingIndicatorBubbleStyleProps)
  };
  const typingIndicatorMessageStyles = {
    ...defaultTypingIndicatorMessageStyles,
    ...((_state$domainStates$r3 = state.domainStates.renderingMiddlewareProps) === null || _state$domainStates$r3 === void 0 ? void 0 : _state$domainStates$r3.typingIndicatorMessageStyleProps)
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("style", null, `
                @keyframes bounce {
                    0% {
                        -webkit-transform: translateY(0);
                        transform: translateY(0);
                        opacity: .7;
                    }
                    20% {
                        -webkit-transform: translateY(-6px);
                        transform: translateY(-6px);
                        opacity: 1;
                    }
                    40% {
                        -webkit-transform: translateY(0);
                        transform: translateY(0);
                        opacity: .7
                    }
                    to {
                        -webkit-transform: translateY(0);
                        transform: translateY(0)
                    }
                }
            `), /*#__PURE__*/React.createElement("div", {
    style: typingIndicatorStyles
  }, /*#__PURE__*/React.createElement("div", {
    style: typingIndicatorBubbleStyles
  }), /*#__PURE__*/React.createElement("div", {
    style: {
      animationDelay: ".166s",
      ...typingIndicatorBubbleStyles
    }
  }), /*#__PURE__*/React.createElement("div", {
    style: {
      animationDelay: ".333s",
      ...typingIndicatorBubbleStyles
    }
  }), /*#__PURE__*/React.createElement("div", {
    style: typingIndicatorMessageStyles
  }, " ", message, " ")));
};

// eslint-disable-next-line react/display-name, @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any
export const typingIndicatorMiddleware = () => next => args => {
  const {
    activeTyping,
    visible
  } = args;
  return /*#__PURE__*/React.createElement(TypingIndicator, {
    activeTyping: activeTyping,
    visible: visible
  });
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const getTypingIndicatorMessage = (activeTyping, localizedTexts) => {
  if (!activeTyping || activeTyping.length === 0) {
    return "";
  } else if (activeTyping.length === 1) {
    const message = localizedTexts.MIDDLEWARE_TYPING_INDICATOR_ONE;
    return message ? message.includes("{0}") ? message.replace("{0}", activeTyping[0].name) : message : "";
  } else if (activeTyping.length === 2) {
    const firstMember = activeTyping[0].name;
    const lastMember = activeTyping[1].name;
    let message = localizedTexts.MIDDLEWARE_TYPING_INDICATOR_TWO;
    if (!message) {
      return "";
    }
    if (message.includes("{0}")) {
      message = message.replace("{0}", firstMember);
    }
    if (message.includes("{1}")) {
      message = message.replace("{1}", lastMember);
    }
    return message;
  } else {
    const message = localizedTexts.MIDDLEWARE_TYPING_INDICATOR_MULTIPLE;
    return message ? message.includes("{0}") ? message.replace("{0}", activeTyping.length.toString()) : message : "";
  }
};