import { BotMagicCodeStore } from "../../BotMagicCodeStore";
var CardActionType;
(function (CardActionType) {
  CardActionType["OpenUrl"] = "openUrl";
  CardActionType["SignIn"] = "signin";
})(CardActionType || (CardActionType = {}));
const validCardActionTypes = [CardActionType.OpenUrl, CardActionType.SignIn];
const botOauthUrlRegex = /[\S]+.botframework.com\/api\/oauth\/signin\?signin=([\S]+)/;
export const createCardActionMiddleware = botMagicCodeConfig => {
  const cardActionMiddleware = () => next => function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    // eslint-disable-line @typescript-eslint/no-explicit-any
    const [card] = args;
    if (card.cardAction && validCardActionTypes.indexOf(card.cardAction.type) >= 0 && card.cardAction.value) {
      // Override signin url only if fwdUrl is valid & feature is enabled
      if ((botMagicCodeConfig === null || botMagicCodeConfig === void 0 ? void 0 : botMagicCodeConfig.disabled) === true && botMagicCodeConfig !== null && botMagicCodeConfig !== void 0 && botMagicCodeConfig.fwdUrl) {
        const baseUrl = window.location.origin;
        const result = botOauthUrlRegex.exec(card.cardAction.value);
        if (result) {
          BotMagicCodeStore.botOAuthSignInId = `${result[1]}`;
        }

        // fwdUrl must be on the same domain as the chat widget
        if (botMagicCodeConfig !== null && botMagicCodeConfig !== void 0 && botMagicCodeConfig.fwdUrl.startsWith(baseUrl)) {
          card.cardAction.value += `&fwdUrl=${botMagicCodeConfig.fwdUrl}`;
        }
      }
    }
    return next(...args);
  };
  return cardActionMiddleware;
};