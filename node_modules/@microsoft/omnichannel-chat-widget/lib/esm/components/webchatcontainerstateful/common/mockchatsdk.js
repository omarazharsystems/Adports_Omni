function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { ParticipantType } from "../../../common/Constants";
import MockAdapter from "./mockadapter";
export class MockChatSDK {
  constructor() {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    _defineProperty(this, "sleep", ms => new Promise(r => setTimeout(r, ms)));
    _defineProperty(this, "isMockModeOn", true);
    _defineProperty(this, "omnichannelConfig", {
      widgetId: "00000000-0000-0000-0000-000000000000",
      orgId: "00000000-0000-0000-0000-000000000000",
      orgUrl: "https://contoso.crm.dynamics.com"
    });
  }
  async startChat() {
    await this.sleep(1000);
  }
  endChat() {
    return null;
  }
  getChatToken() {
    return null;
  }
  createChatAdapter() {
    return new MockAdapter();
  }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  getPreChatSurvey(parseToJson) {
    return "";
  }
  getConversationDetails() {
    return {
      State: "Active",
      conversationId: "",
      canRenderPostChat: "",
      participantType: ParticipantType.User
    };
  }
  getCurrentLiveChatContext() {
    return {
      chatToken: {},
      requestId: ""
    };
  }
  onNewMessage() {
    return null;
  }
  getChatReconnectContext() {
    return {
      reconnectId: "123"
    };
  }
}