import { LogLevel, TelemetryEvent } from "../../common/telemetry/TelemetryConstants";
import React, { useEffect, useRef, useState } from "react";
import { ConversationState } from "../../contexts/common/ConversationState";
import { Header } from "@microsoft/omnichannel-chat-components";
import { LiveChatWidgetActionType } from "../../contexts/common/LiveChatWidgetActionType";
import { TelemetryHelper } from "../../common/telemetry/TelemetryHelper";
import { defaultOutOfOfficeHeaderStyleProps } from "./common/styleProps/defaultOutOfOfficeHeaderStyleProps";
import useChatAdapterStore from "../../hooks/useChatAdapterStore";
import useChatContextStore from "../../hooks/useChatContextStore";
import { ConfirmationState } from "../../common/Constants";
import DraggableEventEmitter from "../draggable/DraggableEventEmitter";
export const HeaderStateful = props => {
  var _state$domainStates$l, _state$domainStates$l2, _state$domainStates, _headerProps$controlP, _headerProps$controlP2, _headerProps$controlP3, _outOfOfficeHeaderPro, _state$domainStates3;
  const [state, dispatch] = useChatContextStore();
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const [adapter] = useChatAdapterStore();
  const {
    headerProps,
    outOfOfficeHeaderProps,
    endChat
  } = props;
  //Setting OutOfOperatingHours Flag
  const [outOfOperatingHours, setOutOfOperatingHours] = useState(((_state$domainStates$l = state.domainStates.liveChatConfig) === null || _state$domainStates$l === void 0 ? void 0 : (_state$domainStates$l2 = _state$domainStates$l.LiveWSAndLiveChatEngJoin) === null || _state$domainStates$l2 === void 0 ? void 0 : _state$domainStates$l2.OutOfOperatingHours) === "True");
  const outOfOfficeStyleProps = Object.assign({}, defaultOutOfOfficeHeaderStyleProps, outOfOfficeHeaderProps === null || outOfOfficeHeaderProps === void 0 ? void 0 : outOfOfficeHeaderProps.styleProps);

  // For some reason state object is not getting updated values in this component
  const localConfirmationPaneState = useRef(state === null || state === void 0 ? void 0 : (_state$domainStates = state.domainStates) === null || _state$domainStates === void 0 ? void 0 : _state$domainStates.confirmationState);
  const controlProps = {
    id: "oc-lcw-header",
    dir: state.domainStates.globalDir,
    onMinimizeClick: () => {
      TelemetryHelper.logActionEvent(LogLevel.INFO, {
        Event: TelemetryEvent.HeaderMinimizeButtonClicked,
        Description: "Header Minimize button clicked."
      });
      dispatch({
        type: LiveChatWidgetActionType.SET_MINIMIZED,
        payload: true
      });
    },
    onCloseClick: async () => {
      var _props$headerProps, _props$headerProps$co, _props$headerProps$co2;
      TelemetryHelper.logActionEvent(LogLevel.INFO, {
        Event: TelemetryEvent.HeaderCloseButtonClicked,
        Description: "Header Close button clicked."
      });
      if (localConfirmationPaneState.current !== ConfirmationState.Ok) {
        dispatch({
          type: LiveChatWidgetActionType.SET_SHOW_CONFIRMATION,
          payload: true
        });
      } else {
        const skipEndChatSDK = true;
        const skipCloseChat = false;
        const postMessageToOtherTabs = true;
        await endChat(adapter, skipEndChatSDK, skipCloseChat, postMessageToOtherTabs);
      }
      const closeButtonId = ((_props$headerProps = props.headerProps) === null || _props$headerProps === void 0 ? void 0 : (_props$headerProps$co = _props$headerProps.controlProps) === null || _props$headerProps$co === void 0 ? void 0 : (_props$headerProps$co2 = _props$headerProps$co.closeButtonProps) === null || _props$headerProps$co2 === void 0 ? void 0 : _props$headerProps$co2.id) ?? `${controlProps.id}-close-button`;
      if (closeButtonId) {
        dispatch({
          type: LiveChatWidgetActionType.SET_PREVIOUS_FOCUSED_ELEMENT_ID,
          payload: closeButtonId
        });
      }
    },
    ...(headerProps === null || headerProps === void 0 ? void 0 : headerProps.controlProps),
    hideTitle: state.appStates.conversationState === ConversationState.Loading && !state.appStates.startChatFailed || state.appStates.conversationState === ConversationState.PostchatLoading || (headerProps === null || headerProps === void 0 ? void 0 : (_headerProps$controlP = headerProps.controlProps) === null || _headerProps$controlP === void 0 ? void 0 : _headerProps$controlP.hideTitle),
    hideIcon: state.appStates.conversationState === ConversationState.Loading && !state.appStates.startChatFailed || state.appStates.conversationState === ConversationState.PostchatLoading || (headerProps === null || headerProps === void 0 ? void 0 : (_headerProps$controlP2 = headerProps.controlProps) === null || _headerProps$controlP2 === void 0 ? void 0 : _headerProps$controlP2.hideIcon),
    hideCloseButton: state.appStates.conversationState === ConversationState.Loading && !state.appStates.startChatFailed || state.appStates.conversationState === ConversationState.PostchatLoading || state.appStates.conversationState === ConversationState.Prechat || state.appStates.conversationState === ConversationState.ReconnectChat || (headerProps === null || headerProps === void 0 ? void 0 : (_headerProps$controlP3 = headerProps.controlProps) === null || _headerProps$controlP3 === void 0 ? void 0 : _headerProps$controlP3.hideCloseButton)
  };
  const outOfOfficeControlProps = {
    id: "oc-lcw-header",
    dir: state.domainStates.globalDir,
    headerTitleProps: {
      text: "We're Offline"
    },
    onMinimizeClick: () => {
      dispatch({
        type: LiveChatWidgetActionType.SET_MINIMIZED,
        payload: true
      });
    },
    ...(outOfOfficeHeaderProps === null || outOfOfficeHeaderProps === void 0 ? void 0 : outOfOfficeHeaderProps.controlProps),
    hideCloseButton: state.appStates.conversationState === ConversationState.OutOfOffice || (outOfOfficeHeaderProps === null || outOfOfficeHeaderProps === void 0 ? void 0 : (_outOfOfficeHeaderPro = outOfOfficeHeaderProps.controlProps) === null || _outOfOfficeHeaderPro === void 0 ? void 0 : _outOfOfficeHeaderPro.hideCloseButton)
  };
  useEffect(() => {
    if (state.appStates.outsideOperatingHours) {
      setOutOfOperatingHours(true);
    }
  }, []);
  useEffect(() => {
    var _state$domainStates2;
    localConfirmationPaneState.current = state === null || state === void 0 ? void 0 : (_state$domainStates2 = state.domainStates) === null || _state$domainStates2 === void 0 ? void 0 : _state$domainStates2.confirmationState;
  }, [state === null || state === void 0 ? void 0 : (_state$domainStates3 = state.domainStates) === null || _state$domainStates3 === void 0 ? void 0 : _state$domainStates3.confirmationState]);
  const draggableEventEmitterProps = {
    channel: props.draggableEventChannel ?? "lcw",
    elementId: outOfOperatingHours || state.appStates.conversationState === ConversationState.OutOfOffice ? outOfOfficeControlProps.id : controlProps.id,
    targetWindow: props.draggableEventEmitterTargetWindow ?? window
  };
  if (props.draggable === true) {
    var _generalStyleProps;
    const styleProps = outOfOperatingHours || state.appStates.conversationState === ConversationState.OutOfOffice ? outOfOfficeStyleProps : headerProps === null || headerProps === void 0 ? void 0 : headerProps.styleProps;
    const draggableSelectors = {
      "&:hover": {
        cursor: "move"
      }
    };
    const selectors = Object.assign({}, (styleProps === null || styleProps === void 0 ? void 0 : (_generalStyleProps = styleProps.generalStyleProps) === null || _generalStyleProps === void 0 ? void 0 : _generalStyleProps.selectors) || {}, draggableSelectors); // eslint-disable-line @typescript-eslint/no-explicit-any
    const generalStyleProps = Object.assign({}, styleProps === null || styleProps === void 0 ? void 0 : styleProps.generalStyleProps, {
      selectors
    });
    const draggableStyleProps = Object.assign({}, styleProps, {
      generalStyleProps
    });
    return /*#__PURE__*/React.createElement(DraggableEventEmitter, draggableEventEmitterProps, /*#__PURE__*/React.createElement(Header, {
      componentOverrides: headerProps === null || headerProps === void 0 ? void 0 : headerProps.componentOverrides,
      controlProps: outOfOperatingHours || state.appStates.conversationState === ConversationState.OutOfOffice ? outOfOfficeControlProps : controlProps,
      styleProps: draggableStyleProps
    }));
  }
  return /*#__PURE__*/React.createElement(Header, {
    componentOverrides: headerProps === null || headerProps === void 0 ? void 0 : headerProps.componentOverrides,
    controlProps: outOfOperatingHours || state.appStates.conversationState === ConversationState.OutOfOffice ? outOfOfficeControlProps : controlProps,
    styleProps: outOfOperatingHours || state.appStates.conversationState === ConversationState.OutOfOffice ? outOfOfficeStyleProps : headerProps === null || headerProps === void 0 ? void 0 : headerProps.styleProps
  });
};
export default HeaderStateful;