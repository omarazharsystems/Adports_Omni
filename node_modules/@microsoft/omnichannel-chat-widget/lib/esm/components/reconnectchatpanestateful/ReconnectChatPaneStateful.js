import { LogLevel, TelemetryEvent } from "../../common/telemetry/TelemetryConstants";
import React, { useEffect } from "react";
import { ConversationState } from "../../contexts/common/ConversationState";
import { LiveChatWidgetActionType } from "../../contexts/common/LiveChatWidgetActionType";
import { ReconnectChatPane } from "@microsoft/omnichannel-chat-components";
import { TelemetryHelper } from "../../common/telemetry/TelemetryHelper";
import { setFocusOnElement } from "../../common/utils";
import useChatContextStore from "../../hooks/useChatContextStore";
import useChatSDKStore from "../../hooks/useChatSDKStore";
export const ReconnectChatPaneStateful = props => {
  const [state, dispatch] = useChatContextStore();
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const chatSDK = useChatSDKStore();
  const {
    reconnectChatProps,
    initStartChat
  } = props;
  const startChat = async continueChat => {
    dispatch({
      type: LiveChatWidgetActionType.SET_CONVERSATION_STATE,
      payload: ConversationState.Loading
    });
    if (continueChat && state.appStates.reconnectId) {
      const optionalParams = {
        reconnectId: state.appStates.reconnectId
      };
      await initStartChat(optionalParams);
    } else {
      var _state$domainStates;
      dispatch({
        type: LiveChatWidgetActionType.SET_RECONNECT_ID,
        payload: undefined
      });
      if (state !== null && state !== void 0 && (_state$domainStates = state.domainStates) !== null && _state$domainStates !== void 0 && _state$domainStates.initialChatSdkRequestId) {
        var _state$domainStates2;
        chatSDK.requestId = state === null || state === void 0 ? void 0 : (_state$domainStates2 = state.domainStates) === null || _state$domainStates2 === void 0 ? void 0 : _state$domainStates2.initialChatSdkRequestId;
      }
      const parseToJson = false;
      const preChatSurveyResponse = await chatSDK.getPreChatSurvey(parseToJson);
      if (preChatSurveyResponse) {
        dispatch({
          type: LiveChatWidgetActionType.SET_PRE_CHAT_SURVEY_RESPONSE,
          payload: preChatSurveyResponse
        });
        dispatch({
          type: LiveChatWidgetActionType.SET_CONVERSATION_STATE,
          payload: ConversationState.Prechat
        });
      } else {
        dispatch({
          type: LiveChatWidgetActionType.SET_CONVERSATION_STATE,
          payload: ConversationState.Loading
        });
        await initStartChat();
      }
    }
  };
  const controlProps = {
    id: "lcw-components-reconnect-chat-pane",
    dir: state.domainStates.globalDir,
    onContinueChat: () => {
      TelemetryHelper.logActionEvent(LogLevel.INFO, {
        Event: TelemetryEvent.ReconnectChatContinueConversation,
        Description: "Reconnect chat continue conversation button clicked."
      });
      startChat(true);
    },
    onStartNewChat: () => {
      TelemetryHelper.logActionEvent(LogLevel.INFO, {
        Event: TelemetryEvent.ReconnectChatStartNewConversation,
        Description: "Reconnect chat start new conversation button clicked."
      });
      startChat(false);
    },
    onMinimize: () => {
      TelemetryHelper.logActionEvent(LogLevel.INFO, {
        Event: TelemetryEvent.ReconnectChatMinimize,
        Description: "Reconnect chat minimized."
      });
      dispatch({
        type: LiveChatWidgetActionType.SET_MINIMIZED,
        payload: true
      });
    },
    ...(reconnectChatProps === null || reconnectChatProps === void 0 ? void 0 : reconnectChatProps.controlProps)
  };
  useEffect(() => {
    setFocusOnElement(document.getElementById(controlProps.id));
    TelemetryHelper.logLoadingEvent(LogLevel.INFO, {
      Event: TelemetryEvent.ReconnectChatPaneLoaded
    });
  }, []);
  return /*#__PURE__*/React.createElement(ReconnectChatPane, {
    componentOverrides: reconnectChatProps === null || reconnectChatProps === void 0 ? void 0 : reconnectChatProps.componentOverrides,
    controlProps: controlProps,
    styleProps: reconnectChatProps === null || reconnectChatProps === void 0 ? void 0 : reconnectChatProps.styleProps
  });
};
export default ReconnectChatPaneStateful;