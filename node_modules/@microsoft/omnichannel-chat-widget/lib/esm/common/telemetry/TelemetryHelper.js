function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { ScenarioType, TelemetryEvent } from "./TelemetryConstants";
import { BroadcastService } from "@microsoft/omnichannel-chat-components";
import { TelemetryManager } from "./TelemetryManager";
import { newGuid } from "../utils";
export class TelemetryHelper {
  static buildTelemetryEvent(level, input) {
    switch (input.scenarioType) {
      case ScenarioType.LOAD:
        return TelemetryHelper.conformToLoadContract(level, input);
      case ScenarioType.IC3_CLIENT:
        return TelemetryHelper.conformToIC3ClientContract(level, input);
      case ScenarioType.WEBCHAT:
        return TelemetryHelper.conformToWebChatContract(level, input);
      case ScenarioType.OCCHATSDK:
        return TelemetryHelper.conformToOCChatSDKContract(level, input);
      case ScenarioType.ACTIONS:
        return TelemetryHelper.conformToActionsContract(level, input);
      case ScenarioType.CALLING:
        return TelemetryHelper.conformToCallingContract(level, input);
      case ScenarioType.ACS_ADAPTER:
        return TelemetryHelper.conformToACSAdapterContract(level, input);
      default:
      case ScenarioType.CONFIG_VALIDATION:
        return TelemetryHelper.conformToConfigValidationContract(level, input);
    }
  }
  static populateBasicProperties(level,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  telemetryData) {
    var _TelemetryManager$Int, _TelemetryManager$Int2, _TelemetryManager$Int3, _TelemetryManager$Int4, _TelemetryManager$Int5, _TelemetryManager$Int6, _TelemetryManager$Int7, _TelemetryManager$Int8;
    return {
      WidgetId: ((_TelemetryManager$Int = TelemetryManager.InternalTelemetryData) === null || _TelemetryManager$Int === void 0 ? void 0 : _TelemetryManager$Int.widgetId) ?? "",
      ChatId: ((_TelemetryManager$Int2 = TelemetryManager.InternalTelemetryData) === null || _TelemetryManager$Int2 === void 0 ? void 0 : _TelemetryManager$Int2.chatId) ?? "",
      ChannelId: ((_TelemetryManager$Int3 = TelemetryManager.InternalTelemetryData) === null || _TelemetryManager$Int3 === void 0 ? void 0 : _TelemetryManager$Int3.channelId) ?? "lcw2.0",
      ConversationId: ((_TelemetryManager$Int4 = TelemetryManager.InternalTelemetryData) === null || _TelemetryManager$Int4 === void 0 ? void 0 : _TelemetryManager$Int4.conversationId) ?? "",
      OrganizationId: ((_TelemetryManager$Int5 = TelemetryManager.InternalTelemetryData) === null || _TelemetryManager$Int5 === void 0 ? void 0 : _TelemetryManager$Int5.orgId) ?? "",
      OrganizationUrl: ((_TelemetryManager$Int6 = TelemetryManager.InternalTelemetryData) === null || _TelemetryManager$Int6 === void 0 ? void 0 : _TelemetryManager$Int6.orgUrl) ?? "",
      LCWRuntimeId: ((_TelemetryManager$Int7 = TelemetryManager.InternalTelemetryData) === null || _TelemetryManager$Int7 === void 0 ? void 0 : _TelemetryManager$Int7.lcwRuntimeId) ?? "",
      CurrentRequestId: ((_TelemetryManager$Int8 = TelemetryManager.InternalTelemetryData) === null || _TelemetryManager$Int8 === void 0 ? void 0 : _TelemetryManager$Int8.currentRequestId) ?? "",
      LogLevel: level
    };
  }
  static populate(level, telemetryData, configure) {
    const base = TelemetryHelper.populateBasicProperties(level, telemetryData);
    const event = base;
    configure(event);
    return event;
  }
  static conformToActionsContract(level, input) {
    const payload = input.payload;
    return TelemetryHelper.populate(level, payload, event => {
      event.Event = payload.Event;
      event.ActionType = payload.ActionType;
      event.ElapsedTimeInMilliseconds = payload.ElapsedTimeInMilliseconds;
      event.ExceptionDetails = JSON.stringify(payload.ExceptionDetails);
      event.Description = payload.Description;
      event.CustomProperties = JSON.stringify(payload.CustomProperties);
    });
  }
  static conformToWebChatContract(level, input) {
    const payload = input.payload;
    return TelemetryHelper.populate(level, payload, event => {
      event.Event = payload.type;
      event.EventInfo = payload.name;
      event.Dimensions = payload.dimensions;
      event.Data = payload.data;
      event.Duration = payload.duration;
      event.ExceptionDetails = JSON.stringify(payload.error);
    });
  }
  static conformToConfigValidationContract(level, input) {
    const payload = input.payload;
    return TelemetryHelper.populate(level, payload, event => {
      var _TelemetryManager$Int9, _TelemetryManager$Int10, _TelemetryManager$Int11;
      event.Event = payload.Event;
      event.RequestId = payload.RequestId;
      event.LCWVersion = (_TelemetryManager$Int9 = TelemetryManager.InternalTelemetryData) === null || _TelemetryManager$Int9 === void 0 ? void 0 : _TelemetryManager$Int9.environmentVersion;
      event.CloudType = payload.CloudType;
      event.Domain = (_TelemetryManager$Int10 = TelemetryManager.InternalTelemetryData) === null || _TelemetryManager$Int10 === void 0 ? void 0 : _TelemetryManager$Int10.hostName;
      event.ElapsedTimeInMilliseconds = payload.ElapsedTimeInMilliseconds;
      event.ExceptionDetails = JSON.stringify(payload.ExceptionDetails);
      event.Language = ((_TelemetryManager$Int11 = TelemetryManager.InternalTelemetryData) === null || _TelemetryManager$Int11 === void 0 ? void 0 : _TelemetryManager$Int11.chatWidgetLocaleLCID) || "";
      event.Description = payload.Data;
    });
  }
  static conformToLoadContract(level, input) {
    const payload = input.payload;
    return TelemetryHelper.populate(level, payload, event => {
      var _TelemetryManager$Int12, _TelemetryManager$Int13, _TelemetryManager$Int14;
      event.Event = payload.Event;
      event.Description = payload.Description;
      event.ResourcePath = payload.ResourcePath;
      event.WidgetState = payload.WidgetState;
      event.ChatState = payload.ChatState;
      event.ChatType = payload.ChatType;
      event.ElapsedTimeInMilliseconds = payload.ElapsedTimeInMilliseconds;
      event.ExceptionDetails = JSON.stringify(payload.ExceptionDetails);
      event.OCChatSDKVersion = ((_TelemetryManager$Int12 = TelemetryManager.InternalTelemetryData) === null || _TelemetryManager$Int12 === void 0 ? void 0 : _TelemetryManager$Int12.OCChatSDKVersion) ?? "";
      event.OCChatWidgetVersion = ((_TelemetryManager$Int13 = TelemetryManager.InternalTelemetryData) === null || _TelemetryManager$Int13 === void 0 ? void 0 : _TelemetryManager$Int13.chatWidgetVersion) ?? "";
      event.OCChatComponentsVersion = ((_TelemetryManager$Int14 = TelemetryManager.InternalTelemetryData) === null || _TelemetryManager$Int14 === void 0 ? void 0 : _TelemetryManager$Int14.chatComponentVersion) ?? "";
    });
  }
  static conformToIC3ClientContract(level, input) {
    const payload = input.payload;
    return TelemetryHelper.populate(level, payload, event => {
      var _TelemetryManager$Int15;
      event.Event = payload.Event;
      event.IC3ClientVersion = (_TelemetryManager$Int15 = TelemetryManager.InternalTelemetryData) === null || _TelemetryManager$Int15 === void 0 ? void 0 : _TelemetryManager$Int15.IC3ClientVersion;
      event.SubscriptionId = payload.SubscriptionId;
      event.EndpointUrl = payload.EndpointUrl;
      event.EndpointId = payload.EndpointId;
      event.ErrorCode = payload.ErrorCode;
      event.ElapsedTimeInMilliseconds = payload.ElapsedTimeInMilliseconds;
      event.ExceptionDetails = JSON.stringify(payload.ExceptionDetails);
      event.ShouldBubbleToHost = payload.ShouldBubbleToHost;
      event.Description = payload.Description;
    });
  }
  static conformToACSAdapterContract(level, input) {
    const payload = input.payload;
    return TelemetryHelper.populate(level, payload, event => {
      event.Description = payload.Description;
      event.ACSUserId = payload.ACSUserId;
      event.ChatThreadId = payload.ChatThreadId;
      event.ChatMessageId = payload.ChatMessageId;
      event.TimeStamp = payload.TimeStamp;
      event.Event = payload.Event;
      event.ErrorCode = payload.ErrorCode;
      event.ExceptionDetails = payload.ExceptionDetails;
    });
  }
  static conformToCallingContract(level, input) {
    const payload = input.payload;
    return TelemetryHelper.populate(level, payload, event => {
      event.CallId = payload.CallId;
      event.Event = payload.Event;
      event.ElapsedTimeInMilliseconds = payload.ElapsedTimeInMilliseconds;
      event.ExceptionDetails = JSON.stringify(payload.ExceptionDetails);
      event.Description = payload.Description;
    });
  }
  static conformToOCChatSDKContract(level, input) {
    const payload = input.payload;
    return TelemetryHelper.populate(level, payload, event => {
      event.RequestId = payload.RequestId;
      event.Event = payload.Event;
      event.OCChatSDKVersion = TelemetryManager.InternalTelemetryData.OCChatSDKVersion ?? "";
      event.TransactionId = payload.TransactionId;
      event.ElapsedTimeInMilliseconds = payload.ElapsedTimeInMilliseconds;
      event.ExceptionDetails = JSON.stringify(payload.ExceptionDetails);
    });
  }
  static addChatConfigDataToTelemetry(chatConfig, telemetryInternalData) {
    var _chatConfig$ChatWidge;
    const telemetryDataLocal = telemetryInternalData;
    telemetryDataLocal.chatWidgetLocaleLCID = (_chatConfig$ChatWidge = chatConfig.ChatWidgetLanguage) === null || _chatConfig$ChatWidge === void 0 ? void 0 : _chatConfig$ChatWidge.msdyn_localeid;
    return telemetryDataLocal;
  }
  static addWidgetDataToTelemetry(telemetryConfig, telemetryInternalData) {
    const telemetryDataLocal = telemetryInternalData;
    if (!(telemetryConfig !== null && telemetryConfig !== void 0 && telemetryConfig.appId) || (telemetryConfig === null || telemetryConfig === void 0 ? void 0 : telemetryConfig.appId.trim()) === "") {
      throw new Error("TelemetryConfig.appId is not set");
    }
    if (!(telemetryConfig !== null && telemetryConfig !== void 0 && telemetryConfig.orgId) || (telemetryConfig === null || telemetryConfig === void 0 ? void 0 : telemetryConfig.orgId.trim()) === "") {
      throw new Error("TelemetryConfig.orgId is not set");
    }
    if (!(telemetryConfig !== null && telemetryConfig !== void 0 && telemetryConfig.orgUrl) || (telemetryConfig === null || telemetryConfig === void 0 ? void 0 : telemetryConfig.orgUrl.trim()) === "") {
      throw new Error("TelemetryConfig.orgUrl is not set");
    }
    telemetryDataLocal.widgetId = telemetryConfig === null || telemetryConfig === void 0 ? void 0 : telemetryConfig.appId;
    telemetryDataLocal.orgId = telemetryConfig === null || telemetryConfig === void 0 ? void 0 : telemetryConfig.orgId;
    telemetryDataLocal.orgUrl = telemetryConfig === null || telemetryConfig === void 0 ? void 0 : telemetryConfig.orgUrl;
    telemetryDataLocal.lcwRuntimeId = telemetryConfig.LCWRuntimeId ?? newGuid();
    return telemetryDataLocal;
  }
  static addSessionDataToTelemetry(chatSession, telemetryInternalData) {
    var _chatSession$chatToke, _chatSession$chatToke2;
    const telemetryDataLocal = telemetryInternalData;
    telemetryDataLocal.chatId = chatSession === null || chatSession === void 0 ? void 0 : (_chatSession$chatToke = chatSession.chatToken) === null || _chatSession$chatToke === void 0 ? void 0 : _chatSession$chatToke.chatId;
    telemetryDataLocal.currentRequestId = chatSession === null || chatSession === void 0 ? void 0 : (_chatSession$chatToke2 = chatSession.chatToken) === null || _chatSession$chatToke2 === void 0 ? void 0 : _chatSession$chatToke2.requestId;
    return telemetryInternalData;
  }
  static addConversationDataToTelemetry(liveWorkItem, telemetryInternalData) {
    const telemetryDataLocal = telemetryInternalData;
    telemetryDataLocal.conversationId = liveWorkItem.conversationId;
    return telemetryDataLocal;
  }
}
_defineProperty(TelemetryHelper, "callId", void 0);
_defineProperty(TelemetryHelper, "elapsedTime", void 0);
_defineProperty(TelemetryHelper, "logCallingEvent", (logLevel, payload, callId) => {
  const telemetryEvent = {
    eventName: (payload === null || payload === void 0 ? void 0 : payload.Event) ?? "",
    logLevel: logLevel,
    payload: {
      ...payload,
      CallId: callId
    }
  };
  BroadcastService.postMessage(telemetryEvent);
});
_defineProperty(TelemetryHelper, "logLoadingEvent", (logLevel, payload) => {
  const telemetryEvent = {
    eventName: (payload === null || payload === void 0 ? void 0 : payload.Event) ?? "",
    logLevel: logLevel,
    payload: {
      ...payload
    }
  };
  BroadcastService.postMessage(telemetryEvent);
});
_defineProperty(TelemetryHelper, "logActionEvent", (logLevel, payload) => {
  const telemetryEvent = {
    eventName: (payload === null || payload === void 0 ? void 0 : payload.Event) ?? "",
    logLevel: logLevel,
    payload: {
      ...payload
    }
  };
  BroadcastService.postMessage(telemetryEvent);
});
_defineProperty(TelemetryHelper, "logSDKEvent", (logLevel, payload) => {
  var _TelemetryManager$Int16;
  const telemetryEvent = {
    eventName: (payload === null || payload === void 0 ? void 0 : payload.Event) ?? "",
    logLevel: logLevel,
    payload: {
      ...payload,
      TransactionId: newGuid(),
      RequestId: (_TelemetryManager$Int16 = TelemetryManager.InternalTelemetryData) === null || _TelemetryManager$Int16 === void 0 ? void 0 : _TelemetryManager$Int16.currentRequestId
    }
  };
  BroadcastService.postMessage(telemetryEvent);
});
_defineProperty(TelemetryHelper, "logConfigDataEvent", (logLevel, payload) => {
  const telemetryEvent = {
    eventName: (payload === null || payload === void 0 ? void 0 : payload.Event) ?? "",
    logLevel: logLevel,
    payload: {
      ...payload
    }
  };
  BroadcastService.postMessage(telemetryEvent);
});
_defineProperty(TelemetryHelper, "logWebChatEvent", (logLevel, payload) => {
  const telemetryEvent = {
    eventName: TelemetryEvent.WebChatEvent,
    logLevel: logLevel,
    payload: {
      ...payload,
      type: TelemetryEvent.WebChatEvent,
      scenarioType: ScenarioType.WEBCHAT
    }
  };
  BroadcastService.postMessage(telemetryEvent);
});