import { Constants } from "../../Constants";
import { LogLevel } from "../TelemetryConstants";
export const consoleLogger = () => {
  const consoleLogger = {
    log: (logLevel, telemetryInput) => {
      const payload = telemetryInput !== null && telemetryInput !== void 0 && telemetryInput.payload && Object.keys(telemetryInput === null || telemetryInput === void 0 ? void 0 : telemetryInput.payload).length > 0 ? telemetryInput === null || telemetryInput === void 0 ? void 0 : telemetryInput.payload : "";
      const telemetryInfo = telemetryInput !== null && telemetryInput !== void 0 && telemetryInput.telemetryInfo && Object.keys(telemetryInput === null || telemetryInput === void 0 ? void 0 : telemetryInput.telemetryInfo).length > 0 ? telemetryInput === null || telemetryInput === void 0 ? void 0 : telemetryInput.telemetryInfo : "";
      try {
        switch (logLevel) {
          case LogLevel.INFO:
            console.info(Constants.LiveChatWidget, payload, telemetryInfo);
            break;
          case LogLevel.DEBUG:
            console.debug(Constants.LiveChatWidget, payload, telemetryInfo);
            break;
          case LogLevel.WARN:
            console.warn(Constants.LiveChatWidget, payload, telemetryInfo);
            break;
          case LogLevel.ERROR:
            console.error(Constants.LiveChatWidget, payload, telemetryInfo);
            break;
          default:
            console.debug(Constants.LiveChatWidget, payload, telemetryInfo);
            break;
        }
      } catch (ex) {
        console.error("An unexpected error occurred in the Telemetry client: " + ex);
      }
    },
    dispose: () => {
      console.log("disposing loggers");
    }
  };
  return consoleLogger;
};