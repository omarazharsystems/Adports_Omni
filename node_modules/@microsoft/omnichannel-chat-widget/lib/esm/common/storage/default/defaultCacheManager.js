function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { BroadcastService } from "@microsoft/omnichannel-chat-components";
import { defaultClientDataStoreProvider } from "./defaultClientDataStoreProvider";
export class defaultCacheManager {}

// eslint-disable-next-line @typescript-eslint/no-explicit-any
// eslint-disable-next-line @typescript-eslint/no-explicit-any
_defineProperty(defaultCacheManager, "InternalCache", {});
export const registerBroadcastServiceForStorage = (widgetCacheId, ttlInMins, storageType) => {
  BroadcastService.getMessageByEventName(widgetCacheId).subscribe(msg => {
    try {
      defaultClientDataStoreProvider(ttlInMins, storageType).setData(widgetCacheId, JSON.stringify(msg.payload));
    } catch (error) {
      console.error("Error in setting data to localstorage", error);
    }
  });
};