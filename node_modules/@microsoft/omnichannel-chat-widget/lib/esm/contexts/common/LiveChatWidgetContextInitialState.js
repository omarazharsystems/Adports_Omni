import { ConversationState } from "./ConversationState";
import { defaultMiddlewareLocalizedTexts } from "../../components/webchatcontainerstateful/common/defaultProps/defaultMiddlewareLocalizedTexts";
import { getWidgetCacheIdfromProps, isNullOrUndefined } from "../../common/utils";
import { defaultClientDataStoreProvider } from "../../common/storage/default/defaultClientDataStoreProvider";
import { ConfirmationState, Constants, ConversationEndEntity, StorageType } from "../../common/Constants";
export const getLiveChatWidgetContextInitialState = props => {
  var _props$controlProps, _props$webChatContain;
  const widgetCacheId = getWidgetCacheIdfromProps(props);
  const cacheTtlInMins = (props === null || props === void 0 ? void 0 : (_props$controlProps = props.controlProps) === null || _props$controlProps === void 0 ? void 0 : _props$controlProps.cacheTtlInMins) ?? Constants.CacheTtlInMinutes;
  const storageType = (props === null || props === void 0 ? void 0 : props.useSessionStorage) === true ? StorageType.sessionStorage : StorageType.localStorage;
  const initialState = defaultClientDataStoreProvider(cacheTtlInMins, storageType).getData(widgetCacheId);
  if (!isNullOrUndefined(initialState)) {
    const initialStateFromCache = JSON.parse(initialState);
    return initialStateFromCache;
  }
  const LiveChatWidgetContextInitialState = {
    domainStates: {
      liveChatConfig: props.chatConfig,
      widgetElementId: "",
      renderingMiddlewareProps: (_props$webChatContain = props.webChatContainerProps) === null || _props$webChatContain === void 0 ? void 0 : _props$webChatContain.renderingMiddlewareProps,
      middlewareLocalizedTexts: defaultMiddlewareLocalizedTexts,
      preChatSurveyResponse: "{}",
      chatToken: undefined,
      postChatContext: undefined,
      telemetryInternalData: {},
      globalDir: "ltr",
      liveChatContext: undefined,
      customContext: undefined,
      widgetSize: undefined,
      widgetInstanceId: "",
      initialChatSdkRequestId: "",
      transcriptRequestId: "",
      confirmationPaneConfirmedOptionClicked: false,
      confirmationState: ConfirmationState.NotSet
    },
    appStates: {
      conversationState: ConversationState.Closed,
      isMinimized: undefined,
      previousElementIdOnFocusBeforeModalOpen: null,
      startChatFailed: false,
      outsideOperatingHours: false,
      preChatResponseEmail: "",
      isAudioMuted: null,
      newMessage: false,
      hideStartChatButton: false,
      reconnectId: undefined,
      proactiveChatStates: {
        proactiveChatBodyTitle: "",
        proactiveChatEnablePrechat: false,
        proactiveChatInNewWindow: false
      },
      e2vvEnabled: false,
      unreadMessageCount: 0,
      conversationEndedBy: ConversationEndEntity.NotSet,
      chatDisconnectEventReceived: false,
      selectedSurveyMode: null
    },
    uiStates: {
      showConfirmationPane: false,
      showEmailTranscriptPane: false,
      showCallingPopup: false,
      isIncomingCall: true,
      disableVideoCall: true,
      disableRemoteVideo: true,
      disableSelfVideo: true,
      focusChatButton: false
    }
  };
  return LiveChatWidgetContextInitialState;
};