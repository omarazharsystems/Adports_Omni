"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveChatAdapterUrl = exports.resolveIC3ClientUrl = void 0;
var LiveChatVersion_1 = require("../core/LiveChatVersion");
var ChatAdapterProtocols_1 = require("../core/messaging/ChatAdapterProtocols");
var libraries_1 = require("./libraries");
var resolveIC3ClientUrl = function (chatSDKConfig) {
    if (chatSDKConfig.ic3Config && 'ic3ClientCDNUrl' in chatSDKConfig.ic3Config) {
        return chatSDKConfig.ic3Config.ic3ClientCDNUrl;
    }
    if (chatSDKConfig.ic3Config && 'ic3ClientVersion' in chatSDKConfig.ic3Config) {
        return libraries_1.default.getIC3ClientCDNUrl(chatSDKConfig.ic3Config.ic3ClientVersion);
    }
    return libraries_1.default.getIC3ClientCDNUrl();
};
exports.resolveIC3ClientUrl = resolveIC3ClientUrl;
var resolveDirectLineCDNUrl = function (chatSDKConfig) {
    if (chatSDKConfig.chatAdapterConfig && 'webChatDirectLineCDNUrl' in chatSDKConfig.chatAdapterConfig) {
        return chatSDKConfig.chatAdapterConfig.webChatDirectLineCDNUrl;
    }
    if (chatSDKConfig.chatAdapterConfig && 'webChatDirectLineVersion' in chatSDKConfig.chatAdapterConfig) {
        return libraries_1.default.getDirectLineCDNUrl(chatSDKConfig.chatAdapterConfig.webChatDirectLineVersion);
    }
    return libraries_1.default.getDirectLineCDNUrl();
};
var resolveACSAdapterCDNUrl = function (chatSDKConfig) {
    if (chatSDKConfig.chatAdapterConfig && 'webChatACSAdapterCDNUrl' in chatSDKConfig.chatAdapterConfig) {
        return chatSDKConfig.chatAdapterConfig.webChatACSAdapterCDNUrl;
    }
    if (chatSDKConfig.chatAdapterConfig && 'webChatACSAdapterVersion' in chatSDKConfig.chatAdapterConfig) {
        return libraries_1.default.getACSAdapterCDNUrl(chatSDKConfig.chatAdapterConfig.webChatACSAdapterVersion);
    }
    return libraries_1.default.getACSAdapterCDNUrl();
};
var resolveIC3AdapterCDNUrl = function (chatSDKConfig) {
    if (chatSDKConfig.chatAdapterConfig && 'webChatIC3AdapterCDNUrl' in chatSDKConfig.chatAdapterConfig) {
        return chatSDKConfig.chatAdapterConfig.webChatIC3AdapterCDNUrl;
    }
    if (chatSDKConfig.chatAdapterConfig && 'webChatIC3AdapterVersion' in chatSDKConfig.chatAdapterConfig) {
        return libraries_1.default.getIC3AdapterCDNUrl(chatSDKConfig.chatAdapterConfig.webChatIC3AdapterVersion);
    }
    return libraries_1.default.getIC3AdapterCDNUrl();
};
var resolveChatAdapterUrl = function (chatSDKConfig, liveChatVersion, protocol) {
    var supportedChatAdapterProtocols = [ChatAdapterProtocols_1.default.ACS, ChatAdapterProtocols_1.default.IC3, ChatAdapterProtocols_1.default.DirectLine];
    if (protocol && !supportedChatAdapterProtocols.includes(protocol)) {
        throw new Error("ChatAdapter for protocol " + protocol + " currently not supported");
    }
    if (protocol === ChatAdapterProtocols_1.default.DirectLine) {
        return resolveDirectLineCDNUrl(chatSDKConfig);
    }
    else if (protocol === ChatAdapterProtocols_1.default.ACS || liveChatVersion === LiveChatVersion_1.default.V2) {
        return resolveACSAdapterCDNUrl(chatSDKConfig);
    }
    else if (protocol === ChatAdapterProtocols_1.default.IC3 || liveChatVersion === LiveChatVersion_1.default.V1) {
        return resolveIC3AdapterCDNUrl(chatSDKConfig);
    }
    return '';
};
exports.resolveChatAdapterUrl = resolveChatAdapterUrl;
exports.default = {
    resolveIC3ClientUrl: resolveIC3ClientUrl,
    resolveChatAdapterUrl: resolveChatAdapterUrl
};
//# sourceMappingURL=urlResolvers.js.map