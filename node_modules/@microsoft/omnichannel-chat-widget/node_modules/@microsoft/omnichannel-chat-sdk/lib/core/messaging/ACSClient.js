"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ACSConversation = void 0;
var ACSChatMessageType_1 = require("./ACSChatMessageType");
var ACSParticipantDisplayName_1 = require("./ACSParticipantDisplayName");
var communication_chat_1 = require("@azure/communication-chat");
var communication_common_1 = require("@azure/communication-common");
var createOmnichannelMessage_1 = require("../../utils/createOmnichannelMessage");
var MessageTags_1 = require("./MessageTags");
var DeliveryMode_1 = require("@microsoft/omnichannel-ic3core/lib/model/DeliveryMode");
var LiveChatVersion_1 = require("../LiveChatVersion");
var ACSClientEvent;
(function (ACSClientEvent) {
    ACSClientEvent["InitializeACSClient"] = "InitializeACSClient";
    ACSClientEvent["InitializeACSConversation"] = "InitializeACSConversation";
    ACSClientEvent["GetParticipants"] = "GetParticipants";
    ACSClientEvent["RegisterOnNewMessage"] = "RegisterOnNewMessage";
    ACSClientEvent["RegisterOnThreadUpdate"] = "RegisterOnThreadUpdate";
    ACSClientEvent["OnTypingEvent"] = "OnTypingEvent";
    ACSClientEvent["GetMessages"] = "GetMessages";
    ACSClientEvent["SendMessage"] = "SendMessage";
    ACSClientEvent["SendTyping"] = "SendTyping";
    ACSClientEvent["Disconnect"] = "Disconnect";
})(ACSClientEvent || (ACSClientEvent = {}));
var ACSConversation = /** @class */ (function () {
    function ACSConversation(tokenCredential, chatClient, logger) {
        if (logger === void 0) { logger = null; }
        this.logger = null;
        this.logger = logger;
        this.tokenCredential = tokenCredential;
        this.chatClient = chatClient;
        this.eventListeners = {};
    }
    ACSConversation.prototype.initialize = function (sessionInfo) {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function () {
            var _f, error_1, exceptionDetails, error_2, exceptionDetails;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        (_a = this.logger) === null || _a === void 0 ? void 0 : _a.startScenario(ACSClientEvent.InitializeACSConversation);
                        this.sessionInfo = sessionInfo;
                        _g.label = 1;
                    case 1:
                        _g.trys.push([1, 3, , 4]);
                        _f = this;
                        return [4 /*yield*/, ((_b = this.chatClient) === null || _b === void 0 ? void 0 : _b.getChatThreadClient(sessionInfo.threadId))];
                    case 2:
                        _f.chatThreadClient = _g.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _g.sent();
                        exceptionDetails = {
                            response: 'ChatClientGetChatThreadClientFailure',
                            errorObject: "" + error_1
                        };
                        (_c = this.logger) === null || _c === void 0 ? void 0 : _c.failScenario(ACSClientEvent.InitializeACSConversation, {
                            ExceptionDetails: JSON.stringify(exceptionDetails)
                        });
                        throw new Error("GetChatThreadClientFailed");
                    case 4:
                        _g.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, this.chatClient.startRealtimeNotifications()];
                    case 5:
                        _g.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        error_2 = _g.sent();
                        exceptionDetails = {
                            response: 'StartRealtimeNotificationsFailed',
                            errorObject: "" + error_2
                        };
                        (_d = this.logger) === null || _d === void 0 ? void 0 : _d.failScenario(ACSClientEvent.InitializeACSConversation, {
                            ExceptionDetails: JSON.stringify(exceptionDetails)
                        });
                        throw new Error(exceptionDetails.response);
                    case 7:
                        (_e = this.logger) === null || _e === void 0 ? void 0 : _e.completeScenario(ACSClientEvent.InitializeACSConversation);
                        return [2 /*return*/];
                }
            });
        });
    };
    ACSConversation.prototype.getMessages = function () {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function () {
            var messages, pagedAsyncIterableIterator, nextMessage, chatMessage, omnichannelMessage, error_3, exceptionDetails;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        (_a = this.logger) === null || _a === void 0 ? void 0 : _a.startScenario(ACSClientEvent.GetMessages);
                        messages = [];
                        _f.label = 1;
                    case 1:
                        _f.trys.push([1, 9, , 10]);
                        return [4 /*yield*/, this.chatThreadClient.listMessages()];
                    case 2:
                        pagedAsyncIterableIterator = _f.sent();
                        return [4 /*yield*/, pagedAsyncIterableIterator.next()];
                    case 3:
                        nextMessage = _f.sent();
                        _f.label = 4;
                    case 4:
                        if (!!nextMessage.done) return [3 /*break*/, 8];
                        chatMessage = nextMessage.value;
                        if (!(chatMessage.type !== ACSChatMessageType_1.default.Text)) return [3 /*break*/, 6];
                        return [4 /*yield*/, pagedAsyncIterableIterator.next()];
                    case 5:
                        nextMessage = _f.sent();
                        return [3 /*break*/, 4];
                    case 6:
                        // Flatten out message content
                        if ((_b = chatMessage.content) === null || _b === void 0 ? void 0 : _b.message) {
                            Object.assign(chatMessage, { content: (_c = chatMessage.content) === null || _c === void 0 ? void 0 : _c.message });
                        }
                        omnichannelMessage = createOmnichannelMessage_1.default(chatMessage, {
                            liveChatVersion: LiveChatVersion_1.default.V2
                        });
                        messages.push(omnichannelMessage);
                        return [4 /*yield*/, pagedAsyncIterableIterator.next()];
                    case 7:
                        nextMessage = _f.sent();
                        return [3 /*break*/, 4];
                    case 8:
                        (_d = this.logger) === null || _d === void 0 ? void 0 : _d.completeScenario(ACSClientEvent.GetMessages);
                        return [3 /*break*/, 10];
                    case 9:
                        error_3 = _f.sent();
                        exceptionDetails = {
                            errorObject: "" + error_3
                        };
                        (_e = this.logger) === null || _e === void 0 ? void 0 : _e.failScenario(ACSClientEvent.GetMessages, {
                            ExceptionDetails: JSON.stringify(exceptionDetails)
                        });
                        throw new Error(ACSClientEvent.GetMessages);
                    case 10: return [2 /*return*/, messages];
                }
            });
        });
    };
    ACSConversation.prototype.getParticipants = function () {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var participants, pagedAsyncIterableIterator, next, user, error_4, exceptionDetails;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        (_a = this.logger) === null || _a === void 0 ? void 0 : _a.startScenario(ACSClientEvent.GetParticipants);
                        participants = [];
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 7, , 8]);
                        return [4 /*yield*/, this.chatThreadClient.listParticipants()];
                    case 2:
                        pagedAsyncIterableIterator = _d.sent();
                        return [4 /*yield*/, pagedAsyncIterableIterator.next()];
                    case 3:
                        next = _d.sent();
                        _d.label = 4;
                    case 4:
                        if (!!next.done) return [3 /*break*/, 6];
                        user = next.value;
                        participants.push(user);
                        return [4 /*yield*/, pagedAsyncIterableIterator.next()];
                    case 5:
                        next = _d.sent();
                        return [3 /*break*/, 4];
                    case 6:
                        (_b = this.logger) === null || _b === void 0 ? void 0 : _b.completeScenario(ACSClientEvent.GetParticipants);
                        return [3 /*break*/, 8];
                    case 7:
                        error_4 = _d.sent();
                        exceptionDetails = {
                            errorObject: "" + error_4
                        };
                        (_c = this.logger) === null || _c === void 0 ? void 0 : _c.failScenario(ACSClientEvent.GetParticipants, {
                            ExceptionDetails: JSON.stringify(exceptionDetails)
                        });
                        throw new Error(ACSClientEvent.GetParticipants);
                    case 8: return [2 /*return*/, participants];
                }
            });
        });
    };
    ACSConversation.prototype.registerOnNewMessage = function (onNewMessageCallback) {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function () {
            var isReceivingNotifications, postedMessageIds, pollForMessages_1, listener, error_5, exceptionDetails;
            var _this = this;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        (_a = this.logger) === null || _a === void 0 ? void 0 : _a.startScenario(ACSClientEvent.RegisterOnNewMessage);
                        isReceivingNotifications = false;
                        postedMessageIds = new Set();
                        _f.label = 1;
                    case 1:
                        _f.trys.push([1, 3, , 4]);
                        pollForMessages_1 = function (delay) { return __awaiter(_this, void 0, void 0, function () {
                            var messages, _i, _a, message, id, sender, customerMessageCondition, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        if (isReceivingNotifications) {
                                            return [2 /*return*/];
                                        }
                                        _c.label = 1;
                                    case 1:
                                        _c.trys.push([1, 3, , 4]);
                                        return [4 /*yield*/, this.getMessages()];
                                    case 2:
                                        messages = _c.sent();
                                        for (_i = 0, _a = messages.reverse(); _i < _a.length; _i++) {
                                            message = _a[_i];
                                            id = message.id, sender = message.sender;
                                            customerMessageCondition = sender.displayName === ACSParticipantDisplayName_1.default.Customer;
                                            // Filter out customer messages
                                            if (customerMessageCondition) {
                                                continue;
                                            }
                                            // Filter out duplicate messages
                                            if (!postedMessageIds.has(id)) {
                                                onNewMessageCallback(message);
                                                postedMessageIds.add(id);
                                            }
                                        }
                                        return [3 /*break*/, 4];
                                    case 3:
                                        _b = _c.sent();
                                        return [3 /*break*/, 4];
                                    case 4:
                                        setTimeout(function () {
                                            pollForMessages_1(delay);
                                        }, delay);
                                        return [2 /*return*/];
                                }
                            });
                        }); };
                        // Poll messages until WS established connection
                        return [4 /*yield*/, pollForMessages_1((_b = this.sessionInfo) === null || _b === void 0 ? void 0 : _b.pollingInterval)];
                    case 2:
                        // Poll messages until WS established connection
                        _f.sent();
                        listener = function (event) {
                            var _a;
                            isReceivingNotifications = true;
                            var id = event.id, sender = event.sender;
                            var customerMessageCondition = (sender.communicationUserId === ((_a = _this.sessionInfo) === null || _a === void 0 ? void 0 : _a.id));
                            // Filter out customer messages
                            if (customerMessageCondition) {
                                return;
                            }
                            // Filter out duplicate messages
                            if (postedMessageIds.has(id)) {
                                return;
                            }
                            if (event.message) {
                                Object.assign(event, { content: event.message });
                            }
                            onNewMessageCallback(event);
                            postedMessageIds.add(id);
                        };
                        (_c = this.chatClient) === null || _c === void 0 ? void 0 : _c.on("chatMessageReceived", listener);
                        this.trackListener("chatMessageReceived", listener);
                        (_d = this.logger) === null || _d === void 0 ? void 0 : _d.completeScenario(ACSClientEvent.RegisterOnNewMessage);
                        return [3 /*break*/, 4];
                    case 3:
                        error_5 = _f.sent();
                        exceptionDetails = {
                            errorObject: "" + error_5
                        };
                        (_e = this.logger) === null || _e === void 0 ? void 0 : _e.failScenario(ACSClientEvent.RegisterOnNewMessage, {
                            ExceptionDetails: JSON.stringify(exceptionDetails)
                        });
                        throw new Error(ACSClientEvent.RegisterOnNewMessage);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ACSConversation.prototype.registerOnThreadUpdate = function (onThreadUpdateCallback) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function () {
            var listener;
            return __generator(this, function (_e) {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.startScenario(ACSClientEvent.RegisterOnThreadUpdate);
                try {
                    listener = function (event) {
                        onThreadUpdateCallback(event);
                    };
                    (_b = this.chatClient) === null || _b === void 0 ? void 0 : _b.on("participantsRemoved", listener);
                    this.trackListener("participantsRemoved", listener);
                    (_c = this.logger) === null || _c === void 0 ? void 0 : _c.completeScenario(ACSClientEvent.RegisterOnThreadUpdate);
                }
                catch (error) {
                    (_d = this.logger) === null || _d === void 0 ? void 0 : _d.failScenario(ACSClientEvent.RegisterOnThreadUpdate);
                }
                return [2 /*return*/];
            });
        });
    };
    ACSConversation.prototype.onTypingEvent = function (onTypingEventCallback) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function () {
            var listener;
            return __generator(this, function (_e) {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.startScenario(ACSClientEvent.OnTypingEvent);
                try {
                    listener = function (event) {
                        var sender = event.sender, recipient = event.recipient;
                        // Ignore participant's own typing events
                        if (sender.communicationUserId === recipient.communicationUserId) { // eslint-disable-line @typescript-eslint/no-explicit-any
                            return;
                        }
                        onTypingEventCallback(event);
                    };
                    (_b = this.chatClient) === null || _b === void 0 ? void 0 : _b.on("typingIndicatorReceived", listener);
                    this.trackListener("typingIndicatorReceived", listener);
                    (_c = this.logger) === null || _c === void 0 ? void 0 : _c.completeScenario(ACSClientEvent.OnTypingEvent);
                }
                catch (error) {
                    (_d = this.logger) === null || _d === void 0 ? void 0 : _d.failScenario(ACSClientEvent.OnTypingEvent);
                }
                return [2 /*return*/];
            });
        });
    };
    ACSConversation.prototype.sendMessage = function (message) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function () {
            var sendMessageRequest, sendMessageOptions, error_6;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        (_a = this.logger) === null || _a === void 0 ? void 0 : _a.startScenario(ACSClientEvent.SendMessage);
                        if (!message.metadata) {
                            message.metadata = {};
                        }
                        sendMessageRequest = {
                            content: message.content,
                        };
                        sendMessageOptions = {
                            senderDisplayName: ACSParticipantDisplayName_1.default.Customer,
                            metadata: __assign({ deliveryMode: DeliveryMode_1.default.Bridged, tags: MessageTags_1.defaultMessageTags.join(',') }, message.metadata)
                        };
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, ((_b = this.chatThreadClient) === null || _b === void 0 ? void 0 : _b.sendMessage(sendMessageRequest, sendMessageOptions))];
                    case 2:
                        _e.sent();
                        (_c = this.logger) === null || _c === void 0 ? void 0 : _c.completeScenario(ACSClientEvent.SendMessage);
                        return [3 /*break*/, 4];
                    case 3:
                        error_6 = _e.sent();
                        (_d = this.logger) === null || _d === void 0 ? void 0 : _d.failScenario(ACSClientEvent.SendMessage);
                        throw new Error('SendMessageFailed');
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ACSConversation.prototype.sendTyping = function () {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function () {
            var _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        (_a = this.logger) === null || _a === void 0 ? void 0 : _a.startScenario(ACSClientEvent.SendTyping);
                        _f.label = 1;
                    case 1:
                        _f.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, ((_b = this.chatThreadClient) === null || _b === void 0 ? void 0 : _b.sendTypingNotification())];
                    case 2:
                        _f.sent();
                        (_c = this.logger) === null || _c === void 0 ? void 0 : _c.completeScenario(ACSClientEvent.SendTyping);
                        return [3 /*break*/, 4];
                    case 3:
                        _e = _f.sent();
                        (_d = this.logger) === null || _d === void 0 ? void 0 : _d.failScenario(ACSClientEvent.SendTyping);
                        throw new Error('SendTypingFailed');
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ACSConversation.prototype.sendFileMessage = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, undefined];
            });
        });
    };
    ACSConversation.prototype.sendFileData = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, undefined];
            });
        });
    };
    ACSConversation.prototype.uploadFile = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, undefined];
            });
        });
    };
    ACSConversation.prototype.downloadFile = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, undefined];
            });
        });
    };
    ACSConversation.prototype.disconnect = function () {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _loop_1, _i, _d, _e, event_1, listeners;
            var _this = this;
            return __generator(this, function (_f) {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.startScenario(ACSClientEvent.Disconnect);
                try {
                    _loop_1 = function (event_1, listeners) {
                        listeners.forEach(function (listener) {
                            _this.chatClient.off(event_1, listener); // eslint-disable-line @typescript-eslint/no-explicit-any
                        });
                    };
                    for (_i = 0, _d = Object.entries(this.eventListeners); _i < _d.length; _i++) {
                        _e = _d[_i], event_1 = _e[0], listeners = _e[1];
                        _loop_1(event_1, listeners);
                    }
                    (_b = this.logger) === null || _b === void 0 ? void 0 : _b.completeScenario(ACSClientEvent.Disconnect);
                }
                catch (_g) {
                    (_c = this.logger) === null || _c === void 0 ? void 0 : _c.failScenario(ACSClientEvent.Disconnect);
                }
                return [2 /*return*/];
            });
        });
    };
    ACSConversation.prototype.createParticipantsMapping = function () {
        return __awaiter(this, void 0, void 0, function () {
            var participants, participantsMapping, _i, participants_1, participant, id;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getParticipants()];
                    case 1:
                        participants = _b.sent();
                        participantsMapping = {};
                        for (_i = 0, participants_1 = participants; _i < participants_1.length; _i++) {
                            participant = participants_1[_i];
                            id = participant.id;
                            if (!Object.keys(participantsMapping).includes(id.communicationUserId)) {
                                Object.assign(participantsMapping, (_a = {}, _a[id.communicationUserId] = participant, _a));
                            }
                        }
                        return [2 /*return*/, participantsMapping];
                }
            });
        });
    };
    ACSConversation.prototype.trackListener = function (event, listener) {
        if (!(event in this.eventListeners)) {
            this.eventListeners[event] = [];
        }
        this.eventListeners[event].push(listener);
    };
    return ACSConversation;
}());
exports.ACSConversation = ACSConversation;
var ACSClient = /** @class */ (function () {
    function ACSClient(logger) {
        if (logger === void 0) { logger = null; }
        this.logger = null;
        this.tokenCredential = null;
        this.chatClient = null;
        this.logger = logger;
    }
    ACSClient.prototype.initialize = function (acsClientConfig) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function () {
            var tokenRefresher, exceptionDetails, exceptionDetails;
            var _this = this;
            return __generator(this, function (_e) {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.startScenario(ACSClientEvent.InitializeACSClient);
                tokenRefresher = function () { return __awaiter(_this, void 0, void 0, function () {
                    var token;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!acsClientConfig.tokenRefresher) return [3 /*break*/, 2];
                                return [4 /*yield*/, acsClientConfig.tokenRefresher()];
                            case 1:
                                token = _a.sent();
                                return [2 /*return*/, token];
                            case 2: return [2 /*return*/, acsClientConfig.token];
                        }
                    });
                }); };
                try {
                    this.tokenCredential = new communication_common_1.AzureCommunicationTokenCredential({
                        token: acsClientConfig.token,
                        tokenRefresher: tokenRefresher,
                        refreshProactively: true // Flag to whether refresh token 10 mins it expires
                    });
                }
                catch (error) {
                    exceptionDetails = {
                        response: 'CreateTokenCredentialFailure',
                        errorObject: "" + error
                    };
                    (_b = this.logger) === null || _b === void 0 ? void 0 : _b.failScenario(ACSClientEvent.InitializeACSClient, {
                        ExceptionDetails: JSON.stringify(exceptionDetails)
                    });
                    throw new Error('CreateTokenCredentialFailed');
                }
                try {
                    this.chatClient = new communication_chat_1.ChatClient(acsClientConfig.environmentUrl, this.tokenCredential);
                }
                catch (error) {
                    exceptionDetails = {
                        response: 'CreateChatClientFailure',
                        errorObject: "" + error
                    };
                    (_c = this.logger) === null || _c === void 0 ? void 0 : _c.failScenario(ACSClientEvent.InitializeACSClient, {
                        ExceptionDetails: JSON.stringify(exceptionDetails)
                    });
                    throw new Error('CreateChatClientFailed');
                }
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.completeScenario(ACSClientEvent.InitializeACSClient);
                return [2 /*return*/];
            });
        });
    };
    ACSClient.prototype.joinConversation = function (sessionInfo) {
        return __awaiter(this, void 0, void 0, function () {
            var conversation;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        conversation = new ACSConversation(this.tokenCredential, this.chatClient, this.logger);
                        return [4 /*yield*/, conversation.initialize(sessionInfo)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, conversation];
                }
            });
        });
    };
    ACSClient.prototype.getChatClient = function () {
        return this.chatClient;
    };
    return ACSClient;
}());
exports.default = ACSClient;
//# sourceMappingURL=ACSClient.js.map