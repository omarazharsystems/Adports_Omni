"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LoggingSanitizer = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _Constants = _interopRequireDefault(require("../Common/Constants"));

var LoggingSanitizer = /*#__PURE__*/function () {
  function LoggingSanitizer() {
    (0, _classCallCheck2["default"])(this, LoggingSanitizer);
  }

  (0, _createClass2["default"])(LoggingSanitizer, null, [{
    key: "stripCustomContextDataValues",
    value: function stripCustomContextDataValues(customContextData) {
      // eslint-disable-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
      if (customContextData) {
        var _Object$keys;

        (_Object$keys = Object.keys(customContextData)) === null || _Object$keys === void 0 ? void 0 : _Object$keys.forEach(function (contextKey) {
          var _customContextData$;

          if ((_customContextData$ = customContextData["".concat(contextKey)]) !== null && _customContextData$ !== void 0 && _customContextData$.value) {
            customContextData["".concat(contextKey)].value = _Constants["default"].hiddenContentPlaceholder;
          }
        });
      }
    }
  }, {
    key: "stripPreChatResponse",
    value: function stripPreChatResponse(preChatResponse) {
      // eslint-disable-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
      if (preChatResponse) {
        Object.keys(preChatResponse).forEach(function (responseKey) {
          if (preChatResponse["".concat(responseKey)] && responseKey !== 'Type') {
            preChatResponse["".concat(responseKey)] = _Constants["default"].hiddenContentPlaceholder;
          }
        });
      }
    }
  }, {
    key: "stripGeolocation",
    value: function stripGeolocation(data) {
      // eslint-disable-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
      if (data) {
        if (Object.keys(data).includes('longitude')) {
          data['longitude'] = _Constants["default"].hiddenContentPlaceholder;
        }

        if (Object.keys(data).includes('latitude')) {
          data['latitude'] = _Constants["default"].hiddenContentPlaceholder;
        }
      }
    }
  }, {
    key: "stripErrorSensitiveProperties",
    value: function stripErrorSensitiveProperties(errorObject) {
      var _Object$keys2,
          _this = this;

      // eslint-disable-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
      if (errorObject && (0, _typeof2["default"])(errorObject) === 'object' && ((_Object$keys2 = Object.keys(errorObject)) === null || _Object$keys2 === void 0 ? void 0 : _Object$keys2.length) > 0) {
        var _Object$keys3;

        (_Object$keys3 = Object.keys(errorObject)) === null || _Object$keys3 === void 0 ? void 0 : _Object$keys3.forEach(function (key) {
          if (_Constants["default"].sensitiveProperties.indexOf(key) !== -1) {
            // remove sensitive properties from error object
            delete errorObject["".concat(key)];
          }

          if (key === 'data') {
            var data;

            if (typeof errorObject[key] === 'string') {
              // eslint-disable-line security/detect-object-injection
              try {
                data = JSON.parse(errorObject[key]); // eslint-disable-line security/detect-object-injection
              } catch (_unused) {
                data = undefined;
              }
            }

            if (data) {
              if (Object.keys(data).includes('preChatResponse')) {
                LoggingSanitizer.stripPreChatResponse(data.preChatResponse);
              }

              if (Object.keys(data).includes('customContextData')) {
                LoggingSanitizer.stripCustomContextDataValues(data.customContextData);
              }

              LoggingSanitizer.stripGeolocation(data);
              errorObject[key] = JSON.stringify(data); // eslint-disable-line security/detect-object-injection
            }
          }

          if (errorObject["".concat(key)] !== null && (0, _typeof2["default"])(errorObject["".concat(key)]) === 'object') {
            // check sensitive properties in nested error object
            _this.stripErrorSensitiveProperties(errorObject["".concat(key)]);

            return;
          }
        });
      }
    }
  }]);
  return LoggingSanitizer;
}();

exports.LoggingSanitizer = LoggingSanitizer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9VdGlscy9Mb2dnaW5nU2FuaXRpemVyLnRzIl0sIm5hbWVzIjpbIkxvZ2dpbmdTYW5pdGl6ZXIiLCJjdXN0b21Db250ZXh0RGF0YSIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwiY29udGV4dEtleSIsInZhbHVlIiwiQ29uc3RhbnRzIiwiaGlkZGVuQ29udGVudFBsYWNlaG9sZGVyIiwicHJlQ2hhdFJlc3BvbnNlIiwicmVzcG9uc2VLZXkiLCJkYXRhIiwiaW5jbHVkZXMiLCJlcnJvck9iamVjdCIsImxlbmd0aCIsImtleSIsInNlbnNpdGl2ZVByb3BlcnRpZXMiLCJpbmRleE9mIiwiSlNPTiIsInBhcnNlIiwidW5kZWZpbmVkIiwic3RyaXBQcmVDaGF0UmVzcG9uc2UiLCJzdHJpcEN1c3RvbUNvbnRleHREYXRhVmFsdWVzIiwic3RyaXBHZW9sb2NhdGlvbiIsInN0cmluZ2lmeSIsInN0cmlwRXJyb3JTZW5zaXRpdmVQcm9wZXJ0aWVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7SUFFYUEsZ0I7Ozs7Ozs7V0FDWCxzQ0FBMkNDLGlCQUEzQyxFQUF5RTtBQUFFO0FBQ3pFLFVBQUlBLGlCQUFKLEVBQXVCO0FBQUE7O0FBQ3JCLHdCQUFBQyxNQUFNLENBQUNDLElBQVAsQ0FBWUYsaUJBQVosK0RBQWdDRyxPQUFoQyxDQUF3QyxVQUFDQyxVQUFELEVBQXdCO0FBQUE7O0FBQzlELHFDQUFJSixpQkFBaUIsV0FBSUksVUFBSixFQUFyQixnREFBSSxvQkFBb0NDLEtBQXhDLEVBQStDO0FBQzdDTCxZQUFBQSxpQkFBaUIsV0FBSUksVUFBSixFQUFqQixDQUFtQ0MsS0FBbkMsR0FBMkNDLHNCQUFVQyx3QkFBckQ7QUFDRDtBQUNGLFNBSkQ7QUFLRDtBQUNGOzs7V0FFRCw4QkFBbUNDLGVBQW5DLEVBQStEO0FBQUU7QUFDL0QsVUFBSUEsZUFBSixFQUFxQjtBQUNuQlAsUUFBQUEsTUFBTSxDQUFDQyxJQUFQLENBQVlNLGVBQVos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ZGs6Ly8vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvbnN0YW50cyBmcm9tIFwiLi4vQ29tbW9uL0NvbnN0YW50c1wiO1xuXG5leHBvcnQgY2xhc3MgTG9nZ2luZ1Nhbml0aXplciB7XG4gIHB1YmxpYyBzdGF0aWMgc3RyaXBDdXN0b21Db250ZXh0RGF0YVZhbHVlcyhjdXN0b21Db250ZXh0RGF0YTogYW55KTogdm9pZCB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSwgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LW1vZHVsZS1ib3VuZGFyeS10eXBlc1xuICAgIGlmIChjdXN0b21Db250ZXh0RGF0YSkge1xuICAgICAgT2JqZWN0LmtleXMoY3VzdG9tQ29udGV4dERhdGEpPy5mb3JFYWNoKChjb250ZXh0S2V5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgaWYgKGN1c3RvbUNvbnRleHREYXRhW2Ake2NvbnRleHRLZXl9YF0/LnZhbHVlKSB7XG4gICAgICAgICAgY3VzdG9tQ29udGV4dERhdGFbYCR7Y29udGV4dEtleX1gXS52YWx1ZSA9IENvbnN0YW50cy5oaWRkZW5Db250ZW50UGxhY2Vob2xkZXI7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgc3RyaXBQcmVDaGF0UmVzcG9uc2UocHJlQ2hhdFJlc3BvbnNlOiBhbnkpOiB2b2lkIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55LCBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtbW9kdWxlLWJvdW5kYXJ5LXR5cGVzXG4gICAgaWYgKHByZUNoYXRSZXNwb25zZSkge1xuICAgICAgT2JqZWN0LmtleXMocHJlQ2hhdFJlc3BvbnNlKS5mb3JFYWNoKChyZXNwb25zZUtleSkgPT4ge1xuICAgICAgICBpZiAocHJlQ2hhdFJlc3BvbnNlW2Ake3Jlc3BvbnNlS2V5fWBdICYmIHJlc3BvbnNlS2V5ICE9PSAnVHlwZScpIHtcbiAgICAgICAgICBwcmVDaGF0UmVzcG9uc2VbYCR7cmVzcG9uc2VLZXl9YF0gPSBDb25zdGFudHMuaGlkZGVuQ29udGVudFBsYWNlaG9sZGVyO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHN0cmlwR2VvbG9jYXRpb24oZGF0YTogYW55KTogdm9pZCB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSwgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LW1vZHVsZS1ib3VuZGFyeS10eXBlc1xuICAgIGlmIChkYXRhKSB7XG4gICAgICBpZiAoT2JqZWN0LmtleXMoZGF0YSkuaW5jbHVkZXMoJ2xvbmdpdHVkZScpKSB7XG4gICAgICAgIGRhdGFbJ2xvbmdpdHVkZSddID0gQ29uc3RhbnRzLmhpZGRlbkNvbnRlbnRQbGFjZWhvbGRlcjtcbiAgICAgIH1cblxuICAgICAgaWYgKE9iamVjdC5rZXlzKGRhdGEpLmluY2x1ZGVzKCdsYXRpdHVkZScpKSB7XG4gICAgICAgIGRhdGFbJ2xhdGl0dWRlJ10gPSBDb25zdGFudHMuaGlkZGVuQ29udGVudFBsYWNlaG9sZGVyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgc3RyaXBFcnJvclNlbnNpdGl2ZVByb3BlcnRpZXMoZXJyb3JPYmplY3Q6IGFueSk6IHZvaWQgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnksIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXNcbiAgICBpZihlcnJvck9iamVjdCAmJiB0eXBlb2YgZXJyb3JPYmplY3QgPT09ICdvYmplY3QnICYmIE9iamVjdC5rZXlzKGVycm9yT2JqZWN0KT8ubGVuZ3RoID4gMCkge1xuICAgICAgT2JqZWN0LmtleXMoZXJyb3JPYmplY3QpPy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICBpZiAoQ29uc3RhbnRzLnNlbnNpdGl2ZVByb3BlcnRpZXMuaW5kZXhPZihrZXkpICE9PSAtMSkge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIHNlbnNpdGl2ZSBwcm9wZXJ0aWVzIGZyb20gZXJyb3Igb2JqZWN0XG4gICAgICAgICAgICBkZWxldGUgZXJyb3JPYmplY3RbYCR7a2V5fWBdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChrZXkgPT09ICdkYXRhJykge1xuICAgICAgICAgICAgbGV0IGRhdGE7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGVycm9yT2JqZWN0W2tleV0gPT09ICdzdHJpbmcnKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgc2VjdXJpdHkvZGV0ZWN0LW9iamVjdC1pbmplY3Rpb25cbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShlcnJvck9iamVjdFtrZXldKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBzZWN1cml0eS9kZXRlY3Qtb2JqZWN0LWluamVjdGlvblxuICAgICAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhkYXRhKS5pbmNsdWRlcygncHJlQ2hhdFJlc3BvbnNlJykpIHtcbiAgICAgICAgICAgICAgICBMb2dnaW5nU2FuaXRpemVyLnN0cmlwUHJlQ2hhdFJlc3BvbnNlKGRhdGEucHJlQ2hhdFJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhkYXRhKS5pbmNsdWRlcygnY3VzdG9tQ29udGV4dERhdGEnKSkge1xuICAgICAgICAgICAgICAgIExvZ2dpbmdTYW5pdGl6ZXIuc3RyaXBDdXN0b21Db250ZXh0RGF0YVZhbHVlcyhkYXRhLmN1c3RvbUNvbnRleHREYXRhKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIExvZ2dpbmdTYW5pdGl6ZXIuc3RyaXBHZW9sb2NhdGlvbihkYXRhKTtcbiAgICAgICAgICAgICAgZXJyb3JPYmplY3Rba2V5XSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHNlY3VyaXR5L2RldGVjdC1vYmplY3QtaW5qZWN0aW9uXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGVycm9yT2JqZWN0W2Ake2tleX1gXSAhPT0gbnVsbCAmJiB0eXBlb2YgZXJyb3JPYmplY3RbYCR7a2V5fWBdID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgLy8gY2hlY2sgc2Vuc2l0aXZlIHByb3BlcnRpZXMgaW4gbmVzdGVkIGVycm9yIG9iamVjdFxuICAgICAgICAgICAgdGhpcy5zdHJpcEVycm9yU2Vuc2l0aXZlUHJvcGVydGllcyhlcnJvck9iamVjdFtgJHtrZXl9YF0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSJdfQ==