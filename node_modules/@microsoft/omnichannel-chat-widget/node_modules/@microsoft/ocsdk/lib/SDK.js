"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof3 = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _Enums = require("./Common/Enums");

var _axios = _interopRequireDefault(require("axios"));

var _BrowserInfo = require("./Utils/BrowserInfo");

var _Constants = _interopRequireDefault(require("./Common/Constants"));

var _endpointsCreators = require("./Utils/endpointsCreators");

var _DeviceInfo = require("./Utils/DeviceInfo");

var _Locales = _interopRequireDefault(require("./Common/Locales"));

var _LoggingSanitizer = require("./Utils/LoggingSanitizer");

var _LogLevel = require("./Model/LogLevel");

var _OSInfo = require("./Utils/OSInfo");

var _OmnichannelEndpoints = _interopRequireDefault(require("./Common/OmnichannelEndpoints"));

var _OmnichannelHTTPHeaders = _interopRequireDefault(require("./Common/OmnichannelHTTPHeaders"));

var _Timer = require("./Utils/Timer");

var _axiosRetry = _interopRequireDefault(require("./Utils/axiosRetry"));

var _uuid = require("./Utils/uuid");

var hash = _interopRequireWildcard(require("crypto"));

var _CustomContextData = require("./Utils/CustomContextData");

var _throwClientHTTPError = _interopRequireDefault(require("./Utils/throwClientHTTPError"));

var _SessionInitRetryHandler = _interopRequireDefault(require("./Utils/SessionInitRetryHandler"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var SDK = /*#__PURE__*/function () {
  function SDK(omnichannelConfiguration) {
    var _this = this;

    var configuration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SDK.defaultConfiguration;
    var logger = arguments.length > 2 ? arguments[2] : undefined;
    (0, _classCallCheck2["default"])(this, SDK);
    this.omnichannelConfiguration = omnichannelConfiguration;
    this.configuration = configuration;
    this.logger = logger;
    (0, _defineProperty2["default"])(this, "liveChatVersion", void 0);
    (0, _defineProperty2["default"])(this, "setAuthCodeNonce", function (headers) {
      if (headers !== null && headers !== void 0 && headers.authcodenonce) {
        _this.configuration.authCodeNonce = headers === null || headers === void 0 ? void 0 : headers.authcodenonce;
      }
    });

    // Sets to default configuration if passed configuration is empty or is not an object
    if (!Object.keys(this.configuration).length || (0, _typeof2["default"])(configuration) !== "object") {
      this.configuration = SDK.defaultConfiguration;
    } // Validate SDK config


    for (var _i = 0, _Object$keys = Object.keys(SDK.defaultConfiguration); _i < _Object$keys.length; _i++) {
      var key = _Object$keys[_i];

      if (!this.configuration.hasOwnProperty(key)) {
        // eslint-disable-line no-prototype-builtins
        this.configuration["".concat(key)] = SDK.defaultConfiguration["".concat(key)];
      }
    } // Validate individual endpointTimeout config


    for (var _i2 = 0, _Object$keys2 = Object.keys(SDK.defaultConfiguration["requestTimeoutConfig"]); _i2 < _Object$keys2.length; _i2++) {
      var _key = _Object$keys2[_i2];

      if (!this.configuration["requestTimeoutConfig"].hasOwnProperty(_key)) {
        // eslint-disable-line no-prototype-builtins
        this.configuration["requestTimeoutConfig"]["".concat(_key)] = SDK.defaultConfiguration["requestTimeoutConfig"]["".concat(_key)];
      }
    } // Validate channelId


    var channelId = omnichannelConfiguration.channelId;

    if (!Object.values(_Enums.ChannelId).includes(channelId)) {
      throw new Error("Invalid channelId");
    } // Validate OC config


    var currentOmnichannelConfigurationParameters = Object.keys(omnichannelConfiguration);

    var _iterator = _createForOfIteratorHelper(_Constants["default"].requiredOmnichannelConfigurationParameters),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _key2 = _step.value;

        if (!currentOmnichannelConfigurationParameters.includes(_key2)) {
          throw new Error("Missing '".concat(_key2, "' in OmnichannelConfiguration"));
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    this.liveChatVersion = _Enums.LiveChatVersion.V2;
  }
  /**
   * Fetches chat config.
   * @param requestId: RequestId to use to get chat config (Optional).
   */


  (0, _createClass2["default"])(SDK, [{
    key: "getChatConfig",
    value: function () {
      var _getChatConfig = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(requestId) {
        var _this$configuration$d;

        var bypassCache,
            timer,
            requestPath,
            method,
            url,
            axiosInstance,
            headers,
            response,
            elapsedTimeInMilliseconds,
            data,
            _args = arguments;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                bypassCache = _args.length > 1 && _args[1] !== undefined ? _args[1] : false;
                timer = _Timer.Timer.TIMER();
                this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETCHATCONFIG, "Get Chat config started", requestId);

                if (!requestId) {
                  requestId = (0, _uuid.uuidv4)();
                }

                requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatConfigPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "?requestId=").concat(requestId, "&channelId=").concat(this.omnichannelConfiguration.channelId);
                method = "GET";
                url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                axiosInstance = _axios["default"].create();
                (0, _axiosRetry["default"])(axiosInstance, {
                  retries: this.configuration.maxRequestRetriesOnFailure
                });
                headers = {};

                if (bypassCache) {
                  headers = _objectSpread(_objectSpread({}, _Constants["default"].bypassCacheHeaders), headers);
                }

                _context.next = 13;
                return axiosInstance.get(url, {
                  headers: headers,
                  timeout: (_this$configuration$d = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d !== void 0 ? _this$configuration$d : this.configuration.requestTimeoutConfig.getChatConfig
                });

              case 13:
                response = _context.sent;
                elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                data = response.data;

                if (data.LiveChatVersion) {
                  this.liveChatVersion = data.LiveChatVersion;
                }

                data.headers = {};

                if (response.headers && response.headers["date"]) {
                  data.headers["date"] = response.headers["date"];
                }

                this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETCHATCONFIGSUCCESS, "Get Chat config succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);
                return _context.abrupt("return", data);

              case 21:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getChatConfig(_x) {
        return _getChatConfig.apply(this, arguments);
      }

      return getChatConfig;
    }()
    /**
     * Fetches LWI details.
     * @param requestId: RequestId to use to get chat config (Optional).
     * @param getLWIDetailsOptionalParams: Optional parameters for get LWI Details.
     */

  }, {
    key: "getLWIDetails",
    value: function () {
      var _getLWIDetails = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(requestId) {
        var _this$configuration$d2,
            _this2 = this;

        var getLWIDetailsOptionalParams,
            timer,
            requestPath,
            axiosInstance,
            authenticatedUserToken,
            reconnectId,
            headers,
            url,
            method,
            options,
            _args3 = arguments;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                getLWIDetailsOptionalParams = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};
                timer = _Timer.Timer.TIMER();
                this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETLWISTATUSSTARTED, "Get LWI Details Started", requestId);

                if (!requestId) {
                  requestId = (0, _uuid.uuidv4)();
                } // construct a endpoint for anonymous chats to get LWI Details


                requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatLiveWorkItemDetailsPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId);
                axiosInstance = _axios["default"].create();
                (0, _axiosRetry["default"])(axiosInstance, {
                  headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce],
                  retries: this.configuration.maxRequestRetriesOnFailure
                }); // Extract auth token and reconnect id from optional param

                authenticatedUserToken = getLWIDetailsOptionalParams.authenticatedUserToken, reconnectId = getLWIDetailsOptionalParams.reconnectId;
                headers = _Constants["default"].defaultHeaders; // updated auth endpoint for authenticated chats and add auth token in header

                if (authenticatedUserToken) {
                  requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatAuthLiveWorkItemDetailsPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId);
                  headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                  headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                } // Append reconnect id on the endpoint if vailable


                if (reconnectId) {
                  requestPath += "/".concat(reconnectId);
                }

                requestPath += "?channelId=".concat(this.omnichannelConfiguration.channelId);
                url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                method = "GET";
                options = {
                  headers: headers,
                  method: method,
                  url: url,
                  timeout: (_this$configuration$d2 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d2 !== void 0 ? _this$configuration$d2 : this.configuration.requestTimeoutConfig.getLWIDetails
                };
                return _context3.abrupt("return", new Promise( /*#__PURE__*/function () {
                  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(resolve, reject) {
                    var response, elapsedTimeInMilliseconds, data, _headers, _elapsedTimeInMilliseconds;

                    return _regenerator["default"].wrap(function _callee2$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            _context2.prev = 0;
                            _context2.next = 3;
                            return axiosInstance(options);

                          case 3:
                            response = _context2.sent;
                            elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                            data = response.data, _headers = response.headers;

                            _this2.setAuthCodeNonce(_headers);

                            _this2.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETLWISTATUSSUCCEEDED, "Get LWI Details succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);

                            resolve(data);
                            _context2.next = 17;
                            break;

                          case 11:
                            _context2.prev = 11;
                            _context2.t0 = _context2["catch"](0);
                            _elapsedTimeInMilliseconds = timer.milliSecondsElapsed;

                            _this2.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.GETLWISTATUSFAILED, "Get LWI Details failed", requestId, undefined, _elapsedTimeInMilliseconds, requestPath, method, _context2.t0);

                            if (_context2.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                              (0, _throwClientHTTPError["default"])();
                            }

                            reject(_context2.t0);

                          case 17:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, _callee2, null, [[0, 11]]);
                  }));

                  return function (_x3, _x4) {
                    return _ref.apply(this, arguments);
                  };
                }()));

              case 16:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getLWIDetails(_x2) {
        return _getLWIDetails.apply(this, arguments);
      }

      return getLWIDetails;
    }()
    /**
     * Fetches the chat token from Omnichannel to join T1 thread.
     * @param requestId: RequestId to use for getchattoken (Optional).
     * @param getChatTokenOptionalParams: Optional parameters for get chat token.
     */

  }, {
    key: "getChatToken",
    value: function () {
      var _getChatToken = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5(requestId) {
        var _this$configuration$d3,
            _this3 = this;

        var getChatTokenOptionalParams,
            currentRetryCount,
            timer,
            reconnectId,
            authenticatedUserToken,
            currentLiveChatVersion,
            headers,
            endpoint,
            requestPath,
            queryParams,
            url,
            method,
            options,
            axiosInstance,
            _args5 = arguments;
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                getChatTokenOptionalParams = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};
                currentRetryCount = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : 0;
                // eslint-disable-line @typescript-eslint/no-inferrable-types
                timer = _Timer.Timer.TIMER();
                reconnectId = getChatTokenOptionalParams.reconnectId, authenticatedUserToken = getChatTokenOptionalParams.authenticatedUserToken, currentLiveChatVersion = getChatTokenOptionalParams.currentLiveChatVersion;
                this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETCHATTOKENSTARTED, "Get Chat Token Started", requestId);

                if (!(currentRetryCount < 0)) {
                  _context5.next = 7;
                  break;
                }

                throw new Error("Invalid currentRetryCount");

              case 7:
                if (!requestId) {
                  requestId = (0, _uuid.uuidv4)();
                }

                headers = _Constants["default"].defaultHeaders;
                endpoint = (0, _endpointsCreators.createGetChatTokenEndpoint)(currentLiveChatVersion || this.liveChatVersion, authenticatedUserToken ? true : false);

                if (authenticatedUserToken) {
                  headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                  headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                }

                requestPath = "/".concat(endpoint, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId);

                if (reconnectId) {
                  requestPath += "/".concat(reconnectId);
                }

                queryParams = "channelId=".concat(this.omnichannelConfiguration.channelId);
                requestPath += "?".concat(queryParams);
                url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                method = "GET";
                options = {
                  headers: headers,
                  method: method,
                  url: url,
                  timeout: (_this$configuration$d3 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d3 !== void 0 ? _this$configuration$d3 : this.configuration.requestTimeoutConfig.getChatToken
                };
                axiosInstance = _axios["default"].create();
                (0, _axiosRetry["default"])(axiosInstance, {
                  headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce],
                  retries: this.configuration.maxRequestRetriesOnFailure,
                  retryOn429: this.configuration.getChatTokenRetryOn429
                });
                return _context5.abrupt("return", new Promise( /*#__PURE__*/function () {
                  var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(resolve, reject) {
                    var getChatTokenError, response, elapsedTimeInMilliseconds, data, _headers2, _response, _elapsedTimeInMilliseconds2;

                    return _regenerator["default"].wrap(function _callee4$(_context4) {
                      while (1) {
                        switch (_context4.prev = _context4.next) {
                          case 0:
                            getChatTokenError = undefined;
                            _context4.prev = 1;
                            _context4.next = 4;
                            return axiosInstance(options);

                          case 4:
                            response = _context4.sent;
                            elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                            data = response.data, _headers2 = response.headers;

                            _this3.setAuthCodeNonce(_headers2); // Resolves only if it contains chat token response which only happens on status 200


                            if (!data) {
                              _context4.next = 13;
                              break;
                            }

                            data.requestId = requestId;

                            _this3.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETCHATTOKENSUCCEEDED, "Get Chat Token succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);

                            resolve(data);
                            return _context4.abrupt("return");

                          case 13:
                            if (!(reconnectId && response.status === _Constants["default"].noContentStatusCode)) {
                              _context4.next = 16;
                              break;
                            }

                            reject(response);
                            return _context4.abrupt("return");

                          case 16:
                            _context4.next = 26;
                            break;

                          case 18:
                            _context4.prev = 18;
                            _context4.t0 = _context4["catch"](1);
                            _elapsedTimeInMilliseconds2 = timer.milliSecondsElapsed;

                            _this3.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.GETCHATTOKENFAILED, "Get Chat Token failed", requestId, undefined, _elapsedTimeInMilliseconds2, requestPath, method, _context4.t0);

                            getChatTokenError = _context4.t0; // Stop retry on 429

                            if (!(((_response = _context4.t0.response) === null || _response === void 0 ? void 0 : _response.status) === _Constants["default"].tooManyRequestsStatusCode && !_this3.configuration.getChatTokenRetryOn429)) {
                              _context4.next = 26;
                              break;
                            }

                            // eslint-disable-line @typescript-eslint/no-explicit-any
                            reject(_context4.t0);
                            return _context4.abrupt("return");

                          case 26:
                            if (!(currentRetryCount + 1 >= _this3.configuration.getChatTokenRetryCount)) {
                              _context4.next = 29;
                              break;
                            }

                            if (getChatTokenError && getChatTokenError.code == _Constants["default"].axiosTimeoutErrorCode) {
                              (0, _throwClientHTTPError["default"])();
                            } else {
                              reject(getChatTokenError);
                            }

                            return _context4.abrupt("return");

                          case 29:
                            // Retries until it reaches its limit
                            setTimeout(function () {
                              _this3.getChatToken(requestId, getChatTokenOptionalParams, currentRetryCount + 1).then(function (response) {
                                return resolve(response);
                              })["catch"](function (error) {
                                return reject(error);
                              });
                            }, _this3.configuration.getChatTokenTimeBetweenRetriesOnFailure);

                          case 30:
                          case "end":
                            return _context4.stop();
                        }
                      }
                    }, _callee4, null, [[1, 18]]);
                  }));

                  return function (_x6, _x7) {
                    return _ref2.apply(this, arguments);
                  };
                }()));

              case 21:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function getChatToken(_x5) {
        return _getChatToken.apply(this, arguments);
      }

      return getChatToken;
    }()
    /**
     * Fetches the reconnectable chats from omnichannel from the given user information in JWT token(claim name: sub).
     * @param reconnectableChatsParams Mandate parameters for get reconnectable chats.
     */

  }, {
    key: "getReconnectableChats",
    value: function () {
      var _getReconnectableChats = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee7(reconnectableChatsParams) {
        var _this$configuration$d4,
            _this4 = this;

        var timer, authenticatedUserToken, requestPath, headers, url, method, options, axiosInstance, requestId;
        return _regenerator["default"].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                timer = _Timer.Timer.TIMER();
                authenticatedUserToken = reconnectableChatsParams.authenticatedUserToken;
                this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETRECONNECTABLECHATS, "Get Reconnectable chat Started");
                requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatGetReconnectableChatsPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(this.omnichannelConfiguration.orgId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                headers = _Constants["default"].defaultHeaders;
                headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                method = "GET";
                options = {
                  headers: headers,
                  method: method,
                  url: url,
                  timeout: (_this$configuration$d4 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d4 !== void 0 ? _this$configuration$d4 : this.configuration.requestTimeoutConfig.getReconnectableChats
                };
                axiosInstance = _axios["default"].create();
                requestId = this.omnichannelConfiguration.orgId;
                return _context7.abrupt("return", new Promise( /*#__PURE__*/function () {
                  var _ref3 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6(resolve, reject) {
                    var response, elapsedTimeInMilliseconds, data, _headers3, _elapsedTimeInMilliseconds3;

                    return _regenerator["default"].wrap(function _callee6$(_context6) {
                      while (1) {
                        switch (_context6.prev = _context6.next) {
                          case 0:
                            _context6.prev = 0;
                            _context6.next = 3;
                            return axiosInstance(options);

                          case 3:
                            response = _context6.sent;
                            elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                            data = response.data, _headers3 = response.headers;

                            _this4.setAuthCodeNonce(_headers3); // Resolves only if it contains reconnectable chats response which only happens on status 200


                            if (!data) {
                              _context6.next = 11;
                              break;
                            }

                            _this4.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETRECONNECTABLECHATS, "Get Reconnectable Chats Succeeded and old session returned", requestId, response, elapsedTimeInMilliseconds, requestPath, method);

                            resolve(data);
                            return _context6.abrupt("return");

                          case 11:
                            // No data found in the old sessions so returning null
                            resolve();
                            return _context6.abrupt("return");

                          case 15:
                            _context6.prev = 15;
                            _context6.t0 = _context6["catch"](0);
                            _elapsedTimeInMilliseconds3 = timer.milliSecondsElapsed;

                            _this4.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.GETRECONNECTABLECHATS, "Get Reconnectable Chats failed", requestId, undefined, _elapsedTimeInMilliseconds3, requestPath, method, _context6.t0);

                            if (_context6.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                              (0, _throwClientHTTPError["default"])();
                            }

                            reject(_context6.t0);
                            return _context6.abrupt("return");

                          case 22:
                          case "end":
                            return _context6.stop();
                        }
                      }
                    }, _callee6, null, [[0, 15]]);
                  }));

                  return function (_x9, _x10) {
                    return _ref3.apply(this, arguments);
                  };
                }()));

              case 13:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function getReconnectableChats(_x8) {
        return _getReconnectableChats.apply(this, arguments);
      }

      return getReconnectableChats;
    }()
    /**
    * Fetches the reconnectable chats from omnichannel from the given user information in JWT token(claim name: sub).
    * @param reconnectableChatsParams Mandate parameters for get reconnectable chats.
    */

  }, {
    key: "getReconnectAvailability",
    value: function () {
      var _getReconnectAvailability = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee9(reconnectId) {
        var _this$configuration$d5,
            _this5 = this;

        var timer, requestPath, headers, url, method, options, axiosInstance;
        return _regenerator["default"].wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                timer = _Timer.Timer.TIMER();
                this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETRECONNECTAVAILABILITY, "Get Reconnectable availability Started");
                requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatReconnectAvailabilityPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(reconnectId);
                headers = _Constants["default"].defaultHeaders;
                url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                method = "GET";
                options = {
                  headers: headers,
                  method: method,
                  url: url,
                  timeout: (_this$configuration$d5 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d5 !== void 0 ? _this$configuration$d5 : this.configuration.requestTimeoutConfig.getReconnectAvailability
                };
                axiosInstance = _axios["default"].create();
                return _context9.abrupt("return", new Promise( /*#__PURE__*/function () {
                  var _ref4 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee8(resolve, reject) {
                    var response, elapsedTimeInMilliseconds, data, _elapsedTimeInMilliseconds4;

                    return _regenerator["default"].wrap(function _callee8$(_context8) {
                      while (1) {
                        switch (_context8.prev = _context8.next) {
                          case 0:
                            _context8.prev = 0;
                            _context8.next = 3;
                            return axiosInstance(options);

                          case 3:
                            response = _context8.sent;
                            elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                            data = response.data;

                            if (!data) {
                              _context8.next = 10;
                              break;
                            }

                            _this5.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETRECONNECTAVAILABILITY, "Get Reconnect availability succeeded", undefined, response, elapsedTimeInMilliseconds, requestPath, method);

                            resolve(data);
                            return _context8.abrupt("return");

                          case 10:
                            // No data found so returning null
                            _this5.logWithLogger(_LogLevel.LogLevel.WARN, _Enums.OCSDKTelemetryEvent.GETRECONNECTAVAILABILITY, "Get Reconnect availability didn't send any valid data", undefined, response, elapsedTimeInMilliseconds, requestPath, method);

                            resolve();
                            return _context8.abrupt("return");

                          case 15:
                            _context8.prev = 15;
                            _context8.t0 = _context8["catch"](0);
                            _elapsedTimeInMilliseconds4 = timer.milliSecondsElapsed;

                            _this5.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.GETRECONNECTAVAILABILITY, "Get Reconnect Availability failed", undefined, undefined, _elapsedTimeInMilliseconds4, requestPath, method, _context8.t0);

                            if (_context8.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                              (0, _throwClientHTTPError["default"])();
                            }

                            reject(_context8.t0);
                            return _context8.abrupt("return");

                          case 22:
                          case "end":
                            return _context8.stop();
                        }
                      }
                    }, _callee8, null, [[0, 15]]);
                  }));

                  return function (_x12, _x13) {
                    return _ref4.apply(this, arguments);
                  };
                }()));

              case 9:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function getReconnectAvailability(_x11) {
        return _getReconnectAvailability.apply(this, arguments);
      }

      return getReconnectAvailability;
    }()
    /**
     *
     * @param requestId: RequestId to use for session init.
     * @param queueAvailabilityOptionalParams: Optional parameters for session init.
     */

  }, {
    key: "getAgentAvailability",
    value: function () {
      var _getAgentAvailability = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee11(requestId) {
        var _this$configuration$d6,
            _this6 = this;

        var queueAvailabilityOptionalParams,
            timer,
            requestPath,
            axiosInstance,
            authenticatedUserToken,
            initContext,
            getContext,
            headers,
            data,
            cachObj,
            tempArr,
            url,
            method,
            options,
            _args11 = arguments;
        return _regenerator["default"].wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                queueAvailabilityOptionalParams = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : {};
                timer = _Timer.Timer.TIMER();
                this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETAGENTAVAILABILITYSTARTED, "Get agent availability Started", requestId);
                requestPath = "/".concat(_OmnichannelEndpoints["default"].GetAgentAvailabilityPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId, "?channelId=lcw");
                axiosInstance = _axios["default"].create();
                (0, _axiosRetry["default"])(axiosInstance, {
                  headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce],
                  retries: this.configuration.maxRequestRetriesOnFailure
                });
                authenticatedUserToken = queueAvailabilityOptionalParams.authenticatedUserToken, initContext = queueAvailabilityOptionalParams.initContext, getContext = queueAvailabilityOptionalParams.getContext;
                headers = _Constants["default"].defaultHeaders;

                if (authenticatedUserToken) {
                  headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                  headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                }

                data = initContext || {};
                cachObj = {
                  "orgId": this.omnichannelConfiguration.orgId,
                  "widgetId": this.omnichannelConfiguration.widgetId
                };

                if (data && data.customContextData) {
                  tempArr = _CustomContextData.CustomContextData.sort(data.customContextData);
                  Object.assign(cachObj, {
                    "customContext": tempArr
                  });
                }

                if (data.portalcontactid) {
                  Object.assign(cachObj, {
                    "portalcontactid": data.portalcontactid
                  });
                }

                data.cacheKey = hash.createHash('sha256').update(JSON.stringify(cachObj)).digest('hex').toString();

                if (!(getContext && !window.document)) {
                  _context11.next = 16;
                  break;
                }

                return _context11.abrupt("return", Promise.reject(new Error("getContext is only supported on web browsers")));

              case 16:
                if (getContext) {
                  data.browser = _BrowserInfo.BrowserInfo.getBrowserName();
                  data.device = _DeviceInfo.DeviceInfo.getDeviceType();
                  data.originurl = window.location.href;
                  data.os = _OSInfo.OSInfo.getOsType();
                }

                if (!data.locale) {
                  data.locale = _Constants["default"].defaultLocale;
                } // Validate locale


                if (!(data.locale && !_Locales["default"].supportedLocales.includes(data.locale))) {
                  _context11.next = 20;
                  break;
                }

                return _context11.abrupt("return", Promise.reject(new Error("Unsupported locale: '".concat(data.locale, "'"))));

              case 20:
                url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                method = "POST";
                options = {
                  data: data,
                  headers: headers,
                  method: method,
                  url: url,
                  timeout: (_this$configuration$d6 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d6 !== void 0 ? _this$configuration$d6 : this.configuration.requestTimeoutConfig.getAgentAvailability
                };
                return _context11.abrupt("return", new Promise( /*#__PURE__*/function () {
                  var _ref5 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee10(resolve, reject) {
                    var response, elapsedTimeInMilliseconds, _data, _headers4, _elapsedTimeInMilliseconds5;

                    return _regenerator["default"].wrap(function _callee10$(_context10) {
                      while (1) {
                        switch (_context10.prev = _context10.next) {
                          case 0:
                            _context10.prev = 0;
                            _context10.next = 3;
                            return axiosInstance(options);

                          case 3:
                            response = _context10.sent;
                            elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                            _data = response.data, _headers4 = response.headers;

                            _this6.setAuthCodeNonce(_headers4);

                            if (_data) {
                              _this6.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETAGENTAVAILABILITYSUCCEEDED, "Get agent availability succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);

                              resolve(_data);
                            }

                            _context10.next = 16;
                            break;

                          case 10:
                            _context10.prev = 10;
                            _context10.t0 = _context10["catch"](0);
                            _elapsedTimeInMilliseconds5 = timer.milliSecondsElapsed;

                            _this6.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.GETAGENTAVAILABILITYFAILED, "Get agent availability failed", requestId, undefined, _elapsedTimeInMilliseconds5, requestPath, method, _context10.t0);

                            if (_context10.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                              (0, _throwClientHTTPError["default"])();
                            }

                            reject(_context10.t0);

                          case 16:
                          case "end":
                            return _context10.stop();
                        }
                      }
                    }, _callee10, null, [[0, 10]]);
                  }));

                  return function (_x15, _x16) {
                    return _ref5.apply(this, arguments);
                  };
                }()));

              case 24:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function getAgentAvailability(_x14) {
        return _getAgentAvailability.apply(this, arguments);
      }

      return getAgentAvailability;
    }()
    /**
     * Starts a session to omnichannel.
     * @param requestId: RequestId to use for session init.
     * @param sessionInitOptionalParams: Optional parameters for session init.
     */

  }, {
    key: "sessionInit",
    value: function () {
      var _sessionInit = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee13(requestId) {
        var _this$configuration$d7,
            _this7 = this;

        var sessionInitOptionalParams,
            timer,
            axiosInstance,
            reconnectId,
            authenticatedUserToken,
            initContext,
            getContext,
            headers,
            requestPath,
            queryParams,
            data,
            url,
            method,
            options,
            _args13 = arguments;
        return _regenerator["default"].wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                sessionInitOptionalParams = _args13.length > 1 && _args13[1] !== undefined ? _args13[1] : {};
                timer = _Timer.Timer.TIMER();
                this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.SESSIONINITSTARTED, "Session Init Started", requestId);
                axiosInstance = _axios["default"].create();
                (0, _axiosRetry["default"])(axiosInstance, {
                  retries: this.configuration.maxRequestRetriesOnFailure,
                  shouldRetry: _SessionInitRetryHandler["default"],
                  headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce]
                });
                reconnectId = sessionInitOptionalParams.reconnectId, authenticatedUserToken = sessionInitOptionalParams.authenticatedUserToken, initContext = sessionInitOptionalParams.initContext, getContext = sessionInitOptionalParams.getContext;
                headers = _Constants["default"].defaultHeaders;
                requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatSessionInitPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId);

                if (authenticatedUserToken) {
                  requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatAuthSessionInitPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId);
                  headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                  headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                }

                if (reconnectId) {
                  requestPath += "/".concat(reconnectId);
                }

                queryParams = "channelId=".concat(this.omnichannelConfiguration.channelId);
                requestPath += "?".concat(queryParams);
                data = initContext || {};

                if (!(getContext && !window.document)) {
                  _context13.next = 15;
                  break;
                }

                return _context13.abrupt("return", Promise.reject(new Error("getContext is only supported on web browsers")));

              case 15:
                if (getContext) {
                  data.browser = _BrowserInfo.BrowserInfo.getBrowserName();
                  data.device = _DeviceInfo.DeviceInfo.getDeviceType();
                  data.originurl = window.location.href;
                  data.os = _OSInfo.OSInfo.getOsType();
                } // Set default locale if locale is empty


                if (!data.locale) {
                  data.locale = _Constants["default"].defaultLocale;
                } // Validate locale


                if (!(data.locale && !_Locales["default"].supportedLocales.includes(data.locale))) {
                  _context13.next = 19;
                  break;
                }

                return _context13.abrupt("return", Promise.reject(new Error("Unsupported locale: '".concat(data.locale, "'"))));

              case 19:
                url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                method = "POST";
                options = {
                  data: data,
                  headers: headers,
                  method: method,
                  url: url,
                  timeout: (_this$configuration$d7 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d7 !== void 0 ? _this$configuration$d7 : this.configuration.requestTimeoutConfig.sessionInit
                };
                return _context13.abrupt("return", new Promise( /*#__PURE__*/function () {
                  var _ref6 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee12(resolve, reject) {
                    var response, elapsedTimeInMilliseconds, _headers5, _elapsedTimeInMilliseconds6;

                    return _regenerator["default"].wrap(function _callee12$(_context12) {
                      while (1) {
                        switch (_context12.prev = _context12.next) {
                          case 0:
                            _context12.prev = 0;
                            _context12.next = 3;
                            return axiosInstance(options);

                          case 3:
                            response = _context12.sent;
                            elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                            _headers5 = response.headers;

                            _this7.setAuthCodeNonce(_headers5);

                            _this7.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.SESSIONINITSUCCEEDED, "Session Init Succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method, undefined, data);

                            resolve();
                            _context12.next = 17;
                            break;

                          case 11:
                            _context12.prev = 11;
                            _context12.t0 = _context12["catch"](0);
                            _elapsedTimeInMilliseconds6 = timer.milliSecondsElapsed;

                            _this7.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.SESSIONINITFAILED, "Session Init failed", requestId, undefined, _elapsedTimeInMilliseconds6, requestPath, method, _context12.t0, data);

                            if (_context12.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                              (0, _throwClientHTTPError["default"])();
                            }

                            reject(_context12.t0);

                          case 17:
                          case "end":
                            return _context12.stop();
                        }
                      }
                    }, _callee12, null, [[0, 11]]);
                  }));

                  return function (_x18, _x19) {
                    return _ref6.apply(this, arguments);
                  };
                }()));

              case 23:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function sessionInit(_x17) {
        return _sessionInit.apply(this, arguments);
      }

      return sessionInit;
    }()
    /**
     * Closes the omnichannel session.
     * @param requestId: RequestId to use for session close (same request id for session init).
     * @param sessionCloseOptionalParams: Optional parameters for session close.
     */

  }, {
    key: "sessionClose",
    value: function () {
      var _sessionClose = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee15(requestId) {
        var _this$configuration$d8,
            _this8 = this;

        var sessionCloseOptionalParams,
            timer,
            requestPath,
            axiosInstance,
            authenticatedUserToken,
            isReconnectChat,
            isPersistentChat,
            chatId,
            headers,
            data,
            url,
            method,
            options,
            _args15 = arguments;
        return _regenerator["default"].wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                sessionCloseOptionalParams = _args15.length > 1 && _args15[1] !== undefined ? _args15[1] : {};
                timer = _Timer.Timer.TIMER();
                this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.SESSIONCLOSESTARTED, "Session Close Started", requestId);
                requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatSessionClosePath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                axiosInstance = _axios["default"].create();
                (0, _axiosRetry["default"])(axiosInstance, {
                  headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce],
                  retries: this.configuration.maxRequestRetriesOnFailure
                });
                authenticatedUserToken = sessionCloseOptionalParams.authenticatedUserToken, isReconnectChat = sessionCloseOptionalParams.isReconnectChat, isPersistentChat = sessionCloseOptionalParams.isPersistentChat, chatId = sessionCloseOptionalParams.chatId;
                headers = _Constants["default"].defaultHeaders;
                data = {}; // eslint-disable-line @typescript-eslint/no-explicit-any

                data.chatId = chatId;

                if (authenticatedUserToken) {
                  requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatAuthSessionClosePath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                  headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                  headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                }

                if (isReconnectChat) {
                  requestPath += "&isReconnectChat=true";
                }

                if (isPersistentChat) {
                  requestPath += "&isPersistentChat=true";
                }

                url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                method = "POST";
                options = {
                  data: data,
                  headers: headers,
                  method: method,
                  url: url,
                  timeout: (_this$configuration$d8 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d8 !== void 0 ? _this$configuration$d8 : this.configuration.requestTimeoutConfig.sessionClose
                };
                return _context15.abrupt("return", new Promise( /*#__PURE__*/function () {
                  var _ref7 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee14(resolve, reject) {
                    var response, _headers6, elapsedTimeInMilliseconds, _elapsedTimeInMilliseconds7;

                    return _regenerator["default"].wrap(function _callee14$(_context14) {
                      while (1) {
                        switch (_context14.prev = _context14.next) {
                          case 0:
                            _context14.prev = 0;
                            _context14.next = 3;
                            return axiosInstance(options);

                          case 3:
                            response = _context14.sent;
                            _headers6 = response.headers;

                            _this8.setAuthCodeNonce(_headers6);

                            elapsedTimeInMilliseconds = timer.milliSecondsElapsed;

                            _this8.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.SESSIONCLOSESUCCEEDED, "Session Close succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);

                            resolve();
                            _context14.next = 17;
                            break;

                          case 11:
                            _context14.prev = 11;
                            _context14.t0 = _context14["catch"](0);
                            _elapsedTimeInMilliseconds7 = timer.milliSecondsElapsed;

                            _this8.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.SESSIONCLOSEFAILED, "Session close failed", requestId, undefined, _elapsedTimeInMilliseconds7, requestPath, method, _context14.t0);

                            if (_context14.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                              (0, _throwClientHTTPError["default"])();
                            }

                            reject(_context14.t0);

                          case 17:
                          case "end":
                            return _context14.stop();
                        }
                      }
                    }, _callee14, null, [[0, 11]]);
                  }));

                  return function (_x21, _x22) {
                    return _ref7.apply(this, arguments);
                  };
                }()));

              case 17:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function sessionClose(_x20) {
        return _sessionClose.apply(this, arguments);
      }

      return sessionClose;
    }()
    /**
     * Validate the auth chat record exists in database.
     * @param requestId: RequestId for validateAuthChatRecord (same request id for session init).
     * @param validateAuthChatRecordOptionalParams: Optional parameters for validateAuthChatRecord.
     */

  }, {
    key: "validateAuthChatRecord",
    value: function () {
      var _validateAuthChatRecord = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee17(requestId, validateAuthChatRecordOptionalParams) {
        var _this$configuration$d9,
            _this9 = this;

        var timer, authenticatedUserToken, chatId, requestPath, axiosInstance, headers, url, method, options;
        return _regenerator["default"].wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                timer = _Timer.Timer.TIMER();
                this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.VALIDATEAUTHCHATRECORDSTARTED, "Validate Auth Chat Record Started", requestId);
                authenticatedUserToken = validateAuthChatRecordOptionalParams.authenticatedUserToken, chatId = validateAuthChatRecordOptionalParams.chatId;
                requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatValidateAuthChatMapRecordPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(chatId, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                axiosInstance = _axios["default"].create();
                (0, _axiosRetry["default"])(axiosInstance, {
                  headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce],
                  retries: this.configuration.maxRequestRetriesOnFailure
                });
                headers = _Constants["default"].defaultHeaders;

                if (authenticatedUserToken) {
                  headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                  headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                }

                url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                method = "GET";
                options = {
                  headers: headers,
                  method: method,
                  url: url,
                  timeout: (_this$configuration$d9 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d9 !== void 0 ? _this$configuration$d9 : this.configuration.requestTimeoutConfig.validateAuthChatRecordTimeout
                };
                return _context17.abrupt("return", new Promise( /*#__PURE__*/function () {
                  var _ref8 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee16(resolve, reject) {
                    var _response$data, response, _headers7, elapsedTimeInMilliseconds, _elapsedTimeInMilliseconds8;

                    return _regenerator["default"].wrap(function _callee16$(_context16) {
                      while (1) {
                        switch (_context16.prev = _context16.next) {
                          case 0:
                            _context16.prev = 0;
                            _context16.next = 3;
                            return axiosInstance(options);

                          case 3:
                            response = _context16.sent;
                            _headers7 = response.headers;

                            _this9.setAuthCodeNonce(_headers7);

                            elapsedTimeInMilliseconds = timer.milliSecondsElapsed;

                            if (((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.authChatExist) === true) {
                              _this9.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.VALIDATEAUTHCHATRECORDSUCCEEDED, "Validate Auth Chat Record succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);

                              resolve(response.data);
                            } else {
                              _this9.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.VALIDATEAUTHCHATRECORDFAILED, "Validate Auth Chat Record Failed. Record is not found or request is not authorized", requestId, response, elapsedTimeInMilliseconds, requestPath, method);

                              reject(new Error("Validate Auth Chat Record Failed. Record is not found or request is not authorized"));
                            }

                            _context16.next = 16;
                            break;

                          case 10:
                            _context16.prev = 10;
                            _context16.t0 = _context16["catch"](0);
                            _elapsedTimeInMilliseconds8 = timer.milliSecondsElapsed;

                            _this9.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.VALIDATEAUTHCHATRECORDFAILED, "Validate Auth Chat Record failed", requestId, undefined, _elapsedTimeInMilliseconds8, requestPath, method, _context16.t0);

                            if (_context16.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                              (0, _throwClientHTTPError["default"])();
                            }

                            if (_context16.t0.toString() === "Error: Request failed with status code 404") {
                              // backward compatibility
                              resolve({});
                            } else {
                              reject(_context16.t0);
                            }

                          case 16:
                          case "end":
                            return _context16.stop();
                        }
                      }
                    }, _callee16, null, [[0, 10]]);
                  }));

                  return function (_x25, _x26) {
                    return _ref8.apply(this, arguments);
                  };
                }()));

              case 12:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      function validateAuthChatRecord(_x23, _x24) {
        return _validateAuthChatRecord.apply(this, arguments);
      }

      return validateAuthChatRecord;
    }()
    /**
     * Submits post chat response.
     * @param requestId RequestId of the omnichannel session.
     * @param postChatResponse Post chat response to submit.
     * @param submitPostChatResponseOptionalParams: Optional parameters for submit post chat response.
     */

  }, {
    key: "submitPostChatResponse",
    value: function () {
      var _submitPostChatResponse = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee19(requestId, postChatResponse) {
        var _this$configuration$d10,
            _this10 = this;

        var submitPostChatResponseOptionalParams,
            timer,
            requestPath,
            axiosInstance,
            authenticatedUserToken,
            headers,
            url,
            method,
            options,
            _args19 = arguments;
        return _regenerator["default"].wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                submitPostChatResponseOptionalParams = _args19.length > 2 && _args19[2] !== undefined ? _args19[2] : {};
                timer = _Timer.Timer.TIMER();
                this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.SUBMITPOSTCHATSTARTED, "Submit Post Chat Started", requestId);
                requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatSubmitPostChatPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                axiosInstance = _axios["default"].create();
                (0, _axiosRetry["default"])(axiosInstance, {
                  headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce],
                  retries: this.configuration.maxRequestRetriesOnFailure
                });
                authenticatedUserToken = submitPostChatResponseOptionalParams.authenticatedUserToken;
                headers = _Constants["default"].defaultHeaders;

                if (authenticatedUserToken) {
                  requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatAuthSubmitPostChatPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                  headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                  headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                }

                url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                method = "POST";
                options = {
                  data: JSON.stringify(postChatResponse),
                  headers: headers,
                  method: method,
                  url: url,
                  timeout: (_this$configuration$d10 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d10 !== void 0 ? _this$configuration$d10 : this.configuration.requestTimeoutConfig.submitPostChatResponse
                };
                return _context19.abrupt("return", new Promise( /*#__PURE__*/function () {
                  var _ref9 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee18(resolve, reject) {
                    var response, _headers8, elapsedTimeInMilliseconds, _elapsedTimeInMilliseconds9;

                    return _regenerator["default"].wrap(function _callee18$(_context18) {
                      while (1) {
                        switch (_context18.prev = _context18.next) {
                          case 0:
                            _context18.prev = 0;
                            _context18.next = 3;
                            return axiosInstance(options);

                          case 3:
                            response = _context18.sent;
                            _headers8 = response.headers;

                            _this10.setAuthCodeNonce(_headers8);

                            elapsedTimeInMilliseconds = timer.milliSecondsElapsed;

                            _this10.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.SUBMITPOSTCHATSUCCEEDED, "Submit Post Chat succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);

                            resolve();
                            _context18.next = 17;
                            break;

                          case 11:
                            _context18.prev = 11;
                            _context18.t0 = _context18["catch"](0);
                            _elapsedTimeInMilliseconds9 = timer.milliSecondsElapsed;

                            _this10.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.SUBMITPOSTCHATFAILED, "Submit Post Chat Failed", requestId, undefined, _elapsedTimeInMilliseconds9, requestPath, method, _context18.t0);

                            if (_context18.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                              (0, _throwClientHTTPError["default"])();
                            }

                            reject(_context18.t0);

                          case 17:
                          case "end":
                            return _context18.stop();
                        }
                      }
                    }, _callee18, null, [[0, 11]]);
                  }));

                  return function (_x29, _x30) {
                    return _ref9.apply(this, arguments);
                  };
                }()));

              case 13:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));

      function submitPostChatResponse(_x27, _x28) {
        return _submitPostChatResponse.apply(this, arguments);
      }

      return submitPostChatResponse;
    }()
    /**
     * Submits post chat response.
     * @param requestId RequestId of the omnichannel session.
     * @param postChatResponse Post chat response to submit.
     * @param submitPostChatResponseOptionalParams: Optional parameters for submit post chat response.
     */

  }, {
    key: "getSurveyInviteLink",
    value: function () {
      var _getSurveyInviteLink = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee21(surveyOwnerId, surveyInviteAPIRequestBody) {
        var _this$configuration$d11,
            _this11 = this;

        var getsurveyInviteLinkOptionalParams,
            timer,
            requestPath,
            axiosInstance,
            authenticatedUserToken,
            requestId,
            headers,
            url,
            method,
            options,
            _args21 = arguments;
        return _regenerator["default"].wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                getsurveyInviteLinkOptionalParams = _args21.length > 2 && _args21[2] !== undefined ? _args21[2] : {};
                timer = _Timer.Timer.TIMER();

                if (this.logger) {
                  this.logger.log(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETSURVEYINVITELINKSTARTED, {
                    SurveyOwnerId: surveyOwnerId
                  }, "Get Survey Invite Link Started");
                }

                requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatGetSurveyInviteLinkPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(surveyOwnerId);
                axiosInstance = _axios["default"].create();
                (0, _axiosRetry["default"])(axiosInstance, {
                  headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce],
                  retries: this.configuration.maxRequestRetriesOnFailure
                });
                authenticatedUserToken = getsurveyInviteLinkOptionalParams.authenticatedUserToken, requestId = getsurveyInviteLinkOptionalParams.requestId;
                headers = _Constants["default"].defaultHeaders;

                if (authenticatedUserToken) {
                  requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatAuthGetSurveyInviteLinkPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(surveyOwnerId);
                  headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                  headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                  headers[_OmnichannelHTTPHeaders["default"].widgetAppId] = this.omnichannelConfiguration.widgetId;
                }

                if (requestId) {
                  headers[_OmnichannelHTTPHeaders["default"].requestId] = requestId;
                }

                url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                method = "POST";
                options = {
                  data: JSON.stringify(surveyInviteAPIRequestBody),
                  headers: headers,
                  method: method,
                  url: url,
                  timeout: (_this$configuration$d11 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d11 !== void 0 ? _this$configuration$d11 : this.configuration.requestTimeoutConfig.getSurveyInviteLink
                };
                return _context21.abrupt("return", new Promise( /*#__PURE__*/function () {
                  var _ref10 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee20(resolve, reject) {
                    var response, data, _headers9, elapsedTimeInMilliseconds, _elapsedTimeInMilliseconds10;

                    return _regenerator["default"].wrap(function _callee20$(_context20) {
                      while (1) {
                        switch (_context20.prev = _context20.next) {
                          case 0:
                            _context20.prev = 0;
                            _context20.next = 3;
                            return axiosInstance(options);

                          case 3:
                            response = _context20.sent;
                            data = response.data, _headers9 = response.headers;

                            _this11.setAuthCodeNonce(_headers9);

                            elapsedTimeInMilliseconds = timer.milliSecondsElapsed;

                            _this11.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETSURVEYINVITELINKSUCCEEDED, "Get Survey Invite Link Succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);

                            resolve(data);
                            _context20.next = 17;
                            break;

                          case 11:
                            _context20.prev = 11;
                            _context20.t0 = _context20["catch"](0);
                            _elapsedTimeInMilliseconds10 = timer.milliSecondsElapsed;

                            _this11.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.GETSURVEYINVITELINKFAILED, "Get Survey Invite Link failed", requestId, undefined, _elapsedTimeInMilliseconds10, requestPath, method, _context20.t0);

                            if (_context20.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                              (0, _throwClientHTTPError["default"])();
                            }

                            reject(_context20.t0);

                          case 17:
                          case "end":
                            return _context20.stop();
                        }
                      }
                    }, _callee20, null, [[0, 11]]);
                  }));

                  return function (_x33, _x34) {
                    return _ref10.apply(this, arguments);
                  };
                }()));

              case 14:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));

      function getSurveyInviteLink(_x31, _x32) {
        return _getSurveyInviteLink.apply(this, arguments);
      }

      return getSurveyInviteLink;
    }()
    /**
     * Get chat transcripts for customer.
     * @param requestId RequestId of the omnichannel session.
     * @param chatId Chat thread Id.
     * @param token Skype token.
     * @param getChatTranscriptsOptionalParams Optional parameters for get chat transcripts.
     */

  }, {
    key: "getChatTranscripts",
    value: function () {
      var _getChatTranscripts = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee23(requestId, chatId, token) {
        var _this$configuration$d12,
            _this12 = this;

        var getChatTranscriptsOptionalParams,
            timer,
            requestPath,
            axiosInstance,
            authenticatedUserToken,
            currentLiveChatVersion,
            headers,
            url,
            method,
            options,
            _args23 = arguments;
        return _regenerator["default"].wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                getChatTranscriptsOptionalParams = _args23.length > 3 && _args23[3] !== undefined ? _args23[3] : {};
                timer = _Timer.Timer.TIMER();
                this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETCHATTRANSCRIPTSTARTED, "Get Chat Transcript Started", requestId);
                requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatGetChatTranscriptPath, "/").concat(chatId, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                axiosInstance = _axios["default"].create();
                (0, _axiosRetry["default"])(axiosInstance, {
                  headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce],
                  retries: this.configuration.maxRequestRetriesOnFailure
                });
                authenticatedUserToken = getChatTranscriptsOptionalParams.authenticatedUserToken, currentLiveChatVersion = getChatTranscriptsOptionalParams.currentLiveChatVersion;
                headers = _Constants["default"].defaultHeaders;
                headers[_OmnichannelHTTPHeaders["default"].organizationId] = this.omnichannelConfiguration.orgId;
                headers[_OmnichannelHTTPHeaders["default"].widgetAppId] = this.omnichannelConfiguration.widgetId;
                headers[_OmnichannelHTTPHeaders["default"].authorization] = token;

                if (this.liveChatVersion === _Enums.LiveChatVersion.V2 || currentLiveChatVersion && currentLiveChatVersion === _Enums.LiveChatVersion.V2) {
                  requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatv2GetChatTranscriptPath, "/").concat(chatId, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);

                  if (authenticatedUserToken) {
                    headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                    headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                    requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatv2AuthGetChatTranscriptPath, "/").concat(chatId, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                  }
                } else if (authenticatedUserToken) {
                  headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                  headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                  requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatAuthGetChatTranscriptPath, "/").concat(chatId, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                }

                url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                method = "GET";
                options = {
                  headers: headers,
                  method: method,
                  url: url,
                  timeout: (_this$configuration$d12 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d12 !== void 0 ? _this$configuration$d12 : this.configuration.requestTimeoutConfig.getChatTranscripts
                };
                return _context23.abrupt("return", new Promise( /*#__PURE__*/function () {
                  var _ref11 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee22(resolve, reject) {
                    var response, elapsedTimeInMilliseconds, data, _headers10, _elapsedTimeInMilliseconds11;

                    return _regenerator["default"].wrap(function _callee22$(_context22) {
                      while (1) {
                        switch (_context22.prev = _context22.next) {
                          case 0:
                            _context22.prev = 0;
                            _context22.next = 3;
                            return axiosInstance(options);

                          case 3:
                            response = _context22.sent;
                            elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                            data = response.data, _headers10 = response.headers;

                            _this12.setAuthCodeNonce(_headers10);

                            _this12.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETCHATTRANSCRIPTSUCCEEDED, "Get Chat Transcript succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);

                            resolve(data);
                            _context22.next = 17;
                            break;

                          case 11:
                            _context22.prev = 11;
                            _context22.t0 = _context22["catch"](0);
                            _elapsedTimeInMilliseconds11 = timer.milliSecondsElapsed;

                            _this12.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.GETCHATTRANSCRIPTFAILED, "Get Chat Transcript failed", requestId, undefined, _elapsedTimeInMilliseconds11, requestPath, method, _context22.t0);

                            if (_context22.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                              (0, _throwClientHTTPError["default"])();
                            }

                            reject(_context22.t0);

                          case 17:
                          case "end":
                            return _context22.stop();
                        }
                      }
                    }, _callee22, null, [[0, 11]]);
                  }));

                  return function (_x38, _x39) {
                    return _ref11.apply(this, arguments);
                  };
                }()));

              case 16:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23, this);
      }));

      function getChatTranscripts(_x35, _x36, _x37) {
        return _getChatTranscripts.apply(this, arguments);
      }

      return getChatTranscripts;
    }()
    /**
     * Email transcript to customer.
     * @param requestId RequestId of the omnichannel session.
     * @param token Skype token.
     * @param emailRequestBody Email request body.
     * @param emailTranscriptOptionalParams Optional parameters for email transcript.
     */

  }, {
    key: "emailTranscript",
    value: function () {
      var _emailTranscript = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee25(requestId, token, emailRequestBody) {
        var _this$configuration$d13,
            _this13 = this;

        var emailTranscriptOptionalParams,
            timer,
            requestPath,
            axiosInstance,
            authenticatedUserToken,
            headers,
            url,
            method,
            options,
            _args25 = arguments;
        return _regenerator["default"].wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                emailTranscriptOptionalParams = _args25.length > 3 && _args25[3] !== undefined ? _args25[3] : {};
                timer = _Timer.Timer.TIMER();
                this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.EMAILTRANSCRIPTSTARTED, "Email Transcript Started", requestId);
                requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatTranscriptEmailRequestPath, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                axiosInstance = _axios["default"].create();
                (0, _axiosRetry["default"])(axiosInstance, {
                  headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce],
                  retries: this.configuration.maxRequestRetriesOnFailure
                });
                authenticatedUserToken = emailTranscriptOptionalParams.authenticatedUserToken;
                headers = _Constants["default"].defaultHeaders;
                headers[_OmnichannelHTTPHeaders["default"].organizationId] = this.omnichannelConfiguration.orgId;
                headers[_OmnichannelHTTPHeaders["default"].widgetAppId] = this.omnichannelConfiguration.widgetId;
                headers[_OmnichannelHTTPHeaders["default"].authorization] = token;

                if (authenticatedUserToken) {
                  headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                  headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                  requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatAuthTranscriptEmailRequestPath, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                }

                url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                method = "POST";
                options = {
                  data: JSON.stringify(emailRequestBody),
                  headers: headers,
                  method: method,
                  url: url,
                  timeout: (_this$configuration$d13 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d13 !== void 0 ? _this$configuration$d13 : this.configuration.requestTimeoutConfig.emailTranscript
                };
                return _context25.abrupt("return", new Promise( /*#__PURE__*/function () {
                  var _ref12 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee24(resolve, reject) {
                    var response, _headers11, elapsedTimeInMilliseconds, _elapsedTimeInMilliseconds12;

                    return _regenerator["default"].wrap(function _callee24$(_context24) {
                      while (1) {
                        switch (_context24.prev = _context24.next) {
                          case 0:
                            _context24.prev = 0;
                            _context24.next = 3;
                            return axiosInstance(options);

                          case 3:
                            response = _context24.sent;
                            _headers11 = response.headers;

                            _this13.setAuthCodeNonce(_headers11);

                            elapsedTimeInMilliseconds = timer.milliSecondsElapsed;

                            _this13.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.EMAILTRANSCRIPTSUCCEEDED, "Email Transcript succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);

                            resolve();
                            _context24.next = 17;
                            break;

                          case 11:
                            _context24.prev = 11;
                            _context24.t0 = _context24["catch"](0);
                            _elapsedTimeInMilliseconds12 = timer.milliSecondsElapsed;

                            _this13.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.EMAILTRANSCRIPTFAILED, "Email Transcript Failed", requestId, undefined, _elapsedTimeInMilliseconds12, requestPath, method, _context24.t0);

                            if (_context24.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                              (0, _throwClientHTTPError["default"])();
                            }

                            reject(_context24.t0);

                          case 17:
                          case "end":
                            return _context24.stop();
                        }
                      }
                    }, _callee24, null, [[0, 11]]);
                  }));

                  return function (_x43, _x44) {
                    return _ref12.apply(this, arguments);
                  };
                }()));

              case 16:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25, this);
      }));

      function emailTranscript(_x40, _x41, _x42) {
        return _emailTranscript.apply(this, arguments);
      }

      return emailTranscript;
    }()
    /**
     * Fetch data masking info of the org.
     * @param requestId RequestId of the omnichannel session (Optional).
     */

  }, {
    key: "fetchDataMaskingInfo",
    value: function () {
      var _fetchDataMaskingInfo = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee27(requestId) {
        var _this$configuration$d14,
            _this14 = this;

        var timer, requestPath, axiosInstance, headers, url, method, options;
        return _regenerator["default"].wrap(function _callee27$(_context27) {
          while (1) {
            switch (_context27.prev = _context27.next) {
              case 0:
                timer = _Timer.Timer.TIMER();
                this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.FETCHDATAMASKINGSTARTED, "Fetch Data Masking Started", requestId);

                if (!requestId) {
                  requestId = (0, _uuid.uuidv4)();
                }

                requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatFetchDataMaskingInfoPath, "/").concat(this.omnichannelConfiguration.orgId);
                axiosInstance = _axios["default"].create();
                (0, _axiosRetry["default"])(axiosInstance, {
                  retries: this.configuration.maxRequestRetriesOnFailure
                });
                headers = _Constants["default"].defaultHeaders;
                headers[_OmnichannelHTTPHeaders["default"].organizationId] = this.omnichannelConfiguration.orgId;
                headers[_OmnichannelHTTPHeaders["default"].requestId] = requestId;
                url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                method = "GET";
                options = {
                  headers: headers,
                  method: method,
                  url: url,
                  timeout: (_this$configuration$d14 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d14 !== void 0 ? _this$configuration$d14 : this.configuration.requestTimeoutConfig.fetchDataMaskingInfo
                };
                return _context27.abrupt("return", new Promise( /*#__PURE__*/function () {
                  var _ref13 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee26(resolve, reject) {
                    var response, elapsedTimeInMilliseconds, data, _elapsedTimeInMilliseconds13;

                    return _regenerator["default"].wrap(function _callee26$(_context26) {
                      while (1) {
                        switch (_context26.prev = _context26.next) {
                          case 0:
                            _context26.prev = 0;
                            _context26.next = 3;
                            return axiosInstance(options);

                          case 3:
                            response = _context26.sent;
                            elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                            data = response.data;

                            _this14.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.FETCHDATAMASKINGSUCCEEDED, "Fetch Data Masking succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);

                            resolve(data);
                            _context26.next = 16;
                            break;

                          case 10:
                            _context26.prev = 10;
                            _context26.t0 = _context26["catch"](0);
                            _elapsedTimeInMilliseconds13 = timer.milliSecondsElapsed;

                            _this14.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.FETCHDATAMASKINGFAILED, "Fetch Data Masking Failed", requestId, undefined, _elapsedTimeInMilliseconds13, requestPath, method, _context26.t0);

                            if (_context26.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                              (0, _throwClientHTTPError["default"])();
                            }

                            reject(_context26.t0);

                          case 16:
                          case "end":
                            return _context26.stop();
                        }
                      }
                    }, _callee26, null, [[0, 10]]);
                  }));

                  return function (_x46, _x47) {
                    return _ref13.apply(this, arguments);
                  };
                }()));

              case 13:
              case "end":
                return _context27.stop();
            }
          }
        }, _callee27, this);
      }));

      function fetchDataMaskingInfo(_x45) {
        return _fetchDataMaskingInfo.apply(this, arguments);
      }

      return fetchDataMaskingInfo;
    }()
    /**
     * Makes a secondary channel event network call to Omnichannel.
     * @param requestId RequestId to use for secondary channel event
     * @param secondaryChannelEventRequestBody secondaryChannel event request body
     * @param secondaryChannelEventOptionalParams Optional parameters for secondary channel events.
     */

  }, {
    key: "makeSecondaryChannelEventRequest",
    value: function () {
      var _makeSecondaryChannelEventRequest = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee29(requestId, secondaryChannelEventRequestBody) {
        var _this$configuration$d15,
            _this15 = this;

        var secondaryChannelEventOptionalParams,
            timer,
            requestPath,
            axiosInstance,
            authenticatedUserToken,
            headers,
            url,
            method,
            options,
            _args29 = arguments;
        return _regenerator["default"].wrap(function _callee29$(_context29) {
          while (1) {
            switch (_context29.prev = _context29.next) {
              case 0:
                secondaryChannelEventOptionalParams = _args29.length > 2 && _args29[2] !== undefined ? _args29[2] : {};
                timer = _Timer.Timer.TIMER();
                this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.SECONDARYCHANNELEVENTREQUESTSTARTED, "Secondary Channel Event Request Started", requestId);
                requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatSecondaryChannelEventPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId);
                axiosInstance = _axios["default"].create();
                (0, _axiosRetry["default"])(axiosInstance, {
                  headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce],
                  retries: this.configuration.maxRequestRetriesOnFailure
                });
                authenticatedUserToken = secondaryChannelEventOptionalParams.authenticatedUserToken;
                headers = _Constants["default"].defaultHeaders;
                headers[_OmnichannelHTTPHeaders["default"].organizationId] = this.omnichannelConfiguration.orgId;

                if (authenticatedUserToken) {
                  headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                  headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                  requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatAuthSecondaryChannelEventPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId);
                }

                requestPath += "?channelId=" + _Constants["default"].defaultChannelId;
                url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                method = "POST";
                options = {
                  data: JSON.stringify(secondaryChannelEventRequestBody),
                  headers: headers,
                  method: method,
                  url: url,
                  timeout: (_this$configuration$d15 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d15 !== void 0 ? _this$configuration$d15 : this.configuration.requestTimeoutConfig.makeSecondaryChannelEventRequest
                };
                return _context29.abrupt("return", new Promise( /*#__PURE__*/function () {
                  var _ref14 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee28(resolve, reject) {
                    var response, _headers12, elapsedTimeInMilliseconds, _elapsedTimeInMilliseconds14;

                    return _regenerator["default"].wrap(function _callee28$(_context28) {
                      while (1) {
                        switch (_context28.prev = _context28.next) {
                          case 0:
                            _context28.prev = 0;
                            _context28.next = 3;
                            return axiosInstance(options);

                          case 3:
                            response = _context28.sent;
                            _headers12 = response.headers;

                            _this15.setAuthCodeNonce(_headers12);

                            elapsedTimeInMilliseconds = timer.milliSecondsElapsed;

                            _this15.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.SECONDARYCHANNELEVENTREQUESTSUCCEEDED, "Secondary Channel Event Request Succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);

                            resolve();
                            _context28.next = 17;
                            break;

                          case 11:
                            _context28.prev = 11;
                            _context28.t0 = _context28["catch"](0);
                            _elapsedTimeInMilliseconds14 = timer.milliSecondsElapsed;

                            _this15.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.SECONDARYCHANNELEVENTREQUESTFAILED, "Secondary Channel Event Request Failed", requestId, undefined, _elapsedTimeInMilliseconds14, requestPath, method, _context28.t0);

                            if (_context28.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                              (0, _throwClientHTTPError["default"])();
                            }

                            reject(_context28.t0);

                          case 17:
                          case "end":
                            return _context28.stop();
                        }
                      }
                    }, _callee28, null, [[0, 11]]);
                  }));

                  return function (_x50, _x51) {
                    return _ref14.apply(this, arguments);
                  };
                }()));

              case 15:
              case "end":
                return _context29.stop();
            }
          }
        }, _callee29, this);
      }));

      function makeSecondaryChannelEventRequest(_x48, _x49) {
        return _makeSecondaryChannelEventRequest.apply(this, arguments);
      }

      return makeSecondaryChannelEventRequest;
    }()
    /** Send typing indicator
     * @param requestId RequestId of the omnichannel session.
     */

  }, {
    key: "sendTypingIndicator",
    value: function () {
      var _sendTypingIndicator = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee31(requestId, currentLiveChatVersion) {
        var _this$configuration$d16,
            _this16 = this;

        var sendTypingIndicatorOptionalParams,
            timer,
            customerDisplayName,
            requestPath,
            axiosInstance,
            headers,
            url,
            method,
            options,
            _args31 = arguments;
        return _regenerator["default"].wrap(function _callee31$(_context31) {
          while (1) {
            switch (_context31.prev = _context31.next) {
              case 0:
                sendTypingIndicatorOptionalParams = _args31.length > 2 && _args31[2] !== undefined ? _args31[2] : {};

                if (!(!currentLiveChatVersion || currentLiveChatVersion !== _Enums.LiveChatVersion.V2)) {
                  _context31.next = 3;
                  break;
                }

                return _context31.abrupt("return", Promise.resolve());

              case 3:
                timer = _Timer.Timer.TIMER();
                customerDisplayName = sendTypingIndicatorOptionalParams.customerDisplayName;

                if (!(!currentLiveChatVersion || currentLiveChatVersion !== _Enums.LiveChatVersion.V2)) {
                  _context31.next = 7;
                  break;
                }

                throw new Error('Typing indicator is only supported on v2');

              case 7:
                requestPath = "/".concat(_OmnichannelEndpoints["default"].SendTypingIndicatorPath, "/").concat(requestId);
                axiosInstance = _axios["default"].create();
                headers = _Constants["default"].defaultHeaders;
                headers[_OmnichannelHTTPHeaders["default"].organizationId] = this.omnichannelConfiguration.orgId;

                if (customerDisplayName) {
                  headers[_Constants["default"].customerDisplayName] = customerDisplayName;
                }

                url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                method = "POST";
                options = {
                  headers: headers,
                  method: method,
                  url: url,
                  timeout: (_this$configuration$d16 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d16 !== void 0 ? _this$configuration$d16 : this.configuration.requestTimeoutConfig.sendTypingIndicator
                };
                return _context31.abrupt("return", new Promise( /*#__PURE__*/function () {
                  var _ref15 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee30(resolve, reject) {
                    var response, elapsedTimeInMilliseconds, _elapsedTimeInMilliseconds15;

                    return _regenerator["default"].wrap(function _callee30$(_context30) {
                      while (1) {
                        switch (_context30.prev = _context30.next) {
                          case 0:
                            _context30.prev = 0;
                            _context30.next = 3;
                            return axiosInstance(options);

                          case 3:
                            response = _context30.sent;
                            elapsedTimeInMilliseconds = timer.milliSecondsElapsed;

                            _this16.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.SENDTYPINGINDICATORSUCCEEDED, "Send Typing Indicator Succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);

                            resolve();
                            _context30.next = 15;
                            break;

                          case 9:
                            _context30.prev = 9;
                            _context30.t0 = _context30["catch"](0);
                            _elapsedTimeInMilliseconds15 = timer.milliSecondsElapsed;

                            _this16.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.SENDTYPINGINDICATORFAILED, "Send Typing Indicator Failed", requestId, undefined, _elapsedTimeInMilliseconds15, requestPath, method, _context30.t0);

                            if (_context30.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                              (0, _throwClientHTTPError["default"])();
                            }

                            reject(_context30.t0);

                          case 15:
                          case "end":
                            return _context30.stop();
                        }
                      }
                    }, _callee30, null, [[0, 9]]);
                  }));

                  return function (_x54, _x55) {
                    return _ref15.apply(this, arguments);
                  };
                }()));

              case 16:
              case "end":
                return _context31.stop();
            }
          }
        }, _callee31, this);
      }));

      function sendTypingIndicator(_x52, _x53) {
        return _sendTypingIndicator.apply(this, arguments);
      }

      return sendTypingIndicator;
    }()
    /**
     * Helper function for logging.
     *
     * @param logLevel Log level for logging.
     * @param telemetryEventType Telemetry event type in which event will be logged.
     * @param description Description of the event.
     * @param requestId Request ID
     * @param response Response
     * @param elapsedTimeInMilliseconds Elapsed time in ms
     * @param requestPath Request path
     * @param method Method
     * @param error Error
     * @param data Data
     */

  }, {
    key: "logWithLogger",
    value: function logWithLogger(logLevel, telemetryEventType, description, requestId, response, elapsedTimeInMilliseconds, requestPath, method, error, requestPayload) {
      var _response2;

      // eslint-disable-line @typescript-eslint/no-explicit-any
      if (!this.logger) {
        return;
      }

      if (error) {
        _LoggingSanitizer.LoggingSanitizer.stripErrorSensitiveProperties(error);
      }

      var sanitizedRequestPayload = undefined;

      if (requestPayload) {
        sanitizedRequestPayload = _objectSpread({}, requestPayload);

        if (sanitizedRequestPayload.customContextData) {
          _LoggingSanitizer.LoggingSanitizer.stripCustomContextDataValues(sanitizedRequestPayload.customContextData);
        }

        if (sanitizedRequestPayload.preChatResponse) {
          _LoggingSanitizer.LoggingSanitizer.stripPreChatResponse(sanitizedRequestPayload.preChatResponse);
        }

        _LoggingSanitizer.LoggingSanitizer.stripGeolocation(sanitizedRequestPayload);
      }

      var customData = {
        RequestId: requestId,
        Region: response === null || response === void 0 ? void 0 : response.data.Region,
        ElapsedTimeInMilliseconds: elapsedTimeInMilliseconds,
        TransactionId: response === null || response === void 0 ? void 0 : response.headers[_Constants["default"].transactionid],
        RequestPath: requestPath,
        RequestMethod: method,
        ResponseStatusCode: response ? response.status : error ? (_response2 = error.response) === null || _response2 === void 0 ? void 0 : _response2.status : undefined,
        // eslint-disable-line @typescript-eslint/no-explicit-any
        ExceptionDetails: error,
        RequestPayload: sanitizedRequestPayload
      };
      this.logger.log(logLevel, telemetryEventType, customData, description);
    } // eslint-disable-next-line @typescript-eslint/no-explicit-any

  }]);
  return SDK;
}();

exports["default"] = SDK;
(0, _defineProperty2["default"])(SDK, "defaultRequestTimeoutConfig", {
  getChatConfig: 30000,
  getLWIDetails: 15000,
  getChatToken: 15000,
  sessionInit: 15000,
  sessionClose: 15000,
  getReconnectableChats: 15000,
  getReconnectAvailability: 15000,
  submitPostChatResponse: 15000,
  getSurveyInviteLink: 15000,
  getChatTranscripts: 30000,
  emailTranscript: 5000,
  fetchDataMaskingInfo: 5000,
  makeSecondaryChannelEventRequest: 15000,
  getAgentAvailability: 15000,
  sendTypingIndicator: 5000,
  validateAuthChatRecordTimeout: 15000
});
(0, _defineProperty2["default"])(SDK, "defaultConfiguration", {
  authCodeNonce: (0, _uuid.uuidv4)().substring(0, 8),
  getChatTokenRetryCount: 10,
  getChatTokenTimeBetweenRetriesOnFailure: 10000,
  getChatTokenRetryOn429: false,
  maxRequestRetriesOnFailure: 3,
  defaultRequestTimeout: undefined,
  requestTimeoutConfig: SDK.defaultRequestTimeoutConfig
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,