"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _TelemetryHelper = _interopRequireDefault(require("../Utils/TelemetryHelper"));

var OCSDKLogger = /*#__PURE__*/function () {
  function OCSDKLogger(logger) {
    (0, _classCallCheck2["default"])(this, OCSDKLogger);
    (0, _defineProperty2["default"])(this, "logger", void 0);
    this.logger = logger;
  }

  (0, _createClass2["default"])(OCSDKLogger, [{
    key: "log",
    value: function log(loglevel, telemetryEvent, customData, description) {
      // eslint-disable-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
      if (this.isLoggingEnabled()) {
        var logData = _TelemetryHelper["default"].GETTELEMETRYEVENTDATA(telemetryEvent, customData, description);

        this.logEvent(loglevel, logData);
      }
    }
  }, {
    key: "logEvent",
    value: function logEvent(logLevel, logData) {
      if (this.isLoggingEnabled()) {
        setTimeout(this.logger.logClientSdkTelemetryEvent.bind(this.logger), 0, logLevel, logData);
      }
    }
  }, {
    key: "isLoggingEnabled",
    value: function isLoggingEnabled() {
      return !this.isNullOrUndefined(this.logger);
    }
  }, {
    key: "isNullOrUndefined",
    value: function isNullOrUndefined(obj) {
      return obj === null || obj === undefined;
    }
  }]);
  return OCSDKLogger;
}();

exports["default"] = OCSDKLogger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Db21tb24vT0NTREtMb2dnZXIudHMiXSwibmFtZXMiOlsiT0NTREtMb2dnZXIiLCJsb2dnZXIiLCJsb2dsZXZlbCIsInRlbGVtZXRyeUV2ZW50IiwiY3VzdG9tRGF0YSIsImRlc2NyaXB0aW9uIiwiaXNMb2dnaW5nRW5hYmxlZCIsImxvZ0RhdGEiLCJUZWxlbWV0cnlIZWxwZXIiLCJHRVRURUxFTUVUUllFVkVOVERBVEEiLCJsb2dFdmVudCIsImxvZ0xldmVsIiwic2V0VGltZW91dCIsImxvZ0NsaWVudFNka1RlbGVtZXRyeUV2ZW50IiwiYmluZCIsImlzTnVsbE9yVW5kZWZpbmVkIiwib2JqIiwidW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFJQTs7SUFFcUJBLFc7QUFJbkIsdUJBQW1CQyxNQUFuQixFQUFvQztBQUFBO0FBQUE7QUFDaEMsU0FBS0EsTUFBTCxHQUFjQSxNQUFkO0FBQ0g7Ozs7V0FFRCxhQUFXQyxRQUFYLEVBQStCQyxjQUEvQixFQUF1REMsVUFBdkQsRUFBeUVDLFdBQXpFLEVBQXFHO0FBQUU7QUFDbkcsVUFBSSxLQUFLQyxnQkFBTCxFQUFKLEVBQTZCO0FBQ3pCLFlBQU1DLE9BQU8sR0FBR0MsNEJBQWdCQyxxQkFBaEIsQ0FBc0NOLGNBQXRDLEVBQXNEQyxVQUF0RCxFQUFrRUMsV0FBbEUsQ0FBaEI7O0FBQ0EsYUFBS0ssUUFBTCxDQUFjUixRQUFkLEVBQXdCSyxPQUF4QjtBQUNIO0FBQ0o7OztXQUVELGtCQUFnQkksUUFBaEIsRUFBb0NKLE9BQXBDLEVBQTJFO0FBQ3pFLFVBQUksS0FBS0QsZ0JBQUwsRUFBSixFQUE2QjtBQUN6Qk0sUUFBQUEsVUFBVSxDQUFDLEtBQUtYLE1BQUwsQ0FBWVksMEJBQVosQ0FBdUNDLElBQXZDLENBQTRDLEtBQUtiLE1BQWpELENBQUQsRUFBMkQsQ0FBM0QsRUFBOERVLFFBQTlELEVBQXdFSixPQUF4RSxDQUFWO0FBQ0g7QUFDRjs7O1dBRUQsNEJBQW1DO0FBQy9CLGFBQU8sQ0FBQyxLQUFLUSxpQkFBTCxDQUF1QixLQUFLZCxNQUE1QixDQUFSO0FBQ0g7OztXQUVELDJCQUF5QmUsR0FBekIsRUFBK0M7QUFDM0MsYUFBUUEsR0FBRyxLQUFLLElBQVIsSUFBZ0JBLEdBQUcsS0FBS0MsU0FBaEM7QUFDSCIsInNvdXJjZVJvb3QiOiJvY3NkazovLy8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSU9DU0RLTG9nZ2VyIGZyb20gXCIuLi9JbnRlcmZhY2VzL0lPQ1NES0xvZ2dlclwiO1xuaW1wb3J0IElMb2dnZXIgZnJvbSBcIi4uL01vZGVsL0lMb2dnZXJcIjtcbmltcG9ydCBJT0NTREtMb2dEYXRhIGZyb20gXCIuLi9Nb2RlbC9JT0NTREtMb2dEYXRhXCI7XG5pbXBvcnQgeyBMb2dMZXZlbCB9IGZyb20gXCIuLi9Nb2RlbC9Mb2dMZXZlbFwiO1xuaW1wb3J0IFRlbGVtZXRyeUhlbHBlciBmcm9tIFwiLi4vVXRpbHMvVGVsZW1ldHJ5SGVscGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9DU0RLTG9nZ2VyIGltcGxlbWVudHMgSU9DU0RLTG9nZ2VyIHtcblxuICBwcml2YXRlIGxvZ2dlcjogSUxvZ2dlcjtcblxuICBwdWJsaWMgY29uc3RydWN0b3IobG9nZ2VyOiBJTG9nZ2VyKSB7XG4gICAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcbiAgfVxuXG4gIHB1YmxpYyBsb2cobG9nbGV2ZWw6IExvZ0xldmVsLCB0ZWxlbWV0cnlFdmVudDogc3RyaW5nLCBjdXN0b21EYXRhPzogYW55LCBkZXNjcmlwdGlvbj86IHN0cmluZyk6IHZvaWQgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnksIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXNcbiAgICAgIGlmICh0aGlzLmlzTG9nZ2luZ0VuYWJsZWQoKSkge1xuICAgICAgICAgIGNvbnN0IGxvZ0RhdGEgPSBUZWxlbWV0cnlIZWxwZXIuR0VUVEVMRU1FVFJZRVZFTlREQVRBKHRlbGVtZXRyeUV2ZW50LCBjdXN0b21EYXRhLCBkZXNjcmlwdGlvbik7XG4gICAgICAgICAgdGhpcy5sb2dFdmVudChsb2dsZXZlbCwgbG9nRGF0YSk7XG4gICAgICB9XG4gIH1cblxuICBwdWJsaWMgbG9nRXZlbnQobG9nTGV2ZWw6IExvZ0xldmVsLCBsb2dEYXRhOiBJT0NTREtMb2dEYXRhKTogbnVtYmVyIHwgdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNMb2dnaW5nRW5hYmxlZCgpKSB7XG4gICAgICAgIHNldFRpbWVvdXQodGhpcy5sb2dnZXIubG9nQ2xpZW50U2RrVGVsZW1ldHJ5RXZlbnQuYmluZCh0aGlzLmxvZ2dlciksIDAsIGxvZ0xldmVsLCBsb2dEYXRhKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgaXNMb2dnaW5nRW5hYmxlZCgpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiAhdGhpcy5pc051bGxPclVuZGVmaW5lZCh0aGlzLmxvZ2dlcik7XG4gIH1cblxuICBwdWJsaWMgaXNOdWxsT3JVbmRlZmluZWQob2JqOiBvYmplY3QpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiAob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdW5kZWZpbmVkKTtcbiAgfVxufVxuIl19