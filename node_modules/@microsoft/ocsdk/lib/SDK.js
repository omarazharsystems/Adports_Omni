"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof3 = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _Enums = require("./Common/Enums");

var _axios = _interopRequireDefault(require("axios"));

var _BrowserInfo = require("./Utils/BrowserInfo");

var _Constants = _interopRequireDefault(require("./Common/Constants"));

var _endpointsCreators = require("./Utils/endpointsCreators");

var _DeviceInfo = require("./Utils/DeviceInfo");

var _Locales = _interopRequireDefault(require("./Common/Locales"));

var _LoggingSanitizer = require("./Utils/LoggingSanitizer");

var _LogLevel = require("./Model/LogLevel");

var _OSInfo = require("./Utils/OSInfo");

var _OmnichannelEndpoints = _interopRequireDefault(require("./Common/OmnichannelEndpoints"));

var _OmnichannelHTTPHeaders = _interopRequireDefault(require("./Common/OmnichannelHTTPHeaders"));

var _Timer = require("./Utils/Timer");

var _axiosRetry = _interopRequireDefault(require("./Utils/axiosRetry"));

var _uuid = require("./Utils/uuid");

var hash = _interopRequireWildcard(require("crypto"));

var _CustomContextData = require("./Utils/CustomContextData");

var _throwClientHTTPError = _interopRequireDefault(require("./Utils/throwClientHTTPError"));

var _SessionInitRetryHandler = _interopRequireDefault(require("./Utils/SessionInitRetryHandler"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var SDK = /*#__PURE__*/function () {
  function SDK(omnichannelConfiguration) {
    var _this = this;

    var configuration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SDK.defaultConfiguration;
    var logger = arguments.length > 2 ? arguments[2] : undefined;
    (0, _classCallCheck2["default"])(this, SDK);
    this.omnichannelConfiguration = omnichannelConfiguration;
    this.configuration = configuration;
    this.logger = logger;
    (0, _defineProperty2["default"])(this, "liveChatVersion", void 0);
    (0, _defineProperty2["default"])(this, "setAuthCodeNonce", function (headers) {
      if (headers !== null && headers !== void 0 && headers.authcodenonce) {
        _this.configuration.authCodeNonce = headers === null || headers === void 0 ? void 0 : headers.authcodenonce;
      }
    });

    // Sets to default configuration if passed configuration is empty or is not an object
    if (!Object.keys(this.configuration).length || (0, _typeof2["default"])(configuration) !== "object") {
      this.configuration = SDK.defaultConfiguration;
    } // Validate SDK config


    for (var _i = 0, _Object$keys = Object.keys(SDK.defaultConfiguration); _i < _Object$keys.length; _i++) {
      var key = _Object$keys[_i];

      if (!this.configuration.hasOwnProperty(key)) {
        // eslint-disable-line no-prototype-builtins
        this.configuration["".concat(key)] = SDK.defaultConfiguration["".concat(key)];
      }
    } // Validate individual endpointTimeout config


    for (var _i2 = 0, _Object$keys2 = Object.keys(SDK.defaultConfiguration["requestTimeoutConfig"]); _i2 < _Object$keys2.length; _i2++) {
      var _key = _Object$keys2[_i2];

      if (!this.configuration["requestTimeoutConfig"].hasOwnProperty(_key)) {
        // eslint-disable-line no-prototype-builtins
        this.configuration["requestTimeoutConfig"]["".concat(_key)] = SDK.defaultConfiguration["requestTimeoutConfig"]["".concat(_key)];
      }
    } // Validate channelId


    var channelId = omnichannelConfiguration.channelId;

    if (!Object.values(_Enums.ChannelId).includes(channelId)) {
      throw new Error("Invalid channelId");
    } // Validate OC config


    var currentOmnichannelConfigurationParameters = Object.keys(omnichannelConfiguration);

    var _iterator = _createForOfIteratorHelper(_Constants["default"].requiredOmnichannelConfigurationParameters),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _key2 = _step.value;

        if (!currentOmnichannelConfigurationParameters.includes(_key2)) {
          throw new Error("Missing '".concat(_key2, "' in OmnichannelConfiguration"));
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    this.liveChatVersion = _Enums.LiveChatVersion.V2;
  }
  /**
   * Fetches chat config.
   * @param requestId: RequestId to use to get chat config (Optional).
   */


  (0, _createClass2["default"])(SDK, [{
    key: "getChatConfig",
    value: function () {
      var _getChatConfig = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(requestId) {
        var _this$configuration$d;

        var bypassCache,
            timer,
            requestPath,
            method,
            url,
            axiosInstance,
            headers,
            response,
            elapsedTimeInMilliseconds,
            data,
            _args = arguments;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                bypassCache = _args.length > 1 && _args[1] !== undefined ? _args[1] : false;
                timer = _Timer.Timer.TIMER();
                this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETCHATCONFIG, "Get Chat config started", requestId);

                if (!requestId) {
                  requestId = (0, _uuid.uuidv4)();
                }

                requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatConfigPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "?requestId=").concat(requestId, "&channelId=").concat(this.omnichannelConfiguration.channelId);
                method = "GET";
                url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                axiosInstance = _axios["default"].create();
                (0, _axiosRetry["default"])(axiosInstance, {
                  retries: this.configuration.maxRequestRetriesOnFailure
                });
                headers = {};

                if (bypassCache) {
                  headers = _objectSpread(_objectSpread({}, _Constants["default"].bypassCacheHeaders), headers);
                }

                _context.next = 13;
                return axiosInstance.get(url, {
                  headers: headers,
                  timeout: (_this$configuration$d = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d !== void 0 ? _this$configuration$d : this.configuration.requestTimeoutConfig.getChatConfig
                });

              case 13:
                response = _context.sent;
                elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                data = response.data;

                if (data.LiveChatVersion) {
                  this.liveChatVersion = data.LiveChatVersion;
                }

                data.headers = {};

                if (response.headers && response.headers["date"]) {
                  data.headers["date"] = response.headers["date"];
                }

                this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETCHATCONFIGSUCCESS, "Get Chat config succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);
                return _context.abrupt("return", data);

              case 21:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getChatConfig(_x) {
        return _getChatConfig.apply(this, arguments);
      }

      return getChatConfig;
    }()
    /**
     * Fetches LWI details.
     * @param requestId: RequestId to use to get chat config (Optional).
     * @param getLWIDetailsOptionalParams: Optional parameters for get LWI Details.
     */

  }, {
    key: "getLWIDetails",
    value: function () {
      var _getLWIDetails = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(requestId) {
        var _this$configuration$d2,
            _this2 = this;

        var getLWIDetailsOptionalParams,
            timer,
            requestPath,
            axiosInstance,
            authenticatedUserToken,
            reconnectId,
            headers,
            url,
            method,
            options,
            _args3 = arguments;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                getLWIDetailsOptionalParams = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};
                timer = _Timer.Timer.TIMER();
                this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETLWISTATUSSTARTED, "Get LWI Details Started", requestId);

                if (!requestId) {
                  requestId = (0, _uuid.uuidv4)();
                } // construct a endpoint for anonymous chats to get LWI Details


                requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatLiveWorkItemDetailsPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId);
                axiosInstance = _axios["default"].create();
                (0, _axiosRetry["default"])(axiosInstance, {
                  headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce],
                  retries: this.configuration.maxRequestRetriesOnFailure
                }); // Extract auth token and reconnect id from optional param

                authenticatedUserToken = getLWIDetailsOptionalParams.authenticatedUserToken, reconnectId = getLWIDetailsOptionalParams.reconnectId;
                headers = _Constants["default"].defaultHeaders; // updated auth endpoint for authenticated chats and add auth token in header

                if (authenticatedUserToken) {
                  requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatAuthLiveWorkItemDetailsPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId);
                  headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                  headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                } // Append reconnect id on the endpoint if vailable


                if (reconnectId) {
                  requestPath += "/".concat(reconnectId);
                }

                requestPath += "?channelId=".concat(this.omnichannelConfiguration.channelId);
                url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                method = "GET";
                options = {
                  headers: headers,
                  method: method,
                  url: url,
                  timeout: (_this$configuration$d2 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d2 !== void 0 ? _this$configuration$d2 : this.configuration.requestTimeoutConfig.getLWIDetails
                };
                return _context3.abrupt("return", new Promise( /*#__PURE__*/function () {
                  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(resolve, reject) {
                    var response, elapsedTimeInMilliseconds, data, _headers, _elapsedTimeInMilliseconds;

                    return _regenerator["default"].wrap(function _callee2$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            _context2.prev = 0;
                            _context2.next = 3;
                            return axiosInstance(options);

                          case 3:
                            response = _context2.sent;
                            elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                            data = response.data, _headers = response.headers;

                            _this2.setAuthCodeNonce(_headers);

                            _this2.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETLWISTATUSSUCCEEDED, "Get LWI Details succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);

                            resolve(data);
                            _context2.next = 17;
                            break;

                          case 11:
                            _context2.prev = 11;
                            _context2.t0 = _context2["catch"](0);
                            _elapsedTimeInMilliseconds = timer.milliSecondsElapsed;

                            _this2.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.GETLWISTATUSFAILED, "Get LWI Details failed", requestId, undefined, _elapsedTimeInMilliseconds, requestPath, method, _context2.t0);

                            if (_context2.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                              (0, _throwClientHTTPError["default"])();
                            }

                            reject(_context2.t0);

                          case 17:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, _callee2, null, [[0, 11]]);
                  }));

                  return function (_x3, _x4) {
                    return _ref.apply(this, arguments);
                  };
                }()));

              case 16:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getLWIDetails(_x2) {
        return _getLWIDetails.apply(this, arguments);
      }

      return getLWIDetails;
    }()
    /**
     * Fetches the chat token from Omnichannel to join T1 thread.
     * @param requestId: RequestId to use for getchattoken (Optional).
     * @param getChatTokenOptionalParams: Optional parameters for get chat token.
     */

  }, {
    key: "getChatToken",
    value: function () {
      var _getChatToken = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5(requestId) {
        var _this$configuration$d3,
            _this3 = this;

        var getChatTokenOptionalParams,
            currentRetryCount,
            timer,
            reconnectId,
            authenticatedUserToken,
            currentLiveChatVersion,
            refreshToken,
            headers,
            endpoint,
            requestPath,
            queryParams,
            url,
            method,
            options,
            axiosInstance,
            _args5 = arguments;
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                getChatTokenOptionalParams = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};
                currentRetryCount = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : 0;
                // eslint-disable-line @typescript-eslint/no-inferrable-types
                timer = _Timer.Timer.TIMER();
                reconnectId = getChatTokenOptionalParams.reconnectId, authenticatedUserToken = getChatTokenOptionalParams.authenticatedUserToken, currentLiveChatVersion = getChatTokenOptionalParams.currentLiveChatVersion, refreshToken = getChatTokenOptionalParams.refreshToken;
                this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETCHATTOKENSTARTED, "Get Chat Token Started", requestId);

                if (!(currentRetryCount < 0)) {
                  _context5.next = 7;
                  break;
                }

                throw new Error("Invalid currentRetryCount");

              case 7:
                if (!requestId) {
                  requestId = (0, _uuid.uuidv4)();
                }

                headers = _Constants["default"].defaultHeaders;
                endpoint = (0, _endpointsCreators.createGetChatTokenEndpoint)(currentLiveChatVersion || this.liveChatVersion, authenticatedUserToken ? true : false);

                if (authenticatedUserToken) {
                  headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                  headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                }

                requestPath = "/".concat(endpoint, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId);

                if (reconnectId) {
                  requestPath += "/".concat(reconnectId);
                }

                queryParams = "channelId=".concat(this.omnichannelConfiguration.channelId);

                if (refreshToken) {
                  queryParams += "&refreshToken=true";
                }

                requestPath += "?".concat(queryParams);
                url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                method = "GET";
                options = {
                  headers: headers,
                  method: method,
                  url: url,
                  timeout: (_this$configuration$d3 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d3 !== void 0 ? _this$configuration$d3 : this.configuration.requestTimeoutConfig.getChatToken
                };
                axiosInstance = _axios["default"].create();
                (0, _axiosRetry["default"])(axiosInstance, {
                  headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce],
                  retries: this.configuration.maxRequestRetriesOnFailure,
                  retryOn429: this.configuration.getChatTokenRetryOn429
                });
                return _context5.abrupt("return", new Promise( /*#__PURE__*/function () {
                  var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(resolve, reject) {
                    var getChatTokenError, response, elapsedTimeInMilliseconds, data, _headers2, _response, _elapsedTimeInMilliseconds2;

                    return _regenerator["default"].wrap(function _callee4$(_context4) {
                      while (1) {
                        switch (_context4.prev = _context4.next) {
                          case 0:
                            getChatTokenError = undefined;
                            _context4.prev = 1;
                            _context4.next = 4;
                            return axiosInstance(options);

                          case 4:
                            response = _context4.sent;
                            elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                            data = response.data, _headers2 = response.headers;

                            _this3.setAuthCodeNonce(_headers2); // Resolves only if it contains chat token response which only happens on status 200


                            if (!data) {
                              _context4.next = 13;
                              break;
                            }

                            data.requestId = requestId;

                            _this3.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETCHATTOKENSUCCEEDED, "Get Chat Token succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);

                            resolve(data);
                            return _context4.abrupt("return");

                          case 13:
                            if (!(reconnectId && response.status === _Constants["default"].noContentStatusCode)) {
                              _context4.next = 16;
                              break;
                            }

                            reject(response);
                            return _context4.abrupt("return");

                          case 16:
                            _context4.next = 26;
                            break;

                          case 18:
                            _context4.prev = 18;
                            _context4.t0 = _context4["catch"](1);
                            _elapsedTimeInMilliseconds2 = timer.milliSecondsElapsed;

                            _this3.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.GETCHATTOKENFAILED, "Get Chat Token failed", requestId, undefined, _elapsedTimeInMilliseconds2, requestPath, method, _context4.t0);

                            getChatTokenError = _context4.t0; // Stop retry on 429

                            if (!(((_response = _context4.t0.response) === null || _response === void 0 ? void 0 : _response.status) === _Constants["default"].tooManyRequestsStatusCode && !_this3.configuration.getChatTokenRetryOn429)) {
                              _context4.next = 26;
                              break;
                            }

                            // eslint-disable-line @typescript-eslint/no-explicit-any
                            reject(_context4.t0);
                            return _context4.abrupt("return");

                          case 26:
                            if (!(currentRetryCount + 1 >= _this3.configuration.getChatTokenRetryCount)) {
                              _context4.next = 29;
                              break;
                            }

                            if (getChatTokenError && getChatTokenError.code == _Constants["default"].axiosTimeoutErrorCode) {
                              (0, _throwClientHTTPError["default"])();
                            } else {
                              reject(getChatTokenError);
                            }

                            return _context4.abrupt("return");

                          case 29:
                            // Retries until it reaches its limit
                            setTimeout(function () {
                              _this3.getChatToken(requestId, getChatTokenOptionalParams, currentRetryCount + 1).then(function (response) {
                                return resolve(response);
                              })["catch"](function (error) {
                                return reject(error);
                              });
                            }, _this3.configuration.getChatTokenTimeBetweenRetriesOnFailure);

                          case 30:
                          case "end":
                            return _context4.stop();
                        }
                      }
                    }, _callee4, null, [[1, 18]]);
                  }));

                  return function (_x6, _x7) {
                    return _ref2.apply(this, arguments);
                  };
                }()));

              case 22:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function getChatToken(_x5) {
        return _getChatToken.apply(this, arguments);
      }

      return getChatToken;
    }()
    /**
     * Fetches the reconnectable chats from omnichannel from the given user information in JWT token(claim name: sub).
     * @param reconnectableChatsParams Mandate parameters for get reconnectable chats.
     */

  }, {
    key: "getReconnectableChats",
    value: function () {
      var _getReconnectableChats = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee7(reconnectableChatsParams) {
        var _this$configuration$d4,
            _this4 = this;

        var timer, authenticatedUserToken, requestPath, headers, url, method, options, axiosInstance, requestId;
        return _regenerator["default"].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                timer = _Timer.Timer.TIMER();
                authenticatedUserToken = reconnectableChatsParams.authenticatedUserToken;
                this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETRECONNECTABLECHATS, "Get Reconnectable chat Started");
                requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatGetReconnectableChatsPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(this.omnichannelConfiguration.orgId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                headers = _Constants["default"].defaultHeaders;
                headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                method = "GET";
                options = {
                  headers: headers,
                  method: method,
                  url: url,
                  timeout: (_this$configuration$d4 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d4 !== void 0 ? _this$configuration$d4 : this.configuration.requestTimeoutConfig.getReconnectableChats
                };
                axiosInstance = _axios["default"].create();
                requestId = this.omnichannelConfiguration.orgId;
                return _context7.abrupt("return", new Promise( /*#__PURE__*/function () {
                  var _ref3 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6(resolve, reject) {
                    var response, elapsedTimeInMilliseconds, data, _headers3, _elapsedTimeInMilliseconds3;

                    return _regenerator["default"].wrap(function _callee6$(_context6) {
                      while (1) {
                        switch (_context6.prev = _context6.next) {
                          case 0:
                            _context6.prev = 0;
                            _context6.next = 3;
                            return axiosInstance(options);

                          case 3:
                            response = _context6.sent;
                            elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                            data = response.data, _headers3 = response.headers;

                            _this4.setAuthCodeNonce(_headers3); // Resolves only if it contains reconnectable chats response which only happens on status 200


                            if (!data) {
                              _context6.next = 11;
                              break;
                            }

                            _this4.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETRECONNECTABLECHATS, "Get Reconnectable Chats Succeeded and old session returned", requestId, response, elapsedTimeInMilliseconds, requestPath, method);

                            resolve(data);
                            return _context6.abrupt("return");

                          case 11:
                            // No data found in the old sessions so returning null
                            resolve();
                            return _context6.abrupt("return");

                          case 15:
                            _context6.prev = 15;
                            _context6.t0 = _context6["catch"](0);
                            _elapsedTimeInMilliseconds3 = timer.milliSecondsElapsed;

                            _this4.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.GETRECONNECTABLECHATS, "Get Reconnectable Chats failed", requestId, undefined, _elapsedTimeInMilliseconds3, requestPath, method, _context6.t0);

                            if (_context6.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                              (0, _throwClientHTTPError["default"])();
                            }

                            reject(_context6.t0);
                            return _context6.abrupt("return");

                          case 22:
                          case "end":
                            return _context6.stop();
                        }
                      }
                    }, _callee6, null, [[0, 15]]);
                  }));

                  return function (_x9, _x10) {
                    return _ref3.apply(this, arguments);
                  };
                }()));

              case 13:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function getReconnectableChats(_x8) {
        return _getReconnectableChats.apply(this, arguments);
      }

      return getReconnectableChats;
    }()
    /**
    * Fetches the reconnectable chats from omnichannel from the given user information in JWT token(claim name: sub).
    * @param reconnectableChatsParams Mandate parameters for get reconnectable chats.
    */

  }, {
    key: "getReconnectAvailability",
    value: function () {
      var _getReconnectAvailability = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee9(reconnectId) {
        var _this$configuration$d5,
            _this5 = this;

        var timer, requestPath, headers, url, method, options, axiosInstance;
        return _regenerator["default"].wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                timer = _Timer.Timer.TIMER();
                this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETRECONNECTAVAILABILITY, "Get Reconnectable availability Started");
                requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatReconnectAvailabilityPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(reconnectId);
                headers = _Constants["default"].defaultHeaders;
                url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                method = "GET";
                options = {
                  headers: headers,
                  method: method,
                  url: url,
                  timeout: (_this$configuration$d5 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d5 !== void 0 ? _this$configuration$d5 : this.configuration.requestTimeoutConfig.getReconnectAvailability
                };
                axiosInstance = _axios["default"].create();
                return _context9.abrupt("return", new Promise( /*#__PURE__*/function () {
                  var _ref4 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee8(resolve, reject) {
                    var response, elapsedTimeInMilliseconds, data, _elapsedTimeInMilliseconds4;

                    return _regenerator["default"].wrap(function _callee8$(_context8) {
                      while (1) {
                        switch (_context8.prev = _context8.next) {
                          case 0:
                            _context8.prev = 0;
                            _context8.next = 3;
                            return axiosInstance(options);

                          case 3:
                            response = _context8.sent;
                            elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                            data = response.data;

                            if (!data) {
                              _context8.next = 10;
                              break;
                            }

                            _this5.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETRECONNECTAVAILABILITY, "Get Reconnect availability succeeded", undefined, response, elapsedTimeInMilliseconds, requestPath, method);

                            resolve(data);
                            return _context8.abrupt("return");

                          case 10:
                            // No data found so returning null
                            _this5.logWithLogger(_LogLevel.LogLevel.WARN, _Enums.OCSDKTelemetryEvent.GETRECONNECTAVAILABILITY, "Get Reconnect availability didn't send any valid data", undefined, response, elapsedTimeInMilliseconds, requestPath, method);

                            resolve();
                            return _context8.abrupt("return");

                          case 15:
                            _context8.prev = 15;
                            _context8.t0 = _context8["catch"](0);
                            _elapsedTimeInMilliseconds4 = timer.milliSecondsElapsed;

                            _this5.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.GETRECONNECTAVAILABILITY, "Get Reconnect Availability failed", undefined, undefined, _elapsedTimeInMilliseconds4, requestPath, method, _context8.t0);

                            if (_context8.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                              (0, _throwClientHTTPError["default"])();
                            }

                            reject(_context8.t0);
                            return _context8.abrupt("return");

                          case 22:
                          case "end":
                            return _context8.stop();
                        }
                      }
                    }, _callee8, null, [[0, 15]]);
                  }));

                  return function (_x12, _x13) {
                    return _ref4.apply(this, arguments);
                  };
                }()));

              case 9:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function getReconnectAvailability(_x11) {
        return _getReconnectAvailability.apply(this, arguments);
      }

      return getReconnectAvailability;
    }()
    /**
     *
     * @param requestId: RequestId to use for session init.
     * @param queueAvailabilityOptionalParams: Optional parameters for session init.
     */

  }, {
    key: "getAgentAvailability",
    value: function () {
      var _getAgentAvailability = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee11(requestId) {
        var _this$configuration$d6,
            _this6 = this;

        var queueAvailabilityOptionalParams,
            timer,
            requestPath,
            axiosInstance,
            authenticatedUserToken,
            initContext,
            getContext,
            headers,
            data,
            cachObj,
            tempArr,
            url,
            method,
            options,
            _args11 = arguments;
        return _regenerator["default"].wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                queueAvailabilityOptionalParams = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : {};
                timer = _Timer.Timer.TIMER();
                this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETAGENTAVAILABILITYSTARTED, "Get agent availability Started", requestId);
                requestPath = "/".concat(_OmnichannelEndpoints["default"].GetAgentAvailabilityPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId, "?channelId=lcw");
                axiosInstance = _axios["default"].create();
                (0, _axiosRetry["default"])(axiosInstance, {
                  headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce],
                  retries: this.configuration.maxRequestRetriesOnFailure
                });
                authenticatedUserToken = queueAvailabilityOptionalParams.authenticatedUserToken, initContext = queueAvailabilityOptionalParams.initContext, getContext = queueAvailabilityOptionalParams.getContext;
                headers = _Constants["default"].defaultHeaders;

                if (authenticatedUserToken) {
                  headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                  headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                }

                data = initContext || {};
                cachObj = {
                  "orgId": this.omnichannelConfiguration.orgId,
                  "widgetId": this.omnichannelConfiguration.widgetId
                };

                if (data && data.customContextData) {
                  tempArr = _CustomContextData.CustomContextData.sort(data.customContextData);
                  Object.assign(cachObj, {
                    "customContext": tempArr
                  });
                }

                if (data.portalcontactid) {
                  Object.assign(cachObj, {
                    "portalcontactid": data.portalcontactid
                  });
                }

                data.cacheKey = hash.createHash('sha256').update(JSON.stringify(cachObj)).digest('hex').toString();

                if (!(getContext && !window.document)) {
                  _context11.next = 16;
                  break;
                }

                return _context11.abrupt("return", Promise.reject(new Error("getContext is only supported on web browsers")));

              case 16:
                if (getContext) {
                  data.browser = _BrowserInfo.BrowserInfo.getBrowserName();
                  data.device = _DeviceInfo.DeviceInfo.getDeviceType();
                  data.originurl = window.location.href;
                  data.os = _OSInfo.OSInfo.getOsType();
                }

                if (!data.locale) {
                  data.locale = _Constants["default"].defaultLocale;
                } // Validate locale


                if (!(data.locale && !_Locales["default"].supportedLocales.includes(data.locale))) {
                  _context11.next = 20;
                  break;
                }

                return _context11.abrupt("return", Promise.reject(new Error("Unsupported locale: '".concat(data.locale, "'"))));

              case 20:
                url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                method = "POST";
                options = {
                  data: data,
                  headers: headers,
                  method: method,
                  url: url,
                  timeout: (_this$configuration$d6 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d6 !== void 0 ? _this$configuration$d6 : this.configuration.requestTimeoutConfig.getAgentAvailability
                };
                return _context11.abrupt("return", new Promise( /*#__PURE__*/function () {
                  var _ref5 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee10(resolve, reject) {
                    var response, elapsedTimeInMilliseconds, _data, _headers4, _elapsedTimeInMilliseconds5;

                    return _regenerator["default"].wrap(function _callee10$(_context10) {
                      while (1) {
                        switch (_context10.prev = _context10.next) {
                          case 0:
                            _context10.prev = 0;
                            _context10.next = 3;
                            return axiosInstance(options);

                          case 3:
                            response = _context10.sent;
                            elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                            _data = response.data, _headers4 = response.headers;

                            _this6.setAuthCodeNonce(_headers4);

                            if (_data) {
                              _this6.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETAGENTAVAILABILITYSUCCEEDED, "Get agent availability succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);

                              resolve(_data);
                            }

                            _context10.next = 16;
                            break;

                          case 10:
                            _context10.prev = 10;
                            _context10.t0 = _context10["catch"](0);
                            _elapsedTimeInMilliseconds5 = timer.milliSecondsElapsed;

                            _this6.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.GETAGENTAVAILABILITYFAILED, "Get agent availability failed", requestId, undefined, _elapsedTimeInMilliseconds5, requestPath, method, _context10.t0);

                            if (_context10.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                              (0, _throwClientHTTPError["default"])();
                            }

                            reject(_context10.t0);

                          case 16:
                          case "end":
                            return _context10.stop();
                        }
                      }
                    }, _callee10, null, [[0, 10]]);
                  }));

                  return function (_x15, _x16) {
                    return _ref5.apply(this, arguments);
                  };
                }()));

              case 24:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function getAgentAvailability(_x14) {
        return _getAgentAvailability.apply(this, arguments);
      }

      return getAgentAvailability;
    }()
    /**
     * Starts a session to omnichannel.
     * @param requestId: RequestId to use for session init.
     * @param sessionInitOptionalParams: Optional parameters for session init.
     */

  }, {
    key: "sessionInit",
    value: function () {
      var _sessionInit = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee13(requestId) {
        var _this$configuration$d7,
            _this7 = this;

        var sessionInitOptionalParams,
            timer,
            axiosInstance,
            reconnectId,
            authenticatedUserToken,
            initContext,
            getContext,
            headers,
            requestPath,
            queryParams,
            data,
            url,
            method,
            options,
            _args13 = arguments;
        return _regenerator["default"].wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                sessionInitOptionalParams = _args13.length > 1 && _args13[1] !== undefined ? _args13[1] : {};
                timer = _Timer.Timer.TIMER();
                this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.SESSIONINITSTARTED, "Session Init Started", requestId);
                axiosInstance = _axios["default"].create();
                (0, _axiosRetry["default"])(axiosInstance, {
                  retries: this.configuration.maxRequestRetriesOnFailure,
                  shouldRetry: _SessionInitRetryHandler["default"],
                  headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce]
                });
                reconnectId = sessionInitOptionalParams.reconnectId, authenticatedUserToken = sessionInitOptionalParams.authenticatedUserToken, initContext = sessionInitOptionalParams.initContext, getContext = sessionInitOptionalParams.getContext;
                headers = _Constants["default"].defaultHeaders;
                requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatSessionInitPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId);

                if (authenticatedUserToken) {
                  requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatAuthSessionInitPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId);
                  headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                  headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                }

                if (reconnectId) {
                  requestPath += "/".concat(reconnectId);
                }

                queryParams = "channelId=".concat(this.omnichannelConfiguration.channelId);
                requestPath += "?".concat(queryParams);
                data = initContext || {};

                if (!(getContext && !window.document)) {
                  _context13.next = 15;
                  break;
                }

                return _context13.abrupt("return", Promise.reject(new Error("getContext is only supported on web browsers")));

              case 15:
                if (getContext) {
                  data.browser = _BrowserInfo.BrowserInfo.getBrowserName();
                  data.device = _DeviceInfo.DeviceInfo.getDeviceType();
                  data.originurl = window.location.href;
                  data.os = _OSInfo.OSInfo.getOsType();
                } // Set default locale if locale is empty


                if (!data.locale) {
                  data.locale = _Constants["default"].defaultLocale;
                } // Validate locale


                if (!(data.locale && !_Locales["default"].supportedLocales.includes(data.locale))) {
                  _context13.next = 19;
                  break;
                }

                return _context13.abrupt("return", Promise.reject(new Error("Unsupported locale: '".concat(data.locale, "'"))));

              case 19:
                url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                method = "POST";
                options = {
                  data: data,
                  headers: headers,
                  method: method,
                  url: url,
                  timeout: (_this$configuration$d7 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d7 !== void 0 ? _this$configuration$d7 : this.configuration.requestTimeoutConfig.sessionInit
                };
                return _context13.abrupt("return", new Promise( /*#__PURE__*/function () {
                  var _ref6 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee12(resolve, reject) {
                    var response, elapsedTimeInMilliseconds, _headers5, _elapsedTimeInMilliseconds6;

                    return _regenerator["default"].wrap(function _callee12$(_context12) {
                      while (1) {
                        switch (_context12.prev = _context12.next) {
                          case 0:
                            _context12.prev = 0;
                            _context12.next = 3;
                            return axiosInstance(options);

                          case 3:
                            response = _context12.sent;
                            elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                            _headers5 = response.headers;

                            _this7.setAuthCodeNonce(_headers5);

                            _this7.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.SESSIONINITSUCCEEDED, "Session Init Succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method, undefined, data);

                            resolve();
                            _context12.next = 17;
                            break;

                          case 11:
                            _context12.prev = 11;
                            _context12.t0 = _context12["catch"](0);
                            _elapsedTimeInMilliseconds6 = timer.milliSecondsElapsed;

                            _this7.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.SESSIONINITFAILED, "Session Init failed", requestId, undefined, _elapsedTimeInMilliseconds6, requestPath, method, _context12.t0, data);

                            if (_context12.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                              (0, _throwClientHTTPError["default"])();
                            }

                            reject(_context12.t0);

                          case 17:
                          case "end":
                            return _context12.stop();
                        }
                      }
                    }, _callee12, null, [[0, 11]]);
                  }));

                  return function (_x18, _x19) {
                    return _ref6.apply(this, arguments);
                  };
                }()));

              case 23:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function sessionInit(_x17) {
        return _sessionInit.apply(this, arguments);
      }

      return sessionInit;
    }()
    /**
     * Closes the omnichannel session.
     * @param requestId: RequestId to use for session close (same request id for session init).
     * @param sessionCloseOptionalParams: Optional parameters for session close.
     */

  }, {
    key: "sessionClose",
    value: function () {
      var _sessionClose = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee15(requestId) {
        var _this$configuration$d8,
            _this8 = this;

        var sessionCloseOptionalParams,
            timer,
            requestPath,
            axiosInstance,
            authenticatedUserToken,
            isReconnectChat,
            isPersistentChat,
            chatId,
            headers,
            data,
            url,
            method,
            options,
            _args15 = arguments;
        return _regenerator["default"].wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                sessionCloseOptionalParams = _args15.length > 1 && _args15[1] !== undefined ? _args15[1] : {};
                timer = _Timer.Timer.TIMER();
                this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.SESSIONCLOSESTARTED, "Session Close Started", requestId);
                requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatSessionClosePath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                axiosInstance = _axios["default"].create();
                (0, _axiosRetry["default"])(axiosInstance, {
                  headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce],
                  retries: this.configuration.maxRequestRetriesOnFailure
                });
                authenticatedUserToken = sessionCloseOptionalParams.authenticatedUserToken, isReconnectChat = sessionCloseOptionalParams.isReconnectChat, isPersistentChat = sessionCloseOptionalParams.isPersistentChat, chatId = sessionCloseOptionalParams.chatId;
                headers = _Constants["default"].defaultHeaders;
                data = {}; // eslint-disable-line @typescript-eslint/no-explicit-any

                data.chatId = chatId;

                if (authenticatedUserToken) {
                  requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatAuthSessionClosePath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                  headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                  headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                }

                if (isReconnectChat) {
                  requestPath += "&isReconnectChat=true";
                }

                if (isPersistentChat) {
                  requestPath += "&isPersistentChat=true";
                }

                url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                method = "POST";
                options = {
                  data: data,
                  headers: headers,
                  method: method,
                  url: url,
                  timeout: (_this$configuration$d8 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d8 !== void 0 ? _this$configuration$d8 : this.configuration.requestTimeoutConfig.sessionClose
                };
                return _context15.abrupt("return", new Promise( /*#__PURE__*/function () {
                  var _ref7 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee14(resolve, reject) {
                    var response, _headers6, elapsedTimeInMilliseconds, _elapsedTimeInMilliseconds7;

                    return _regenerator["default"].wrap(function _callee14$(_context14) {
                      while (1) {
                        switch (_context14.prev = _context14.next) {
                          case 0:
                            _context14.prev = 0;
                            _context14.next = 3;
                            return axiosInstance(options);

                          case 3:
                            response = _context14.sent;
                            _headers6 = response.headers;

                            _this8.setAuthCodeNonce(_headers6);

                            elapsedTimeInMilliseconds = timer.milliSecondsElapsed;

                            _this8.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.SESSIONCLOSESUCCEEDED, "Session Close succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);

                            resolve();
                            _context14.next = 17;
                            break;

                          case 11:
                            _context14.prev = 11;
                            _context14.t0 = _context14["catch"](0);
                            _elapsedTimeInMilliseconds7 = timer.milliSecondsElapsed;

                            _this8.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.SESSIONCLOSEFAILED, "Session close failed", requestId, undefined, _elapsedTimeInMilliseconds7, requestPath, method, _context14.t0);

                            if (_context14.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                              (0, _throwClientHTTPError["default"])();
                            }

                            reject(_context14.t0);

                          case 17:
                          case "end":
                            return _context14.stop();
                        }
                      }
                    }, _callee14, null, [[0, 11]]);
                  }));

                  return function (_x21, _x22) {
                    return _ref7.apply(this, arguments);
                  };
                }()));

              case 17:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function sessionClose(_x20) {
        return _sessionClose.apply(this, arguments);
      }

      return sessionClose;
    }()
    /**
     * Validate the auth chat record exists in database.
     * @param requestId: RequestId for validateAuthChatRecord (same request id for session init).
     * @param validateAuthChatRecordOptionalParams: Optional parameters for validateAuthChatRecord.
     */

  }, {
    key: "validateAuthChatRecord",
    value: function () {
      var _validateAuthChatRecord = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee17(requestId, validateAuthChatRecordOptionalParams) {
        var _this$configuration$d9,
            _this9 = this;

        var timer, authenticatedUserToken, chatId, requestPath, axiosInstance, headers, url, method, options;
        return _regenerator["default"].wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                timer = _Timer.Timer.TIMER();
                this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.VALIDATEAUTHCHATRECORDSTARTED, "Validate Auth Chat Record Started", requestId);
                authenticatedUserToken = validateAuthChatRecordOptionalParams.authenticatedUserToken, chatId = validateAuthChatRecordOptionalParams.chatId;
                requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatValidateAuthChatMapRecordPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(chatId, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                axiosInstance = _axios["default"].create();
                (0, _axiosRetry["default"])(axiosInstance, {
                  headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce],
                  retries: this.configuration.maxRequestRetriesOnFailure
                });
                headers = _Constants["default"].defaultHeaders;

                if (authenticatedUserToken) {
                  headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                  headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                }

                url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                method = "GET";
                options = {
                  headers: headers,
                  method: method,
                  url: url,
                  timeout: (_this$configuration$d9 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d9 !== void 0 ? _this$configuration$d9 : this.configuration.requestTimeoutConfig.validateAuthChatRecordTimeout
                };
                return _context17.abrupt("return", new Promise( /*#__PURE__*/function () {
                  var _ref8 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee16(resolve, reject) {
                    var _response$data, response, _headers7, elapsedTimeInMilliseconds, _elapsedTimeInMilliseconds8;

                    return _regenerator["default"].wrap(function _callee16$(_context16) {
                      while (1) {
                        switch (_context16.prev = _context16.next) {
                          case 0:
                            _context16.prev = 0;
                            _context16.next = 3;
                            return axiosInstance(options);

                          case 3:
                            response = _context16.sent;
                            _headers7 = response.headers;

                            _this9.setAuthCodeNonce(_headers7);

                            elapsedTimeInMilliseconds = timer.milliSecondsElapsed;

                            if (((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.authChatExist) === true) {
                              _this9.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.VALIDATEAUTHCHATRECORDSUCCEEDED, "Validate Auth Chat Record succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);

                              resolve(response.data);
                            } else {
                              _this9.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.VALIDATEAUTHCHATRECORDFAILED, "Validate Auth Chat Record Failed. Record is not found or request is not authorized", requestId, response, elapsedTimeInMilliseconds, requestPath, method);

                              reject(new Error("Validate Auth Chat Record Failed. Record is not found or request is not authorized"));
                            }

                            _context16.next = 16;
                            break;

                          case 10:
                            _context16.prev = 10;
                            _context16.t0 = _context16["catch"](0);
                            _elapsedTimeInMilliseconds8 = timer.milliSecondsElapsed;

                            _this9.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.VALIDATEAUTHCHATRECORDFAILED, "Validate Auth Chat Record failed", requestId, undefined, _elapsedTimeInMilliseconds8, requestPath, method, _context16.t0);

                            if (_context16.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                              (0, _throwClientHTTPError["default"])();
                            }

                            if (_context16.t0.toString() === "Error: Request failed with status code 404") {
                              // backward compatibility
                              resolve({});
                            } else {
                              reject(_context16.t0);
                            }

                          case 16:
                          case "end":
                            return _context16.stop();
                        }
                      }
                    }, _callee16, null, [[0, 10]]);
                  }));

                  return function (_x25, _x26) {
                    return _ref8.apply(this, arguments);
                  };
                }()));

              case 12:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      function validateAuthChatRecord(_x23, _x24) {
        return _validateAuthChatRecord.apply(this, arguments);
      }

      return validateAuthChatRecord;
    }()
    /**
     * Submits post chat response.
     * @param requestId RequestId of the omnichannel session.
     * @param postChatResponse Post chat response to submit.
     * @param submitPostChatResponseOptionalParams: Optional parameters for submit post chat response.
     */

  }, {
    key: "submitPostChatResponse",
    value: function () {
      var _submitPostChatResponse = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee19(requestId, postChatResponse) {
        var _this$configuration$d10,
            _this10 = this;

        var submitPostChatResponseOptionalParams,
            timer,
            requestPath,
            axiosInstance,
            authenticatedUserToken,
            headers,
            url,
            method,
            options,
            _args19 = arguments;
        return _regenerator["default"].wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                submitPostChatResponseOptionalParams = _args19.length > 2 && _args19[2] !== undefined ? _args19[2] : {};
                timer = _Timer.Timer.TIMER();
                this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.SUBMITPOSTCHATSTARTED, "Submit Post Chat Started", requestId);
                requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatSubmitPostChatPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                axiosInstance = _axios["default"].create();
                (0, _axiosRetry["default"])(axiosInstance, {
                  headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce],
                  retries: this.configuration.maxRequestRetriesOnFailure
                });
                authenticatedUserToken = submitPostChatResponseOptionalParams.authenticatedUserToken;
                headers = _Constants["default"].defaultHeaders;

                if (authenticatedUserToken) {
                  requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatAuthSubmitPostChatPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                  headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                  headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                }

                url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                method = "POST";
                options = {
                  data: JSON.stringify(postChatResponse),
                  headers: headers,
                  method: method,
                  url: url,
                  timeout: (_this$configuration$d10 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d10 !== void 0 ? _this$configuration$d10 : this.configuration.requestTimeoutConfig.submitPostChatResponse
                };
                return _context19.abrupt("return", new Promise( /*#__PURE__*/function () {
                  var _ref9 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee18(resolve, reject) {
                    var response, _headers8, elapsedTimeInMilliseconds, _elapsedTimeInMilliseconds9;

                    return _regenerator["default"].wrap(function _callee18$(_context18) {
                      while (1) {
                        switch (_context18.prev = _context18.next) {
                          case 0:
                            _context18.prev = 0;
                            _context18.next = 3;
                            return axiosInstance(options);

                          case 3:
                            response = _context18.sent;
                            _headers8 = response.headers;

                            _this10.setAuthCodeNonce(_headers8);

                            elapsedTimeInMilliseconds = timer.milliSecondsElapsed;

                            _this10.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.SUBMITPOSTCHATSUCCEEDED, "Submit Post Chat succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);

                            resolve();
                            _context18.next = 17;
                            break;

                          case 11:
                            _context18.prev = 11;
                            _context18.t0 = _context18["catch"](0);
                            _elapsedTimeInMilliseconds9 = timer.milliSecondsElapsed;

                            _this10.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.SUBMITPOSTCHATFAILED, "Submit Post Chat Failed", requestId, undefined, _elapsedTimeInMilliseconds9, requestPath, method, _context18.t0);

                            if (_context18.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                              (0, _throwClientHTTPError["default"])();
                            }

                            reject(_context18.t0);

                          case 17:
                          case "end":
                            return _context18.stop();
                        }
                      }
                    }, _callee18, null, [[0, 11]]);
                  }));

                  return function (_x29, _x30) {
                    return _ref9.apply(this, arguments);
                  };
                }()));

              case 13:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));

      function submitPostChatResponse(_x27, _x28) {
        return _submitPostChatResponse.apply(this, arguments);
      }

      return submitPostChatResponse;
    }()
    /**
     * Submits post chat response.
     * @param requestId RequestId of the omnichannel session.
     * @param postChatResponse Post chat response to submit.
     * @param submitPostChatResponseOptionalParams: Optional parameters for submit post chat response.
     */

  }, {
    key: "getSurveyInviteLink",
    value: function () {
      var _getSurveyInviteLink = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee21(surveyOwnerId, surveyInviteAPIRequestBody) {
        var _this$configuration$d11,
            _this11 = this;

        var getsurveyInviteLinkOptionalParams,
            timer,
            requestPath,
            axiosInstance,
            authenticatedUserToken,
            requestId,
            headers,
            url,
            method,
            options,
            _args21 = arguments;
        return _regenerator["default"].wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                getsurveyInviteLinkOptionalParams = _args21.length > 2 && _args21[2] !== undefined ? _args21[2] : {};
                timer = _Timer.Timer.TIMER();

                if (this.logger) {
                  this.logger.log(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETSURVEYINVITELINKSTARTED, {
                    SurveyOwnerId: surveyOwnerId
                  }, "Get Survey Invite Link Started");
                }

                requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatGetSurveyInviteLinkPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(surveyOwnerId);
                axiosInstance = _axios["default"].create();
                (0, _axiosRetry["default"])(axiosInstance, {
                  headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce],
                  retries: this.configuration.maxRequestRetriesOnFailure
                });
                authenticatedUserToken = getsurveyInviteLinkOptionalParams.authenticatedUserToken, requestId = getsurveyInviteLinkOptionalParams.requestId;
                headers = _Constants["default"].defaultHeaders;

                if (authenticatedUserToken) {
                  requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatAuthGetSurveyInviteLinkPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(surveyOwnerId);
                  headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                  headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                  headers[_OmnichannelHTTPHeaders["default"].widgetAppId] = this.omnichannelConfiguration.widgetId;
                }

                if (requestId) {
                  headers[_OmnichannelHTTPHeaders["default"].requestId] = requestId;
                }

                url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                method = "POST";
                options = {
                  data: JSON.stringify(surveyInviteAPIRequestBody),
                  headers: headers,
                  method: method,
                  url: url,
                  timeout: (_this$configuration$d11 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d11 !== void 0 ? _this$configuration$d11 : this.configuration.requestTimeoutConfig.getSurveyInviteLink
                };
                return _context21.abrupt("return", new Promise( /*#__PURE__*/function () {
                  var _ref10 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee20(resolve, reject) {
                    var response, data, _headers9, elapsedTimeInMilliseconds, _elapsedTimeInMilliseconds10;

                    return _regenerator["default"].wrap(function _callee20$(_context20) {
                      while (1) {
                        switch (_context20.prev = _context20.next) {
                          case 0:
                            _context20.prev = 0;
                            _context20.next = 3;
                            return axiosInstance(options);

                          case 3:
                            response = _context20.sent;
                            data = response.data, _headers9 = response.headers;

                            _this11.setAuthCodeNonce(_headers9);

                            elapsedTimeInMilliseconds = timer.milliSecondsElapsed;

                            _this11.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETSURVEYINVITELINKSUCCEEDED, "Get Survey Invite Link Succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);

                            resolve(data);
                            _context20.next = 17;
                            break;

                          case 11:
                            _context20.prev = 11;
                            _context20.t0 = _context20["catch"](0);
                            _elapsedTimeInMilliseconds10 = timer.milliSecondsElapsed;

                            _this11.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.GETSURVEYINVITELINKFAILED, "Get Survey Invite Link failed", requestId, undefined, _elapsedTimeInMilliseconds10, requestPath, method, _context20.t0);

                            if (_context20.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                              (0, _throwClientHTTPError["default"])();
                            }

                            reject(_context20.t0);

                          case 17:
                          case "end":
                            return _context20.stop();
                        }
                      }
                    }, _callee20, null, [[0, 11]]);
                  }));

                  return function (_x33, _x34) {
                    return _ref10.apply(this, arguments);
                  };
                }()));

              case 14:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));

      function getSurveyInviteLink(_x31, _x32) {
        return _getSurveyInviteLink.apply(this, arguments);
      }

      return getSurveyInviteLink;
    }()
    /**
     * Get chat transcripts for customer.
     * @param requestId RequestId of the omnichannel session.
     * @param chatId Chat thread Id.
     * @param token Skype token.
     * @param getChatTranscriptsOptionalParams Optional parameters for get chat transcripts.
     */

  }, {
    key: "getChatTranscripts",
    value: function () {
      var _getChatTranscripts = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee23(requestId, chatId, token) {
        var _this$configuration$d12,
            _this12 = this;

        var getChatTranscriptsOptionalParams,
            timer,
            requestPath,
            axiosInstance,
            authenticatedUserToken,
            currentLiveChatVersion,
            headers,
            url,
            method,
            options,
            _args23 = arguments;
        return _regenerator["default"].wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                getChatTranscriptsOptionalParams = _args23.length > 3 && _args23[3] !== undefined ? _args23[3] : {};
                timer = _Timer.Timer.TIMER();
                this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETCHATTRANSCRIPTSTARTED, "Get Chat Transcript Started", requestId);
                requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatGetChatTranscriptPath, "/").concat(chatId, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                axiosInstance = _axios["default"].create();
                (0, _axiosRetry["default"])(axiosInstance, {
                  headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce],
                  retries: this.configuration.maxRequestRetriesOnFailure
                });
                authenticatedUserToken = getChatTranscriptsOptionalParams.authenticatedUserToken, currentLiveChatVersion = getChatTranscriptsOptionalParams.currentLiveChatVersion;
                headers = _Constants["default"].defaultHeaders;
                headers[_OmnichannelHTTPHeaders["default"].organizationId] = this.omnichannelConfiguration.orgId;
                headers[_OmnichannelHTTPHeaders["default"].widgetAppId] = this.omnichannelConfiguration.widgetId;
                headers[_OmnichannelHTTPHeaders["default"].authorization] = token;

                if (this.liveChatVersion === _Enums.LiveChatVersion.V2 || currentLiveChatVersion && currentLiveChatVersion === _Enums.LiveChatVersion.V2) {
                  requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatv2GetChatTranscriptPath, "/").concat(chatId, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);

                  if (authenticatedUserToken) {
                    headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                    headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                    requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatv2AuthGetChatTranscriptPath, "/").concat(chatId, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                  }
                } else if (authenticatedUserToken) {
                  headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                  headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                  requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatAuthGetChatTranscriptPath, "/").concat(chatId, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                }

                url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                method = "GET";
                options = {
                  headers: headers,
                  method: method,
                  url: url,
                  timeout: (_this$configuration$d12 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d12 !== void 0 ? _this$configuration$d12 : this.configuration.requestTimeoutConfig.getChatTranscripts
                };
                return _context23.abrupt("return", new Promise( /*#__PURE__*/function () {
                  var _ref11 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee22(resolve, reject) {
                    var response, elapsedTimeInMilliseconds, data, _headers10, _elapsedTimeInMilliseconds11;

                    return _regenerator["default"].wrap(function _callee22$(_context22) {
                      while (1) {
                        switch (_context22.prev = _context22.next) {
                          case 0:
                            _context22.prev = 0;
                            _context22.next = 3;
                            return axiosInstance(options);

                          case 3:
                            response = _context22.sent;
                            elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                            data = response.data, _headers10 = response.headers;

                            _this12.setAuthCodeNonce(_headers10);

                            _this12.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.GETCHATTRANSCRIPTSUCCEEDED, "Get Chat Transcript succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);

                            resolve(data);
                            _context22.next = 17;
                            break;

                          case 11:
                            _context22.prev = 11;
                            _context22.t0 = _context22["catch"](0);
                            _elapsedTimeInMilliseconds11 = timer.milliSecondsElapsed;

                            _this12.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.GETCHATTRANSCRIPTFAILED, "Get Chat Transcript failed", requestId, undefined, _elapsedTimeInMilliseconds11, requestPath, method, _context22.t0);

                            if (_context22.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                              (0, _throwClientHTTPError["default"])();
                            }

                            reject(_context22.t0);

                          case 17:
                          case "end":
                            return _context22.stop();
                        }
                      }
                    }, _callee22, null, [[0, 11]]);
                  }));

                  return function (_x38, _x39) {
                    return _ref11.apply(this, arguments);
                  };
                }()));

              case 16:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23, this);
      }));

      function getChatTranscripts(_x35, _x36, _x37) {
        return _getChatTranscripts.apply(this, arguments);
      }

      return getChatTranscripts;
    }()
    /**
     * Email transcript to customer.
     * @param requestId RequestId of the omnichannel session.
     * @param token Skype token.
     * @param emailRequestBody Email request body.
     * @param emailTranscriptOptionalParams Optional parameters for email transcript.
     */

  }, {
    key: "emailTranscript",
    value: function () {
      var _emailTranscript = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee25(requestId, token, emailRequestBody) {
        var _this$configuration$d13,
            _this13 = this;

        var emailTranscriptOptionalParams,
            timer,
            requestPath,
            axiosInstance,
            authenticatedUserToken,
            headers,
            url,
            method,
            options,
            _args25 = arguments;
        return _regenerator["default"].wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                emailTranscriptOptionalParams = _args25.length > 3 && _args25[3] !== undefined ? _args25[3] : {};
                timer = _Timer.Timer.TIMER();
                this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.EMAILTRANSCRIPTSTARTED, "Email Transcript Started", requestId);
                requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatTranscriptEmailRequestPath, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                axiosInstance = _axios["default"].create();
                (0, _axiosRetry["default"])(axiosInstance, {
                  headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce],
                  retries: this.configuration.maxRequestRetriesOnFailure
                });
                authenticatedUserToken = emailTranscriptOptionalParams.authenticatedUserToken;
                headers = _Constants["default"].defaultHeaders;
                headers[_OmnichannelHTTPHeaders["default"].organizationId] = this.omnichannelConfiguration.orgId;
                headers[_OmnichannelHTTPHeaders["default"].widgetAppId] = this.omnichannelConfiguration.widgetId;
                headers[_OmnichannelHTTPHeaders["default"].authorization] = token;

                if (authenticatedUserToken) {
                  headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                  headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                  requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatAuthTranscriptEmailRequestPath, "/").concat(requestId, "?channelId=").concat(this.omnichannelConfiguration.channelId);
                }

                url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                method = "POST";
                options = {
                  data: JSON.stringify(emailRequestBody),
                  headers: headers,
                  method: method,
                  url: url,
                  timeout: (_this$configuration$d13 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d13 !== void 0 ? _this$configuration$d13 : this.configuration.requestTimeoutConfig.emailTranscript
                };
                return _context25.abrupt("return", new Promise( /*#__PURE__*/function () {
                  var _ref12 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee24(resolve, reject) {
                    var response, _headers11, elapsedTimeInMilliseconds, _elapsedTimeInMilliseconds12;

                    return _regenerator["default"].wrap(function _callee24$(_context24) {
                      while (1) {
                        switch (_context24.prev = _context24.next) {
                          case 0:
                            _context24.prev = 0;
                            _context24.next = 3;
                            return axiosInstance(options);

                          case 3:
                            response = _context24.sent;
                            _headers11 = response.headers;

                            _this13.setAuthCodeNonce(_headers11);

                            elapsedTimeInMilliseconds = timer.milliSecondsElapsed;

                            _this13.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.EMAILTRANSCRIPTSUCCEEDED, "Email Transcript succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);

                            resolve();
                            _context24.next = 17;
                            break;

                          case 11:
                            _context24.prev = 11;
                            _context24.t0 = _context24["catch"](0);
                            _elapsedTimeInMilliseconds12 = timer.milliSecondsElapsed;

                            _this13.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.EMAILTRANSCRIPTFAILED, "Email Transcript Failed", requestId, undefined, _elapsedTimeInMilliseconds12, requestPath, method, _context24.t0);

                            if (_context24.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                              (0, _throwClientHTTPError["default"])();
                            }

                            reject(_context24.t0);

                          case 17:
                          case "end":
                            return _context24.stop();
                        }
                      }
                    }, _callee24, null, [[0, 11]]);
                  }));

                  return function (_x43, _x44) {
                    return _ref12.apply(this, arguments);
                  };
                }()));

              case 16:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25, this);
      }));

      function emailTranscript(_x40, _x41, _x42) {
        return _emailTranscript.apply(this, arguments);
      }

      return emailTranscript;
    }()
    /**
     * Fetch data masking info of the org.
     * @param requestId RequestId of the omnichannel session (Optional).
     */

  }, {
    key: "fetchDataMaskingInfo",
    value: function () {
      var _fetchDataMaskingInfo = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee27(requestId) {
        var _this$configuration$d14,
            _this14 = this;

        var timer, requestPath, axiosInstance, headers, url, method, options;
        return _regenerator["default"].wrap(function _callee27$(_context27) {
          while (1) {
            switch (_context27.prev = _context27.next) {
              case 0:
                timer = _Timer.Timer.TIMER();
                this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.FETCHDATAMASKINGSTARTED, "Fetch Data Masking Started", requestId);

                if (!requestId) {
                  requestId = (0, _uuid.uuidv4)();
                }

                requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatFetchDataMaskingInfoPath, "/").concat(this.omnichannelConfiguration.orgId);
                axiosInstance = _axios["default"].create();
                (0, _axiosRetry["default"])(axiosInstance, {
                  retries: this.configuration.maxRequestRetriesOnFailure
                });
                headers = _Constants["default"].defaultHeaders;
                headers[_OmnichannelHTTPHeaders["default"].organizationId] = this.omnichannelConfiguration.orgId;
                headers[_OmnichannelHTTPHeaders["default"].requestId] = requestId;
                url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                method = "GET";
                options = {
                  headers: headers,
                  method: method,
                  url: url,
                  timeout: (_this$configuration$d14 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d14 !== void 0 ? _this$configuration$d14 : this.configuration.requestTimeoutConfig.fetchDataMaskingInfo
                };
                return _context27.abrupt("return", new Promise( /*#__PURE__*/function () {
                  var _ref13 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee26(resolve, reject) {
                    var response, elapsedTimeInMilliseconds, data, _elapsedTimeInMilliseconds13;

                    return _regenerator["default"].wrap(function _callee26$(_context26) {
                      while (1) {
                        switch (_context26.prev = _context26.next) {
                          case 0:
                            _context26.prev = 0;
                            _context26.next = 3;
                            return axiosInstance(options);

                          case 3:
                            response = _context26.sent;
                            elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
                            data = response.data;

                            _this14.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.FETCHDATAMASKINGSUCCEEDED, "Fetch Data Masking succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);

                            resolve(data);
                            _context26.next = 16;
                            break;

                          case 10:
                            _context26.prev = 10;
                            _context26.t0 = _context26["catch"](0);
                            _elapsedTimeInMilliseconds13 = timer.milliSecondsElapsed;

                            _this14.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.FETCHDATAMASKINGFAILED, "Fetch Data Masking Failed", requestId, undefined, _elapsedTimeInMilliseconds13, requestPath, method, _context26.t0);

                            if (_context26.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                              (0, _throwClientHTTPError["default"])();
                            }

                            reject(_context26.t0);

                          case 16:
                          case "end":
                            return _context26.stop();
                        }
                      }
                    }, _callee26, null, [[0, 10]]);
                  }));

                  return function (_x46, _x47) {
                    return _ref13.apply(this, arguments);
                  };
                }()));

              case 13:
              case "end":
                return _context27.stop();
            }
          }
        }, _callee27, this);
      }));

      function fetchDataMaskingInfo(_x45) {
        return _fetchDataMaskingInfo.apply(this, arguments);
      }

      return fetchDataMaskingInfo;
    }()
    /**
     * Makes a secondary channel event network call to Omnichannel.
     * @param requestId RequestId to use for secondary channel event
     * @param secondaryChannelEventRequestBody secondaryChannel event request body
     * @param secondaryChannelEventOptionalParams Optional parameters for secondary channel events.
     */

  }, {
    key: "makeSecondaryChannelEventRequest",
    value: function () {
      var _makeSecondaryChannelEventRequest = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee29(requestId, secondaryChannelEventRequestBody) {
        var _this$configuration$d15,
            _this15 = this;

        var secondaryChannelEventOptionalParams,
            timer,
            requestPath,
            axiosInstance,
            authenticatedUserToken,
            headers,
            url,
            method,
            options,
            _args29 = arguments;
        return _regenerator["default"].wrap(function _callee29$(_context29) {
          while (1) {
            switch (_context29.prev = _context29.next) {
              case 0:
                secondaryChannelEventOptionalParams = _args29.length > 2 && _args29[2] !== undefined ? _args29[2] : {};
                timer = _Timer.Timer.TIMER();
                this.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.SECONDARYCHANNELEVENTREQUESTSTARTED, "Secondary Channel Event Request Started", requestId);
                requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatSecondaryChannelEventPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId);
                axiosInstance = _axios["default"].create();
                (0, _axiosRetry["default"])(axiosInstance, {
                  headerOverwrites: [_OmnichannelHTTPHeaders["default"].authCodeNonce],
                  retries: this.configuration.maxRequestRetriesOnFailure
                });
                authenticatedUserToken = secondaryChannelEventOptionalParams.authenticatedUserToken;
                headers = _Constants["default"].defaultHeaders;
                headers[_OmnichannelHTTPHeaders["default"].organizationId] = this.omnichannelConfiguration.orgId;

                if (authenticatedUserToken) {
                  headers[_OmnichannelHTTPHeaders["default"].authenticatedUserToken] = authenticatedUserToken;
                  headers[_OmnichannelHTTPHeaders["default"].authCodeNonce] = this.configuration.authCodeNonce;
                  requestPath = "/".concat(_OmnichannelEndpoints["default"].LiveChatAuthSecondaryChannelEventPath, "/").concat(this.omnichannelConfiguration.orgId, "/").concat(this.omnichannelConfiguration.widgetId, "/").concat(requestId);
                }

                requestPath += "?channelId=" + _Constants["default"].defaultChannelId;
                url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                method = "POST";
                options = {
                  data: JSON.stringify(secondaryChannelEventRequestBody),
                  headers: headers,
                  method: method,
                  url: url,
                  timeout: (_this$configuration$d15 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d15 !== void 0 ? _this$configuration$d15 : this.configuration.requestTimeoutConfig.makeSecondaryChannelEventRequest
                };
                return _context29.abrupt("return", new Promise( /*#__PURE__*/function () {
                  var _ref14 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee28(resolve, reject) {
                    var response, _headers12, elapsedTimeInMilliseconds, _elapsedTimeInMilliseconds14;

                    return _regenerator["default"].wrap(function _callee28$(_context28) {
                      while (1) {
                        switch (_context28.prev = _context28.next) {
                          case 0:
                            _context28.prev = 0;
                            _context28.next = 3;
                            return axiosInstance(options);

                          case 3:
                            response = _context28.sent;
                            _headers12 = response.headers;

                            _this15.setAuthCodeNonce(_headers12);

                            elapsedTimeInMilliseconds = timer.milliSecondsElapsed;

                            _this15.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.SECONDARYCHANNELEVENTREQUESTSUCCEEDED, "Secondary Channel Event Request Succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);

                            resolve();
                            _context28.next = 17;
                            break;

                          case 11:
                            _context28.prev = 11;
                            _context28.t0 = _context28["catch"](0);
                            _elapsedTimeInMilliseconds14 = timer.milliSecondsElapsed;

                            _this15.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.SECONDARYCHANNELEVENTREQUESTFAILED, "Secondary Channel Event Request Failed", requestId, undefined, _elapsedTimeInMilliseconds14, requestPath, method, _context28.t0);

                            if (_context28.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                              (0, _throwClientHTTPError["default"])();
                            }

                            reject(_context28.t0);

                          case 17:
                          case "end":
                            return _context28.stop();
                        }
                      }
                    }, _callee28, null, [[0, 11]]);
                  }));

                  return function (_x50, _x51) {
                    return _ref14.apply(this, arguments);
                  };
                }()));

              case 15:
              case "end":
                return _context29.stop();
            }
          }
        }, _callee29, this);
      }));

      function makeSecondaryChannelEventRequest(_x48, _x49) {
        return _makeSecondaryChannelEventRequest.apply(this, arguments);
      }

      return makeSecondaryChannelEventRequest;
    }()
    /** Send typing indicator
     * @param requestId RequestId of the omnichannel session.
     */

  }, {
    key: "sendTypingIndicator",
    value: function () {
      var _sendTypingIndicator = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee31(requestId, currentLiveChatVersion) {
        var _this$configuration$d16,
            _this16 = this;

        var sendTypingIndicatorOptionalParams,
            timer,
            customerDisplayName,
            requestPath,
            axiosInstance,
            headers,
            url,
            method,
            options,
            _args31 = arguments;
        return _regenerator["default"].wrap(function _callee31$(_context31) {
          while (1) {
            switch (_context31.prev = _context31.next) {
              case 0:
                sendTypingIndicatorOptionalParams = _args31.length > 2 && _args31[2] !== undefined ? _args31[2] : {};

                if (!(!currentLiveChatVersion || currentLiveChatVersion !== _Enums.LiveChatVersion.V2)) {
                  _context31.next = 3;
                  break;
                }

                return _context31.abrupt("return", Promise.resolve());

              case 3:
                timer = _Timer.Timer.TIMER();
                customerDisplayName = sendTypingIndicatorOptionalParams.customerDisplayName;

                if (!(!currentLiveChatVersion || currentLiveChatVersion !== _Enums.LiveChatVersion.V2)) {
                  _context31.next = 7;
                  break;
                }

                throw new Error('Typing indicator is only supported on v2');

              case 7:
                requestPath = "/".concat(_OmnichannelEndpoints["default"].SendTypingIndicatorPath, "/").concat(requestId);
                axiosInstance = _axios["default"].create();
                headers = _Constants["default"].defaultHeaders;
                headers[_OmnichannelHTTPHeaders["default"].organizationId] = this.omnichannelConfiguration.orgId;

                if (customerDisplayName) {
                  headers[_Constants["default"].customerDisplayName] = customerDisplayName;
                }

                url = "".concat(this.omnichannelConfiguration.orgUrl).concat(requestPath);
                method = "POST";
                options = {
                  headers: headers,
                  method: method,
                  url: url,
                  timeout: (_this$configuration$d16 = this.configuration.defaultRequestTimeout) !== null && _this$configuration$d16 !== void 0 ? _this$configuration$d16 : this.configuration.requestTimeoutConfig.sendTypingIndicator
                };
                return _context31.abrupt("return", new Promise( /*#__PURE__*/function () {
                  var _ref15 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee30(resolve, reject) {
                    var response, elapsedTimeInMilliseconds, _elapsedTimeInMilliseconds15;

                    return _regenerator["default"].wrap(function _callee30$(_context30) {
                      while (1) {
                        switch (_context30.prev = _context30.next) {
                          case 0:
                            _context30.prev = 0;
                            _context30.next = 3;
                            return axiosInstance(options);

                          case 3:
                            response = _context30.sent;
                            elapsedTimeInMilliseconds = timer.milliSecondsElapsed;

                            _this16.logWithLogger(_LogLevel.LogLevel.INFO, _Enums.OCSDKTelemetryEvent.SENDTYPINGINDICATORSUCCEEDED, "Send Typing Indicator Succeeded", requestId, response, elapsedTimeInMilliseconds, requestPath, method);

                            resolve();
                            _context30.next = 15;
                            break;

                          case 9:
                            _context30.prev = 9;
                            _context30.t0 = _context30["catch"](0);
                            _elapsedTimeInMilliseconds15 = timer.milliSecondsElapsed;

                            _this16.logWithLogger(_LogLevel.LogLevel.ERROR, _Enums.OCSDKTelemetryEvent.SENDTYPINGINDICATORFAILED, "Send Typing Indicator Failed", requestId, undefined, _elapsedTimeInMilliseconds15, requestPath, method, _context30.t0);

                            if (_context30.t0.code === _Constants["default"].axiosTimeoutErrorCode) {
                              (0, _throwClientHTTPError["default"])();
                            }

                            reject(_context30.t0);

                          case 15:
                          case "end":
                            return _context30.stop();
                        }
                      }
                    }, _callee30, null, [[0, 9]]);
                  }));

                  return function (_x54, _x55) {
                    return _ref15.apply(this, arguments);
                  };
                }()));

              case 16:
              case "end":
                return _context31.stop();
            }
          }
        }, _callee31, this);
      }));

      function sendTypingIndicator(_x52, _x53) {
        return _sendTypingIndicator.apply(this, arguments);
      }

      return sendTypingIndicator;
    }()
    /**
     * Helper function for logging.
     *
     * @param logLevel Log level for logging.
     * @param telemetryEventType Telemetry event type in which event will be logged.
     * @param description Description of the event.
     * @param requestId Request ID
     * @param response Response
     * @param elapsedTimeInMilliseconds Elapsed time in ms
     * @param requestPath Request path
     * @param method Method
     * @param error Error
     * @param data Data
     */

  }, {
    key: "logWithLogger",
    value: function logWithLogger(logLevel, telemetryEventType, description, requestId, response, elapsedTimeInMilliseconds, requestPath, method, error, requestPayload) {
      var _response2;

      // eslint-disable-line @typescript-eslint/no-explicit-any
      if (!this.logger) {
        return;
      }

      if (error) {
        _LoggingSanitizer.LoggingSanitizer.stripErrorSensitiveProperties(error);
      }

      var sanitizedRequestPayload = undefined;

      if (requestPayload) {
        sanitizedRequestPayload = _objectSpread({}, requestPayload);

        if (sanitizedRequestPayload.customContextData) {
          _LoggingSanitizer.LoggingSanitizer.stripCustomContextDataValues(sanitizedRequestPayload.customContextData);
        }

        if (sanitizedRequestPayload.preChatResponse) {
          _LoggingSanitizer.LoggingSanitizer.stripPreChatResponse(sanitizedRequestPayload.preChatResponse);
        }

        _LoggingSanitizer.LoggingSanitizer.stripGeolocation(sanitizedRequestPayload);
      }

      var customData = {
        RequestId: requestId,
        Region: response === null || response === void 0 ? void 0 : response.data.Region,
        ElapsedTimeInMilliseconds: elapsedTimeInMilliseconds,
        TransactionId: response === null || response === void 0 ? void 0 : response.headers[_Constants["default"].transactionid],
        RequestPath: requestPath,
        RequestMethod: method,
        ResponseStatusCode: response ? response.status : error ? (_response2 = error.response) === null || _response2 === void 0 ? void 0 : _response2.status : undefined,
        // eslint-disable-line @typescript-eslint/no-explicit-any
        ExceptionDetails: error,
        RequestPayload: sanitizedRequestPayload
      };
      this.logger.log(logLevel, telemetryEventType, customData, description);
    } // eslint-disable-next-line @typescript-eslint/no-explicit-any

  }]);
  return SDK;
}();

exports["default"] = SDK;
(0, _defineProperty2["default"])(SDK, "defaultRequestTimeoutConfig", {
  getChatConfig: 30000,
  getLWIDetails: 15000,
  getChatToken: 15000,
  sessionInit: 15000,
  sessionClose: 15000,
  getReconnectableChats: 15000,
  getReconnectAvailability: 15000,
  submitPostChatResponse: 15000,
  getSurveyInviteLink: 15000,
  getChatTranscripts: 30000,
  emailTranscript: 5000,
  fetchDataMaskingInfo: 5000,
  makeSecondaryChannelEventRequest: 15000,
  getAgentAvailability: 15000,
  sendTypingIndicator: 5000,
  validateAuthChatRecordTimeout: 15000
});
(0, _defineProperty2["default"])(SDK, "defaultConfiguration", {
  authCodeNonce: (0, _uuid.uuidv4)().substring(0, 8),
  getChatTokenRetryCount: 10,
  getChatTokenTimeBetweenRetriesOnFailure: 10000,
  getChatTokenRetryOn429: false,
  maxRequestRetriesOnFailure: 3,
  defaultRequestTimeout: undefined,
  requestTimeoutConfig: SDK.defaultRequestTimeoutConfig
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9TREsudHMiXSwibmFtZXMiOlsiU0RLIiwib21uaWNoYW5uZWxDb25maWd1cmF0aW9uIiwiY29uZmlndXJhdGlvbiIsImRlZmF1bHRDb25maWd1cmF0aW9uIiwibG9nZ2VyIiwiaGVhZGVycyIsImF1dGhjb2Rlbm9uY2UiLCJhdXRoQ29kZU5vbmNlIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsImtleSIsImhhc093blByb3BlcnR5IiwiY2hhbm5lbElkIiwidmFsdWVzIiwiQ2hhbm5lbElkIiwiaW5jbHVkZXMiLCJFcnJvciIsImN1cnJlbnRPbW5pY2hhbm5lbENvbmZpZ3VyYXRpb25QYXJhbWV0ZXJzIiwiQ29uc3RhbnRzIiwicmVxdWlyZWRPbW5pY2hhbm5lbENvbmZpZ3VyYXRpb25QYXJhbWV0ZXJzIiwibGl2ZUNoYXRWZXJzaW9uIiwiTGl2ZUNoYXRWZXJzaW9uIiwiVjIiLCJyZXF1ZXN0SWQiLCJieXBhc3NDYWNoZSIsInRpbWVyIiwiVGltZXIiLCJUSU1FUiIsImxvZ1dpdGhMb2dnZXIiLCJMb2dMZXZlbCIsIklORk8iLCJPQ1NES1RlbGVtZXRyeUV2ZW50IiwiR0VUQ0hBVENPTkZJRyIsInJlcXVlc3RQYXRoIiwiT21uaWNoYW5uZWxFbmRwb2ludHMiLCJMaXZlQ2hhdENvbmZpZ1BhdGgiLCJvcmdJZCIsIndpZGdldElkIiwibWV0aG9kIiwidXJsIiwib3JnVXJsIiwiYXhpb3NJbnN0YW5jZSIsImF4aW9zIiwiY3JlYXRlIiwicmV0cmllcyIsIm1heFJlcXVlc3RSZXRyaWVzT25GYWlsdXJlIiwiYnlwYXNzQ2FjaGVIZWFkZXJzIiwiZ2V0IiwidGltZW91dCIsImRlZmF1bHRSZXF1ZXN0VGltZW91dCIsInJlcXVlc3RUaW1lb3V0Q29uZmlnIiwiZ2V0Q2hhdENvbmZpZyIsInJlc3BvbnNlIiwiZWxhcHNlZFRpbWVJbk1pbGxpc2Vjb25kcyIsIm1pbGxpU2Vjb25kc0VsYXBzZWQiLCJkYXRhIiwiR0VUQ0hBVENPTkZJR1NVQ0NFU1MiLCJnZXRMV0lEZXRhaWxzT3B0aW9uYWxQYXJhbXMiLCJHRVRMV0lTVEFUVVNTVEFSVEVEIiwiTGl2ZUNoYXRMaXZlV29ya0l0ZW1EZXRhaWxzUGF0aCIsImhlYWRlck92ZXJ3cml0ZXMiLCJPbW5pY2hhbm5lbEhUVFBIZWFkZXJzIiwiYXV0aGVudGljYXRlZFVzZXJUb2tlbiIsInJlY29ubmVjdElkIiwiZGVmYXVsdEhlYWRlcnMiLCJMaXZlQ2hhdEF1dGhMaXZlV29ya0l0ZW1EZXRhaWxzUGF0aCIsIm9wdGlvbnMiLCJnZXRMV0lEZXRhaWxzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJzZXRBdXRoQ29kZU5vbmNlIiwiR0VUTFdJU1RBVFVTU1VDQ0VFREVEIiwiRVJST1IiLCJHRVRMV0lTVEFUVVNGQUlMRUQiLCJ1bmRlZmluZWQiLCJjb2RlIiwiYXhpb3NUaW1lb3V0RXJyb3JDb2RlIiwiZ2V0Q2hhdFRva2VuT3B0aW9uYWxQYXJhbXMiLCJjdXJyZW50UmV0cnlDb3VudCIsImN1cnJlbnRMaXZlQ2hhdFZlcnNpb24iLCJyZWZyZXNoVG9rZW4iLCJHRVRDSEFUVE9LRU5TVEFSVEVEIiwiZW5kcG9pbnQiLCJxdWVyeVBhcmFtcyIsImdldENoYXRUb2tlbiIsInJldHJ5T240MjkiLCJnZXRDaGF0VG9rZW5SZXRyeU9uNDI5IiwiZ2V0Q2hhdFRva2VuRXJyb3IiLCJHRVRDSEFUVE9LRU5TVUNDRUVERUQiLCJzdGF0dXMiLCJub0NvbnRlbnRTdGF0dXNDb2RlIiwiR0VUQ0hBVFRPS0VORkFJTEVEIiwidG9vTWFueVJlcXVlc3RzU3RhdHVzQ29kZSIsImdldENoYXRUb2tlblJldHJ5Q291bnQiLCJzZXRUaW1lb3V0IiwidGhlbiIsImVycm9yIiwiZ2V0Q2hhdFRva2VuVGltZUJldHdlZW5SZXRyaWVzT25GYWlsdXJlIiwicmVjb25uZWN0YWJsZUNoYXRzUGFyYW1zIiwiR0VUUkVDT05ORUNUQUJMRUNIQVRTIiwiTGl2ZUNoYXRHZXRSZWNvbm5lY3RhYmxlQ2hhdHNQYXRoIiwiZ2V0UmVjb25uZWN0YWJsZUNoYXRzIiwiR0VUUkVDT05ORUNUQVZBSUxBQklMSVRZIiwiTGl2ZUNoYXRSZWNvbm5lY3RBdmFpbGFiaWxpdHlQYXRoIiwiZ2V0UmVjb25uZWN0QXZhaWxhYmlsaXR5IiwiV0FSTiIsInF1ZXVlQXZhaWxhYmlsaXR5T3B0aW9uYWxQYXJhbXMiLCJHRVRBR0VOVEFWQUlMQUJJTElUWVNUQVJURUQiLCJHZXRBZ2VudEF2YWlsYWJpbGl0eVBhdGgiLCJpbml0Q29udGV4dCIsImdldENvbnRleHQiLCJjYWNoT2JqIiwiY3VzdG9tQ29udGV4dERhdGEiLCJ0ZW1wQXJyIiwiQ3VzdG9tQ29udGV4dERhdGEiLCJzb3J0IiwiYXNzaWduIiwicG9ydGFsY29udGFjdGlkIiwiY2FjaGVLZXkiLCJoYXNoIiwiY3JlYXRlSGFzaCIsInVwZGF0ZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJkaWdlc3QiLCJ0b1N0cmluZyIsIndpbmRvdyIsImRvY3VtZW50IiwiYnJvd3NlciIsIkJyb3dzZXJJbmZvIiwiZ2V0QnJvd3Nlck5hbWUiLCJkZXZpY2UiLCJEZXZpY2VJbmZvIiwiZ2V0RGV2aWNlVHlwZSIsIm9yaWdpbnVybCIsImxvY2F0aW9uIiwiaHJlZiIsIm9zIiwiT1NJbmZvIiwiZ2V0T3NUeXBlIiwibG9jYWxlIiwiZGVmYXVsdExvY2FsZSIsIkxvY2FsZXMiLCJzdXBwb3J0ZWRMb2NhbGVzIiwiZ2V0QWdlbnRBdmFpbGFiaWxpdHkiLCJHRVRBR0VOVEFWQUlMQUJJTElUWVNVQ0NFRURFRCIsIkdFVEFHRU5UQVZBSUxBQklMSVRZRkFJTEVEIiwic2Vzc2lvbkluaXRPcHRpb25hbFBhcmFtcyIsIlNFU1NJT05JTklUU1RBUlRFRCIsInNob3VsZFJldHJ5Iiwic2Vzc2lvbkluaXRSZXRyeUhhbmRsZXIiLCJMaXZlQ2hhdFNlc3Npb25Jbml0UGF0aCIsIkxpdmVDaGF0QXV0aFNlc3Npb25Jbml0UGF0aCIsInNlc3Npb25Jbml0IiwiU0VTU0lPTklOSVRTVUNDRUVERUQiLCJTRVNTSU9OSU5JVEZBSUxFRCIsInNlc3Npb25DbG9zZU9wdGlvbmFsUGFyYW1zIiwiU0VTU0lPTkNMT1NFU1RBUlRFRCIsIkxpdmVDaGF0U2Vzc2lvbkNsb3NlUGF0aCIsImlzUmVjb25uZWN0Q2hhdCIsImlzUGVyc2lzdGVudENoYXQiLCJjaGF0SWQiLCJMaXZlQ2hhdEF1dGhTZXNzaW9uQ2xvc2VQYXRoIiwic2Vzc2lvbkNsb3NlIiwiU0VTU0lPTkNMT1NFU1VDQ0VFREVEIiwiU0VTU0lPTkNMT1NFRkFJTEVEIiwidmFsaWRhdGVBdXRoQ2hhdFJlY29yZE9wdGlvbmFsUGFyYW1zIiwiVkFMSURBVEVBVVRIQ0hBVFJFQ09SRFNUQVJURUQiLCJMaXZlQ2hhdFZhbGlkYXRlQXV0aENoYXRNYXBSZWNvcmRQYXRoIiwidmFsaWRhdGVBdXRoQ2hhdFJlY29yZFRpbWVvdXQiLCJhdXRoQ2hhdEV4aXN0IiwiVkFMSURBVEVBVVRIQ0hBVFJFQ09SRFNVQ0NFRURFRCIsIlZBTElEQVRFQVVUSENIQVRSRUNPUkRGQUlMRUQiLCJwb3N0Q2hhdFJlc3BvbnNlIiwic3VibWl0UG9zdENoYXRSZXNwb25zZU9wdGlvbmFsUGFyYW1zIiwiU1VCTUlUUE9TVENIQVRTVEFSVEVEIiwiTGl2ZUNoYXRTdWJtaXRQb3N0Q2hhdFBhdGgiLCJMaXZlQ2hhdEF1dGhTdWJtaXRQb3N0Q2hhdFBhdGgiLCJzdWJtaXRQb3N0Q2hhdFJlc3BvbnNlIiwiU1VCTUlUUE9TVENIQVRTVUNDRUVERUQiLCJTVUJNSVRQT1NUQ0hBVEZBSUxFRCIsInN1cnZleU93bmVySWQiLCJzdXJ2ZXlJbnZpdGVBUElSZXF1ZXN0Qm9keSIsImdldHN1cnZleUludml0ZUxpbmtPcHRpb25hbFBhcmFtcyIsImxvZyIsIkdFVFNVUlZFWUlOVklURUxJTktTVEFSVEVEIiwiU3VydmV5T3duZXJJZCIsIkxpdmVDaGF0R2V0U3VydmV5SW52aXRlTGlua1BhdGgiLCJMaXZlQ2hhdEF1dGhHZXRTdXJ2ZXlJbnZpdGVMaW5rUGF0aCIsIndpZGdldEFwcElkIiwiZ2V0U3VydmV5SW52aXRlTGluayIsIkdFVFNVUlZFWUlOVklURUxJTktTVUNDRUVERUQiLCJHRVRTVVJWRVlJTlZJVEVMSU5LRkFJTEVEIiwidG9rZW4iLCJnZXRDaGF0VHJhbnNjcmlwdHNPcHRpb25hbFBhcmFtcyIsIkdFVENIQVRUUkFOU0NSSVBUU1RBUlRFRCIsIkxpdmVDaGF0R2V0Q2hhdFRyYW5zY3JpcHRQYXRoIiwib3JnYW5pemF0aW9uSWQiLCJhdXRob3JpemF0aW9uIiwiTGl2ZUNoYXR2MkdldENoYXRUcmFuc2NyaXB0UGF0aCIsIkxpdmVDaGF0djJBdXRoR2V0Q2hhdFRyYW5zY3JpcHRQYXRoIiwiTGl2ZUNoYXRBdXRoR2V0Q2hhdFRyYW5zY3JpcHRQYXRoIiwiZ2V0Q2hhdFRyYW5zY3JpcHRzIiwiR0VUQ0hBVFRSQU5TQ1JJUFRTVUNDRUVERUQiLCJHRVRDSEFUVFJBTlNDUklQVEZBSUxFRCIsImVtYWlsUmVxdWVzdEJvZHkiLCJlbWFpbFRyYW5zY3JpcHRPcHRpb25hbFBhcmFtcyIsIkVNQUlMVFJBTlNDUklQVFNUQVJURUQiLCJMaXZlQ2hhdFRyYW5zY3JpcHRFbWFpbFJlcXVlc3RQYXRoIiwiTGl2ZUNoYXRBdXRoVHJhbnNjcmlwdEVtYWlsUmVxdWVzdFBhdGgiLCJlbWFpbFRyYW5zY3JpcHQiLCJFTUFJTFRSQU5TQ1JJUFRTVUNDRUVERUQiLCJFTUFJTFRSQU5TQ1JJUFRGQUlMRUQiLCJGRVRDSERBVEFNQVNLSU5HU1RBUlRFRCIsIkxpdmVDaGF0RmV0Y2hEYXRhTWFza2luZ0luZm9QYXRoIiwiZmV0Y2hEYXRhTWFza2luZ0luZm8iLCJGRVRDSERBVEFNQVNLSU5HU1VDQ0VFREVEIiwiRkVUQ0hEQVRBTUFTS0lOR0ZBSUxFRCIsInNlY29uZGFyeUNoYW5uZWxFdmVudFJlcXVlc3RCb2R5Iiwic2Vjb25kYXJ5Q2hhbm5lbEV2ZW50T3B0aW9uYWxQYXJhbXMiLCJTRUNPTkRBUllDSEFOTkVMRVZFTlRSRVFVRVNUU1RBUlRFRCIsIkxpdmVDaGF0U2Vjb25kYXJ5Q2hhbm5lbEV2ZW50UGF0aCIsIkxpdmVDaGF0QXV0aFNlY29uZGFyeUNoYW5uZWxFdmVudFBhdGgiLCJkZWZhdWx0Q2hhbm5lbElkIiwibWFrZVNlY29uZGFyeUNoYW5uZWxFdmVudFJlcXVlc3QiLCJTRUNPTkRBUllDSEFOTkVMRVZFTlRSRVFVRVNUU1VDQ0VFREVEIiwiU0VDT05EQVJZQ0hBTk5FTEVWRU5UUkVRVUVTVEZBSUxFRCIsInNlbmRUeXBpbmdJbmRpY2F0b3JPcHRpb25hbFBhcmFtcyIsImN1c3RvbWVyRGlzcGxheU5hbWUiLCJTZW5kVHlwaW5nSW5kaWNhdG9yUGF0aCIsInNlbmRUeXBpbmdJbmRpY2F0b3IiLCJTRU5EVFlQSU5HSU5ESUNBVE9SU1VDQ0VFREVEIiwiU0VORFRZUElOR0lORElDQVRPUkZBSUxFRCIsImxvZ0xldmVsIiwidGVsZW1ldHJ5RXZlbnRUeXBlIiwiZGVzY3JpcHRpb24iLCJyZXF1ZXN0UGF5bG9hZCIsIkxvZ2dpbmdTYW5pdGl6ZXIiLCJzdHJpcEVycm9yU2Vuc2l0aXZlUHJvcGVydGllcyIsInNhbml0aXplZFJlcXVlc3RQYXlsb2FkIiwic3RyaXBDdXN0b21Db250ZXh0RGF0YVZhbHVlcyIsInByZUNoYXRSZXNwb25zZSIsInN0cmlwUHJlQ2hhdFJlc3BvbnNlIiwic3RyaXBHZW9sb2NhdGlvbiIsImN1c3RvbURhdGEiLCJSZXF1ZXN0SWQiLCJSZWdpb24iLCJFbGFwc2VkVGltZUluTWlsbGlzZWNvbmRzIiwiVHJhbnNhY3Rpb25JZCIsInRyYW5zYWN0aW9uaWQiLCJSZXF1ZXN0UGF0aCIsIlJlcXVlc3RNZXRob2QiLCJSZXNwb25zZVN0YXR1c0NvZGUiLCJFeGNlcHRpb25EZXRhaWxzIiwiUmVxdWVzdFBheWxvYWQiLCJzdWJzdHJpbmciLCJkZWZhdWx0UmVxdWVzdFRpbWVvdXRDb25maWciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBb0JBOztBQUNBOztBQUNBOztBQUdBOztBQUNBOztBQUNBOztBQUtBOztBQUNBOztBQUNBOztBQUNB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QkFBbUIsRUFBRSxJQWY0QztBQWdCakU3RCxFQUFBQSw2QkFBNkIsRUFBRTtBQWhCa0MsQztpQ0FEaEQzSyxHLDBCQW9Cc0M7QUFDdkRPLEVBQUFBLGFBQWEsRUFBRSxvQkFBUzBQLFNBQVQsQ0FBbUIsQ0FBbkIsRUFBc0IsQ0FBdEIsQ0FEd0M7QUFFdkRsSyxFQUFBQSxzQkFBc0IsRUFBRSxFQUYrQjtBQUd2REksRUFBQUEsdUNBQXVDLEVBQUUsS0FIYztBQUl2RFgsRUFBQUEsc0JBQXNCLEVBQUUsS0FKK0I7QUFLdkQxQyxFQUFBQSwwQkFBMEIsRUFBRSxDQUwyQjtBQU12REksRUFBQUEscUJBQXFCLEVBQUUwQixTQU5nQztBQU92RHpCLEVBQUFBLG9CQUFvQixFQUFFbkQsR0FBRyxDQUFDa1E7QUFQNkIsQyIsInNvdXJjZVJvb3QiOiJvY3NkazovLy8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFubmVsSWQsIExpdmVDaGF0VmVyc2lvbiB9IGZyb20gXCIuL0NvbW1vbi9FbnVtc1wiO1xuaW1wb3J0IGF4aW9zLCB7IEF4aW9zUmVxdWVzdENvbmZpZywgQXhpb3NSZXNwb25zZSB9IGZyb20gXCJheGlvc1wiO1xuaW1wb3J0IHsgQnJvd3NlckluZm8gfSBmcm9tIFwiLi9VdGlscy9Ccm93c2VySW5mb1wiO1xuaW1wb3J0IENvbnN0YW50cyBmcm9tIFwiLi9Db21tb24vQ29uc3RhbnRzXCI7XG5pbXBvcnQgeyBjcmVhdGVHZXRDaGF0VG9rZW5FbmRwb2ludCB9IGZyb20gXCIuL1V0aWxzL2VuZHBvaW50c0NyZWF0b3JzXCI7XG5pbXBvcnQgeyBEZXZpY2VJbmZvIH0gZnJvbSBcIi4vVXRpbHMvRGV2aWNlSW5mb1wiO1xuaW1wb3J0IEZldGNoQ2hhdFRva2VuUmVzcG9uc2UgZnJvbSBcIi4vTW9kZWwvRmV0Y2hDaGF0VG9rZW5SZXNwb25zZVwiO1xuaW1wb3J0IElEYXRhTWFza2luZ0luZm8gZnJvbSBcIi4vSW50ZXJmYWNlcy9JRGF0YU1hc2tpbmdJbmZvXCI7XG5pbXBvcnQgSUVtYWlsVHJhbnNjcmlwdE9wdGlvbmFsUGFyYW1zIGZyb20gXCIuL0ludGVyZmFjZXMvSUVtYWlsVHJhbnNjcmlwdE9wdGlvbmFsUGFyYW1zXCI7XG5pbXBvcnQgSUdldENoYXRUb2tlbk9wdGlvbmFsUGFyYW1zIGZyb20gXCIuL0ludGVyZmFjZXMvSUdldENoYXRUb2tlbk9wdGlvbmFsUGFyYW1zXCI7XG5pbXBvcnQgSUdldENoYXRUcmFuc2NyaXB0c09wdGlvbmFsUGFyYW1zIGZyb20gXCIuL0ludGVyZmFjZXMvSUdldENoYXRUcmFuc2NyaXB0c09wdGlvbmFsUGFyYW1zXCI7XG5pbXBvcnQgSUdldExXSURldGFpbHNPcHRpb25hbFBhcmFtcyBmcm9tIFwiLi9JbnRlcmZhY2VzL0lHZXRMV0lEZXRhaWxzT3B0aW9uYWxQYXJhbXNcIjtcbmltcG9ydCBJR2V0UXVldWVBdmFpbGFiaWxpdHlPcHRpb25hbFBhcmFtcyBmcm9tIFwiLi9JbnRlcmZhY2VzL0lHZXRRdWV1ZUF2YWlsYWJpbGl0eU9wdGlvbmFsUGFyYW1zXCI7XG5pbXBvcnQgSUdldFN1cnZleUludml0ZUxpbmtPcHRpb25hbFBhcmFtcyBmcm9tIFwiLi9JbnRlcmZhY2VzL0lHZXRTdXJ2ZXlJbnZpdGVMaW5rT3B0aW9uYWxQYXJhbXNcIjtcbmltcG9ydCBJT21uaWNoYW5uZWxDb25maWd1cmF0aW9uIGZyb20gXCIuL0ludGVyZmFjZXMvSU9tbmljaGFubmVsQ29uZmlndXJhdGlvblwiO1xuaW1wb3J0IElSZWNvbm5lY3RhYmxlQ2hhdHNQYXJhbXMgZnJvbSBcIi4vSW50ZXJmYWNlcy9JUmVjb25uZWN0YWJsZUNoYXRzUGFyYW1zXCI7XG5pbXBvcnQgSVNlbmRUeXBpbmdJbmRpY2F0b3JPcHRpb25hbFBhcmFtcyBmcm9tIFwiLi9JbnRlcmZhY2VzL0lTZW5kVHlwaW5nSW5kaWNhdG9yT3B0aW9uYWxQYXJhbXNcIlxuaW1wb3J0IElTREsgZnJvbSBcIi4vSW50ZXJmYWNlcy9JU0RLXCI7XG5pbXBvcnQgSVNES0NvbmZpZ3VyYXRpb24gZnJvbSBcIi4vSW50ZXJmYWNlcy9JU0RLQ29uZmlndXJhdGlvblwiO1xuaW1wb3J0IElTZWNvbmRhcnlDaGFubmVsRXZlbnRPcHRpb25hbFBhcmFtcyBmcm9tIFwiLi9JbnRlcmZhY2VzL0lTZWNvbmRhcnlDaGFubmVsRXZlbnRPcHRpb25hbFBhcmFtc1wiO1xuaW1wb3J0IElTZXNzaW9uQ2xvc2VPcHRpb25hbFBhcmFtcyBmcm9tIFwiLi9JbnRlcmZhY2VzL0lTZXNzaW9uQ2xvc2VPcHRpb25hbFBhcmFtc1wiO1xuaW1wb3J0IElTZXNzaW9uSW5pdE9wdGlvbmFsUGFyYW1zIGZyb20gXCIuL0ludGVyZmFjZXMvSVNlc3Npb25Jbml0T3B0aW9uYWxQYXJhbXNcIjtcbmltcG9ydCBJU3VibWl0UG9zdENoYXRSZXNwb25zZU9wdGlvbmFsUGFyYW1zIGZyb20gXCIuL0ludGVyZmFjZXMvSVN1Ym1pdFBvc3RDaGF0UmVzcG9uc2VPcHRpb25hbFBhcmFtc1wiO1xuaW1wb3J0IElWYWxpZGF0ZUF1dGhDaGF0UmVjb3JkT3B0aW9uYWxQYXJhbXMgZnJvbSBcIi4vSW50ZXJmYWNlcy9JVmFsaWRhdGVBdXRoQ2hhdFJlY29yZE9wdGlvbmFsUGFyYW1zXCI7XG5pbXBvcnQgSW5pdENvbnRleHQgZnJvbSBcIi4vTW9kZWwvSW5pdENvbnRleHRcIjtcbmltcG9ydCBMb2NhbGVzIGZyb20gXCIuL0NvbW1vbi9Mb2NhbGVzXCI7XG5pbXBvcnQgeyBMb2dnaW5nU2FuaXRpemVyIH0gZnJvbSBcIi4vVXRpbHMvTG9nZ2luZ1Nhbml0aXplclwiO1xuaW1wb3J0IHsgTG9nTGV2ZWwgfSBmcm9tIFwiLi9Nb2RlbC9Mb2dMZXZlbFwiO1xuaW1wb3J0IE9DU0RLTG9nZ2VyIGZyb20gXCIuL0NvbW1vbi9PQ1NES0xvZ2dlclwiO1xuaW1wb3J0IHsgT0NTREtUZWxlbWV0cnlFdmVudCB9IGZyb20gXCIuL0NvbW1vbi9FbnVtc1wiO1xuaW1wb3J0IHsgT1NJbmZvIH0gZnJvbSBcIi4vVXRpbHMvT1NJbmZvXCI7XG5pbXBvcnQgT21uaWNoYW5uZWxFbmRwb2ludHMgZnJvbSBcIi4vQ29tbW9uL09tbmljaGFubmVsRW5kcG9pbnRzXCI7XG5pbXBvcnQgT21uaWNoYW5uZWxIVFRQSGVhZGVycyBmcm9tIFwiLi9Db21tb24vT21uaWNoYW5uZWxIVFRQSGVhZGVyc1wiO1xuaW1wb3J0IFF1ZXVlQXZhaWxhYmlsaXR5IGZyb20gXCIuL01vZGVsL1F1ZXVlQXZhaWxhYmlsaXR5XCI7XG5pbXBvcnQgUmVjb25uZWN0QXZhaWxhYmlsaXR5IGZyb20gXCIuL01vZGVsL1JlY29ubmVjdEF2YWlsYWJpbGl0eVwiO1xuaW1wb3J0IFJlY29ubmVjdE1hcHBpbmdSZWNvcmQgZnJvbSBcIi4vTW9kZWwvUmVjb25uZWN0TWFwcGluZ1JlY29yZFwiO1xuaW1wb3J0IHsgU3RyaW5nTWFwIH0gZnJvbSBcIi4vQ29tbW9uL01hcHBpbmdzXCI7XG5pbXBvcnQgeyBUaW1lciB9IGZyb20gXCIuL1V0aWxzL1RpbWVyXCI7XG5pbXBvcnQgYXhpb3NSZXRyeSBmcm9tIFwiLi9VdGlscy9heGlvc1JldHJ5XCI7XG5pbXBvcnQgeyB1dWlkdjQgfSBmcm9tIFwiLi9VdGlscy91dWlkXCI7XG5pbXBvcnQgKiBhcyBoYXNoIGZyb20gXCJjcnlwdG9cIjtcbmltcG9ydCB7IEN1c3RvbUNvbnRleHREYXRhIH0gZnJvbSBcIi4vVXRpbHMvQ3VzdG9tQ29udGV4dERhdGFcIjtcbmltcG9ydCB7IFJlcXVlc3RUaW1lb3V0Q29uZmlnIH0gZnJvbSBcIi4vQ29tbW9uL1JlcXVlc3RUaW1lb3V0Q29uZmlnXCI7XG5pbXBvcnQgdGhyb3dDbGllbnRIVFRQVGltZW91dEVycm9yIGZyb20gXCIuL1V0aWxzL3Rocm93Q2xpZW50SFRUUEVycm9yXCI7XG5pbXBvcnQgc2Vzc2lvbkluaXRSZXRyeUhhbmRsZXIgZnJvbSBcIi4vVXRpbHMvU2Vzc2lvbkluaXRSZXRyeUhhbmRsZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU0RLIGltcGxlbWVudHMgSVNESyB7XG4gIHByaXZhdGUgc3RhdGljIGRlZmF1bHRSZXF1ZXN0VGltZW91dENvbmZpZzogUmVxdWVzdFRpbWVvdXRDb25maWcgPSB7XG4gICAgZ2V0Q2hhdENvbmZpZzogMzAwMDAsXG4gICAgZ2V0TFdJRGV0YWlsczogMTUwMDAsXG4gICAgZ2V0Q2hhdFRva2VuOiAxNTAwMCxcbiAgICBzZXNzaW9uSW5pdDogMTUwMDAsXG4gICAgc2Vzc2lvbkNsb3NlOiAxNTAwMCxcbiAgICBnZXRSZWNvbm5lY3RhYmxlQ2hhdHM6IDE1MDAwLFxuICAgIGdldFJlY29ubmVjdEF2YWlsYWJpbGl0eTogMTUwMDAsXG4gICAgc3VibWl0UG9zdENoYXRSZXNwb25zZTogMTUwMDAsXG4gICAgZ2V0U3VydmV5SW52aXRlTGluazogMTUwMDAsXG4gICAgZ2V0Q2hhdFRyYW5zY3JpcHRzOiAzMDAwMCxcbiAgICBlbWFpbFRyYW5zY3JpcHQ6IDUwMDAsXG4gICAgZmV0Y2hEYXRhTWFza2luZ0luZm86IDUwMDAsXG4gICAgbWFrZVNlY29uZGFyeUNoYW5uZWxFdmVudFJlcXVlc3Q6IDE1MDAwLFxuICAgIGdldEFnZW50QXZhaWxhYmlsaXR5OiAxNTAwMCxcbiAgICBzZW5kVHlwaW5nSW5kaWNhdG9yOiA1MDAwLFxuICAgIHZhbGlkYXRlQXV0aENoYXRSZWNvcmRUaW1lb3V0OiAxNTAwMFxuICB9O1xuXG4gIHByaXZhdGUgc3RhdGljIGRlZmF1bHRDb25maWd1cmF0aW9uOiBJU0RLQ29uZmlndXJhdGlvbiA9IHtcbiAgICBhdXRoQ29kZU5vbmNlOiB1dWlkdjQoKS5zdWJzdHJpbmcoMCwgOCksXG4gICAgZ2V0Q2hhdFRva2VuUmV0cnlDb3VudDogMTAsXG4gICAgZ2V0Q2hhdFRva2VuVGltZUJldHdlZW5SZXRyaWVzT25GYWlsdXJlOiAxMDAwMCxcbiAgICBnZXRDaGF0VG9rZW5SZXRyeU9uNDI5OiBmYWxzZSxcbiAgICBtYXhSZXF1ZXN0UmV0cmllc09uRmFpbHVyZTogMyxcbiAgICBkZWZhdWx0UmVxdWVzdFRpbWVvdXQ6IHVuZGVmaW5lZCxcbiAgICByZXF1ZXN0VGltZW91dENvbmZpZzogU0RLLmRlZmF1bHRSZXF1ZXN0VGltZW91dENvbmZpZ1xuICB9O1xuXG4gIGxpdmVDaGF0VmVyc2lvbjogbnVtYmVyO1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIG9tbmljaGFubmVsQ29uZmlndXJhdGlvbjogSU9tbmljaGFubmVsQ29uZmlndXJhdGlvbiwgcHJpdmF0ZSBjb25maWd1cmF0aW9uOiBJU0RLQ29uZmlndXJhdGlvbiA9IFNESy5kZWZhdWx0Q29uZmlndXJhdGlvbiwgcHJpdmF0ZSBsb2dnZXI/OiBPQ1NES0xvZ2dlcikge1xuICAgIC8vIFNldHMgdG8gZGVmYXVsdCBjb25maWd1cmF0aW9uIGlmIHBhc3NlZCBjb25maWd1cmF0aW9uIGlzIGVtcHR5IG9yIGlzIG5vdCBhbiBvYmplY3RcbiAgICBpZiAoIU9iamVjdC5rZXlzKHRoaXMuY29uZmlndXJhdGlvbikubGVuZ3RoIHx8IHR5cGVvZiAoY29uZmlndXJhdGlvbikgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgIHRoaXMuY29uZmlndXJhdGlvbiA9IFNESy5kZWZhdWx0Q29uZmlndXJhdGlvbjtcbiAgICB9XG5cbiAgICAvLyBWYWxpZGF0ZSBTREsgY29uZmlnXG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoU0RLLmRlZmF1bHRDb25maWd1cmF0aW9uKSkge1xuICAgICAgaWYgKCF0aGlzLmNvbmZpZ3VyYXRpb24uaGFzT3duUHJvcGVydHkoa2V5KSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgICAgICB0aGlzLmNvbmZpZ3VyYXRpb25bYCR7a2V5fWBdID0gU0RLLmRlZmF1bHRDb25maWd1cmF0aW9uW2Ake2tleX1gXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBWYWxpZGF0ZSBpbmRpdmlkdWFsIGVuZHBvaW50VGltZW91dCBjb25maWdcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhTREsuZGVmYXVsdENvbmZpZ3VyYXRpb25bXCJyZXF1ZXN0VGltZW91dENvbmZpZ1wiXSkpIHtcbiAgICAgIGlmICghdGhpcy5jb25maWd1cmF0aW9uW1wicmVxdWVzdFRpbWVvdXRDb25maWdcIl0uaGFzT3duUHJvcGVydHkoa2V5KSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgICAgICB0aGlzLmNvbmZpZ3VyYXRpb25bXCJyZXF1ZXN0VGltZW91dENvbmZpZ1wiXVtgJHtrZXl9YF0gPSBTREsuZGVmYXVsdENvbmZpZ3VyYXRpb25bXCJyZXF1ZXN0VGltZW91dENvbmZpZ1wiXVtgJHtrZXl9YF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVmFsaWRhdGUgY2hhbm5lbElkXG4gICAgY29uc3QgeyBjaGFubmVsSWQgfSA9IG9tbmljaGFubmVsQ29uZmlndXJhdGlvbjtcbiAgICBpZiAoIU9iamVjdC52YWx1ZXMoQ2hhbm5lbElkKS5pbmNsdWRlcyhjaGFubmVsSWQgYXMgQ2hhbm5lbElkKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGNoYW5uZWxJZGApO1xuICAgIH1cblxuICAgIC8vIFZhbGlkYXRlIE9DIGNvbmZpZ1xuICAgIGNvbnN0IGN1cnJlbnRPbW5pY2hhbm5lbENvbmZpZ3VyYXRpb25QYXJhbWV0ZXJzID0gT2JqZWN0LmtleXMob21uaWNoYW5uZWxDb25maWd1cmF0aW9uKTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBDb25zdGFudHMucmVxdWlyZWRPbW5pY2hhbm5lbENvbmZpZ3VyYXRpb25QYXJhbWV0ZXJzKSB7XG4gICAgICBpZiAoIWN1cnJlbnRPbW5pY2hhbm5lbENvbmZpZ3VyYXRpb25QYXJhbWV0ZXJzLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNaXNzaW5nICcke2tleX0nIGluIE9tbmljaGFubmVsQ29uZmlndXJhdGlvbmApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGl2ZUNoYXRWZXJzaW9uID0gTGl2ZUNoYXRWZXJzaW9uLlYyO1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoZXMgY2hhdCBjb25maWcuXG4gICAqIEBwYXJhbSByZXF1ZXN0SWQ6IFJlcXVlc3RJZCB0byB1c2UgdG8gZ2V0IGNoYXQgY29uZmlnIChPcHRpb25hbCkuXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgZ2V0Q2hhdENvbmZpZyhyZXF1ZXN0SWQ6IHN0cmluZywgYnlwYXNzQ2FjaGUgPSBmYWxzZSk6IFByb21pc2U8b2JqZWN0PiB7XG4gICAgY29uc3QgdGltZXIgPSBUaW1lci5USU1FUigpO1xuICAgIHRoaXMubG9nV2l0aExvZ2dlcihMb2dMZXZlbC5JTkZPLCBPQ1NES1RlbGVtZXRyeUV2ZW50LkdFVENIQVRDT05GSUcsIFwiR2V0IENoYXQgY29uZmlnIHN0YXJ0ZWRcIiwgcmVxdWVzdElkKTtcbiAgICBpZiAoIXJlcXVlc3RJZCkge1xuICAgICAgcmVxdWVzdElkID0gdXVpZHY0KCk7XG4gICAgfVxuXG4gICAgY29uc3QgcmVxdWVzdFBhdGggPSBgLyR7T21uaWNoYW5uZWxFbmRwb2ludHMuTGl2ZUNoYXRDb25maWdQYXRofS8ke3RoaXMub21uaWNoYW5uZWxDb25maWd1cmF0aW9uLm9yZ0lkfS8ke3RoaXMub21uaWNoYW5uZWxDb25maWd1cmF0aW9uLndpZGdldElkfT9yZXF1ZXN0SWQ9JHtyZXF1ZXN0SWR9JmNoYW5uZWxJZD0ke3RoaXMub21uaWNoYW5uZWxDb25maWd1cmF0aW9uLmNoYW5uZWxJZH1gO1xuICAgIGNvbnN0IG1ldGhvZCA9IFwiR0VUXCI7XG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5vbW5pY2hhbm5lbENvbmZpZ3VyYXRpb24ub3JnVXJsfSR7cmVxdWVzdFBhdGh9YDtcbiAgICBjb25zdCBheGlvc0luc3RhbmNlID0gYXhpb3MuY3JlYXRlKCk7XG4gICAgYXhpb3NSZXRyeShheGlvc0luc3RhbmNlLCB7IHJldHJpZXM6IHRoaXMuY29uZmlndXJhdGlvbi5tYXhSZXF1ZXN0UmV0cmllc09uRmFpbHVyZSB9KTtcblxuICAgIGxldCBoZWFkZXJzID0ge307XG4gICAgaWYgKGJ5cGFzc0NhY2hlKSB7XG4gICAgICBoZWFkZXJzID0geyAuLi5Db25zdGFudHMuYnlwYXNzQ2FjaGVIZWFkZXJzLCAuLi5oZWFkZXJzIH07XG4gICAgfVxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3NJbnN0YW5jZS5nZXQodXJsLCB7XG4gICAgICBoZWFkZXJzLFxuICAgICAgdGltZW91dDogdGhpcy5jb25maWd1cmF0aW9uLmRlZmF1bHRSZXF1ZXN0VGltZW91dCA/PyB0aGlzLmNvbmZpZ3VyYXRpb24ucmVxdWVzdFRpbWVvdXRDb25maWcuZ2V0Q2hhdENvbmZpZ1xuICAgIH0pO1xuICAgIGNvbnN0IGVsYXBzZWRUaW1lSW5NaWxsaXNlY29uZHMgPSB0aW1lci5taWxsaVNlY29uZHNFbGFwc2VkO1xuICAgIGNvbnN0IHsgZGF0YSB9ID0gcmVzcG9uc2U7XG5cbiAgICBpZiAoZGF0YS5MaXZlQ2hhdFZlcnNpb24pIHtcbiAgICAgIHRoaXMubGl2ZUNoYXRWZXJzaW9uID0gZGF0YS5MaXZlQ2hhdFZlcnNpb247XG4gICAgfVxuXG4gICAgZGF0YS5oZWFkZXJzID0ge307XG4gICAgaWYgKHJlc3BvbnNlLmhlYWRlcnMgJiYgcmVzcG9uc2UuaGVhZGVyc1tcImRhdGVcIl0pIHtcbiAgICAgIGRhdGEuaGVhZGVyc1tcImRhdGVcIl0gPSByZXNwb25zZS5oZWFkZXJzW1wiZGF0ZVwiXTtcbiAgICB9XG4gICAgdGhpcy5sb2dXaXRoTG9nZ2VyKExvZ0xldmVsLklORk8sIE9DU0RLVGVsZW1ldHJ5RXZlbnQuR0VUQ0hBVENPTkZJR1NVQ0NFU1MsIFwiR2V0IENoYXQgY29uZmlnIHN1Y2NlZWRlZFwiLCByZXF1ZXN0SWQsIHJlc3BvbnNlLCBlbGFwc2VkVGltZUluTWlsbGlzZWNvbmRzLFxuICAgICAgcmVxdWVzdFBhdGgsIG1ldGhvZCk7XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaGVzIExXSSBkZXRhaWxzLlxuICAgKiBAcGFyYW0gcmVxdWVzdElkOiBSZXF1ZXN0SWQgdG8gdXNlIHRvIGdldCBjaGF0IGNvbmZpZyAoT3B0aW9uYWwpLlxuICAgKiBAcGFyYW0gZ2V0TFdJRGV0YWlsc09wdGlvbmFsUGFyYW1zOiBPcHRpb25hbCBwYXJhbWV0ZXJzIGZvciBnZXQgTFdJIERldGFpbHMuXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgZ2V0TFdJRGV0YWlscyhyZXF1ZXN0SWQ6IHN0cmluZywgZ2V0TFdJRGV0YWlsc09wdGlvbmFsUGFyYW1zOiBJR2V0TFdJRGV0YWlsc09wdGlvbmFsUGFyYW1zID0ge30pOiBQcm9taXNlPG9iamVjdD4ge1xuICAgIGNvbnN0IHRpbWVyID0gVGltZXIuVElNRVIoKTtcbiAgICB0aGlzLmxvZ1dpdGhMb2dnZXIoTG9nTGV2ZWwuSU5GTywgT0NTREtUZWxlbWV0cnlFdmVudC5HRVRMV0lTVEFUVVNTVEFSVEVELCBcIkdldCBMV0kgRGV0YWlscyBTdGFydGVkXCIsIHJlcXVlc3RJZCk7XG5cbiAgICBpZiAoIXJlcXVlc3RJZCkge1xuICAgICAgcmVxdWVzdElkID0gdXVpZHY0KCk7XG4gICAgfVxuXG4gICAgLy8gY29uc3RydWN0IGEgZW5kcG9pbnQgZm9yIGFub255bW91cyBjaGF0cyB0byBnZXQgTFdJIERldGFpbHNcbiAgICBsZXQgcmVxdWVzdFBhdGggPSBgLyR7T21uaWNoYW5uZWxFbmRwb2ludHMuTGl2ZUNoYXRMaXZlV29ya0l0ZW1EZXRhaWxzUGF0aH0vJHt0aGlzLm9tbmljaGFubmVsQ29uZmlndXJhdGlvbi5vcmdJZH0vJHt0aGlzLm9tbmljaGFubmVsQ29uZmlndXJhdGlvbi53aWRnZXRJZH0vJHtyZXF1ZXN0SWR9YDtcbiAgICBjb25zdCBheGlvc0luc3RhbmNlID0gYXhpb3MuY3JlYXRlKCk7XG4gICAgYXhpb3NSZXRyeShheGlvc0luc3RhbmNlLCB7IGhlYWRlck92ZXJ3cml0ZXM6IFtPbW5pY2hhbm5lbEhUVFBIZWFkZXJzLmF1dGhDb2RlTm9uY2VdLCByZXRyaWVzOiB0aGlzLmNvbmZpZ3VyYXRpb24ubWF4UmVxdWVzdFJldHJpZXNPbkZhaWx1cmUgfSk7XG5cbiAgICAvLyBFeHRyYWN0IGF1dGggdG9rZW4gYW5kIHJlY29ubmVjdCBpZCBmcm9tIG9wdGlvbmFsIHBhcmFtXG4gICAgY29uc3QgeyBhdXRoZW50aWNhdGVkVXNlclRva2VuLCByZWNvbm5lY3RJZCB9ID0gZ2V0TFdJRGV0YWlsc09wdGlvbmFsUGFyYW1zO1xuICAgIGNvbnN0IGhlYWRlcnM6IFN0cmluZ01hcCA9IENvbnN0YW50cy5kZWZhdWx0SGVhZGVycztcblxuICAgIC8vIHVwZGF0ZWQgYXV0aCBlbmRwb2ludCBmb3IgYXV0aGVudGljYXRlZCBjaGF0cyBhbmQgYWRkIGF1dGggdG9rZW4gaW4gaGVhZGVyXG4gICAgaWYgKGF1dGhlbnRpY2F0ZWRVc2VyVG9rZW4pIHtcbiAgICAgIHJlcXVlc3RQYXRoID0gYC8ke09tbmljaGFubmVsRW5kcG9pbnRzLkxpdmVDaGF0QXV0aExpdmVXb3JrSXRlbURldGFpbHNQYXRofS8ke3RoaXMub21uaWNoYW5uZWxDb25maWd1cmF0aW9uLm9yZ0lkfS8ke3RoaXMub21uaWNoYW5uZWxDb25maWd1cmF0aW9uLndpZGdldElkfS8ke3JlcXVlc3RJZH1gO1xuICAgICAgaGVhZGVyc1tPbW5pY2hhbm5lbEhUVFBIZWFkZXJzLmF1dGhlbnRpY2F0ZWRVc2VyVG9rZW5dID0gYXV0aGVudGljYXRlZFVzZXJUb2tlbjtcbiAgICAgIGhlYWRlcnNbT21uaWNoYW5uZWxIVFRQSGVhZGVycy5hdXRoQ29kZU5vbmNlXSA9IHRoaXMuY29uZmlndXJhdGlvbi5hdXRoQ29kZU5vbmNlO1xuICAgIH1cblxuICAgIC8vIEFwcGVuZCByZWNvbm5lY3QgaWQgb24gdGhlIGVuZHBvaW50IGlmIHZhaWxhYmxlXG4gICAgaWYgKHJlY29ubmVjdElkKSB7XG4gICAgICByZXF1ZXN0UGF0aCArPSBgLyR7cmVjb25uZWN0SWR9YDtcbiAgICB9XG4gICAgcmVxdWVzdFBhdGggKz0gYD9jaGFubmVsSWQ9JHt0aGlzLm9tbmljaGFubmVsQ29uZmlndXJhdGlvbi5jaGFubmVsSWR9YDtcblxuICAgIGNvbnN0IHVybCA9IGAke3RoaXMub21uaWNoYW5uZWxDb25maWd1cmF0aW9uLm9yZ1VybH0ke3JlcXVlc3RQYXRofWA7XG4gICAgY29uc3QgbWV0aG9kID0gXCJHRVRcIjtcbiAgICBjb25zdCBvcHRpb25zOiBBeGlvc1JlcXVlc3RDb25maWcgPSB7XG4gICAgICBoZWFkZXJzLFxuICAgICAgbWV0aG9kLFxuICAgICAgdXJsLFxuICAgICAgdGltZW91dDogdGhpcy5jb25maWd1cmF0aW9uLmRlZmF1bHRSZXF1ZXN0VGltZW91dCA/PyB0aGlzLmNvbmZpZ3VyYXRpb24ucmVxdWVzdFRpbWVvdXRDb25maWcuZ2V0TFdJRGV0YWlsc1xuICAgIH07XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvc0luc3RhbmNlKG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBlbGFwc2VkVGltZUluTWlsbGlzZWNvbmRzID0gdGltZXIubWlsbGlTZWNvbmRzRWxhcHNlZDtcbiAgICAgICAgY29uc3QgeyBkYXRhLCBoZWFkZXJzIH0gPSByZXNwb25zZTtcbiAgICAgICAgdGhpcy5zZXRBdXRoQ29kZU5vbmNlKGhlYWRlcnMpO1xuXG4gICAgICAgIHRoaXMubG9nV2l0aExvZ2dlcihMb2dMZXZlbC5JTkZPLCBPQ1NES1RlbGVtZXRyeUV2ZW50LkdFVExXSVNUQVRVU1NVQ0NFRURFRCwgXCJHZXQgTFdJIERldGFpbHMgc3VjY2VlZGVkXCIsIHJlcXVlc3RJZCwgcmVzcG9uc2UsIGVsYXBzZWRUaW1lSW5NaWxsaXNlY29uZHMsIHJlcXVlc3RQYXRoLCBtZXRob2QpO1xuICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc3QgZWxhcHNlZFRpbWVJbk1pbGxpc2Vjb25kcyA9IHRpbWVyLm1pbGxpU2Vjb25kc0VsYXBzZWQ7XG4gICAgICAgIHRoaXMubG9nV2l0aExvZ2dlcihMb2dMZXZlbC5FUlJPUiwgT0NTREtUZWxlbWV0cnlFdmVudC5HRVRMV0lTVEFUVVNGQUlMRUQsIFwiR2V0IExXSSBEZXRhaWxzIGZhaWxlZFwiLCByZXF1ZXN0SWQsIHVuZGVmaW5lZCwgZWxhcHNlZFRpbWVJbk1pbGxpc2Vjb25kcywgcmVxdWVzdFBhdGgsIG1ldGhvZCwgZXJyb3IpO1xuICAgICAgICBpZiAoZXJyb3IuY29kZSA9PT0gQ29uc3RhbnRzLmF4aW9zVGltZW91dEVycm9yQ29kZSkge1xuICAgICAgICAgIHRocm93Q2xpZW50SFRUUFRpbWVvdXRFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2hlcyB0aGUgY2hhdCB0b2tlbiBmcm9tIE9tbmljaGFubmVsIHRvIGpvaW4gVDEgdGhyZWFkLlxuICAgKiBAcGFyYW0gcmVxdWVzdElkOiBSZXF1ZXN0SWQgdG8gdXNlIGZvciBnZXRjaGF0dG9rZW4gKE9wdGlvbmFsKS5cbiAgICogQHBhcmFtIGdldENoYXRUb2tlbk9wdGlvbmFsUGFyYW1zOiBPcHRpb25hbCBwYXJhbWV0ZXJzIGZvciBnZXQgY2hhdCB0b2tlbi5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBnZXRDaGF0VG9rZW4ocmVxdWVzdElkOiBzdHJpbmcsIGdldENoYXRUb2tlbk9wdGlvbmFsUGFyYW1zOiBJR2V0Q2hhdFRva2VuT3B0aW9uYWxQYXJhbXMgPSB7fSwgY3VycmVudFJldHJ5Q291bnQ6IG51bWJlciA9IDApOiBQcm9taXNlPEZldGNoQ2hhdFRva2VuUmVzcG9uc2U+IHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8taW5mZXJyYWJsZS10eXBlc1xuICAgIGNvbnN0IHRpbWVyID0gVGltZXIuVElNRVIoKTtcbiAgICBjb25zdCB7IHJlY29ubmVjdElkLCBhdXRoZW50aWNhdGVkVXNlclRva2VuLCBjdXJyZW50TGl2ZUNoYXRWZXJzaW9uLCByZWZyZXNoVG9rZW4gfSA9IGdldENoYXRUb2tlbk9wdGlvbmFsUGFyYW1zO1xuICAgIHRoaXMubG9nV2l0aExvZ2dlcihMb2dMZXZlbC5JTkZPLCBPQ1NES1RlbGVtZXRyeUV2ZW50LkdFVENIQVRUT0tFTlNUQVJURUQsIFwiR2V0IENoYXQgVG9rZW4gU3RhcnRlZFwiLCByZXF1ZXN0SWQpO1xuXG4gICAgaWYgKGN1cnJlbnRSZXRyeUNvdW50IDwgMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGN1cnJlbnRSZXRyeUNvdW50YCk7XG4gICAgfVxuXG4gICAgaWYgKCFyZXF1ZXN0SWQpIHtcbiAgICAgIHJlcXVlc3RJZCA9IHV1aWR2NCgpO1xuICAgIH1cblxuICAgIGNvbnN0IGhlYWRlcnM6IFN0cmluZ01hcCA9IENvbnN0YW50cy5kZWZhdWx0SGVhZGVycztcblxuICAgIGNvbnN0IGVuZHBvaW50ID0gY3JlYXRlR2V0Q2hhdFRva2VuRW5kcG9pbnQoY3VycmVudExpdmVDaGF0VmVyc2lvbiBhcyBMaXZlQ2hhdFZlcnNpb24gfHwgdGhpcy5saXZlQ2hhdFZlcnNpb24sIGF1dGhlbnRpY2F0ZWRVc2VyVG9rZW4gPyB0cnVlIDogZmFsc2UpO1xuXG4gICAgaWYgKGF1dGhlbnRpY2F0ZWRVc2VyVG9rZW4pIHtcbiAgICAgIGhlYWRlcnNbT21uaWNoYW5uZWxIVFRQSGVhZGVycy5hdXRoZW50aWNhdGVkVXNlclRva2VuXSA9IGF1dGhlbnRpY2F0ZWRVc2VyVG9rZW47XG4gICAgICBoZWFkZXJzW09tbmljaGFubmVsSFRUUEhlYWRlcnMuYXV0aENvZGVOb25jZV0gPSB0aGlzLmNvbmZpZ3VyYXRpb24uYXV0aENvZGVOb25jZTtcbiAgICB9XG5cbiAgICBsZXQgcmVxdWVzdFBhdGggPSBgLyR7ZW5kcG9pbnR9LyR7dGhpcy5vbW5pY2hhbm5lbENvbmZpZ3VyYXRpb24ub3JnSWR9LyR7dGhpcy5vbW5pY2hhbm5lbENvbmZpZ3VyYXRpb24ud2lkZ2V0SWR9LyR7cmVxdWVzdElkfWA7XG5cbiAgICBpZiAocmVjb25uZWN0SWQpIHtcbiAgICAgIHJlcXVlc3RQYXRoICs9IGAvJHtyZWNvbm5lY3RJZH1gO1xuICAgIH1cblxuICAgIGxldCBxdWVyeVBhcmFtcyA9IGBjaGFubmVsSWQ9JHt0aGlzLm9tbmljaGFubmVsQ29uZmlndXJhdGlvbi5jaGFubmVsSWR9YDtcblxuICAgIGlmIChyZWZyZXNoVG9rZW4pIHtcbiAgICAgIHF1ZXJ5UGFyYW1zICs9IGAmcmVmcmVzaFRva2VuPXRydWVgO1xuICAgIH1cblxuICAgIHJlcXVlc3RQYXRoICs9IGA/JHtxdWVyeVBhcmFtc31gO1xuXG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5vbW5pY2hhbm5lbENvbmZpZ3VyYXRpb24ub3JnVXJsfSR7cmVxdWVzdFBhdGh9YDtcbiAgICBjb25zdCBtZXRob2QgPSBcIkdFVFwiO1xuICAgIGNvbnN0IG9wdGlvbnM6IEF4aW9zUmVxdWVzdENvbmZpZyA9IHtcbiAgICAgIGhlYWRlcnMsXG4gICAgICBtZXRob2QsXG4gICAgICB1cmwsXG4gICAgICB0aW1lb3V0OiB0aGlzLmNvbmZpZ3VyYXRpb24uZGVmYXVsdFJlcXVlc3RUaW1lb3V0ID8/IHRoaXMuY29uZmlndXJhdGlvbi5yZXF1ZXN0VGltZW91dENvbmZpZy5nZXRDaGF0VG9rZW5cbiAgICB9O1xuXG4gICAgY29uc3QgYXhpb3NJbnN0YW5jZSA9IGF4aW9zLmNyZWF0ZSgpO1xuICAgIGF4aW9zUmV0cnkoYXhpb3NJbnN0YW5jZSwgeyBoZWFkZXJPdmVyd3JpdGVzOiBbT21uaWNoYW5uZWxIVFRQSGVhZGVycy5hdXRoQ29kZU5vbmNlXSwgcmV0cmllczogdGhpcy5jb25maWd1cmF0aW9uLm1heFJlcXVlc3RSZXRyaWVzT25GYWlsdXJlLCByZXRyeU9uNDI5OiB0aGlzLmNvbmZpZ3VyYXRpb24uZ2V0Q2hhdFRva2VuUmV0cnlPbjQyOSB9KTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBsZXQgZ2V0Q2hhdFRva2VuRXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zSW5zdGFuY2Uob3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGVsYXBzZWRUaW1lSW5NaWxsaXNlY29uZHMgPSB0aW1lci5taWxsaVNlY29uZHNFbGFwc2VkO1xuICAgICAgICBjb25zdCB7IGRhdGEsIGhlYWRlcnMgfSA9IHJlc3BvbnNlO1xuICAgICAgICB0aGlzLnNldEF1dGhDb2RlTm9uY2UoaGVhZGVycyk7XG5cbiAgICAgICAgLy8gUmVzb2x2ZXMgb25seSBpZiBpdCBjb250YWlucyBjaGF0IHRva2VuIHJlc3BvbnNlIHdoaWNoIG9ubHkgaGFwcGVucyBvbiBzdGF0dXMgMjAwXG4gICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgZGF0YS5yZXF1ZXN0SWQgPSByZXF1ZXN0SWQ7XG5cbiAgICAgICAgICB0aGlzLmxvZ1dpdGhMb2dnZXIoTG9nTGV2ZWwuSU5GTywgT0NTREtUZWxlbWV0cnlFdmVudC5HRVRDSEFUVE9LRU5TVUNDRUVERUQsIFwiR2V0IENoYXQgVG9rZW4gc3VjY2VlZGVkXCIsIHJlcXVlc3RJZCwgcmVzcG9uc2UsIGVsYXBzZWRUaW1lSW5NaWxsaXNlY29uZHMsIHJlcXVlc3RQYXRoLCBtZXRob2QpO1xuXG4gICAgICAgICAgcmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBObyBjb250ZW50IGZvciByZWNvbm5lY3QgY2hhdCBjYXNlIHNob3VsZG4ndCBiZSByZXRyaWVkLlxuICAgICAgICBpZiAocmVjb25uZWN0SWQgJiYgcmVzcG9uc2Uuc3RhdHVzID09PSBDb25zdGFudHMubm9Db250ZW50U3RhdHVzQ29kZSkge1xuICAgICAgICAgIHJlamVjdChyZXNwb25zZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnN0IGVsYXBzZWRUaW1lSW5NaWxsaXNlY29uZHMgPSB0aW1lci5taWxsaVNlY29uZHNFbGFwc2VkO1xuICAgICAgICB0aGlzLmxvZ1dpdGhMb2dnZXIoTG9nTGV2ZWwuRVJST1IsIE9DU0RLVGVsZW1ldHJ5RXZlbnQuR0VUQ0hBVFRPS0VORkFJTEVELCBcIkdldCBDaGF0IFRva2VuIGZhaWxlZFwiLCByZXF1ZXN0SWQsIHVuZGVmaW5lZCwgZWxhcHNlZFRpbWVJbk1pbGxpc2Vjb25kcywgcmVxdWVzdFBhdGgsIG1ldGhvZCwgZXJyb3IpO1xuICAgICAgICBnZXRDaGF0VG9rZW5FcnJvciA9IGVycm9yO1xuXG4gICAgICAgIC8vIFN0b3AgcmV0cnkgb24gNDI5XG4gICAgICAgIGlmICgoZXJyb3IgYXMgYW55KS5yZXNwb25zZT8uc3RhdHVzID09PSBDb25zdGFudHMudG9vTWFueVJlcXVlc3RzU3RhdHVzQ29kZSAmJiAhdGhpcy5jb25maWd1cmF0aW9uLmdldENoYXRUb2tlblJldHJ5T240MjkpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBObyByZXR1cm4vcmVqZWN0IHRvIHJlY3Vyc2l2ZWx5IHJldHJ5IG9uIGZhaWx1cmVzIHVwIHRvIGNoYXQgdG9rZW4gcmV0cnkgY291bnQgbGltaXRcbiAgICAgIH1cblxuICAgICAgLy8gQmFzZSBjYXNlXG4gICAgICBpZiAoY3VycmVudFJldHJ5Q291bnQgKyAxID49IHRoaXMuY29uZmlndXJhdGlvbi5nZXRDaGF0VG9rZW5SZXRyeUNvdW50KSB7XG4gICAgICAgIGlmIChnZXRDaGF0VG9rZW5FcnJvciAmJiBnZXRDaGF0VG9rZW5FcnJvci5jb2RlID09IENvbnN0YW50cy5heGlvc1RpbWVvdXRFcnJvckNvZGUpIHtcbiAgICAgICAgICB0aHJvd0NsaWVudEhUVFBUaW1lb3V0RXJyb3IoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QoZ2V0Q2hhdFRva2VuRXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUmV0cmllcyB1bnRpbCBpdCByZWFjaGVzIGl0cyBsaW1pdFxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuZ2V0Q2hhdFRva2VuKHJlcXVlc3RJZCwgZ2V0Q2hhdFRva2VuT3B0aW9uYWxQYXJhbXMsIGN1cnJlbnRSZXRyeUNvdW50ICsgMSkudGhlbigocmVzcG9uc2UpID0+IHJlc29sdmUocmVzcG9uc2UpKS5jYXRjaCgoZXJyb3IpID0+IHJlamVjdChlcnJvcikpO1xuICAgICAgfSwgdGhpcy5jb25maWd1cmF0aW9uLmdldENoYXRUb2tlblRpbWVCZXR3ZWVuUmV0cmllc09uRmFpbHVyZSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2hlcyB0aGUgcmVjb25uZWN0YWJsZSBjaGF0cyBmcm9tIG9tbmljaGFubmVsIGZyb20gdGhlIGdpdmVuIHVzZXIgaW5mb3JtYXRpb24gaW4gSldUIHRva2VuKGNsYWltIG5hbWU6IHN1YikuXG4gICAqIEBwYXJhbSByZWNvbm5lY3RhYmxlQ2hhdHNQYXJhbXMgTWFuZGF0ZSBwYXJhbWV0ZXJzIGZvciBnZXQgcmVjb25uZWN0YWJsZSBjaGF0cy5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBnZXRSZWNvbm5lY3RhYmxlQ2hhdHMocmVjb25uZWN0YWJsZUNoYXRzUGFyYW1zOiBJUmVjb25uZWN0YWJsZUNoYXRzUGFyYW1zKTogUHJvbWlzZTxSZWNvbm5lY3RNYXBwaW5nUmVjb3JkPiB7XG4gICAgY29uc3QgdGltZXIgPSBUaW1lci5USU1FUigpO1xuICAgIGNvbnN0IHsgYXV0aGVudGljYXRlZFVzZXJUb2tlbiB9ID0gcmVjb25uZWN0YWJsZUNoYXRzUGFyYW1zO1xuICAgIHRoaXMubG9nV2l0aExvZ2dlcihMb2dMZXZlbC5JTkZPLCBPQ1NES1RlbGVtZXRyeUV2ZW50LkdFVFJFQ09OTkVDVEFCTEVDSEFUUywgXCJHZXQgUmVjb25uZWN0YWJsZSBjaGF0IFN0YXJ0ZWRcIik7XG5cbiAgICBjb25zdCByZXF1ZXN0UGF0aCA9IGAvJHtPbW5pY2hhbm5lbEVuZHBvaW50cy5MaXZlQ2hhdEdldFJlY29ubmVjdGFibGVDaGF0c1BhdGh9LyR7dGhpcy5vbW5pY2hhbm5lbENvbmZpZ3VyYXRpb24ub3JnSWR9LyR7dGhpcy5vbW5pY2hhbm5lbENvbmZpZ3VyYXRpb24ud2lkZ2V0SWR9LyR7dGhpcy5vbW5pY2hhbm5lbENvbmZpZ3VyYXRpb24ub3JnSWR9P2NoYW5uZWxJZD0ke3RoaXMub21uaWNoYW5uZWxDb25maWd1cmF0aW9uLmNoYW5uZWxJZH1gO1xuICAgIGNvbnN0IGhlYWRlcnM6IFN0cmluZ01hcCA9IENvbnN0YW50cy5kZWZhdWx0SGVhZGVycztcbiAgICBoZWFkZXJzW09tbmljaGFubmVsSFRUUEhlYWRlcnMuYXV0aGVudGljYXRlZFVzZXJUb2tlbl0gPSBhdXRoZW50aWNhdGVkVXNlclRva2VuO1xuICAgIGhlYWRlcnNbT21uaWNoYW5uZWxIVFRQSGVhZGVycy5hdXRoQ29kZU5vbmNlXSA9IHRoaXMuY29uZmlndXJhdGlvbi5hdXRoQ29kZU5vbmNlO1xuXG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5vbW5pY2hhbm5lbENvbmZpZ3VyYXRpb24ub3JnVXJsfSR7cmVxdWVzdFBhdGh9YDtcbiAgICBjb25zdCBtZXRob2QgPSBcIkdFVFwiO1xuICAgIGNvbnN0IG9wdGlvbnM6IEF4aW9zUmVxdWVzdENvbmZpZyA9IHtcbiAgICAgIGhlYWRlcnMsXG4gICAgICBtZXRob2QsXG4gICAgICB1cmwsXG4gICAgICB0aW1lb3V0OiB0aGlzLmNvbmZpZ3VyYXRpb24uZGVmYXVsdFJlcXVlc3RUaW1lb3V0ID8/IHRoaXMuY29uZmlndXJhdGlvbi5yZXF1ZXN0VGltZW91dENvbmZpZy5nZXRSZWNvbm5lY3RhYmxlQ2hhdHNcbiAgICB9O1xuXG4gICAgY29uc3QgYXhpb3NJbnN0YW5jZSA9IGF4aW9zLmNyZWF0ZSgpO1xuXG4gICAgY29uc3QgcmVxdWVzdElkID0gdGhpcy5vbW5pY2hhbm5lbENvbmZpZ3VyYXRpb24ub3JnSWQ7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvc0luc3RhbmNlKG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBlbGFwc2VkVGltZUluTWlsbGlzZWNvbmRzID0gdGltZXIubWlsbGlTZWNvbmRzRWxhcHNlZDtcbiAgICAgICAgY29uc3QgeyBkYXRhLCBoZWFkZXJzIH0gPSByZXNwb25zZTtcbiAgICAgICAgdGhpcy5zZXRBdXRoQ29kZU5vbmNlKGhlYWRlcnMpO1xuXG4gICAgICAgIC8vIFJlc29sdmVzIG9ubHkgaWYgaXQgY29udGFpbnMgcmVjb25uZWN0YWJsZSBjaGF0cyByZXNwb25zZSB3aGljaCBvbmx5IGhhcHBlbnMgb24gc3RhdHVzIDIwMFxuICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgIHRoaXMubG9nV2l0aExvZ2dlcihMb2dMZXZlbC5JTkZPLCBPQ1NES1RlbGVtZXRyeUV2ZW50LkdFVFJFQ09OTkVDVEFCTEVDSEFUUywgXCJHZXQgUmVjb25uZWN0YWJsZSBDaGF0cyBTdWNjZWVkZWQgYW5kIG9sZCBzZXNzaW9uIHJldHVybmVkXCIsIHJlcXVlc3RJZCwgcmVzcG9uc2UsIGVsYXBzZWRUaW1lSW5NaWxsaXNlY29uZHMsIHJlcXVlc3RQYXRoLCBtZXRob2QpO1xuXG4gICAgICAgICAgcmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gTm8gZGF0YSBmb3VuZCBpbiB0aGUgb2xkIHNlc3Npb25zIHNvIHJldHVybmluZyBudWxsXG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc3QgZWxhcHNlZFRpbWVJbk1pbGxpc2Vjb25kcyA9IHRpbWVyLm1pbGxpU2Vjb25kc0VsYXBzZWQ7XG4gICAgICAgIHRoaXMubG9nV2l0aExvZ2dlcihMb2dMZXZlbC5FUlJPUiwgT0NTREtUZWxlbWV0cnlFdmVudC5HRVRSRUNPTk5FQ1RBQkxFQ0hBVFMsIFwiR2V0IFJlY29ubmVjdGFibGUgQ2hhdHMgZmFpbGVkXCIsIHJlcXVlc3RJZCwgdW5kZWZpbmVkLCBlbGFwc2VkVGltZUluTWlsbGlzZWNvbmRzLCByZXF1ZXN0UGF0aCwgbWV0aG9kLCBlcnJvcik7XG4gICAgICAgIGlmIChlcnJvci5jb2RlID09PSBDb25zdGFudHMuYXhpb3NUaW1lb3V0RXJyb3JDb2RlKSB7XG4gICAgICAgICAgdGhyb3dDbGllbnRIVFRQVGltZW91dEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gKiBGZXRjaGVzIHRoZSByZWNvbm5lY3RhYmxlIGNoYXRzIGZyb20gb21uaWNoYW5uZWwgZnJvbSB0aGUgZ2l2ZW4gdXNlciBpbmZvcm1hdGlvbiBpbiBKV1QgdG9rZW4oY2xhaW0gbmFtZTogc3ViKS5cbiAqIEBwYXJhbSByZWNvbm5lY3RhYmxlQ2hhdHNQYXJhbXMgTWFuZGF0ZSBwYXJhbWV0ZXJzIGZvciBnZXQgcmVjb25uZWN0YWJsZSBjaGF0cy5cbiAqL1xuICBwdWJsaWMgYXN5bmMgZ2V0UmVjb25uZWN0QXZhaWxhYmlsaXR5KHJlY29ubmVjdElkOiBzdHJpbmcpOiBQcm9taXNlPFJlY29ubmVjdEF2YWlsYWJpbGl0eT4ge1xuICAgIGNvbnN0IHRpbWVyID0gVGltZXIuVElNRVIoKTtcbiAgICB0aGlzLmxvZ1dpdGhMb2dnZXIoTG9nTGV2ZWwuSU5GTywgT0NTREtUZWxlbWV0cnlFdmVudC5HRVRSRUNPTk5FQ1RBVkFJTEFCSUxJVFksIFwiR2V0IFJlY29ubmVjdGFibGUgYXZhaWxhYmlsaXR5IFN0YXJ0ZWRcIik7XG5cbiAgICBjb25zdCByZXF1ZXN0UGF0aCA9IGAvJHtPbW5pY2hhbm5lbEVuZHBvaW50cy5MaXZlQ2hhdFJlY29ubmVjdEF2YWlsYWJpbGl0eVBhdGh9LyR7dGhpcy5vbW5pY2hhbm5lbENvbmZpZ3VyYXRpb24ub3JnSWR9LyR7dGhpcy5vbW5pY2hhbm5lbENvbmZpZ3VyYXRpb24ud2lkZ2V0SWR9LyR7cmVjb25uZWN0SWR9YDtcbiAgICBjb25zdCBoZWFkZXJzOiBTdHJpbmdNYXAgPSBDb25zdGFudHMuZGVmYXVsdEhlYWRlcnM7XG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5vbW5pY2hhbm5lbENvbmZpZ3VyYXRpb24ub3JnVXJsfSR7cmVxdWVzdFBhdGh9YDtcbiAgICBjb25zdCBtZXRob2QgPSBcIkdFVFwiO1xuICAgIGNvbnN0IG9wdGlvbnM6IEF4aW9zUmVxdWVzdENvbmZpZyA9IHtcbiAgICAgIGhlYWRlcnMsXG4gICAgICBtZXRob2QsXG4gICAgICB1cmwsXG4gICAgICB0aW1lb3V0OiB0aGlzLmNvbmZpZ3VyYXRpb24uZGVmYXVsdFJlcXVlc3RUaW1lb3V0ID8/IHRoaXMuY29uZmlndXJhdGlvbi5yZXF1ZXN0VGltZW91dENvbmZpZy5nZXRSZWNvbm5lY3RBdmFpbGFiaWxpdHlcbiAgICB9O1xuXG4gICAgY29uc3QgYXhpb3NJbnN0YW5jZSA9IGF4aW9zLmNyZWF0ZSgpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zSW5zdGFuY2Uob3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGVsYXBzZWRUaW1lSW5NaWxsaXNlY29uZHMgPSB0aW1lci5taWxsaVNlY29uZHNFbGFwc2VkO1xuICAgICAgICBjb25zdCB7IGRhdGEgfSA9IHJlc3BvbnNlO1xuICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgIHRoaXMubG9nV2l0aExvZ2dlcihMb2dMZXZlbC5JTkZPLCBPQ1NES1RlbGVtZXRyeUV2ZW50LkdFVFJFQ09OTkVDVEFWQUlMQUJJTElUWSwgXCJHZXQgUmVjb25uZWN0IGF2YWlsYWJpbGl0eSBzdWNjZWVkZWRcIiwgdW5kZWZpbmVkLCByZXNwb25zZSwgZWxhcHNlZFRpbWVJbk1pbGxpc2Vjb25kcywgcmVxdWVzdFBhdGgsIG1ldGhvZCk7XG5cbiAgICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBObyBkYXRhIGZvdW5kIHNvIHJldHVybmluZyBudWxsXG4gICAgICAgIHRoaXMubG9nV2l0aExvZ2dlcihMb2dMZXZlbC5XQVJOLCBPQ1NES1RlbGVtZXRyeUV2ZW50LkdFVFJFQ09OTkVDVEFWQUlMQUJJTElUWSwgXCJHZXQgUmVjb25uZWN0IGF2YWlsYWJpbGl0eSBkaWRuJ3Qgc2VuZCBhbnkgdmFsaWQgZGF0YVwiLCB1bmRlZmluZWQsIHJlc3BvbnNlLCBlbGFwc2VkVGltZUluTWlsbGlzZWNvbmRzLCByZXF1ZXN0UGF0aCwgbWV0aG9kKTtcblxuICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnN0IGVsYXBzZWRUaW1lSW5NaWxsaXNlY29uZHMgPSB0aW1lci5taWxsaVNlY29uZHNFbGFwc2VkO1xuICAgICAgICB0aGlzLmxvZ1dpdGhMb2dnZXIoTG9nTGV2ZWwuRVJST1IsIE9DU0RLVGVsZW1ldHJ5RXZlbnQuR0VUUkVDT05ORUNUQVZBSUxBQklMSVRZLCBcIkdldCBSZWNvbm5lY3QgQXZhaWxhYmlsaXR5IGZhaWxlZFwiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZWxhcHNlZFRpbWVJbk1pbGxpc2Vjb25kcywgcmVxdWVzdFBhdGgsIG1ldGhvZCwgZXJyb3IpO1xuICAgICAgICBpZiAoZXJyb3IuY29kZSA9PT0gQ29uc3RhbnRzLmF4aW9zVGltZW91dEVycm9yQ29kZSkge1xuICAgICAgICAgIHRocm93Q2xpZW50SFRUUFRpbWVvdXRFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gcmVxdWVzdElkOiBSZXF1ZXN0SWQgdG8gdXNlIGZvciBzZXNzaW9uIGluaXQuXG4gICAqIEBwYXJhbSBxdWV1ZUF2YWlsYWJpbGl0eU9wdGlvbmFsUGFyYW1zOiBPcHRpb25hbCBwYXJhbWV0ZXJzIGZvciBzZXNzaW9uIGluaXQuXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgZ2V0QWdlbnRBdmFpbGFiaWxpdHkocmVxdWVzdElkOiBzdHJpbmcsIHF1ZXVlQXZhaWxhYmlsaXR5T3B0aW9uYWxQYXJhbXM6IElHZXRRdWV1ZUF2YWlsYWJpbGl0eU9wdGlvbmFsUGFyYW1zID0ge30pOiBQcm9taXNlPFF1ZXVlQXZhaWxhYmlsaXR5PiB7XG4gICAgY29uc3QgdGltZXIgPSBUaW1lci5USU1FUigpO1xuICAgIHRoaXMubG9nV2l0aExvZ2dlcihMb2dMZXZlbC5JTkZPLCBPQ1NES1RlbGVtZXRyeUV2ZW50LkdFVEFHRU5UQVZBSUxBQklMSVRZU1RBUlRFRCwgXCJHZXQgYWdlbnQgYXZhaWxhYmlsaXR5IFN0YXJ0ZWRcIiwgcmVxdWVzdElkKTtcblxuICAgIGNvbnN0IHJlcXVlc3RQYXRoID0gYC8ke09tbmljaGFubmVsRW5kcG9pbnRzLkdldEFnZW50QXZhaWxhYmlsaXR5UGF0aH0vJHt0aGlzLm9tbmljaGFubmVsQ29uZmlndXJhdGlvbi5vcmdJZH0vJHt0aGlzLm9tbmljaGFubmVsQ29uZmlndXJhdGlvbi53aWRnZXRJZH0vJHtyZXF1ZXN0SWR9P2NoYW5uZWxJZD1sY3dgO1xuICAgIGNvbnN0IGF4aW9zSW5zdGFuY2UgPSBheGlvcy5jcmVhdGUoKTtcbiAgICBheGlvc1JldHJ5KGF4aW9zSW5zdGFuY2UsIHsgaGVhZGVyT3ZlcndyaXRlczogW09tbmljaGFubmVsSFRUUEhlYWRlcnMuYXV0aENvZGVOb25jZV0sIHJldHJpZXM6IHRoaXMuY29uZmlndXJhdGlvbi5tYXhSZXF1ZXN0UmV0cmllc09uRmFpbHVyZSB9KTtcblxuICAgIGNvbnN0IHsgYXV0aGVudGljYXRlZFVzZXJUb2tlbiwgaW5pdENvbnRleHQsIGdldENvbnRleHQgfSA9IHF1ZXVlQXZhaWxhYmlsaXR5T3B0aW9uYWxQYXJhbXM7XG5cbiAgICBjb25zdCBoZWFkZXJzOiBTdHJpbmdNYXAgPSBDb25zdGFudHMuZGVmYXVsdEhlYWRlcnM7XG5cbiAgICBpZiAoYXV0aGVudGljYXRlZFVzZXJUb2tlbikge1xuICAgICAgaGVhZGVyc1tPbW5pY2hhbm5lbEhUVFBIZWFkZXJzLmF1dGhlbnRpY2F0ZWRVc2VyVG9rZW5dID0gYXV0aGVudGljYXRlZFVzZXJUb2tlbjtcbiAgICAgIGhlYWRlcnNbT21uaWNoYW5uZWxIVFRQSGVhZGVycy5hdXRoQ29kZU5vbmNlXSA9IHRoaXMuY29uZmlndXJhdGlvbi5hdXRoQ29kZU5vbmNlO1xuICAgIH1cblxuICAgIGNvbnN0IGRhdGE6IEluaXRDb250ZXh0ID0gaW5pdENvbnRleHQgfHwge307XG5cbiAgICBjb25zdCBjYWNoT2JqID0ge1xuICAgICAgXCJvcmdJZFwiOiB0aGlzLm9tbmljaGFubmVsQ29uZmlndXJhdGlvbi5vcmdJZCxcbiAgICAgIFwid2lkZ2V0SWRcIjogdGhpcy5vbW5pY2hhbm5lbENvbmZpZ3VyYXRpb24ud2lkZ2V0SWRcbiAgICB9XG5cbiAgICBpZiAoZGF0YSAmJiBkYXRhLmN1c3RvbUNvbnRleHREYXRhKSB7XG4gICAgICBjb25zdCB0ZW1wQXJyID0gQ3VzdG9tQ29udGV4dERhdGEuc29ydChkYXRhLmN1c3RvbUNvbnRleHREYXRhKTtcbiAgICAgIE9iamVjdC5hc3NpZ24oY2FjaE9iaiwgeyBcImN1c3RvbUNvbnRleHRcIjogdGVtcEFyciB9KTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5wb3J0YWxjb250YWN0aWQpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24oY2FjaE9iaiwgeyBcInBvcnRhbGNvbnRhY3RpZFwiOiBkYXRhLnBvcnRhbGNvbnRhY3RpZCB9KTtcbiAgICB9XG5cbiAgICBkYXRhLmNhY2hlS2V5ID0gaGFzaC5jcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUoSlNPTi5zdHJpbmdpZnkoY2FjaE9iaikpLmRpZ2VzdCgnaGV4JykudG9TdHJpbmcoKTtcblxuICAgIGlmIChnZXRDb250ZXh0ICYmICF3aW5kb3cuZG9jdW1lbnQpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoYGdldENvbnRleHQgaXMgb25seSBzdXBwb3J0ZWQgb24gd2ViIGJyb3dzZXJzYCkpO1xuICAgIH1cblxuICAgIGlmIChnZXRDb250ZXh0KSB7XG4gICAgICBkYXRhLmJyb3dzZXIgPSBCcm93c2VySW5mby5nZXRCcm93c2VyTmFtZSgpO1xuICAgICAgZGF0YS5kZXZpY2UgPSBEZXZpY2VJbmZvLmdldERldmljZVR5cGUoKTtcbiAgICAgIGRhdGEub3JpZ2ludXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgICBkYXRhLm9zID0gT1NJbmZvLmdldE9zVHlwZSgpO1xuICAgIH1cblxuICAgIGlmICghZGF0YS5sb2NhbGUpIHtcbiAgICAgIGRhdGEubG9jYWxlID0gQ29uc3RhbnRzLmRlZmF1bHRMb2NhbGU7XG4gICAgfVxuXG4gICAgLy8gVmFsaWRhdGUgbG9jYWxlXG4gICAgaWYgKGRhdGEubG9jYWxlICYmICFMb2NhbGVzLnN1cHBvcnRlZExvY2FsZXMuaW5jbHVkZXMoZGF0YS5sb2NhbGUpKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKGBVbnN1cHBvcnRlZCBsb2NhbGU6ICcke2RhdGEubG9jYWxlfSdgKSk7XG4gICAgfVxuXG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5vbW5pY2hhbm5lbENvbmZpZ3VyYXRpb24ub3JnVXJsfSR7cmVxdWVzdFBhdGh9YDtcbiAgICBjb25zdCBtZXRob2QgPSBcIlBPU1RcIjtcblxuICAgIGNvbnN0IG9wdGlvbnM6IEF4aW9zUmVxdWVzdENvbmZpZyA9IHtcbiAgICAgIGRhdGEsXG4gICAgICBoZWFkZXJzLFxuICAgICAgbWV0aG9kLFxuICAgICAgdXJsLFxuICAgICAgdGltZW91dDogdGhpcy5jb25maWd1cmF0aW9uLmRlZmF1bHRSZXF1ZXN0VGltZW91dCA/PyB0aGlzLmNvbmZpZ3VyYXRpb24ucmVxdWVzdFRpbWVvdXRDb25maWcuZ2V0QWdlbnRBdmFpbGFiaWxpdHlcbiAgICB9O1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3NJbnN0YW5jZShvcHRpb25zKTtcbiAgICAgICAgY29uc3QgZWxhcHNlZFRpbWVJbk1pbGxpc2Vjb25kcyA9IHRpbWVyLm1pbGxpU2Vjb25kc0VsYXBzZWQ7XG4gICAgICAgIGNvbnN0IHsgZGF0YSwgaGVhZGVycyB9ID0gcmVzcG9uc2U7XG4gICAgICAgIHRoaXMuc2V0QXV0aENvZGVOb25jZShoZWFkZXJzKTtcblxuICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgIHRoaXMubG9nV2l0aExvZ2dlcihMb2dMZXZlbC5JTkZPLCBPQ1NES1RlbGVtZXRyeUV2ZW50LkdFVEFHRU5UQVZBSUxBQklMSVRZU1VDQ0VFREVELCBcIkdldCBhZ2VudCBhdmFpbGFiaWxpdHkgc3VjY2VlZGVkXCIsIHJlcXVlc3RJZCwgcmVzcG9uc2UsIGVsYXBzZWRUaW1lSW5NaWxsaXNlY29uZHMsIHJlcXVlc3RQYXRoLCBtZXRob2QpO1xuXG4gICAgICAgICAgcmVzb2x2ZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc3QgZWxhcHNlZFRpbWVJbk1pbGxpc2Vjb25kcyA9IHRpbWVyLm1pbGxpU2Vjb25kc0VsYXBzZWQ7XG4gICAgICAgIHRoaXMubG9nV2l0aExvZ2dlcihMb2dMZXZlbC5FUlJPUiwgT0NTREtUZWxlbWV0cnlFdmVudC5HRVRBR0VOVEFWQUlMQUJJTElUWUZBSUxFRCwgXCJHZXQgYWdlbnQgYXZhaWxhYmlsaXR5IGZhaWxlZFwiLCByZXF1ZXN0SWQsIHVuZGVmaW5lZCwgZWxhcHNlZFRpbWVJbk1pbGxpc2Vjb25kcywgcmVxdWVzdFBhdGgsIG1ldGhvZCwgZXJyb3IpO1xuICAgICAgICBpZiAoZXJyb3IuY29kZSA9PT0gQ29uc3RhbnRzLmF4aW9zVGltZW91dEVycm9yQ29kZSkge1xuICAgICAgICAgIHRocm93Q2xpZW50SFRUUFRpbWVvdXRFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU3RhcnRzIGEgc2Vzc2lvbiB0byBvbW5pY2hhbm5lbC5cbiAgICogQHBhcmFtIHJlcXVlc3RJZDogUmVxdWVzdElkIHRvIHVzZSBmb3Igc2Vzc2lvbiBpbml0LlxuICAgKiBAcGFyYW0gc2Vzc2lvbkluaXRPcHRpb25hbFBhcmFtczogT3B0aW9uYWwgcGFyYW1ldGVycyBmb3Igc2Vzc2lvbiBpbml0LlxuICAgKi9cbiAgcHVibGljIGFzeW5jIHNlc3Npb25Jbml0KHJlcXVlc3RJZDogc3RyaW5nLCBzZXNzaW9uSW5pdE9wdGlvbmFsUGFyYW1zOiBJU2Vzc2lvbkluaXRPcHRpb25hbFBhcmFtcyA9IHt9KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgdGltZXIgPSBUaW1lci5USU1FUigpO1xuICAgIHRoaXMubG9nV2l0aExvZ2dlcihMb2dMZXZlbC5JTkZPLCBPQ1NES1RlbGVtZXRyeUV2ZW50LlNFU1NJT05JTklUU1RBUlRFRCwgXCJTZXNzaW9uIEluaXQgU3RhcnRlZFwiLCByZXF1ZXN0SWQpO1xuICAgIGNvbnN0IGF4aW9zSW5zdGFuY2UgPSBheGlvcy5jcmVhdGUoKTtcblxuICAgIGF4aW9zUmV0cnkoYXhpb3NJbnN0YW5jZSwge1xuICAgICAgcmV0cmllczogdGhpcy5jb25maWd1cmF0aW9uLm1heFJlcXVlc3RSZXRyaWVzT25GYWlsdXJlLFxuICAgICAgc2hvdWxkUmV0cnk6IHNlc3Npb25Jbml0UmV0cnlIYW5kbGVyLFxuICAgICAgaGVhZGVyT3ZlcndyaXRlczogW09tbmljaGFubmVsSFRUUEhlYWRlcnMuYXV0aENvZGVOb25jZV1cbiAgICB9KTtcblxuICAgIGNvbnN0IHsgcmVjb25uZWN0SWQsIGF1dGhlbnRpY2F0ZWRVc2VyVG9rZW4sIGluaXRDb250ZXh0LCBnZXRDb250ZXh0IH0gPSBzZXNzaW9uSW5pdE9wdGlvbmFsUGFyYW1zO1xuICAgIGNvbnN0IGhlYWRlcnM6IFN0cmluZ01hcCA9IENvbnN0YW50cy5kZWZhdWx0SGVhZGVycztcbiAgICBsZXQgcmVxdWVzdFBhdGggPSBgLyR7T21uaWNoYW5uZWxFbmRwb2ludHMuTGl2ZUNoYXRTZXNzaW9uSW5pdFBhdGh9LyR7dGhpcy5vbW5pY2hhbm5lbENvbmZpZ3VyYXRpb24ub3JnSWR9LyR7dGhpcy5vbW5pY2hhbm5lbENvbmZpZ3VyYXRpb24ud2lkZ2V0SWR9LyR7cmVxdWVzdElkfWA7XG4gICAgaWYgKGF1dGhlbnRpY2F0ZWRVc2VyVG9rZW4pIHtcbiAgICAgIHJlcXVlc3RQYXRoID0gYC8ke09tbmljaGFubmVsRW5kcG9pbnRzLkxpdmVDaGF0QXV0aFNlc3Npb25Jbml0UGF0aH0vJHt0aGlzLm9tbmljaGFubmVsQ29uZmlndXJhdGlvbi5vcmdJZH0vJHt0aGlzLm9tbmljaGFubmVsQ29uZmlndXJhdGlvbi53aWRnZXRJZH0vJHtyZXF1ZXN0SWR9YDtcbiAgICAgIGhlYWRlcnNbT21uaWNoYW5uZWxIVFRQSGVhZGVycy5hdXRoZW50aWNhdGVkVXNlclRva2VuXSA9IGF1dGhlbnRpY2F0ZWRVc2VyVG9rZW47XG4gICAgICBoZWFkZXJzW09tbmljaGFubmVsSFRUUEhlYWRlcnMuYXV0aENvZGVOb25jZV0gPSB0aGlzLmNvbmZpZ3VyYXRpb24uYXV0aENvZGVOb25jZTtcbiAgICB9XG5cbiAgICBpZiAocmVjb25uZWN0SWQpIHtcbiAgICAgIHJlcXVlc3RQYXRoICs9IGAvJHtyZWNvbm5lY3RJZH1gO1xuICAgIH1cblxuICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0gYGNoYW5uZWxJZD0ke3RoaXMub21uaWNoYW5uZWxDb25maWd1cmF0aW9uLmNoYW5uZWxJZH1gO1xuICAgIHJlcXVlc3RQYXRoICs9IGA/JHtxdWVyeVBhcmFtc31gO1xuICAgIGNvbnN0IGRhdGE6IEluaXRDb250ZXh0ID0gaW5pdENvbnRleHQgfHwge307XG5cbiAgICBpZiAoZ2V0Q29udGV4dCAmJiAhd2luZG93LmRvY3VtZW50KSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKGBnZXRDb250ZXh0IGlzIG9ubHkgc3VwcG9ydGVkIG9uIHdlYiBicm93c2Vyc2ApKTtcbiAgICB9XG4gICAgaWYgKGdldENvbnRleHQpIHtcbiAgICAgIGRhdGEuYnJvd3NlciA9IEJyb3dzZXJJbmZvLmdldEJyb3dzZXJOYW1lKCk7XG4gICAgICBkYXRhLmRldmljZSA9IERldmljZUluZm8uZ2V0RGV2aWNlVHlwZSgpO1xuICAgICAgZGF0YS5vcmlnaW51cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICAgIGRhdGEub3MgPSBPU0luZm8uZ2V0T3NUeXBlKCk7XG4gICAgfVxuXG4gICAgLy8gU2V0IGRlZmF1bHQgbG9jYWxlIGlmIGxvY2FsZSBpcyBlbXB0eVxuICAgIGlmICghZGF0YS5sb2NhbGUpIHtcbiAgICAgIGRhdGEubG9jYWxlID0gQ29uc3RhbnRzLmRlZmF1bHRMb2NhbGU7XG4gICAgfVxuXG4gICAgLy8gVmFsaWRhdGUgbG9jYWxlXG4gICAgaWYgKGRhdGEubG9jYWxlICYmICFMb2NhbGVzLnN1cHBvcnRlZExvY2FsZXMuaW5jbHVkZXMoZGF0YS5sb2NhbGUpKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKGBVbnN1cHBvcnRlZCBsb2NhbGU6ICcke2RhdGEubG9jYWxlfSdgKSk7XG4gICAgfVxuXG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5vbW5pY2hhbm5lbENvbmZpZ3VyYXRpb24ub3JnVXJsfSR7cmVxdWVzdFBhdGh9YDtcbiAgICBjb25zdCBtZXRob2QgPSBcIlBPU1RcIjtcbiAgICBjb25zdCBvcHRpb25zOiBBeGlvc1JlcXVlc3RDb25maWcgPSB7XG4gICAgICBkYXRhLFxuICAgICAgaGVhZGVycyxcbiAgICAgIG1ldGhvZCxcbiAgICAgIHVybCxcbiAgICAgIHRpbWVvdXQ6IHRoaXMuY29uZmlndXJhdGlvbi5kZWZhdWx0UmVxdWVzdFRpbWVvdXQgPz8gdGhpcy5jb25maWd1cmF0aW9uLnJlcXVlc3RUaW1lb3V0Q29uZmlnLnNlc3Npb25Jbml0XG4gICAgfTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zSW5zdGFuY2Uob3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGVsYXBzZWRUaW1lSW5NaWxsaXNlY29uZHMgPSB0aW1lci5taWxsaVNlY29uZHNFbGFwc2VkO1xuICAgICAgICBjb25zdCB7IGhlYWRlcnMgfSA9IHJlc3BvbnNlO1xuICAgICAgICB0aGlzLnNldEF1dGhDb2RlTm9uY2UoaGVhZGVycyk7XG5cbiAgICAgICAgdGhpcy5sb2dXaXRoTG9nZ2VyKExvZ0xldmVsLklORk8sIE9DU0RLVGVsZW1ldHJ5RXZlbnQuU0VTU0lPTklOSVRTVUNDRUVERUQsIFwiU2Vzc2lvbiBJbml0IFN1Y2NlZWRlZFwiLCByZXF1ZXN0SWQsIHJlc3BvbnNlLCBlbGFwc2VkVGltZUluTWlsbGlzZWNvbmRzLCByZXF1ZXN0UGF0aCwgbWV0aG9kLCB1bmRlZmluZWQsIGRhdGEpO1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zdCBlbGFwc2VkVGltZUluTWlsbGlzZWNvbmRzID0gdGltZXIubWlsbGlTZWNvbmRzRWxhcHNlZDtcbiAgICAgICAgdGhpcy5sb2dXaXRoTG9nZ2VyKExvZ0xldmVsLkVSUk9SLCBPQ1NES1RlbGVtZXRyeUV2ZW50LlNFU1NJT05JTklURkFJTEVELCBcIlNlc3Npb24gSW5pdCBmYWlsZWRcIiwgcmVxdWVzdElkLCB1bmRlZmluZWQsIGVsYXBzZWRUaW1lSW5NaWxsaXNlY29uZHMsIHJlcXVlc3RQYXRoLCBtZXRob2QsIGVycm9yLCBkYXRhKTtcbiAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09IENvbnN0YW50cy5heGlvc1RpbWVvdXRFcnJvckNvZGUpIHtcbiAgICAgICAgICB0aHJvd0NsaWVudEhUVFBUaW1lb3V0RXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENsb3NlcyB0aGUgb21uaWNoYW5uZWwgc2Vzc2lvbi5cbiAgICogQHBhcmFtIHJlcXVlc3RJZDogUmVxdWVzdElkIHRvIHVzZSBmb3Igc2Vzc2lvbiBjbG9zZSAoc2FtZSByZXF1ZXN0IGlkIGZvciBzZXNzaW9uIGluaXQpLlxuICAgKiBAcGFyYW0gc2Vzc2lvbkNsb3NlT3B0aW9uYWxQYXJhbXM6IE9wdGlvbmFsIHBhcmFtZXRlcnMgZm9yIHNlc3Npb24gY2xvc2UuXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgc2Vzc2lvbkNsb3NlKHJlcXVlc3RJZDogc3RyaW5nLCBzZXNzaW9uQ2xvc2VPcHRpb25hbFBhcmFtczogSVNlc3Npb25DbG9zZU9wdGlvbmFsUGFyYW1zID0ge30pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCB0aW1lciA9IFRpbWVyLlRJTUVSKCk7XG4gICAgdGhpcy5sb2dXaXRoTG9nZ2VyKExvZ0xldmVsLklORk8sIE9DU0RLVGVsZW1ldHJ5RXZlbnQuU0VTU0lPTkNMT1NFU1RBUlRFRCwgXCJTZXNzaW9uIENsb3NlIFN0YXJ0ZWRcIiwgcmVxdWVzdElkKTtcblxuICAgIGxldCByZXF1ZXN0UGF0aCA9IGAvJHtPbW5pY2hhbm5lbEVuZHBvaW50cy5MaXZlQ2hhdFNlc3Npb25DbG9zZVBhdGh9LyR7dGhpcy5vbW5pY2hhbm5lbENvbmZpZ3VyYXRpb24ub3JnSWR9LyR7dGhpcy5vbW5pY2hhbm5lbENvbmZpZ3VyYXRpb24ud2lkZ2V0SWR9LyR7cmVxdWVzdElkfT9jaGFubmVsSWQ9JHt0aGlzLm9tbmljaGFubmVsQ29uZmlndXJhdGlvbi5jaGFubmVsSWR9YDtcbiAgICBjb25zdCBheGlvc0luc3RhbmNlID0gYXhpb3MuY3JlYXRlKCk7XG4gICAgYXhpb3NSZXRyeShheGlvc0luc3RhbmNlLCB7IGhlYWRlck92ZXJ3cml0ZXM6IFtPbW5pY2hhbm5lbEhUVFBIZWFkZXJzLmF1dGhDb2RlTm9uY2VdLCByZXRyaWVzOiB0aGlzLmNvbmZpZ3VyYXRpb24ubWF4UmVxdWVzdFJldHJpZXNPbkZhaWx1cmUgfSk7XG5cbiAgICBjb25zdCB7IGF1dGhlbnRpY2F0ZWRVc2VyVG9rZW4sIGlzUmVjb25uZWN0Q2hhdCwgaXNQZXJzaXN0ZW50Q2hhdCwgY2hhdElkIH0gPSBzZXNzaW9uQ2xvc2VPcHRpb25hbFBhcmFtcztcblxuICAgIGNvbnN0IGhlYWRlcnM6IFN0cmluZ01hcCA9IENvbnN0YW50cy5kZWZhdWx0SGVhZGVycztcbiAgICBjb25zdCBkYXRhOiBhbnkgPSB7fTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgZGF0YS5jaGF0SWQgPSBjaGF0SWQ7XG5cbiAgICBpZiAoYXV0aGVudGljYXRlZFVzZXJUb2tlbikge1xuICAgICAgcmVxdWVzdFBhdGggPSBgLyR7T21uaWNoYW5uZWxFbmRwb2ludHMuTGl2ZUNoYXRBdXRoU2Vzc2lvbkNsb3NlUGF0aH0vJHt0aGlzLm9tbmljaGFubmVsQ29uZmlndXJhdGlvbi5vcmdJZH0vJHt0aGlzLm9tbmljaGFubmVsQ29uZmlndXJhdGlvbi53aWRnZXRJZH0vJHtyZXF1ZXN0SWR9P2NoYW5uZWxJZD0ke3RoaXMub21uaWNoYW5uZWxDb25maWd1cmF0aW9uLmNoYW5uZWxJZH1gO1xuICAgICAgaGVhZGVyc1tPbW5pY2hhbm5lbEhUVFBIZWFkZXJzLmF1dGhlbnRpY2F0ZWRVc2VyVG9rZW5dID0gYXV0aGVudGljYXRlZFVzZXJUb2tlbjtcbiAgICAgIGhlYWRlcnNbT21uaWNoYW5uZWxIVFRQSGVhZGVycy5hdXRoQ29kZU5vbmNlXSA9IHRoaXMuY29uZmlndXJhdGlvbi5hdXRoQ29kZU5vbmNlO1xuICAgIH1cblxuICAgIGlmIChpc1JlY29ubmVjdENoYXQpIHtcbiAgICAgIHJlcXVlc3RQYXRoICs9IGAmaXNSZWNvbm5lY3RDaGF0PXRydWVgO1xuICAgIH1cblxuICAgIGlmIChpc1BlcnNpc3RlbnRDaGF0KSB7XG4gICAgICByZXF1ZXN0UGF0aCArPSBgJmlzUGVyc2lzdGVudENoYXQ9dHJ1ZWA7XG4gICAgfVxuXG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5vbW5pY2hhbm5lbENvbmZpZ3VyYXRpb24ub3JnVXJsfSR7cmVxdWVzdFBhdGh9YDtcbiAgICBjb25zdCBtZXRob2QgPSBcIlBPU1RcIjtcbiAgICBjb25zdCBvcHRpb25zOiBBeGlvc1JlcXVlc3RDb25maWcgPSB7XG4gICAgICBkYXRhLFxuICAgICAgaGVhZGVycyxcbiAgICAgIG1ldGhvZCxcbiAgICAgIHVybCxcbiAgICAgIHRpbWVvdXQ6IHRoaXMuY29uZmlndXJhdGlvbi5kZWZhdWx0UmVxdWVzdFRpbWVvdXQgPz8gdGhpcy5jb25maWd1cmF0aW9uLnJlcXVlc3RUaW1lb3V0Q29uZmlnLnNlc3Npb25DbG9zZVxuICAgIH07XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvc0luc3RhbmNlKG9wdGlvbnMpO1xuICAgICAgICBjb25zdCB7IGhlYWRlcnMgfSA9IHJlc3BvbnNlO1xuICAgICAgICB0aGlzLnNldEF1dGhDb2RlTm9uY2UoaGVhZGVycyk7XG5cbiAgICAgICAgY29uc3QgZWxhcHNlZFRpbWVJbk1pbGxpc2Vjb25kcyA9IHRpbWVyLm1pbGxpU2Vjb25kc0VsYXBzZWQ7XG4gICAgICAgIHRoaXMubG9nV2l0aExvZ2dlcihMb2dMZXZlbC5JTkZPLCBPQ1NES1RlbGVtZXRyeUV2ZW50LlNFU1NJT05DTE9TRVNVQ0NFRURFRCwgXCJTZXNzaW9uIENsb3NlIHN1Y2NlZWRlZFwiLCByZXF1ZXN0SWQsIHJlc3BvbnNlLCBlbGFwc2VkVGltZUluTWlsbGlzZWNvbmRzLCByZXF1ZXN0UGF0aCwgbWV0aG9kKTtcblxuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zdCBlbGFwc2VkVGltZUluTWlsbGlzZWNvbmRzID0gdGltZXIubWlsbGlTZWNvbmRzRWxhcHNlZDtcbiAgICAgICAgdGhpcy5sb2dXaXRoTG9nZ2VyKExvZ0xldmVsLkVSUk9SLCBPQ1NES1RlbGVtZXRyeUV2ZW50LlNFU1NJT05DTE9TRUZBSUxFRCwgXCJTZXNzaW9uIGNsb3NlIGZhaWxlZFwiLCByZXF1ZXN0SWQsIHVuZGVmaW5lZCwgZWxhcHNlZFRpbWVJbk1pbGxpc2Vjb25kcywgcmVxdWVzdFBhdGgsIG1ldGhvZCwgZXJyb3IpO1xuICAgICAgICBpZiAoZXJyb3IuY29kZSA9PT0gQ29uc3RhbnRzLmF4aW9zVGltZW91dEVycm9yQ29kZSkge1xuICAgICAgICAgIHRocm93Q2xpZW50SFRUUFRpbWVvdXRFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVmFsaWRhdGUgdGhlIGF1dGggY2hhdCByZWNvcmQgZXhpc3RzIGluIGRhdGFiYXNlLlxuICAgKiBAcGFyYW0gcmVxdWVzdElkOiBSZXF1ZXN0SWQgZm9yIHZhbGlkYXRlQXV0aENoYXRSZWNvcmQgKHNhbWUgcmVxdWVzdCBpZCBmb3Igc2Vzc2lvbiBpbml0KS5cbiAgICogQHBhcmFtIHZhbGlkYXRlQXV0aENoYXRSZWNvcmRPcHRpb25hbFBhcmFtczogT3B0aW9uYWwgcGFyYW1ldGVycyBmb3IgdmFsaWRhdGVBdXRoQ2hhdFJlY29yZC5cbiAgICovXG4gIHB1YmxpYyBhc3luYyB2YWxpZGF0ZUF1dGhDaGF0UmVjb3JkKHJlcXVlc3RJZDogc3RyaW5nLCB2YWxpZGF0ZUF1dGhDaGF0UmVjb3JkT3B0aW9uYWxQYXJhbXM6IElWYWxpZGF0ZUF1dGhDaGF0UmVjb3JkT3B0aW9uYWxQYXJhbXMpOiBQcm9taXNlPG9iamVjdD4ge1xuICAgIGNvbnN0IHRpbWVyID0gVGltZXIuVElNRVIoKTtcbiAgICB0aGlzLmxvZ1dpdGhMb2dnZXIoTG9nTGV2ZWwuSU5GTywgT0NTREtUZWxlbWV0cnlFdmVudC5WQUxJREFURUFVVEhDSEFUUkVDT1JEU1RBUlRFRCwgXCJWYWxpZGF0ZSBBdXRoIENoYXQgUmVjb3JkIFN0YXJ0ZWRcIiwgcmVxdWVzdElkKTtcblxuICAgIGNvbnN0IHsgYXV0aGVudGljYXRlZFVzZXJUb2tlbiwgY2hhdElkIH0gPSB2YWxpZGF0ZUF1dGhDaGF0UmVjb3JkT3B0aW9uYWxQYXJhbXM7XG4gICAgY29uc3QgcmVxdWVzdFBhdGggPSBgLyR7T21uaWNoYW5uZWxFbmRwb2ludHMuTGl2ZUNoYXRWYWxpZGF0ZUF1dGhDaGF0TWFwUmVjb3JkUGF0aH0vJHt0aGlzLm9tbmljaGFubmVsQ29uZmlndXJhdGlvbi5vcmdJZH0vJHt0aGlzLm9tbmljaGFubmVsQ29uZmlndXJhdGlvbi53aWRnZXRJZH0vJHtjaGF0SWR9LyR7cmVxdWVzdElkfT9jaGFubmVsSWQ9JHt0aGlzLm9tbmljaGFubmVsQ29uZmlndXJhdGlvbi5jaGFubmVsSWR9YDtcbiAgICBjb25zdCBheGlvc0luc3RhbmNlID0gYXhpb3MuY3JlYXRlKCk7XG4gICAgYXhpb3NSZXRyeShheGlvc0luc3RhbmNlLCB7IGhlYWRlck92ZXJ3cml0ZXM6IFtPbW5pY2hhbm5lbEhUVFBIZWFkZXJzLmF1dGhDb2RlTm9uY2VdLCByZXRyaWVzOiB0aGlzLmNvbmZpZ3VyYXRpb24ubWF4UmVxdWVzdFJldHJpZXNPbkZhaWx1cmUgfSk7XG4gICAgY29uc3QgaGVhZGVyczogU3RyaW5nTWFwID0gQ29uc3RhbnRzLmRlZmF1bHRIZWFkZXJzO1xuICAgIGlmIChhdXRoZW50aWNhdGVkVXNlclRva2VuKSB7XG4gICAgICBoZWFkZXJzW09tbmljaGFubmVsSFRUUEhlYWRlcnMuYXV0aGVudGljYXRlZFVzZXJUb2tlbl0gPSBhdXRoZW50aWNhdGVkVXNlclRva2VuO1xuICAgICAgaGVhZGVyc1tPbW5pY2hhbm5lbEhUVFBIZWFkZXJzLmF1dGhDb2RlTm9uY2VdID0gdGhpcy5jb25maWd1cmF0aW9uLmF1dGhDb2RlTm9uY2U7XG4gICAgfVxuXG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5vbW5pY2hhbm5lbENvbmZpZ3VyYXRpb24ub3JnVXJsfSR7cmVxdWVzdFBhdGh9YDtcbiAgICBjb25zdCBtZXRob2QgPSBcIkdFVFwiO1xuICAgIGNvbnN0IG9wdGlvbnM6IEF4aW9zUmVxdWVzdENvbmZpZyA9IHtcbiAgICAgIGhlYWRlcnMsXG4gICAgICBtZXRob2QsXG4gICAgICB1cmwsXG4gICAgICB0aW1lb3V0OiB0aGlzLmNvbmZpZ3VyYXRpb24uZGVmYXVsdFJlcXVlc3RUaW1lb3V0ID8/IHRoaXMuY29uZmlndXJhdGlvbi5yZXF1ZXN0VGltZW91dENvbmZpZy52YWxpZGF0ZUF1dGhDaGF0UmVjb3JkVGltZW91dFxuICAgIH07XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvc0luc3RhbmNlKG9wdGlvbnMpO1xuICAgICAgICBjb25zdCB7IGhlYWRlcnMgfSA9IHJlc3BvbnNlO1xuICAgICAgICB0aGlzLnNldEF1dGhDb2RlTm9uY2UoaGVhZGVycyk7XG5cbiAgICAgICAgY29uc3QgZWxhcHNlZFRpbWVJbk1pbGxpc2Vjb25kcyA9IHRpbWVyLm1pbGxpU2Vjb25kc0VsYXBzZWQ7XG4gICAgICAgIGlmIChyZXNwb25zZS5kYXRhPy5hdXRoQ2hhdEV4aXN0ID09PSB0cnVlKSB7XG4gICAgICAgICAgdGhpcy5sb2dXaXRoTG9nZ2VyKExvZ0xldmVsLklORk8sIE9DU0RLVGVsZW1ldHJ5RXZlbnQuVkFMSURBVEVBVVRIQ0hBVFJFQ09SRFNVQ0NFRURFRCwgXCJWYWxpZGF0ZSBBdXRoIENoYXQgUmVjb3JkIHN1Y2NlZWRlZFwiLCByZXF1ZXN0SWQsIHJlc3BvbnNlLCBlbGFwc2VkVGltZUluTWlsbGlzZWNvbmRzLCByZXF1ZXN0UGF0aCwgbWV0aG9kKTtcblxuICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5sb2dXaXRoTG9nZ2VyKExvZ0xldmVsLklORk8sIE9DU0RLVGVsZW1ldHJ5RXZlbnQuVkFMSURBVEVBVVRIQ0hBVFJFQ09SREZBSUxFRCwgXCJWYWxpZGF0ZSBBdXRoIENoYXQgUmVjb3JkIEZhaWxlZC4gUmVjb3JkIGlzIG5vdCBmb3VuZCBvciByZXF1ZXN0IGlzIG5vdCBhdXRob3JpemVkXCIsIHJlcXVlc3RJZCwgcmVzcG9uc2UsIGVsYXBzZWRUaW1lSW5NaWxsaXNlY29uZHMsIHJlcXVlc3RQYXRoLCBtZXRob2QpO1xuXG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIlZhbGlkYXRlIEF1dGggQ2hhdCBSZWNvcmQgRmFpbGVkLiBSZWNvcmQgaXMgbm90IGZvdW5kIG9yIHJlcXVlc3QgaXMgbm90IGF1dGhvcml6ZWRcIikpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zdCBlbGFwc2VkVGltZUluTWlsbGlzZWNvbmRzID0gdGltZXIubWlsbGlTZWNvbmRzRWxhcHNlZDtcblxuICAgICAgICB0aGlzLmxvZ1dpdGhMb2dnZXIoTG9nTGV2ZWwuRVJST1IsIE9DU0RLVGVsZW1ldHJ5RXZlbnQuVkFMSURBVEVBVVRIQ0hBVFJFQ09SREZBSUxFRCwgXCJWYWxpZGF0ZSBBdXRoIENoYXQgUmVjb3JkIGZhaWxlZFwiLCByZXF1ZXN0SWQsIHVuZGVmaW5lZCwgZWxhcHNlZFRpbWVJbk1pbGxpc2Vjb25kcywgcmVxdWVzdFBhdGgsIG1ldGhvZCwgZXJyb3IpO1xuXG4gICAgICAgIGlmIChlcnJvci5jb2RlID09PSBDb25zdGFudHMuYXhpb3NUaW1lb3V0RXJyb3JDb2RlKSB7XG4gICAgICAgICAgdGhyb3dDbGllbnRIVFRQVGltZW91dEVycm9yKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXJyb3IudG9TdHJpbmcoKSA9PT0gXCJFcnJvcjogUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSA0MDRcIikgeyAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAgICAgICAgcmVzb2x2ZSh7fSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFN1Ym1pdHMgcG9zdCBjaGF0IHJlc3BvbnNlLlxuICAgKiBAcGFyYW0gcmVxdWVzdElkIFJlcXVlc3RJZCBvZiB0aGUgb21uaWNoYW5uZWwgc2Vzc2lvbi5cbiAgICogQHBhcmFtIHBvc3RDaGF0UmVzcG9uc2UgUG9zdCBjaGF0IHJlc3BvbnNlIHRvIHN1Ym1pdC5cbiAgICogQHBhcmFtIHN1Ym1pdFBvc3RDaGF0UmVzcG9uc2VPcHRpb25hbFBhcmFtczogT3B0aW9uYWwgcGFyYW1ldGVycyBmb3Igc3VibWl0IHBvc3QgY2hhdCByZXNwb25zZS5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBzdWJtaXRQb3N0Q2hhdFJlc3BvbnNlKHJlcXVlc3RJZDogc3RyaW5nLCBwb3N0Q2hhdFJlc3BvbnNlOiBvYmplY3QsIHN1Ym1pdFBvc3RDaGF0UmVzcG9uc2VPcHRpb25hbFBhcmFtczogSVN1Ym1pdFBvc3RDaGF0UmVzcG9uc2VPcHRpb25hbFBhcmFtcyA9IHt9KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgdGltZXIgPSBUaW1lci5USU1FUigpO1xuICAgIHRoaXMubG9nV2l0aExvZ2dlcihMb2dMZXZlbC5JTkZPLCBPQ1NES1RlbGVtZXRyeUV2ZW50LlNVQk1JVFBPU1RDSEFUU1RBUlRFRCwgXCJTdWJtaXQgUG9zdCBDaGF0IFN0YXJ0ZWRcIiwgcmVxdWVzdElkKTtcblxuICAgIGxldCByZXF1ZXN0UGF0aCA9IGAvJHtPbW5pY2hhbm5lbEVuZHBvaW50cy5MaXZlQ2hhdFN1Ym1pdFBvc3RDaGF0UGF0aH0vJHt0aGlzLm9tbmljaGFubmVsQ29uZmlndXJhdGlvbi5vcmdJZH0vJHt0aGlzLm9tbmljaGFubmVsQ29uZmlndXJhdGlvbi53aWRnZXRJZH0vJHtyZXF1ZXN0SWR9P2NoYW5uZWxJZD0ke3RoaXMub21uaWNoYW5uZWxDb25maWd1cmF0aW9uLmNoYW5uZWxJZH1gO1xuICAgIGNvbnN0IGF4aW9zSW5zdGFuY2UgPSBheGlvcy5jcmVhdGUoKTtcbiAgICBheGlvc1JldHJ5KGF4aW9zSW5zdGFuY2UsIHsgaGVhZGVyT3ZlcndyaXRlczogW09tbmljaGFubmVsSFRUUEhlYWRlcnMuYXV0aENvZGVOb25jZV0sIHJldHJpZXM6IHRoaXMuY29uZmlndXJhdGlvbi5tYXhSZXF1ZXN0UmV0cmllc09uRmFpbHVyZSB9KTtcblxuICAgIGNvbnN0IHsgYXV0aGVudGljYXRlZFVzZXJUb2tlbiB9ID0gc3VibWl0UG9zdENoYXRSZXNwb25zZU9wdGlvbmFsUGFyYW1zO1xuXG4gICAgY29uc3QgaGVhZGVyczogU3RyaW5nTWFwID0gQ29uc3RhbnRzLmRlZmF1bHRIZWFkZXJzO1xuXG4gICAgaWYgKGF1dGhlbnRpY2F0ZWRVc2VyVG9rZW4pIHtcbiAgICAgIHJlcXVlc3RQYXRoID0gYC8ke09tbmljaGFubmVsRW5kcG9pbnRzLkxpdmVDaGF0QXV0aFN1Ym1pdFBvc3RDaGF0UGF0aH0vJHt0aGlzLm9tbmljaGFubmVsQ29uZmlndXJhdGlvbi5vcmdJZH0vJHt0aGlzLm9tbmljaGFubmVsQ29uZmlndXJhdGlvbi53aWRnZXRJZH0vJHtyZXF1ZXN0SWR9P2NoYW5uZWxJZD0ke3RoaXMub21uaWNoYW5uZWxDb25maWd1cmF0aW9uLmNoYW5uZWxJZH1gO1xuICAgICAgaGVhZGVyc1tPbW5pY2hhbm5lbEhUVFBIZWFkZXJzLmF1dGhlbnRpY2F0ZWRVc2VyVG9rZW5dID0gYXV0aGVudGljYXRlZFVzZXJUb2tlbjtcbiAgICAgIGhlYWRlcnNbT21uaWNoYW5uZWxIVFRQSGVhZGVycy5hdXRoQ29kZU5vbmNlXSA9IHRoaXMuY29uZmlndXJhdGlvbi5hdXRoQ29kZU5vbmNlO1xuICAgIH1cblxuICAgIGNvbnN0IHVybCA9IGAke3RoaXMub21uaWNoYW5uZWxDb25maWd1cmF0aW9uLm9yZ1VybH0ke3JlcXVlc3RQYXRofWA7XG4gICAgY29uc3QgbWV0aG9kID0gXCJQT1NUXCI7XG4gICAgY29uc3Qgb3B0aW9uczogQXhpb3NSZXF1ZXN0Q29uZmlnID0ge1xuICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkocG9zdENoYXRSZXNwb25zZSksXG4gICAgICBoZWFkZXJzLFxuICAgICAgbWV0aG9kLFxuICAgICAgdXJsLFxuICAgICAgdGltZW91dDogdGhpcy5jb25maWd1cmF0aW9uLmRlZmF1bHRSZXF1ZXN0VGltZW91dCA/PyB0aGlzLmNvbmZpZ3VyYXRpb24ucmVxdWVzdFRpbWVvdXRDb25maWcuc3VibWl0UG9zdENoYXRSZXNwb25zZVxuICAgIH07XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvc0luc3RhbmNlKG9wdGlvbnMpO1xuICAgICAgICBjb25zdCB7IGhlYWRlcnMgfSA9IHJlc3BvbnNlO1xuICAgICAgICB0aGlzLnNldEF1dGhDb2RlTm9uY2UoaGVhZGVycyk7XG5cbiAgICAgICAgY29uc3QgZWxhcHNlZFRpbWVJbk1pbGxpc2Vjb25kcyA9IHRpbWVyLm1pbGxpU2Vjb25kc0VsYXBzZWQ7XG4gICAgICAgIHRoaXMubG9nV2l0aExvZ2dlcihMb2dMZXZlbC5JTkZPLCBPQ1NES1RlbGVtZXRyeUV2ZW50LlNVQk1JVFBPU1RDSEFUU1VDQ0VFREVELCBcIlN1Ym1pdCBQb3N0IENoYXQgc3VjY2VlZGVkXCIsIHJlcXVlc3RJZCwgcmVzcG9uc2UsIGVsYXBzZWRUaW1lSW5NaWxsaXNlY29uZHMsIHJlcXVlc3RQYXRoLCBtZXRob2QpO1xuXG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnN0IGVsYXBzZWRUaW1lSW5NaWxsaXNlY29uZHMgPSB0aW1lci5taWxsaVNlY29uZHNFbGFwc2VkO1xuICAgICAgICB0aGlzLmxvZ1dpdGhMb2dnZXIoTG9nTGV2ZWwuRVJST1IsIE9DU0RLVGVsZW1ldHJ5RXZlbnQuU1VCTUlUUE9TVENIQVRGQUlMRUQsIFwiU3VibWl0IFBvc3QgQ2hhdCBGYWlsZWRcIiwgcmVxdWVzdElkLCB1bmRlZmluZWQsIGVsYXBzZWRUaW1lSW5NaWxsaXNlY29uZHMsIHJlcXVlc3RQYXRoLCBtZXRob2QsIGVycm9yKTtcbiAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09IENvbnN0YW50cy5heGlvc1RpbWVvdXRFcnJvckNvZGUpIHtcbiAgICAgICAgICB0aHJvd0NsaWVudEhUVFBUaW1lb3V0RXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFN1Ym1pdHMgcG9zdCBjaGF0IHJlc3BvbnNlLlxuICAgKiBAcGFyYW0gcmVxdWVzdElkIFJlcXVlc3RJZCBvZiB0aGUgb21uaWNoYW5uZWwgc2Vzc2lvbi5cbiAgICogQHBhcmFtIHBvc3RDaGF0UmVzcG9uc2UgUG9zdCBjaGF0IHJlc3BvbnNlIHRvIHN1Ym1pdC5cbiAgICogQHBhcmFtIHN1Ym1pdFBvc3RDaGF0UmVzcG9uc2VPcHRpb25hbFBhcmFtczogT3B0aW9uYWwgcGFyYW1ldGVycyBmb3Igc3VibWl0IHBvc3QgY2hhdCByZXNwb25zZS5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBnZXRTdXJ2ZXlJbnZpdGVMaW5rKHN1cnZleU93bmVySWQ6IHN0cmluZywgc3VydmV5SW52aXRlQVBJUmVxdWVzdEJvZHk6IG9iamVjdCwgZ2V0c3VydmV5SW52aXRlTGlua09wdGlvbmFsUGFyYW1zOiBJR2V0U3VydmV5SW52aXRlTGlua09wdGlvbmFsUGFyYW1zID0ge30pOiBQcm9taXNlPG9iamVjdD4ge1xuICAgIGNvbnN0IHRpbWVyID0gVGltZXIuVElNRVIoKTtcbiAgICBpZiAodGhpcy5sb2dnZXIpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmxvZyhMb2dMZXZlbC5JTkZPLFxuICAgICAgICBPQ1NES1RlbGVtZXRyeUV2ZW50LkdFVFNVUlZFWUlOVklURUxJTktTVEFSVEVELFxuICAgICAgICB7IFN1cnZleU93bmVySWQ6IHN1cnZleU93bmVySWQgfSxcbiAgICAgICAgXCJHZXQgU3VydmV5IEludml0ZSBMaW5rIFN0YXJ0ZWRcIik7XG4gICAgfVxuICAgIGxldCByZXF1ZXN0UGF0aCA9IGAvJHtPbW5pY2hhbm5lbEVuZHBvaW50cy5MaXZlQ2hhdEdldFN1cnZleUludml0ZUxpbmtQYXRofS8ke3RoaXMub21uaWNoYW5uZWxDb25maWd1cmF0aW9uLm9yZ0lkfS8ke3N1cnZleU93bmVySWR9YDtcbiAgICBjb25zdCBheGlvc0luc3RhbmNlID0gYXhpb3MuY3JlYXRlKCk7XG4gICAgYXhpb3NSZXRyeShheGlvc0luc3RhbmNlLCB7IGhlYWRlck92ZXJ3cml0ZXM6IFtPbW5pY2hhbm5lbEhUVFBIZWFkZXJzLmF1dGhDb2RlTm9uY2VdLCByZXRyaWVzOiB0aGlzLmNvbmZpZ3VyYXRpb24ubWF4UmVxdWVzdFJldHJpZXNPbkZhaWx1cmUgfSk7XG5cbiAgICBjb25zdCB7IGF1dGhlbnRpY2F0ZWRVc2VyVG9rZW4sIHJlcXVlc3RJZCB9ID0gZ2V0c3VydmV5SW52aXRlTGlua09wdGlvbmFsUGFyYW1zO1xuXG4gICAgY29uc3QgaGVhZGVyczogU3RyaW5nTWFwID0gQ29uc3RhbnRzLmRlZmF1bHRIZWFkZXJzO1xuXG4gICAgaWYgKGF1dGhlbnRpY2F0ZWRVc2VyVG9rZW4pIHtcbiAgICAgIHJlcXVlc3RQYXRoID0gYC8ke09tbmljaGFubmVsRW5kcG9pbnRzLkxpdmVDaGF0QXV0aEdldFN1cnZleUludml0ZUxpbmtQYXRofS8ke3RoaXMub21uaWNoYW5uZWxDb25maWd1cmF0aW9uLm9yZ0lkfS8ke3N1cnZleU93bmVySWR9YDtcbiAgICAgIGhlYWRlcnNbT21uaWNoYW5uZWxIVFRQSGVhZGVycy5hdXRoZW50aWNhdGVkVXNlclRva2VuXSA9IGF1dGhlbnRpY2F0ZWRVc2VyVG9rZW47XG4gICAgICBoZWFkZXJzW09tbmljaGFubmVsSFRUUEhlYWRlcnMuYXV0aENvZGVOb25jZV0gPSB0aGlzLmNvbmZpZ3VyYXRpb24uYXV0aENvZGVOb25jZTtcbiAgICAgIGhlYWRlcnNbT21uaWNoYW5uZWxIVFRQSGVhZGVycy53aWRnZXRBcHBJZF0gPSB0aGlzLm9tbmljaGFubmVsQ29uZmlndXJhdGlvbi53aWRnZXRJZDtcbiAgICB9XG5cbiAgICBpZiAocmVxdWVzdElkKSB7XG4gICAgICBoZWFkZXJzW09tbmljaGFubmVsSFRUUEhlYWRlcnMucmVxdWVzdElkXSA9IHJlcXVlc3RJZDtcbiAgICB9XG5cbiAgICBjb25zdCB1cmwgPSBgJHt0aGlzLm9tbmljaGFubmVsQ29uZmlndXJhdGlvbi5vcmdVcmx9JHtyZXF1ZXN0UGF0aH1gO1xuICAgIGNvbnN0IG1ldGhvZCA9IFwiUE9TVFwiO1xuICAgIGNvbnN0IG9wdGlvbnM6IEF4aW9zUmVxdWVzdENvbmZpZyA9IHtcbiAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHN1cnZleUludml0ZUFQSVJlcXVlc3RCb2R5KSxcbiAgICAgIGhlYWRlcnMsXG4gICAgICBtZXRob2QsXG4gICAgICB1cmwsXG4gICAgICB0aW1lb3V0OiB0aGlzLmNvbmZpZ3VyYXRpb24uZGVmYXVsdFJlcXVlc3RUaW1lb3V0ID8/IHRoaXMuY29uZmlndXJhdGlvbi5yZXF1ZXN0VGltZW91dENvbmZpZy5nZXRTdXJ2ZXlJbnZpdGVMaW5rXG4gICAgfTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zSW5zdGFuY2Uob3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IHsgZGF0YSwgaGVhZGVycyB9ID0gcmVzcG9uc2U7XG4gICAgICAgIHRoaXMuc2V0QXV0aENvZGVOb25jZShoZWFkZXJzKTtcblxuICAgICAgICBjb25zdCBlbGFwc2VkVGltZUluTWlsbGlzZWNvbmRzID0gdGltZXIubWlsbGlTZWNvbmRzRWxhcHNlZDtcbiAgICAgICAgdGhpcy5sb2dXaXRoTG9nZ2VyKExvZ0xldmVsLklORk8sIE9DU0RLVGVsZW1ldHJ5RXZlbnQuR0VUU1VSVkVZSU5WSVRFTElOS1NVQ0NFRURFRCwgXCJHZXQgU3VydmV5IEludml0ZSBMaW5rIFN1Y2NlZWRlZFwiLCByZXF1ZXN0SWQsIHJlc3BvbnNlLCBlbGFwc2VkVGltZUluTWlsbGlzZWNvbmRzLCByZXF1ZXN0UGF0aCwgbWV0aG9kKTtcblxuICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc3QgZWxhcHNlZFRpbWVJbk1pbGxpc2Vjb25kcyA9IHRpbWVyLm1pbGxpU2Vjb25kc0VsYXBzZWQ7XG4gICAgICAgIHRoaXMubG9nV2l0aExvZ2dlcihMb2dMZXZlbC5FUlJPUiwgT0NTREtUZWxlbWV0cnlFdmVudC5HRVRTVVJWRVlJTlZJVEVMSU5LRkFJTEVELCBcIkdldCBTdXJ2ZXkgSW52aXRlIExpbmsgZmFpbGVkXCIsIHJlcXVlc3RJZCwgdW5kZWZpbmVkLCBlbGFwc2VkVGltZUluTWlsbGlzZWNvbmRzLCByZXF1ZXN0UGF0aCwgbWV0aG9kLCBlcnJvcik7XG4gICAgICAgIGlmIChlcnJvci5jb2RlID09PSBDb25zdGFudHMuYXhpb3NUaW1lb3V0RXJyb3JDb2RlKSB7XG4gICAgICAgICAgdGhyb3dDbGllbnRIVFRQVGltZW91dEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgY2hhdCB0cmFuc2NyaXB0cyBmb3IgY3VzdG9tZXIuXG4gICAqIEBwYXJhbSByZXF1ZXN0SWQgUmVxdWVzdElkIG9mIHRoZSBvbW5pY2hhbm5lbCBzZXNzaW9uLlxuICAgKiBAcGFyYW0gY2hhdElkIENoYXQgdGhyZWFkIElkLlxuICAgKiBAcGFyYW0gdG9rZW4gU2t5cGUgdG9rZW4uXG4gICAqIEBwYXJhbSBnZXRDaGF0VHJhbnNjcmlwdHNPcHRpb25hbFBhcmFtcyBPcHRpb25hbCBwYXJhbWV0ZXJzIGZvciBnZXQgY2hhdCB0cmFuc2NyaXB0cy5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBnZXRDaGF0VHJhbnNjcmlwdHMocmVxdWVzdElkOiBzdHJpbmcsIGNoYXRJZDogc3RyaW5nLCB0b2tlbjogc3RyaW5nLCBnZXRDaGF0VHJhbnNjcmlwdHNPcHRpb25hbFBhcmFtczogSUdldENoYXRUcmFuc2NyaXB0c09wdGlvbmFsUGFyYW1zID0ge30pOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IHRpbWVyID0gVGltZXIuVElNRVIoKTtcbiAgICB0aGlzLmxvZ1dpdGhMb2dnZXIoTG9nTGV2ZWwuSU5GTywgT0NTREtUZWxlbWV0cnlFdmVudC5HRVRDSEFUVFJBTlNDUklQVFNUQVJURUQsIFwiR2V0IENoYXQgVHJhbnNjcmlwdCBTdGFydGVkXCIsIHJlcXVlc3RJZCk7XG5cbiAgICBsZXQgcmVxdWVzdFBhdGggPSBgLyR7T21uaWNoYW5uZWxFbmRwb2ludHMuTGl2ZUNoYXRHZXRDaGF0VHJhbnNjcmlwdFBhdGh9LyR7Y2hhdElkfS8ke3JlcXVlc3RJZH0/Y2hhbm5lbElkPSR7dGhpcy5vbW5pY2hhbm5lbENvbmZpZ3VyYXRpb24uY2hhbm5lbElkfWA7XG4gICAgY29uc3QgYXhpb3NJbnN0YW5jZSA9IGF4aW9zLmNyZWF0ZSgpO1xuICAgIGF4aW9zUmV0cnkoYXhpb3NJbnN0YW5jZSwgeyBoZWFkZXJPdmVyd3JpdGVzOiBbT21uaWNoYW5uZWxIVFRQSGVhZGVycy5hdXRoQ29kZU5vbmNlXSwgcmV0cmllczogdGhpcy5jb25maWd1cmF0aW9uLm1heFJlcXVlc3RSZXRyaWVzT25GYWlsdXJlIH0pO1xuXG4gICAgY29uc3QgeyBhdXRoZW50aWNhdGVkVXNlclRva2VuLCBjdXJyZW50TGl2ZUNoYXRWZXJzaW9uIH0gPSBnZXRDaGF0VHJhbnNjcmlwdHNPcHRpb25hbFBhcmFtcztcblxuICAgIGNvbnN0IGhlYWRlcnM6IFN0cmluZ01hcCA9IENvbnN0YW50cy5kZWZhdWx0SGVhZGVycztcbiAgICBoZWFkZXJzW09tbmljaGFubmVsSFRUUEhlYWRlcnMub3JnYW5pemF0aW9uSWRdID0gdGhpcy5vbW5pY2hhbm5lbENvbmZpZ3VyYXRpb24ub3JnSWQ7XG4gICAgaGVhZGVyc1tPbW5pY2hhbm5lbEhUVFBIZWFkZXJzLndpZGdldEFwcElkXSA9IHRoaXMub21uaWNoYW5uZWxDb25maWd1cmF0aW9uLndpZGdldElkO1xuICAgIGhlYWRlcnNbT21uaWNoYW5uZWxIVFRQSGVhZGVycy5hdXRob3JpemF0aW9uXSA9IHRva2VuO1xuXG4gICAgaWYgKHRoaXMubGl2ZUNoYXRWZXJzaW9uID09PSBMaXZlQ2hhdFZlcnNpb24uVjIgfHwgKGN1cnJlbnRMaXZlQ2hhdFZlcnNpb24gJiYgY3VycmVudExpdmVDaGF0VmVyc2lvbiA9PT0gTGl2ZUNoYXRWZXJzaW9uLlYyKSkge1xuICAgICAgcmVxdWVzdFBhdGggPSBgLyR7T21uaWNoYW5uZWxFbmRwb2ludHMuTGl2ZUNoYXR2MkdldENoYXRUcmFuc2NyaXB0UGF0aH0vJHtjaGF0SWR9LyR7cmVxdWVzdElkfT9jaGFubmVsSWQ9JHt0aGlzLm9tbmljaGFubmVsQ29uZmlndXJhdGlvbi5jaGFubmVsSWR9YDtcbiAgICAgIGlmIChhdXRoZW50aWNhdGVkVXNlclRva2VuKSB7XG4gICAgICAgIGhlYWRlcnNbT21uaWNoYW5uZWxIVFRQSGVhZGVycy5hdXRoZW50aWNhdGVkVXNlclRva2VuXSA9IGF1dGhlbnRpY2F0ZWRVc2VyVG9rZW47XG4gICAgICAgIGhlYWRlcnNbT21uaWNoYW5uZWxIVFRQSGVhZGVycy5hdXRoQ29kZU5vbmNlXSA9IHRoaXMuY29uZmlndXJhdGlvbi5hdXRoQ29kZU5vbmNlO1xuICAgICAgICByZXF1ZXN0UGF0aCA9IGAvJHtPbW5pY2hhbm5lbEVuZHBvaW50cy5MaXZlQ2hhdHYyQXV0aEdldENoYXRUcmFuc2NyaXB0UGF0aH0vJHtjaGF0SWR9LyR7cmVxdWVzdElkfT9jaGFubmVsSWQ9JHt0aGlzLm9tbmljaGFubmVsQ29uZmlndXJhdGlvbi5jaGFubmVsSWR9YDtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoYXV0aGVudGljYXRlZFVzZXJUb2tlbikge1xuICAgICAgaGVhZGVyc1tPbW5pY2hhbm5lbEhUVFBIZWFkZXJzLmF1dGhlbnRpY2F0ZWRVc2VyVG9rZW5dID0gYXV0aGVudGljYXRlZFVzZXJUb2tlbjtcbiAgICAgIGhlYWRlcnNbT21uaWNoYW5uZWxIVFRQSGVhZGVycy5hdXRoQ29kZU5vbmNlXSA9IHRoaXMuY29uZmlndXJhdGlvbi5hdXRoQ29kZU5vbmNlO1xuICAgICAgcmVxdWVzdFBhdGggPSBgLyR7T21uaWNoYW5uZWxFbmRwb2ludHMuTGl2ZUNoYXRBdXRoR2V0Q2hhdFRyYW5zY3JpcHRQYXRofS8ke2NoYXRJZH0vJHtyZXF1ZXN0SWR9P2NoYW5uZWxJZD0ke3RoaXMub21uaWNoYW5uZWxDb25maWd1cmF0aW9uLmNoYW5uZWxJZH1gO1xuICAgIH1cblxuICAgIGNvbnN0IHVybCA9IGAke3RoaXMub21uaWNoYW5uZWxDb25maWd1cmF0aW9uLm9yZ1VybH0ke3JlcXVlc3RQYXRofWA7XG4gICAgY29uc3QgbWV0aG9kID0gXCJHRVRcIjtcbiAgICBjb25zdCBvcHRpb25zOiBBeGlvc1JlcXVlc3RDb25maWcgPSB7XG4gICAgICBoZWFkZXJzLFxuICAgICAgbWV0aG9kLFxuICAgICAgdXJsLFxuICAgICAgdGltZW91dDogdGhpcy5jb25maWd1cmF0aW9uLmRlZmF1bHRSZXF1ZXN0VGltZW91dCA/PyB0aGlzLmNvbmZpZ3VyYXRpb24ucmVxdWVzdFRpbWVvdXRDb25maWcuZ2V0Q2hhdFRyYW5zY3JpcHRzXG4gICAgfTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zSW5zdGFuY2Uob3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGVsYXBzZWRUaW1lSW5NaWxsaXNlY29uZHMgPSB0aW1lci5taWxsaVNlY29uZHNFbGFwc2VkO1xuICAgICAgICBjb25zdCB7IGRhdGEsIGhlYWRlcnMgfSA9IHJlc3BvbnNlO1xuICAgICAgICB0aGlzLnNldEF1dGhDb2RlTm9uY2UoaGVhZGVycyk7XG5cbiAgICAgICAgdGhpcy5sb2dXaXRoTG9nZ2VyKExvZ0xldmVsLklORk8sIE9DU0RLVGVsZW1ldHJ5RXZlbnQuR0VUQ0hBVFRSQU5TQ1JJUFRTVUNDRUVERUQsIFwiR2V0IENoYXQgVHJhbnNjcmlwdCBzdWNjZWVkZWRcIiwgcmVxdWVzdElkLCByZXNwb25zZSwgZWxhcHNlZFRpbWVJbk1pbGxpc2Vjb25kcywgcmVxdWVzdFBhdGgsIG1ldGhvZCk7XG5cbiAgICAgICAgcmVzb2x2ZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnN0IGVsYXBzZWRUaW1lSW5NaWxsaXNlY29uZHMgPSB0aW1lci5taWxsaVNlY29uZHNFbGFwc2VkO1xuICAgICAgICB0aGlzLmxvZ1dpdGhMb2dnZXIoTG9nTGV2ZWwuRVJST1IsIE9DU0RLVGVsZW1ldHJ5RXZlbnQuR0VUQ0hBVFRSQU5TQ1JJUFRGQUlMRUQsIFwiR2V0IENoYXQgVHJhbnNjcmlwdCBmYWlsZWRcIiwgcmVxdWVzdElkLCB1bmRlZmluZWQsIGVsYXBzZWRUaW1lSW5NaWxsaXNlY29uZHMsIHJlcXVlc3RQYXRoLCBtZXRob2QsIGVycm9yKTtcbiAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09IENvbnN0YW50cy5heGlvc1RpbWVvdXRFcnJvckNvZGUpIHtcbiAgICAgICAgICB0aHJvd0NsaWVudEhUVFBUaW1lb3V0RXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEVtYWlsIHRyYW5zY3JpcHQgdG8gY3VzdG9tZXIuXG4gICAqIEBwYXJhbSByZXF1ZXN0SWQgUmVxdWVzdElkIG9mIHRoZSBvbW5pY2hhbm5lbCBzZXNzaW9uLlxuICAgKiBAcGFyYW0gdG9rZW4gU2t5cGUgdG9rZW4uXG4gICAqIEBwYXJhbSBlbWFpbFJlcXVlc3RCb2R5IEVtYWlsIHJlcXVlc3QgYm9keS5cbiAgICogQHBhcmFtIGVtYWlsVHJhbnNjcmlwdE9wdGlvbmFsUGFyYW1zIE9wdGlvbmFsIHBhcmFtZXRlcnMgZm9yIGVtYWlsIHRyYW5zY3JpcHQuXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgZW1haWxUcmFuc2NyaXB0KHJlcXVlc3RJZDogc3RyaW5nLCB0b2tlbjogc3RyaW5nLCBlbWFpbFJlcXVlc3RCb2R5OiBvYmplY3QsIGVtYWlsVHJhbnNjcmlwdE9wdGlvbmFsUGFyYW1zOiBJRW1haWxUcmFuc2NyaXB0T3B0aW9uYWxQYXJhbXMgPSB7fSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHRpbWVyID0gVGltZXIuVElNRVIoKTtcbiAgICB0aGlzLmxvZ1dpdGhMb2dnZXIoTG9nTGV2ZWwuSU5GTywgT0NTREtUZWxlbWV0cnlFdmVudC5FTUFJTFRSQU5TQ1JJUFRTVEFSVEVELCBcIkVtYWlsIFRyYW5zY3JpcHQgU3RhcnRlZFwiLCByZXF1ZXN0SWQpO1xuXG4gICAgbGV0IHJlcXVlc3RQYXRoID0gYC8ke09tbmljaGFubmVsRW5kcG9pbnRzLkxpdmVDaGF0VHJhbnNjcmlwdEVtYWlsUmVxdWVzdFBhdGh9LyR7cmVxdWVzdElkfT9jaGFubmVsSWQ9JHt0aGlzLm9tbmljaGFubmVsQ29uZmlndXJhdGlvbi5jaGFubmVsSWR9YDtcbiAgICBjb25zdCBheGlvc0luc3RhbmNlID0gYXhpb3MuY3JlYXRlKCk7XG4gICAgYXhpb3NSZXRyeShheGlvc0luc3RhbmNlLCB7IGhlYWRlck92ZXJ3cml0ZXM6IFtPbW5pY2hhbm5lbEhUVFBIZWFkZXJzLmF1dGhDb2RlTm9uY2VdLCByZXRyaWVzOiB0aGlzLmNvbmZpZ3VyYXRpb24ubWF4UmVxdWVzdFJldHJpZXNPbkZhaWx1cmUgfSk7XG5cbiAgICBjb25zdCB7IGF1dGhlbnRpY2F0ZWRVc2VyVG9rZW4gfSA9IGVtYWlsVHJhbnNjcmlwdE9wdGlvbmFsUGFyYW1zO1xuXG4gICAgY29uc3QgaGVhZGVyczogU3RyaW5nTWFwID0gQ29uc3RhbnRzLmRlZmF1bHRIZWFkZXJzO1xuICAgIGhlYWRlcnNbT21uaWNoYW5uZWxIVFRQSGVhZGVycy5vcmdhbml6YXRpb25JZF0gPSB0aGlzLm9tbmljaGFubmVsQ29uZmlndXJhdGlvbi5vcmdJZDtcbiAgICBoZWFkZXJzW09tbmljaGFubmVsSFRUUEhlYWRlcnMud2lkZ2V0QXBwSWRdID0gdGhpcy5vbW5pY2hhbm5lbENvbmZpZ3VyYXRpb24ud2lkZ2V0SWQ7XG4gICAgaGVhZGVyc1tPbW5pY2hhbm5lbEhUVFBIZWFkZXJzLmF1dGhvcml6YXRpb25dID0gdG9rZW47XG5cbiAgICBpZiAoYXV0aGVudGljYXRlZFVzZXJUb2tlbikge1xuICAgICAgaGVhZGVyc1tPbW5pY2hhbm5lbEhUVFBIZWFkZXJzLmF1dGhlbnRpY2F0ZWRVc2VyVG9rZW5dID0gYXV0aGVudGljYXRlZFVzZXJUb2tlbjtcbiAgICAgIGhlYWRlcnNbT21uaWNoYW5uZWxIVFRQSGVhZGVycy5hdXRoQ29kZU5vbmNlXSA9IHRoaXMuY29uZmlndXJhdGlvbi5hdXRoQ29kZU5vbmNlO1xuICAgICAgcmVxdWVzdFBhdGggPSBgLyR7T21uaWNoYW5uZWxFbmRwb2ludHMuTGl2ZUNoYXRBdXRoVHJhbnNjcmlwdEVtYWlsUmVxdWVzdFBhdGh9LyR7cmVxdWVzdElkfT9jaGFubmVsSWQ9JHt0aGlzLm9tbmljaGFubmVsQ29uZmlndXJhdGlvbi5jaGFubmVsSWR9YDtcbiAgICB9XG5cbiAgICBjb25zdCB1cmwgPSBgJHt0aGlzLm9tbmljaGFubmVsQ29uZmlndXJhdGlvbi5vcmdVcmx9JHtyZXF1ZXN0UGF0aH1gO1xuICAgIGNvbnN0IG1ldGhvZCA9IFwiUE9TVFwiO1xuICAgIGNvbnN0IG9wdGlvbnM6IEF4aW9zUmVxdWVzdENvbmZpZyA9IHtcbiAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KGVtYWlsUmVxdWVzdEJvZHkpLFxuICAgICAgaGVhZGVycyxcbiAgICAgIG1ldGhvZCxcbiAgICAgIHVybCxcbiAgICAgIHRpbWVvdXQ6IHRoaXMuY29uZmlndXJhdGlvbi5kZWZhdWx0UmVxdWVzdFRpbWVvdXQgPz8gdGhpcy5jb25maWd1cmF0aW9uLnJlcXVlc3RUaW1lb3V0Q29uZmlnLmVtYWlsVHJhbnNjcmlwdFxuICAgIH07XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvc0luc3RhbmNlKG9wdGlvbnMpO1xuICAgICAgICBjb25zdCB7IGhlYWRlcnMgfSA9IHJlc3BvbnNlO1xuICAgICAgICB0aGlzLnNldEF1dGhDb2RlTm9uY2UoaGVhZGVycyk7XG5cbiAgICAgICAgY29uc3QgZWxhcHNlZFRpbWVJbk1pbGxpc2Vjb25kcyA9IHRpbWVyLm1pbGxpU2Vjb25kc0VsYXBzZWQ7XG4gICAgICAgIHRoaXMubG9nV2l0aExvZ2dlcihMb2dMZXZlbC5JTkZPLCBPQ1NES1RlbGVtZXRyeUV2ZW50LkVNQUlMVFJBTlNDUklQVFNVQ0NFRURFRCwgXCJFbWFpbCBUcmFuc2NyaXB0IHN1Y2NlZWRlZFwiLCByZXF1ZXN0SWQsIHJlc3BvbnNlLCBlbGFwc2VkVGltZUluTWlsbGlzZWNvbmRzLCByZXF1ZXN0UGF0aCwgbWV0aG9kKTtcblxuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zdCBlbGFwc2VkVGltZUluTWlsbGlzZWNvbmRzID0gdGltZXIubWlsbGlTZWNvbmRzRWxhcHNlZDtcbiAgICAgICAgdGhpcy5sb2dXaXRoTG9nZ2VyKExvZ0xldmVsLkVSUk9SLCBPQ1NES1RlbGVtZXRyeUV2ZW50LkVNQUlMVFJBTlNDUklQVEZBSUxFRCwgXCJFbWFpbCBUcmFuc2NyaXB0IEZhaWxlZFwiLCByZXF1ZXN0SWQsIHVuZGVmaW5lZCwgZWxhcHNlZFRpbWVJbk1pbGxpc2Vjb25kcywgcmVxdWVzdFBhdGgsIG1ldGhvZCwgZXJyb3IpO1xuICAgICAgICBpZiAoZXJyb3IuY29kZSA9PT0gQ29uc3RhbnRzLmF4aW9zVGltZW91dEVycm9yQ29kZSkge1xuICAgICAgICAgIHRocm93Q2xpZW50SFRUUFRpbWVvdXRFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggZGF0YSBtYXNraW5nIGluZm8gb2YgdGhlIG9yZy5cbiAgICogQHBhcmFtIHJlcXVlc3RJZCBSZXF1ZXN0SWQgb2YgdGhlIG9tbmljaGFubmVsIHNlc3Npb24gKE9wdGlvbmFsKS5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBmZXRjaERhdGFNYXNraW5nSW5mbyhyZXF1ZXN0SWQ6IHN0cmluZyk6IFByb21pc2U8SURhdGFNYXNraW5nSW5mbz4ge1xuICAgIGNvbnN0IHRpbWVyID0gVGltZXIuVElNRVIoKTtcbiAgICB0aGlzLmxvZ1dpdGhMb2dnZXIoTG9nTGV2ZWwuSU5GTywgT0NTREtUZWxlbWV0cnlFdmVudC5GRVRDSERBVEFNQVNLSU5HU1RBUlRFRCwgXCJGZXRjaCBEYXRhIE1hc2tpbmcgU3RhcnRlZFwiLCByZXF1ZXN0SWQpO1xuICAgIGlmICghcmVxdWVzdElkKSB7XG4gICAgICByZXF1ZXN0SWQgPSB1dWlkdjQoKTtcbiAgICB9XG5cbiAgICBjb25zdCByZXF1ZXN0UGF0aCA9IGAvJHtPbW5pY2hhbm5lbEVuZHBvaW50cy5MaXZlQ2hhdEZldGNoRGF0YU1hc2tpbmdJbmZvUGF0aH0vJHt0aGlzLm9tbmljaGFubmVsQ29uZmlndXJhdGlvbi5vcmdJZH1gO1xuICAgIGNvbnN0IGF4aW9zSW5zdGFuY2UgPSBheGlvcy5jcmVhdGUoKTtcbiAgICBheGlvc1JldHJ5KGF4aW9zSW5zdGFuY2UsIHsgcmV0cmllczogdGhpcy5jb25maWd1cmF0aW9uLm1heFJlcXVlc3RSZXRyaWVzT25GYWlsdXJlIH0pO1xuXG4gICAgY29uc3QgaGVhZGVyczogU3RyaW5nTWFwID0gQ29uc3RhbnRzLmRlZmF1bHRIZWFkZXJzO1xuICAgIGhlYWRlcnNbT21uaWNoYW5uZWxIVFRQSGVhZGVycy5vcmdhbml6YXRpb25JZF0gPSB0aGlzLm9tbmljaGFubmVsQ29uZmlndXJhdGlvbi5vcmdJZDtcbiAgICBoZWFkZXJzW09tbmljaGFubmVsSFRUUEhlYWRlcnMucmVxdWVzdElkXSA9IHJlcXVlc3RJZDtcblxuICAgIGNvbnN0IHVybCA9IGAke3RoaXMub21uaWNoYW5uZWxDb25maWd1cmF0aW9uLm9yZ1VybH0ke3JlcXVlc3RQYXRofWA7XG4gICAgY29uc3QgbWV0aG9kID0gXCJHRVRcIjtcbiAgICBjb25zdCBvcHRpb25zOiBBeGlvc1JlcXVlc3RDb25maWcgPSB7XG4gICAgICBoZWFkZXJzLFxuICAgICAgbWV0aG9kLFxuICAgICAgdXJsLFxuICAgICAgdGltZW91dDogdGhpcy5jb25maWd1cmF0aW9uLmRlZmF1bHRSZXF1ZXN0VGltZW91dCA/PyB0aGlzLmNvbmZpZ3VyYXRpb24ucmVxdWVzdFRpbWVvdXRDb25maWcuZmV0Y2hEYXRhTWFza2luZ0luZm9cbiAgICB9O1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3NJbnN0YW5jZShvcHRpb25zKTtcbiAgICAgICAgY29uc3QgZWxhcHNlZFRpbWVJbk1pbGxpc2Vjb25kcyA9IHRpbWVyLm1pbGxpU2Vjb25kc0VsYXBzZWQ7XG4gICAgICAgIGNvbnN0IHsgZGF0YSB9ID0gcmVzcG9uc2U7XG4gICAgICAgIHRoaXMubG9nV2l0aExvZ2dlcihMb2dMZXZlbC5JTkZPLCBPQ1NES1RlbGVtZXRyeUV2ZW50LkZFVENIREFUQU1BU0tJTkdTVUNDRUVERUQsIFwiRmV0Y2ggRGF0YSBNYXNraW5nIHN1Y2NlZWRlZFwiLCByZXF1ZXN0SWQsIHJlc3BvbnNlLCBlbGFwc2VkVGltZUluTWlsbGlzZWNvbmRzLCByZXF1ZXN0UGF0aCwgbWV0aG9kKTtcblxuICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc3QgZWxhcHNlZFRpbWVJbk1pbGxpc2Vjb25kcyA9IHRpbWVyLm1pbGxpU2Vjb25kc0VsYXBzZWQ7XG4gICAgICAgIHRoaXMubG9nV2l0aExvZ2dlcihMb2dMZXZlbC5FUlJPUiwgT0NTREtUZWxlbWV0cnlFdmVudC5GRVRDSERBVEFNQVNLSU5HRkFJTEVELCBcIkZldGNoIERhdGEgTWFza2luZyBGYWlsZWRcIiwgcmVxdWVzdElkLCB1bmRlZmluZWQsIGVsYXBzZWRUaW1lSW5NaWxsaXNlY29uZHMsIHJlcXVlc3RQYXRoLCBtZXRob2QsIGVycm9yKTtcbiAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09IENvbnN0YW50cy5heGlvc1RpbWVvdXRFcnJvckNvZGUpIHtcbiAgICAgICAgICB0aHJvd0NsaWVudEhUVFBUaW1lb3V0RXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIE1ha2VzIGEgc2Vjb25kYXJ5IGNoYW5uZWwgZXZlbnQgbmV0d29yayBjYWxsIHRvIE9tbmljaGFubmVsLlxuICAgKiBAcGFyYW0gcmVxdWVzdElkIFJlcXVlc3RJZCB0byB1c2UgZm9yIHNlY29uZGFyeSBjaGFubmVsIGV2ZW50XG4gICAqIEBwYXJhbSBzZWNvbmRhcnlDaGFubmVsRXZlbnRSZXF1ZXN0Qm9keSBzZWNvbmRhcnlDaGFubmVsIGV2ZW50IHJlcXVlc3QgYm9keVxuICAgKiBAcGFyYW0gc2Vjb25kYXJ5Q2hhbm5lbEV2ZW50T3B0aW9uYWxQYXJhbXMgT3B0aW9uYWwgcGFyYW1ldGVycyBmb3Igc2Vjb25kYXJ5IGNoYW5uZWwgZXZlbnRzLlxuICAgKi9cbiAgcHVibGljIGFzeW5jIG1ha2VTZWNvbmRhcnlDaGFubmVsRXZlbnRSZXF1ZXN0KHJlcXVlc3RJZDogc3RyaW5nLCBzZWNvbmRhcnlDaGFubmVsRXZlbnRSZXF1ZXN0Qm9keTogb2JqZWN0LCBzZWNvbmRhcnlDaGFubmVsRXZlbnRPcHRpb25hbFBhcmFtczogSVNlY29uZGFyeUNoYW5uZWxFdmVudE9wdGlvbmFsUGFyYW1zID0ge30pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCB0aW1lciA9IFRpbWVyLlRJTUVSKCk7XG4gICAgdGhpcy5sb2dXaXRoTG9nZ2VyKExvZ0xldmVsLklORk8sIE9DU0RLVGVsZW1ldHJ5RXZlbnQuU0VDT05EQVJZQ0hBTk5FTEVWRU5UUkVRVUVTVFNUQVJURUQsIFwiU2Vjb25kYXJ5IENoYW5uZWwgRXZlbnQgUmVxdWVzdCBTdGFydGVkXCIsIHJlcXVlc3RJZCk7XG5cbiAgICBsZXQgcmVxdWVzdFBhdGggPSBgLyR7T21uaWNoYW5uZWxFbmRwb2ludHMuTGl2ZUNoYXRTZWNvbmRhcnlDaGFubmVsRXZlbnRQYXRofS8ke3RoaXMub21uaWNoYW5uZWxDb25maWd1cmF0aW9uLm9yZ0lkfS8ke3RoaXMub21uaWNoYW5uZWxDb25maWd1cmF0aW9uLndpZGdldElkfS8ke3JlcXVlc3RJZH1gO1xuICAgIGNvbnN0IGF4aW9zSW5zdGFuY2UgPSBheGlvcy5jcmVhdGUoKTtcbiAgICBheGlvc1JldHJ5KGF4aW9zSW5zdGFuY2UsIHsgaGVhZGVyT3ZlcndyaXRlczogW09tbmljaGFubmVsSFRUUEhlYWRlcnMuYXV0aENvZGVOb25jZV0sIHJldHJpZXM6IHRoaXMuY29uZmlndXJhdGlvbi5tYXhSZXF1ZXN0UmV0cmllc09uRmFpbHVyZSB9KTtcblxuICAgIGNvbnN0IHsgYXV0aGVudGljYXRlZFVzZXJUb2tlbiB9ID0gc2Vjb25kYXJ5Q2hhbm5lbEV2ZW50T3B0aW9uYWxQYXJhbXM7XG5cbiAgICBjb25zdCBoZWFkZXJzOiBTdHJpbmdNYXAgPSBDb25zdGFudHMuZGVmYXVsdEhlYWRlcnM7XG4gICAgaGVhZGVyc1tPbW5pY2hhbm5lbEhUVFBIZWFkZXJzLm9yZ2FuaXphdGlvbklkXSA9IHRoaXMub21uaWNoYW5uZWxDb25maWd1cmF0aW9uLm9yZ0lkO1xuXG4gICAgaWYgKGF1dGhlbnRpY2F0ZWRVc2VyVG9rZW4pIHtcbiAgICAgIGhlYWRlcnNbT21uaWNoYW5uZWxIVFRQSGVhZGVycy5hdXRoZW50aWNhdGVkVXNlclRva2VuXSA9IGF1dGhlbnRpY2F0ZWRVc2VyVG9rZW47XG4gICAgICBoZWFkZXJzW09tbmljaGFubmVsSFRUUEhlYWRlcnMuYXV0aENvZGVOb25jZV0gPSB0aGlzLmNvbmZpZ3VyYXRpb24uYXV0aENvZGVOb25jZTtcbiAgICAgIHJlcXVlc3RQYXRoID0gYC8ke09tbmljaGFubmVsRW5kcG9pbnRzLkxpdmVDaGF0QXV0aFNlY29uZGFyeUNoYW5uZWxFdmVudFBhdGh9LyR7dGhpcy5vbW5pY2hhbm5lbENvbmZpZ3VyYXRpb24ub3JnSWR9LyR7dGhpcy5vbW5pY2hhbm5lbENvbmZpZ3VyYXRpb24ud2lkZ2V0SWR9LyR7cmVxdWVzdElkfWA7XG4gICAgfVxuXG4gICAgcmVxdWVzdFBhdGggKz0gXCI/Y2hhbm5lbElkPVwiICsgQ29uc3RhbnRzLmRlZmF1bHRDaGFubmVsSWQ7XG5cbiAgICBjb25zdCB1cmwgPSBgJHt0aGlzLm9tbmljaGFubmVsQ29uZmlndXJhdGlvbi5vcmdVcmx9JHtyZXF1ZXN0UGF0aH1gO1xuICAgIGNvbnN0IG1ldGhvZCA9IFwiUE9TVFwiO1xuICAgIGNvbnN0IG9wdGlvbnM6IEF4aW9zUmVxdWVzdENvbmZpZyA9IHtcbiAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHNlY29uZGFyeUNoYW5uZWxFdmVudFJlcXVlc3RCb2R5KSxcbiAgICAgIGhlYWRlcnMsXG4gICAgICBtZXRob2QsXG4gICAgICB1cmwsXG4gICAgICB0aW1lb3V0OiB0aGlzLmNvbmZpZ3VyYXRpb24uZGVmYXVsdFJlcXVlc3RUaW1lb3V0ID8/IHRoaXMuY29uZmlndXJhdGlvbi5yZXF1ZXN0VGltZW91dENvbmZpZy5tYWtlU2Vjb25kYXJ5Q2hhbm5lbEV2ZW50UmVxdWVzdFxuICAgIH07XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvc0luc3RhbmNlKG9wdGlvbnMpO1xuICAgICAgICBjb25zdCB7IGhlYWRlcnMgfSA9IHJlc3BvbnNlO1xuICAgICAgICB0aGlzLnNldEF1dGhDb2RlTm9uY2UoaGVhZGVycyk7XG5cbiAgICAgICAgY29uc3QgZWxhcHNlZFRpbWVJbk1pbGxpc2Vjb25kcyA9IHRpbWVyLm1pbGxpU2Vjb25kc0VsYXBzZWQ7XG4gICAgICAgIHRoaXMubG9nV2l0aExvZ2dlcihMb2dMZXZlbC5JTkZPLCBPQ1NES1RlbGVtZXRyeUV2ZW50LlNFQ09OREFSWUNIQU5ORUxFVkVOVFJFUVVFU1RTVUNDRUVERUQsIFwiU2Vjb25kYXJ5IENoYW5uZWwgRXZlbnQgUmVxdWVzdCBTdWNjZWVkZWRcIiwgcmVxdWVzdElkLCByZXNwb25zZSwgZWxhcHNlZFRpbWVJbk1pbGxpc2Vjb25kcywgcmVxdWVzdFBhdGgsIG1ldGhvZCk7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnN0IGVsYXBzZWRUaW1lSW5NaWxsaXNlY29uZHMgPSB0aW1lci5taWxsaVNlY29uZHNFbGFwc2VkO1xuICAgICAgICB0aGlzLmxvZ1dpdGhMb2dnZXIoTG9nTGV2ZWwuRVJST1IsIE9DU0RLVGVsZW1ldHJ5RXZlbnQuU0VDT05EQVJZQ0hBTk5FTEVWRU5UUkVRVUVTVEZBSUxFRCwgXCJTZWNvbmRhcnkgQ2hhbm5lbCBFdmVudCBSZXF1ZXN0IEZhaWxlZFwiLCByZXF1ZXN0SWQsIHVuZGVmaW5lZCwgZWxhcHNlZFRpbWVJbk1pbGxpc2Vjb25kcywgcmVxdWVzdFBhdGgsIG1ldGhvZCwgZXJyb3IpO1xuICAgICAgICBpZiAoZXJyb3IuY29kZSA9PT0gQ29uc3RhbnRzLmF4aW9zVGltZW91dEVycm9yQ29kZSkge1xuICAgICAgICAgIHRocm93Q2xpZW50SFRUUFRpbWVvdXRFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKiogU2VuZCB0eXBpbmcgaW5kaWNhdG9yXG4gICAqIEBwYXJhbSByZXF1ZXN0SWQgUmVxdWVzdElkIG9mIHRoZSBvbW5pY2hhbm5lbCBzZXNzaW9uLlxuICAgKi9cbiAgcHVibGljIGFzeW5jIHNlbmRUeXBpbmdJbmRpY2F0b3IocmVxdWVzdElkOiBzdHJpbmcsIGN1cnJlbnRMaXZlQ2hhdFZlcnNpb246IG51bWJlciwgc2VuZFR5cGluZ0luZGljYXRvck9wdGlvbmFsUGFyYW1zOiBJU2VuZFR5cGluZ0luZGljYXRvck9wdGlvbmFsUGFyYW1zID0ge30pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAvLyBhdm9pZGluZyBsb2dnaW5nIEluZm8gZm9yIHR5cGluZ2luZGljYXRvciB0byByZWR1Y2UgbG9nIHRyYWZmaWNcbiAgICBpZiAoIWN1cnJlbnRMaXZlQ2hhdFZlcnNpb24gfHwgY3VycmVudExpdmVDaGF0VmVyc2lvbiAhPT0gTGl2ZUNoYXRWZXJzaW9uLlYyKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGNvbnN0IHRpbWVyID0gVGltZXIuVElNRVIoKTtcbiAgICBjb25zdCB7IGN1c3RvbWVyRGlzcGxheU5hbWUgfSA9IHNlbmRUeXBpbmdJbmRpY2F0b3JPcHRpb25hbFBhcmFtcztcbiAgICBpZiAoIWN1cnJlbnRMaXZlQ2hhdFZlcnNpb24gfHwgY3VycmVudExpdmVDaGF0VmVyc2lvbiAhPT0gTGl2ZUNoYXRWZXJzaW9uLlYyKSB7IHRocm93IG5ldyBFcnJvcignVHlwaW5nIGluZGljYXRvciBpcyBvbmx5IHN1cHBvcnRlZCBvbiB2MicpIH1cbiAgICBjb25zdCByZXF1ZXN0UGF0aCA9IGAvJHtPbW5pY2hhbm5lbEVuZHBvaW50cy5TZW5kVHlwaW5nSW5kaWNhdG9yUGF0aH0vJHtyZXF1ZXN0SWR9YDtcbiAgICBjb25zdCBheGlvc0luc3RhbmNlID0gYXhpb3MuY3JlYXRlKCk7XG5cbiAgICBjb25zdCBoZWFkZXJzOiBTdHJpbmdNYXAgPSBDb25zdGFudHMuZGVmYXVsdEhlYWRlcnM7XG4gICAgaGVhZGVyc1tPbW5pY2hhbm5lbEhUVFBIZWFkZXJzLm9yZ2FuaXphdGlvbklkXSA9IHRoaXMub21uaWNoYW5uZWxDb25maWd1cmF0aW9uLm9yZ0lkO1xuICAgIGlmIChjdXN0b21lckRpc3BsYXlOYW1lKSB7XG4gICAgICBoZWFkZXJzW0NvbnN0YW50cy5jdXN0b21lckRpc3BsYXlOYW1lXSA9IGN1c3RvbWVyRGlzcGxheU5hbWU7XG4gICAgfVxuXG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5vbW5pY2hhbm5lbENvbmZpZ3VyYXRpb24ub3JnVXJsfSR7cmVxdWVzdFBhdGh9YDtcbiAgICBjb25zdCBtZXRob2QgPSBcIlBPU1RcIjtcbiAgICBjb25zdCBvcHRpb25zOiBBeGlvc1JlcXVlc3RDb25maWcgPSB7XG4gICAgICBoZWFkZXJzLFxuICAgICAgbWV0aG9kLFxuICAgICAgdXJsLFxuICAgICAgdGltZW91dDogdGhpcy5jb25maWd1cmF0aW9uLmRlZmF1bHRSZXF1ZXN0VGltZW91dCA/PyB0aGlzLmNvbmZpZ3VyYXRpb24ucmVxdWVzdFRpbWVvdXRDb25maWcuc2VuZFR5cGluZ0luZGljYXRvclxuICAgIH07XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvc0luc3RhbmNlKG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBlbGFwc2VkVGltZUluTWlsbGlzZWNvbmRzID0gdGltZXIubWlsbGlTZWNvbmRzRWxhcHNlZDtcbiAgICAgICAgdGhpcy5sb2dXaXRoTG9nZ2VyKExvZ0xldmVsLklORk8sIE9DU0RLVGVsZW1ldHJ5RXZlbnQuU0VORFRZUElOR0lORElDQVRPUlNVQ0NFRURFRCwgXCJTZW5kIFR5cGluZyBJbmRpY2F0b3IgU3VjY2VlZGVkXCIsIHJlcXVlc3RJZCwgcmVzcG9uc2UsIGVsYXBzZWRUaW1lSW5NaWxsaXNlY29uZHMsIHJlcXVlc3RQYXRoLCBtZXRob2QpO1xuXG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnN0IGVsYXBzZWRUaW1lSW5NaWxsaXNlY29uZHMgPSB0aW1lci5taWxsaVNlY29uZHNFbGFwc2VkO1xuXG4gICAgICAgIHRoaXMubG9nV2l0aExvZ2dlcihMb2dMZXZlbC5FUlJPUiwgT0NTREtUZWxlbWV0cnlFdmVudC5TRU5EVFlQSU5HSU5ESUNBVE9SRkFJTEVELCBcIlNlbmQgVHlwaW5nIEluZGljYXRvciBGYWlsZWRcIiwgcmVxdWVzdElkLCB1bmRlZmluZWQsIGVsYXBzZWRUaW1lSW5NaWxsaXNlY29uZHMsIHJlcXVlc3RQYXRoLCBtZXRob2QsIGVycm9yKTtcblxuICAgICAgICBpZiAoZXJyb3IuY29kZSA9PT0gQ29uc3RhbnRzLmF4aW9zVGltZW91dEVycm9yQ29kZSkge1xuICAgICAgICAgIHRocm93Q2xpZW50SFRUUFRpbWVvdXRFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogSGVscGVyIGZ1bmN0aW9uIGZvciBsb2dnaW5nLlxuICAgKlxuICAgKiBAcGFyYW0gbG9nTGV2ZWwgTG9nIGxldmVsIGZvciBsb2dnaW5nLlxuICAgKiBAcGFyYW0gdGVsZW1ldHJ5RXZlbnRUeXBlIFRlbGVtZXRyeSBldmVudCB0eXBlIGluIHdoaWNoIGV2ZW50IHdpbGwgYmUgbG9nZ2VkLlxuICAgKiBAcGFyYW0gZGVzY3JpcHRpb24gRGVzY3JpcHRpb24gb2YgdGhlIGV2ZW50LlxuICAgKiBAcGFyYW0gcmVxdWVzdElkIFJlcXVlc3QgSURcbiAgICogQHBhcmFtIHJlc3BvbnNlIFJlc3BvbnNlXG4gICAqIEBwYXJhbSBlbGFwc2VkVGltZUluTWlsbGlzZWNvbmRzIEVsYXBzZWQgdGltZSBpbiBtc1xuICAgKiBAcGFyYW0gcmVxdWVzdFBhdGggUmVxdWVzdCBwYXRoXG4gICAqIEBwYXJhbSBtZXRob2QgTWV0aG9kXG4gICAqIEBwYXJhbSBlcnJvciBFcnJvclxuICAgKiBAcGFyYW0gZGF0YSBEYXRhXG4gICAqL1xuICBwcml2YXRlIGxvZ1dpdGhMb2dnZXIobG9nTGV2ZWw6IExvZ0xldmVsLCB0ZWxlbWV0cnlFdmVudFR5cGU6IE9DU0RLVGVsZW1ldHJ5RXZlbnQsIGRlc2NyaXB0aW9uOiBzdHJpbmcsIHJlcXVlc3RJZD86IHN0cmluZywgcmVzcG9uc2U/OiBBeGlvc1Jlc3BvbnNlPGFueT4sIGVsYXBzZWRUaW1lSW5NaWxsaXNlY29uZHM/OiBudW1iZXIsIHJlcXVlc3RQYXRoPzogc3RyaW5nLCBtZXRob2Q/OiBzdHJpbmcsIGVycm9yPzogdW5rbm93biwgcmVxdWVzdFBheWxvYWQ/OiBhbnkpOiB2b2lkIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgaWYgKCF0aGlzLmxvZ2dlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIExvZ2dpbmdTYW5pdGl6ZXIuc3RyaXBFcnJvclNlbnNpdGl2ZVByb3BlcnRpZXMoZXJyb3IpO1xuICAgIH1cblxuICAgIGxldCBzYW5pdGl6ZWRSZXF1ZXN0UGF5bG9hZCA9IHVuZGVmaW5lZDtcbiAgICBpZiAocmVxdWVzdFBheWxvYWQpIHtcbiAgICAgIHNhbml0aXplZFJlcXVlc3RQYXlsb2FkID0geyAuLi5yZXF1ZXN0UGF5bG9hZCB9O1xuICAgICAgaWYgKHNhbml0aXplZFJlcXVlc3RQYXlsb2FkLmN1c3RvbUNvbnRleHREYXRhKSB7XG4gICAgICAgIExvZ2dpbmdTYW5pdGl6ZXIuc3RyaXBDdXN0b21Db250ZXh0RGF0YVZhbHVlcyhzYW5pdGl6ZWRSZXF1ZXN0UGF5bG9hZC5jdXN0b21Db250ZXh0RGF0YSk7XG4gICAgICB9XG4gICAgICBpZiAoc2FuaXRpemVkUmVxdWVzdFBheWxvYWQucHJlQ2hhdFJlc3BvbnNlKSB7XG4gICAgICAgIExvZ2dpbmdTYW5pdGl6ZXIuc3RyaXBQcmVDaGF0UmVzcG9uc2Uoc2FuaXRpemVkUmVxdWVzdFBheWxvYWQucHJlQ2hhdFJlc3BvbnNlKTtcbiAgICAgIH1cbiAgICAgIExvZ2dpbmdTYW5pdGl6ZXIuc3RyaXBHZW9sb2NhdGlvbihzYW5pdGl6ZWRSZXF1ZXN0UGF5bG9hZCk7XG4gICAgfVxuXG4gICAgY29uc3QgY3VzdG9tRGF0YSA9IHtcbiAgICAgIFJlcXVlc3RJZDogcmVxdWVzdElkLFxuICAgICAgUmVnaW9uOiByZXNwb25zZT8uZGF0YS5SZWdpb24sXG4gICAgICBFbGFwc2VkVGltZUluTWlsbGlzZWNvbmRzOiBlbGFwc2VkVGltZUluTWlsbGlzZWNvbmRzLFxuICAgICAgVHJhbnNhY3Rpb25JZDogcmVzcG9uc2U/LmhlYWRlcnNbQ29uc3RhbnRzLnRyYW5zYWN0aW9uaWRdLFxuICAgICAgUmVxdWVzdFBhdGg6IHJlcXVlc3RQYXRoLFxuICAgICAgUmVxdWVzdE1ldGhvZDogbWV0aG9kLFxuICAgICAgUmVzcG9uc2VTdGF0dXNDb2RlOiByZXNwb25zZSA/IHJlc3BvbnNlLnN0YXR1cyA6IGVycm9yID8gKGVycm9yIGFzIGFueSkucmVzcG9uc2U/LnN0YXR1cyA6IHVuZGVmaW5lZCwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICBFeGNlcHRpb25EZXRhaWxzOiBlcnJvcixcbiAgICAgIFJlcXVlc3RQYXlsb2FkOiBzYW5pdGl6ZWRSZXF1ZXN0UGF5bG9hZFxuICAgIH07XG4gICAgdGhpcy5sb2dnZXIubG9nKGxvZ0xldmVsLCB0ZWxlbWV0cnlFdmVudFR5cGUsIGN1c3RvbURhdGEsIGRlc2NyaXB0aW9uKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIHByaXZhdGUgc2V0QXV0aENvZGVOb25jZSA9IChoZWFkZXJzOiBhbnkpID0+IHtcbiAgICBpZiAoaGVhZGVycz8uYXV0aGNvZGVub25jZSkge1xuICAgICAgdGhpcy5jb25maWd1cmF0aW9uLmF1dGhDb2RlTm9uY2UgPSBoZWFkZXJzPy5hdXRoY29kZW5vbmNlO1xuICAgIH1cbiAgfVxufVxuIl19