import { IconButton } from "@fluentui/react";
import React, { useCallback, useEffect, useState } from "react";
import { BroadcastService } from "../../../services/BroadcastService";
import { AriaLabels, ButtonTypes, ElementType, EventNames, IconNames } from "../../../common/Constants";

function AudioNotificationButton(props) {
  const {
    disabled
  } = props;
  const [muted, setMuted] = useState(props.isAudioMuted);
  let iconStyles = {};

  if (props.type === ButtonTypes.Icon) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    iconStyles = { ...(props === null || props === void 0 ? void 0 : props.styles).icon
    };
  }

  const iconButtonStyles = {
    icon: iconStyles,
    root: {
      selectors: {
        ":hover .ms-Button-icon": { // eslint-disable-next-line @typescript-eslint/no-explicit-any
          ...(props === null || props === void 0 ? void 0 : props.hoverStyles).icon
        },
        ":active .ms-Button-icon": { // eslint-disable-next-line @typescript-eslint/no-explicit-any
          ...(props === null || props === void 0 ? void 0 : props.hoverStyles).icon
        },
        ":focus .ms-Button-icon": { // eslint-disable-next-line @typescript-eslint/no-explicit-any
          ...(props === null || props === void 0 ? void 0 : props.focusStyles).icon
        }
      },
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      ...(props === null || props === void 0 ? void 0 : props.styles)
    },
    rootHovered: props.hoverStyles,
    rootFocused: props.focusStyles,
    rootPressed: props.hoverStyles
  }; //imageIconProps > iconName

  const volume0Icon = props.imageToggleIconProps ? {
    imageProps: props === null || props === void 0 ? void 0 : props.imageToggleIconProps
  } : {
    iconName: (props === null || props === void 0 ? void 0 : props.toggleIconName) ?? IconNames.Volume0
  };
  const volume3Icon = props.imageIconProps ? {
    imageProps: props === null || props === void 0 ? void 0 : props.imageIconProps
  } : {
    iconName: (props === null || props === void 0 ? void 0 : props.iconName) ?? IconNames.Volume3
  };
  const handleOnClick = useCallback(() => {
    setMuted(!muted);

    if (props !== null && props !== void 0 && props.onClick) {
      const customEvent = {
        elementType: ElementType.FooterSoundNotificationButton,
        elementId: props === null || props === void 0 ? void 0 : props.id,
        eventName: EventNames.OnClick
      };
      BroadcastService.postMessage(customEvent);
      props === null || props === void 0 ? void 0 : props.onClick();
    }
  }, [props.onClick, muted]);
  useEffect(() => {
    setMuted(props.isAudioMuted);
  }, [props.isAudioMuted]);
  return /*#__PURE__*/React.createElement(IconButton, {
    id: props === null || props === void 0 ? void 0 : props.id,
    iconProps: muted ? volume0Icon : volume3Icon,
    onClick: handleOnClick,
    allowDisabledFocus: true,
    disabled: disabled,
    styles: iconButtonStyles,
    className: props.className,
    title: undefined,
    ariaLabel: muted ? props.toggleAriaLabel ?? AriaLabels.TurnSoundOn : props.ariaLabel ?? AriaLabels.TurnSoundOff
  });
}

export default AudioNotificationButton;