import { DefaultButton, IconButton } from "@fluentui/react";
import React, { useCallback } from "react";
import { BroadcastService } from "../../../services/BroadcastService";
import { ElementType, EventNames, ButtonTypes } from "../../../common/Constants";

function CommandButton(props) {
  var _props$hoverStyles, _props$hoverStyles2, _props$focusStyles;

  //imageIconProps > iconName
  const iconProp = props.imageIconProps ? {
    imageProps: props.imageIconProps
  } : {
    iconName: props.iconName
  };
  let iconStyles = {};

  if (props.type === ButtonTypes.Icon) {
    var _props$styles;

    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    iconStyles = { ...(props === null || props === void 0 ? void 0 : (_props$styles = props.styles) === null || _props$styles === void 0 ? void 0 : _props$styles.icon)
    };
  }

  const buttonStyles = {
    icon: { ...iconStyles
    },
    root: {
      selectors: {
        ":hover .ms-Button-icon": { // eslint-disable-next-line @typescript-eslint/no-explicit-any
          ...(props === null || props === void 0 ? void 0 : (_props$hoverStyles = props.hoverStyles) === null || _props$hoverStyles === void 0 ? void 0 : _props$hoverStyles.icon)
        },
        ":active .ms-Button-icon": { // eslint-disable-next-line @typescript-eslint/no-explicit-any
          ...(props === null || props === void 0 ? void 0 : (_props$hoverStyles2 = props.hoverStyles) === null || _props$hoverStyles2 === void 0 ? void 0 : _props$hoverStyles2.icon)
        },
        ":focus .ms-Button-icon": { // eslint-disable-next-line @typescript-eslint/no-explicit-any
          ...(props === null || props === void 0 ? void 0 : (_props$focusStyles = props.focusStyles) === null || _props$focusStyles === void 0 ? void 0 : _props$focusStyles.icon)
        }
      },
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      ...(props === null || props === void 0 ? void 0 : props.styles)
    },
    rootHovered: props.hoverStyles,
    rootFocused: props.focusStyles,
    rootPressed: props.hoverStyles
  };
  const handleOnClick = useCallback(() => {
    if (props !== null && props !== void 0 && props.onClick) {
      const customEvent = props.customEvent ?? {
        eventName: EventNames.OnClick,
        elementType: ElementType.Custom,
        elementId: props === null || props === void 0 ? void 0 : props.id
      };
      BroadcastService.postMessage(customEvent);
      props === null || props === void 0 ? void 0 : props.onClick();
    }
  }, []);
  return /*#__PURE__*/React.createElement(React.Fragment, null, props.type === ButtonTypes.Text && /*#__PURE__*/React.createElement(DefaultButton, {
    id: props.id,
    text: props.text,
    ariaLabel: props.ariaLabel,
    onClick: handleOnClick,
    disabled: props.disabled,
    className: props.className,
    styles: buttonStyles,
    title: props.hideButtonTitle ? undefined : props.ariaLabel
  }), props.type === ButtonTypes.Icon && /*#__PURE__*/React.createElement(IconButton, {
    id: props.id,
    iconProps: iconProp,
    title: props.hideButtonTitle ? undefined : props.ariaLabel,
    ariaLabel: props.ariaLabel,
    disabled: props.disabled,
    styles: buttonStyles,
    onClick: handleOnClick,
    className: props.className
  }));
}

export default CommandButton;