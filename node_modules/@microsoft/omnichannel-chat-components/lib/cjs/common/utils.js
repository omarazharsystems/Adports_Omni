"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uuidv4 = exports.replaceURLWithAnchor = exports.processCustomComponents = exports.getValidatedURL = exports.getSeconds = exports.getMinutes = exports.getInputValuesFromAdaptiveCard = exports.getHours = exports.generateEventName = exports.broadcastError = exports.addNoreferrerNoopenerTag = void 0;

var _Constants = require("./Constants");

var _BroadcastService = require("../services/BroadcastService");

var _ = require("..");

const uuidv4 = () => {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, c => {
    const r = Math.random() * 16 | 0,
          v = c === "x" ? r : r & 0x3 | 0x8;
    return v.toString(16);
  });
};

exports.uuidv4 = uuidv4;

const generateEventName = (controlId, prefix, suffix) => {
  let eventName = "";
  if (prefix) eventName += prefix;
  if (controlId) eventName += controlId;
  if (suffix) eventName += suffix;
  return eventName;
}; //Broadcast Error
// eslint-disable-next-line @typescript-eslint/no-explicit-any


exports.generateEventName = generateEventName;

const broadcastError = (elementId, error, propName, elementType) => {
  const onJSONParseErrorEventName = generateEventName(elementId, propName, "JSONParseError");
  const onJSONParseErrorEvent = {
    elementId: elementId,
    elementType: elementType,
    eventName: onJSONParseErrorEventName,
    payload: error
  };
  console.error("JSON Parse Error ", elementId, propName, error);

  _BroadcastService.BroadcastService.postMessage(onJSONParseErrorEvent);
};

exports.broadcastError = broadcastError;

const getInputValuesFromAdaptiveCard = adaptiveCard => {
  const inputs = adaptiveCard.getAllInputs();
  const adaptiveCardValues = [];

  for (const input of inputs) {
    adaptiveCardValues.push({
      index: input.index,
      label: input.label,
      id: input.id,
      value: input.value
    });
  }

  return adaptiveCardValues;
};

exports.getInputValuesFromAdaptiveCard = getInputValuesFromAdaptiveCard;

const processCustomComponents = children => {
  if (!children || children.length === 0) return null;
  return children.map(child => (0, _.decodeComponentString)(child));
};

exports.processCustomComponents = processCustomComponents;

const getValidatedURL = url => {
  if (new RegExp(_Constants.Regex.URLRegex).test(url)) return url;
  return "";
};

exports.getValidatedURL = getValidatedURL;

const getHours = time => {
  return ("0" + Math.floor(time / (60 * 60 * 1000) % 24)).slice(-2);
};

exports.getHours = getHours;

const getMinutes = time => {
  return ("0" + Math.floor(time / 60000 % 60)).slice(-2);
};

exports.getMinutes = getMinutes;

const getSeconds = time => {
  return ("0" + Math.floor(time / 1000 % 60)).slice(-2);
}; // eslint-disable-next-line @typescript-eslint/no-explicit-any


exports.getSeconds = getSeconds;

const addNoreferrerNoopenerTag = htmlNode => {
  const aNodes = htmlNode.getElementsByTagName("a");

  if ((aNodes === null || aNodes === void 0 ? void 0 : aNodes.length) > 0) {
    for (let index = 0; index < aNodes.length; index++) {
      var _aNode$tagName;

      const aNode = aNodes[index]; // Skip if the node is not valid or the node's tag name is not equal to 'a', or the node href is empty.

      if (((_aNode$tagName = aNode.tagName) === null || _aNode$tagName === void 0 ? void 0 : _aNode$tagName.toLowerCase()) !== "a" || !aNode.href) {
        continue;
      } // Add target to 'a' node if target is missing or does not equal to blank


      if (!aNode.target || aNode.target !== "_blank") {
        aNode.target = "_blank";
      } // If rel is missing or rel does not include noopener and noreferrer, add them


      if (!aNode.rel) {
        aNode.rel = "noopener noreferrer";
      } else {
        if (aNode.rel.indexOf("noopener") === -1) {
          aNode.rel += " noopener";
        }

        if (aNode.rel.indexOf("noreferrer") === -1) {
          aNode.rel += " noreferrer";
        }
      }
    }
  }
};

exports.addNoreferrerNoopenerTag = addNoreferrerNoopenerTag;

const replaceURLWithAnchor = (text, openInNewTab) => {
  if (text) {
    const modifiedText = text.replace(_Constants.Regex.URLRegex, function (url) {
      if (openInNewTab) {
        // eslint-disable-next-line quotes
        return '<a href="' + url + '" rel="noreferrer noopener" target="_blank">' + url + '</a>';
      } // eslint-disable-next-line quotes


      return '<a href="' + url + '">' + url + '</a>';
    });
    return modifiedText;
  }

  return text;
};

exports.replaceURLWithAnchor = replaceURLWithAnchor;