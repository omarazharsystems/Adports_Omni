"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = require("@fluentui/react");

var _react2 = _interopRequireWildcard(require("react"));

var _BroadcastService = require("../../../services/BroadcastService");

var _Constants = require("../../../common/Constants");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function AudioNotificationButton(props) {
  const {
    disabled
  } = props;
  const [muted, setMuted] = (0, _react2.useState)(props.isAudioMuted);
  let iconStyles = {};

  if (props.type === _Constants.ButtonTypes.Icon) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    iconStyles = { ...(props === null || props === void 0 ? void 0 : props.styles).icon
    };
  }

  const iconButtonStyles = {
    icon: iconStyles,
    root: {
      selectors: {
        ":hover .ms-Button-icon": { // eslint-disable-next-line @typescript-eslint/no-explicit-any
          ...(props === null || props === void 0 ? void 0 : props.hoverStyles).icon
        },
        ":active .ms-Button-icon": { // eslint-disable-next-line @typescript-eslint/no-explicit-any
          ...(props === null || props === void 0 ? void 0 : props.hoverStyles).icon
        },
        ":focus .ms-Button-icon": { // eslint-disable-next-line @typescript-eslint/no-explicit-any
          ...(props === null || props === void 0 ? void 0 : props.focusStyles).icon
        }
      },
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      ...(props === null || props === void 0 ? void 0 : props.styles)
    },
    rootHovered: props.hoverStyles,
    rootFocused: props.focusStyles,
    rootPressed: props.hoverStyles
  }; //imageIconProps > iconName

  const volume0Icon = props.imageToggleIconProps ? {
    imageProps: props === null || props === void 0 ? void 0 : props.imageToggleIconProps
  } : {
    iconName: (props === null || props === void 0 ? void 0 : props.toggleIconName) ?? _Constants.IconNames.Volume0
  };
  const volume3Icon = props.imageIconProps ? {
    imageProps: props === null || props === void 0 ? void 0 : props.imageIconProps
  } : {
    iconName: (props === null || props === void 0 ? void 0 : props.iconName) ?? _Constants.IconNames.Volume3
  };
  const handleOnClick = (0, _react2.useCallback)(() => {
    setMuted(!muted);

    if (props !== null && props !== void 0 && props.onClick) {
      const customEvent = {
        elementType: _Constants.ElementType.FooterSoundNotificationButton,
        elementId: props === null || props === void 0 ? void 0 : props.id,
        eventName: _Constants.EventNames.OnClick
      };

      _BroadcastService.BroadcastService.postMessage(customEvent);

      props === null || props === void 0 ? void 0 : props.onClick();
    }
  }, [props.onClick, muted]);
  (0, _react2.useEffect)(() => {
    setMuted(props.isAudioMuted);
  }, [props.isAudioMuted]);
  return /*#__PURE__*/_react2.default.createElement(_react.IconButton, {
    id: props === null || props === void 0 ? void 0 : props.id,
    iconProps: muted ? volume0Icon : volume3Icon,
    onClick: handleOnClick,
    allowDisabledFocus: true,
    disabled: disabled,
    styles: iconButtonStyles,
    className: props.className,
    title: undefined,
    ariaLabel: muted ? props.toggleAriaLabel ?? _Constants.AriaLabels.TurnSoundOn : props.ariaLabel ?? _Constants.AriaLabels.TurnSoundOff
  });
}

var _default = AudioNotificationButton;
exports.default = _default;