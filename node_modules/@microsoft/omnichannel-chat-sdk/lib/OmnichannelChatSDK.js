"use strict";
/* eslint-disable @typescript-eslint/no-non-null-assertion */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var loggers_1 = require("./utils/loggers");
var ACSClient_1 = require("./core/messaging/ACSClient");
var ocsdk_1 = require("@microsoft/ocsdk");
var chatAdapterCreators_1 = require("./utils/chatAdapterCreators");
var locale_1 = require("./utils/locale");
var utilities_1 = require("./utils/utilities");
var WebUtils_1 = require("./utils/WebUtils");
var platform_1 = require("./utils/platform");
var SDKConfigValidators_1 = require("./validators/SDKConfigValidators");
var ACSParticipantDisplayName_1 = require("./core/messaging/ACSParticipantDisplayName");
var AMSFileManager_1 = require("./external/ACSAdapter/AMSFileManager");
var CallingOptionsOptionSetNumber_1 = require("./core/CallingOptionsOptionSetNumber");
var ChatAdapterProtocols_1 = require("./core/messaging/ChatAdapterProtocols");
var ChatSDKErrors_1 = require("./core/ChatSDKErrors");
var ConversationMode_1 = require("./core/ConversationMode");
var DeliveryMode_1 = require("@microsoft/omnichannel-ic3core/lib/model/DeliveryMode");
var FileSharingProtocolType_1 = require("@microsoft/omnichannel-ic3core/lib/model/FileSharingProtocolType");
var HostType_1 = require("@microsoft/omnichannel-ic3core/lib/interfaces/HostType");
var omnichannel_ic3core_1 = require("@microsoft/omnichannel-ic3core");
var LiveChatVersion_1 = require("./core/LiveChatVersion");
var LiveWorkItemState_1 = require("./core/LiveWorkItemState");
var MessageContentType_1 = require("@microsoft/omnichannel-ic3core/lib/model/MessageContentType");
var MessageType_1 = require("@microsoft/omnichannel-ic3core/lib/model/MessageType");
var OmnichannelErrorCodes_1 = require("./core/OmnichannelErrorCodes");
var PersonType_1 = require("@microsoft/omnichannel-ic3core/lib/model/PersonType");
var ProtocoleType_1 = require("@microsoft/omnichannel-ic3core/lib/interfaces/ProtocoleType");
var ScenarioMarker_1 = require("./telemetry/ScenarioMarker");
var TelemetryEvent_1 = require("./telemetry/TelemetryEvent");
var omnichannel_amsclient_1 = require("@microsoft/omnichannel-amsclient");
var createOmnichannelMessage_1 = require("./utils/createOmnichannelMessage");
var createTelemetry_1 = require("./utils/createTelemetry");
var createVoiceVideoCalling_1 = require("./api/createVoiceVideoCalling");
var MessageTags_1 = require("./core/messaging/MessageTags");
var exceptionThrowers_1 = require("./utils/exceptionThrowers");
var exceptionSuppressors_1 = require("./utils/exceptionSuppressors");
var location_1 = require("./utils/location");
var urlResolvers_1 = require("./utils/urlResolvers");
var OmnichannelConfigValidator_1 = require("./validators/OmnichannelConfigValidator");
var OmnichannelChatSDK = /** @class */ (function () {
    function OmnichannelChatSDK(omnichannelConfig, chatSDKConfig) {
        var _this = this;
        if (chatSDKConfig === void 0) { chatSDKConfig = SDKConfigValidators_1.defaultChatSDKConfig; }
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        this.ACSClient = null;
        this.AMSClient = null;
        this.authSettings = null;
        this.authenticatedUserToken = null;
        this.conversation = null;
        this.callingOption = CallingOptionsOptionSetNumber_1.default.NoCalling;
        this.telemetry = null;
        this.ic3ClientLogger = null;
        this.ocSdkLogger = null;
        this.acsClientLogger = null;
        this.acsAdapterLogger = null;
        this.callingSdkLogger = null;
        this.amsClientLogger = null;
        this.isPersistentChat = false;
        this.isChatReconnect = false;
        this.reconnectId = null;
        this.refreshTokenTimer = null;
        this.populateInitChatOptionalParam = function (requestOptionalParams, optionalParams, telemetryEvent) {
            requestOptionalParams.initContext.locale = locale_1.getLocaleStringFromId(_this.localeId);
            if (optionalParams.customContext) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                var context = optionalParams.customContext;
                if (typeof context === "object") {
                    for (var key in context) {
                        if (context[key].value === null || context[key].value === undefined || context[key].value === "") {
                            delete context[key];
                        }
                    }
                }
                requestOptionalParams.initContext.customContextData = optionalParams.customContext; // eslint-disable-line @typescript-eslint/no-explicit-any
            }
            if (optionalParams.browser) {
                requestOptionalParams.initContext.browser = optionalParams.browser;
            }
            if (optionalParams.os) {
                requestOptionalParams.initContext.os = optionalParams.os;
            }
            if (optionalParams.locale) {
                requestOptionalParams.initContext.locale = optionalParams.locale;
            }
            if (optionalParams.device) {
                requestOptionalParams.initContext.device = optionalParams.device;
            }
            if (optionalParams.preChatResponse) {
                requestOptionalParams.initContext.preChatResponse = optionalParams.preChatResponse;
            }
            if (optionalParams.portalContactId) {
                requestOptionalParams.initContext.portalcontactid = optionalParams.portalContactId;
            }
            if (optionalParams.sendDefaultInitContext) {
                if (platform_1.default.isNode() || platform_1.default.isReactNative()) {
                    var message = "sendDefaultInitContext is only supported on browser";
                    var telemetryData = {
                        RequestId: _this.requestId,
                        ChatId: _this.chatToken.chatId
                    };
                    exceptionThrowers_1.default.throwUnsupportedPlatform(_this.scenarioMarker, telemetryEvent, message, telemetryData);
                }
                requestOptionalParams.getContext = true;
            }
            // Override initContext completely
            if (optionalParams.initContext) {
                requestOptionalParams.initContext = optionalParams.initContext;
            }
            if (_this.authenticatedUserToken) {
                requestOptionalParams.authenticatedUserToken = _this.authenticatedUserToken;
            }
            if (_this.chatToken.chatId) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                requestOptionalParams.initContext.chatId = _this.chatToken.chatId;
            }
            return requestOptionalParams;
        };
        this.debug = false;
        this.runtimeId = ocsdk_1.uuidv4();
        this.omnichannelConfig = omnichannelConfig;
        this.chatSDKConfig = __assign(__assign({}, SDKConfigValidators_1.defaultChatSDKConfig), chatSDKConfig // overrides
        );
        this.isInitialized = false;
        this.liveChatVersion = LiveChatVersion_1.default.V2;
        this.localeId = locale_1.defaultLocaleId;
        this.requestId = ocsdk_1.uuidv4();
        this.chatToken = {};
        this.liveChatConfig = {};
        this.dataMaskingRules = {};
        this.authSettings = null;
        this.preChatSurvey = null;
        this.telemetry = createTelemetry_1.default(this.debug);
        this.scenarioMarker = new ScenarioMarker_1.default(this.omnichannelConfig);
        this.ic3ClientLogger = loggers_1.createIC3ClientLogger(this.omnichannelConfig);
        this.ocSdkLogger = loggers_1.createOCSDKLogger(this.omnichannelConfig);
        this.acsClientLogger = loggers_1.createACSClientLogger(this.omnichannelConfig);
        this.acsAdapterLogger = loggers_1.createACSAdapterLogger(this.omnichannelConfig);
        this.callingSdkLogger = loggers_1.createCallingSDKLogger(this.omnichannelConfig);
        this.amsClientLogger = loggers_1.createAMSClientLogger(this.omnichannelConfig);
        this.scenarioMarker.useTelemetry(this.telemetry);
        this.ic3ClientLogger.useTelemetry(this.telemetry);
        this.ocSdkLogger.useTelemetry(this.telemetry);
        this.acsClientLogger.useTelemetry(this.telemetry);
        this.acsAdapterLogger.useTelemetry(this.telemetry);
        this.callingSdkLogger.useTelemetry(this.telemetry);
        this.amsClientLogger.useTelemetry(this.telemetry);
        this.scenarioMarker.setRuntimeId(this.runtimeId);
        this.ic3ClientLogger.setRuntimeId(this.runtimeId);
        this.ocSdkLogger.setRuntimeId(this.runtimeId);
        this.acsClientLogger.setRuntimeId(this.runtimeId);
        this.acsAdapterLogger.setRuntimeId(this.runtimeId);
        this.callingSdkLogger.setRuntimeId(this.runtimeId);
        this.amsClientLogger.setRuntimeId(this.runtimeId);
        OmnichannelConfigValidator_1.default(omnichannelConfig);
        SDKConfigValidators_1.default(chatSDKConfig);
        ((_a = this.chatSDKConfig.telemetry) === null || _a === void 0 ? void 0 : _a.disable) && ((_b = this.telemetry) === null || _b === void 0 ? void 0 : _b.disable());
        if ((_c = this.chatSDKConfig.telemetry) === null || _c === void 0 ? void 0 : _c.ariaTelemetryKey) {
            this.telemetry.initialize(this.chatSDKConfig.telemetry.ariaTelemetryKey);
        }
        (_d = this.ic3ClientLogger) === null || _d === void 0 ? void 0 : _d.setRequestId(this.requestId);
        (_e = this.ocSdkLogger) === null || _e === void 0 ? void 0 : _e.setRequestId(this.requestId);
        (_f = this.acsClientLogger) === null || _f === void 0 ? void 0 : _f.setRequestId(this.requestId);
        (_g = this.acsAdapterLogger) === null || _g === void 0 ? void 0 : _g.setRequestId(this.requestId);
        (_h = this.callingSdkLogger) === null || _h === void 0 ? void 0 : _h.setRequestId(this.requestId);
        (_j = this.amsClientLogger) === null || _j === void 0 ? void 0 : _j.setRequestId(this.requestId);
    }
    /* istanbul ignore next */
    OmnichannelChatSDK.prototype.setDebug = function (flag) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        this.debug = flag;
        (_a = this.AMSClient) === null || _a === void 0 ? void 0 : _a.setDebug(flag);
        (_b = this.telemetry) === null || _b === void 0 ? void 0 : _b.setDebug(flag);
        this.scenarioMarker.setDebug(flag);
        (_c = this.ic3ClientLogger) === null || _c === void 0 ? void 0 : _c.setDebug(flag);
        (_d = this.ocSdkLogger) === null || _d === void 0 ? void 0 : _d.setDebug(flag);
        (_e = this.acsClientLogger) === null || _e === void 0 ? void 0 : _e.setDebug(flag);
        (_f = this.acsAdapterLogger) === null || _f === void 0 ? void 0 : _f.setDebug(flag);
        (_g = this.callingSdkLogger) === null || _g === void 0 ? void 0 : _g.setDebug(flag);
        (_h = this.amsClientLogger) === null || _h === void 0 ? void 0 : _h.setDebug(flag);
    };
    OmnichannelChatSDK.prototype.initialize = function (optionalParams) {
        if (optionalParams === void 0) { optionalParams = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var ocSDKConfiguration, _a, e_1, getLiveChatConfigOptionalParams, e_2, supportedLiveChatVersions, _b, _c, e_3;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        this.scenarioMarker.startScenario(TelemetryEvent_1.default.InitializeChatSDK);
                        if (this.isInitialized) {
                            this.scenarioMarker.completeScenario(TelemetryEvent_1.default.InitializeChatSDK);
                            return [2 /*return*/, this.liveChatConfig];
                        }
                        ocSDKConfiguration = {
                            getChatTokenRetryCount: 2,
                            getChatTokenTimeBetweenRetriesOnFailure: 2000,
                            getChatTokenRetryOn429: false,
                        };
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 3, , 4]);
                        this.OCSDKProvider = ocsdk_1.SDKProvider;
                        _a = this;
                        return [4 /*yield*/, ocsdk_1.SDKProvider.getSDK(this.omnichannelConfig, ocSDKConfiguration, this.ocSdkLogger)];
                    case 2:
                        _a.OCClient = _d.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _d.sent();
                        exceptionThrowers_1.default.throwOmnichannelClientInitializationFailure(e_1, this.scenarioMarker, TelemetryEvent_1.default.InitializeChatSDK);
                        return [3 /*break*/, 4];
                    case 4:
                        _d.trys.push([4, 6, , 7]);
                        getLiveChatConfigOptionalParams = optionalParams.getLiveChatConfigOptionalParams;
                        return [4 /*yield*/, this.getChatConfig(getLiveChatConfigOptionalParams || {})];
                    case 5:
                        _d.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        e_2 = _d.sent();
                        exceptionThrowers_1.default.throwChatConfigRetrievalFailure(e_2, this.scenarioMarker, TelemetryEvent_1.default.InitializeChatSDK);
                        return [3 /*break*/, 7];
                    case 7:
                        supportedLiveChatVersions = [LiveChatVersion_1.default.V1, LiveChatVersion_1.default.V2];
                        if (!supportedLiveChatVersions.includes(this.liveChatVersion)) {
                            exceptionThrowers_1.default.throwUnsupportedLiveChatVersionFailure(new Error(ChatSDKErrors_1.default.UnsupportedLiveChatVersion), this.scenarioMarker, TelemetryEvent_1.default.InitializeChatSDK);
                        }
                        _d.label = 8;
                    case 8:
                        _d.trys.push([8, 13, , 14]);
                        if (!(this.liveChatVersion === LiveChatVersion_1.default.V2)) return [3 /*break*/, 10];
                        this.ACSClient = new ACSClient_1.default(this.acsClientLogger);
                        _b = this;
                        return [4 /*yield*/, omnichannel_amsclient_1.default({
                                framedMode: platform_1.isBrowser(),
                                multiClient: true,
                                debug: false,
                                logger: this.amsClientLogger
                            })];
                    case 9:
                        _b.AMSClient = _d.sent();
                        return [3 /*break*/, 12];
                    case 10:
                        if (!(this.liveChatVersion === LiveChatVersion_1.default.V1)) return [3 /*break*/, 12];
                        _c = this;
                        return [4 /*yield*/, this.getIC3Client()];
                    case 11:
                        _c.IC3Client = _d.sent();
                        _d.label = 12;
                    case 12:
                        this.isInitialized = true;
                        this.scenarioMarker.completeScenario(TelemetryEvent_1.default.InitializeChatSDK);
                        return [3 /*break*/, 14];
                    case 13:
                        e_3 = _d.sent();
                        exceptionThrowers_1.default.throwMessagingClientCreationFailure(e_3, this.scenarioMarker, TelemetryEvent_1.default.InitializeChatSDK);
                        return [3 /*break*/, 14];
                    case 14: return [2 /*return*/, this.liveChatConfig];
                }
            });
        });
    };
    OmnichannelChatSDK.prototype.getChatReconnectContext = function (optionalParams) {
        if (optionalParams === void 0) { optionalParams = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var context, reconnectableChatsParams, reconnectableChatsResponse, error_1, exceptionDetails, telemetryData, reconnectAvailabilityResponse, error_2, exceptionDetails;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.scenarioMarker.startScenario(TelemetryEvent_1.default.GetChatReconnectContext, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        context = {
                            reconnectId: null,
                            redirectURL: null
                        };
                        if (!this.authenticatedUserToken) return [3 /*break*/, 5];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        reconnectableChatsParams = {
                            authenticatedUserToken: this.authenticatedUserToken
                        };
                        return [4 /*yield*/, this.OCClient.getReconnectableChats(reconnectableChatsParams)];
                    case 2:
                        reconnectableChatsResponse = _a.sent();
                        if (reconnectableChatsResponse && reconnectableChatsResponse.reconnectid) {
                            context.reconnectId = reconnectableChatsResponse.reconnectid;
                        }
                        this.scenarioMarker.completeScenario(TelemetryEvent_1.default.GetChatReconnectContext, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _a.sent();
                        exceptionDetails = {
                            response: "OCClientGetReconnectableChatsFailed"
                        };
                        telemetryData = {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId,
                            ExceptionDetails: JSON.stringify(exceptionDetails)
                        };
                        if (utilities_1.isClientIdNotFoundErrorMessage(error_1)) {
                            exceptionThrowers_1.default.throwAuthContactIdNotFoundFailure(error_1, this.scenarioMarker, TelemetryEvent_1.default.GetChatReconnectContext, telemetryData);
                        }
                        this.scenarioMarker.failScenario(TelemetryEvent_1.default.GetChatReconnectContext, telemetryData);
                        console.error("OmnichannelChatSDK/GetChatReconnectContext/error " + error_1);
                        return [3 /*break*/, 4];
                    case 4: return [3 /*break*/, 9];
                    case 5:
                        if (!optionalParams.reconnectId) return [3 /*break*/, 9];
                        _a.label = 6;
                    case 6:
                        _a.trys.push([6, 8, , 9]);
                        return [4 /*yield*/, this.OCClient.getReconnectAvailability(optionalParams.reconnectId)];
                    case 7:
                        reconnectAvailabilityResponse = _a.sent();
                        if (reconnectAvailabilityResponse && !reconnectAvailabilityResponse.isReconnectAvailable) {
                            if (reconnectAvailabilityResponse.reconnectRedirectionURL) {
                                context.redirectURL = reconnectAvailabilityResponse.reconnectRedirectionURL;
                            }
                        }
                        else {
                            context.reconnectId = optionalParams.reconnectId;
                        }
                        this.scenarioMarker.completeScenario(TelemetryEvent_1.default.GetChatReconnectContext, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        return [3 /*break*/, 9];
                    case 8:
                        error_2 = _a.sent();
                        exceptionDetails = {
                            response: "OCClientGetReconnectAvailabilityFailed"
                        };
                        this.scenarioMarker.failScenario(TelemetryEvent_1.default.GetChatReconnectContext, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId,
                            ExceptionDetails: JSON.stringify(exceptionDetails)
                        });
                        console.error("OmnichannelChatSDK/GetChatReconnectContext/error " + error_2);
                        return [3 /*break*/, 9];
                    case 9: return [2 /*return*/, context];
                }
            });
        });
    };
    OmnichannelChatSDK.prototype.startChat = function (optionalParams) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        if (optionalParams === void 0) { optionalParams = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var shouldReinitIC3Client, _q, reconnectableChatsParams, reconnectableChatsResponse, e_4, telemetryData, conversationDetails, telemetryData, telemetryData, e_5, telemetryData, sessionInitOptionalParams, location_2, sessionInitPromise, messagingClientPromise, attachmentClientPromise;
            var _this = this;
            return __generator(this, function (_r) {
                switch (_r.label) {
                    case 0:
                        this.scenarioMarker.startScenario(TelemetryEvent_1.default.StartChat, {
                            RequestId: this.requestId
                        });
                        if (!this.isInitialized) {
                            exceptionThrowers_1.default.throwUninitializedChatSDK(this.scenarioMarker, TelemetryEvent_1.default.StartChat);
                        }
                        shouldReinitIC3Client = !platform_1.default.isNode() && !platform_1.default.isReactNative() && !this.IC3Client && this.liveChatVersion === LiveChatVersion_1.default.V1;
                        if (!shouldReinitIC3Client) return [3 /*break*/, 2];
                        _q = this;
                        return [4 /*yield*/, this.getIC3Client()];
                    case 1:
                        _q.IC3Client = _r.sent();
                        _r.label = 2;
                    case 2:
                        if (this.isChatReconnect && !((_a = this.chatSDKConfig.chatReconnect) === null || _a === void 0 ? void 0 : _a.disable) && !this.isPersistentChat && optionalParams.reconnectId) {
                            this.reconnectId = optionalParams.reconnectId;
                        }
                        if (!(this.isPersistentChat && !((_b = this.chatSDKConfig.persistentChat) === null || _b === void 0 ? void 0 : _b.disable))) return [3 /*break*/, 6];
                        _r.label = 3;
                    case 3:
                        _r.trys.push([3, 5, , 6]);
                        reconnectableChatsParams = {
                            authenticatedUserToken: this.authenticatedUserToken
                        };
                        return [4 /*yield*/, this.OCClient.getReconnectableChats(reconnectableChatsParams)];
                    case 4:
                        reconnectableChatsResponse = _r.sent();
                        if (reconnectableChatsResponse && reconnectableChatsResponse.reconnectid) {
                            this.reconnectId = reconnectableChatsResponse.reconnectid;
                        }
                        return [3 /*break*/, 6];
                    case 5:
                        e_4 = _r.sent();
                        telemetryData = {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId,
                        };
                        exceptionThrowers_1.default.throwPersistentChatConversationRetrievalFailure(e_4, this.scenarioMarker, TelemetryEvent_1.default.StartChat, telemetryData);
                        return [3 /*break*/, 6];
                    case 6:
                        if (!(optionalParams.liveChatContext && Object.keys(optionalParams.liveChatContext).length > 0 && !this.reconnectId)) return [3 /*break*/, 8];
                        this.chatToken = optionalParams.liveChatContext.chatToken || {};
                        this.requestId = optionalParams.liveChatContext.requestId || ocsdk_1.uuidv4();
                        return [4 /*yield*/, this.getConversationDetails()];
                    case 7:
                        conversationDetails = _r.sent();
                        if (Object.keys(conversationDetails).length === 0) {
                            telemetryData = {
                                RequestId: this.requestId,
                                ChatId: this.chatToken.chatId,
                            };
                            exceptionThrowers_1.default.throwInvalidConversation(this.scenarioMarker, TelemetryEvent_1.default.StartChat, telemetryData);
                        }
                        if (conversationDetails.state === LiveWorkItemState_1.default.WrapUp || conversationDetails.state === LiveWorkItemState_1.default.Closed) {
                            console.error("Unable to join conversation that's in '" + conversationDetails.state + "' state");
                            telemetryData = {
                                RequestId: this.requestId,
                                ChatId: this.chatToken.chatId,
                            };
                            exceptionThrowers_1.default.throwClosedConversation(this.scenarioMarker, TelemetryEvent_1.default.StartChat, telemetryData);
                        }
                        _r.label = 8;
                    case 8:
                        if (!this.authSettings) return [3 /*break*/, 14];
                        if (!!this.authenticatedUserToken) return [3 /*break*/, 10];
                        return [4 /*yield*/, this.setAuthTokenProvider(this.chatSDKConfig.getAuthToken)];
                    case 9:
                        _r.sent();
                        _r.label = 10;
                    case 10:
                        if (!(optionalParams.liveChatContext && Object.keys(optionalParams.liveChatContext).length > 0)) return [3 /*break*/, 14];
                        this.chatToken = optionalParams.liveChatContext.chatToken || {};
                        this.requestId = optionalParams.liveChatContext.requestId || ocsdk_1.uuidv4();
                        _r.label = 11;
                    case 11:
                        _r.trys.push([11, 13, , 14]);
                        return [4 /*yield*/, this.OCClient.validateAuthChatRecord(this.requestId, {
                                authenticatedUserToken: this.authenticatedUserToken,
                                chatId: this.chatToken.chatId
                            })];
                    case 12:
                        _r.sent();
                        return [3 /*break*/, 14];
                    case 13:
                        e_5 = _r.sent();
                        telemetryData = {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId,
                        };
                        exceptionThrowers_1.default.throwAuthenticatedChatConversationRetrievalFailure(e_5, this.scenarioMarker, TelemetryEvent_1.default.StartChat, telemetryData);
                        return [3 /*break*/, 14];
                    case 14:
                        if (!(this.chatToken && Object.keys(this.chatToken).length === 0)) return [3 /*break*/, 16];
                        return [4 /*yield*/, this.getChatToken(false)];
                    case 15:
                        _r.sent();
                        _r.label = 16;
                    case 16:
                        (_c = this.ic3ClientLogger) === null || _c === void 0 ? void 0 : _c.setChatId(this.chatToken.chatId || '');
                        (_d = this.ocSdkLogger) === null || _d === void 0 ? void 0 : _d.setChatId(this.chatToken.chatId || '');
                        (_e = this.acsClientLogger) === null || _e === void 0 ? void 0 : _e.setChatId(this.chatToken.chatId || '');
                        (_f = this.acsAdapterLogger) === null || _f === void 0 ? void 0 : _f.setChatId(this.chatToken.chatId || '');
                        (_g = this.callingSdkLogger) === null || _g === void 0 ? void 0 : _g.setChatId(this.chatToken.chatId || '');
                        (_h = this.amsClientLogger) === null || _h === void 0 ? void 0 : _h.setChatId(this.chatToken.chatId || '');
                        sessionInitOptionalParams = {
                            initContext: {}
                        };
                        sessionInitOptionalParams = this.populateInitChatOptionalParam(sessionInitOptionalParams, optionalParams, TelemetryEvent_1.default.StartChat);
                        sessionInitOptionalParams.initContext.isProactiveChat = !!optionalParams.isProactiveChat;
                        if (this.isPersistentChat && !((_j = this.chatSDKConfig.persistentChat) === null || _j === void 0 ? void 0 : _j.disable)) {
                            sessionInitOptionalParams.reconnectId = this.reconnectId;
                        }
                        else if (this.isChatReconnect && !((_k = this.chatSDKConfig.chatReconnect) === null || _k === void 0 ? void 0 : _k.disable) && !this.isPersistentChat) {
                            sessionInitOptionalParams.reconnectId = this.reconnectId;
                        }
                        if (!(((_m = (_l = this.liveChatConfig) === null || _l === void 0 ? void 0 : _l.LiveWSAndLiveChatEngJoin) === null || _m === void 0 ? void 0 : _m.msdyn_requestvisitorlocation) === "true")) return [3 /*break*/, 18];
                        return [4 /*yield*/, location_1.getLocationInfo(this.scenarioMarker, this.chatToken.chatId, this.requestId)];
                    case 17:
                        location_2 = _r.sent();
                        sessionInitOptionalParams.initContext.latitude = location_2.latitude;
                        sessionInitOptionalParams.initContext.longitude = location_2.longitude;
                        _r.label = 18;
                    case 18:
                        sessionInitPromise = function () { return __awaiter(_this, void 0, void 0, function () {
                            var error_3, telemetryData;
                            var _a, _b, _c, _d;
                            return __generator(this, function (_e) {
                                switch (_e.label) {
                                    case 0:
                                        if (!!optionalParams.liveChatContext) return [3 /*break*/, 4];
                                        _e.label = 1;
                                    case 1:
                                        _e.trys.push([1, 3, , 4]);
                                        return [4 /*yield*/, this.OCClient.sessionInit(this.requestId, sessionInitOptionalParams)];
                                    case 2:
                                        _e.sent();
                                        return [3 /*break*/, 4];
                                    case 3:
                                        error_3 = _e.sent();
                                        telemetryData = {
                                            RequestId: this.requestId,
                                            ChatId: this.chatToken.chatId,
                                        };
                                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                                        if (((_a = error_3) === null || _a === void 0 ? void 0 : _a.isAxiosError) && ((_d = (_c = (_b = error_3.response) === null || _b === void 0 ? void 0 : _b.headers) === null || _c === void 0 ? void 0 : _c.errorcode) === null || _d === void 0 ? void 0 : _d.toString()) === OmnichannelErrorCodes_1.default.WidgetUseOutsideOperatingHour.toString()) {
                                            exceptionThrowers_1.default.throwWidgetUseOutsideOperatingHour(error_3, this.scenarioMarker, TelemetryEvent_1.default.StartChat, telemetryData);
                                        }
                                        exceptionThrowers_1.default.throwConversationInitializationFailure(error_3, this.scenarioMarker, TelemetryEvent_1.default.StartChat, telemetryData);
                                        return [3 /*break*/, 4];
                                    case 4: return [2 /*return*/];
                                }
                            });
                        }); };
                        messagingClientPromise = function () { return __awaiter(_this, void 0, void 0, function () {
                            var chatAdapterConfig, tokenRefresher, error_4, telemetryData, _a, error_5, telemetryData, error_6, telemetryData, _b, error_7, telemetryData;
                            var _this = this;
                            var _c, _d;
                            return __generator(this, function (_e) {
                                switch (_e.label) {
                                    case 0:
                                        if (!(this.liveChatVersion === LiveChatVersion_1.default.V2)) return [3 /*break*/, 8];
                                        chatAdapterConfig = {
                                            token: this.chatToken.token,
                                            id: this.chatToken.visitorId || 'teamsvisitor',
                                            threadId: this.chatToken.chatId,
                                            environmentUrl: this.chatToken.acsEndpoint,
                                            pollingInterval: 30000
                                        };
                                        tokenRefresher = function () { return __awaiter(_this, void 0, void 0, function () {
                                            var _a;
                                            return __generator(this, function (_b) {
                                                switch (_b.label) {
                                                    case 0: return [4 /*yield*/, this.getChatToken(false, { refreshToken: true })];
                                                    case 1:
                                                        _b.sent();
                                                        return [4 /*yield*/, ((_a = this.AMSClient) === null || _a === void 0 ? void 0 : _a.initialize({ chatToken: this.chatToken }))];
                                                    case 2:
                                                        _b.sent();
                                                        return [2 /*return*/, this.chatToken.token];
                                                }
                                            });
                                        }); };
                                        _e.label = 1;
                                    case 1:
                                        _e.trys.push([1, 3, , 4]);
                                        return [4 /*yield*/, ((_c = this.ACSClient) === null || _c === void 0 ? void 0 : _c.initialize({
                                                token: chatAdapterConfig.token,
                                                environmentUrl: chatAdapterConfig.environmentUrl,
                                                tokenRefresher: tokenRefresher
                                            }))];
                                    case 2:
                                        _e.sent();
                                        return [3 /*break*/, 4];
                                    case 3:
                                        error_4 = _e.sent();
                                        telemetryData = {
                                            RequestId: this.requestId,
                                            ChatId: this.chatToken.chatId,
                                        };
                                        exceptionThrowers_1.default.throwMessagingClientInitializationFailure(error_4, this.scenarioMarker, TelemetryEvent_1.default.StartChat, telemetryData);
                                        return [3 /*break*/, 4];
                                    case 4:
                                        _e.trys.push([4, 6, , 7]);
                                        _a = this;
                                        return [4 /*yield*/, ((_d = this.ACSClient) === null || _d === void 0 ? void 0 : _d.joinConversation({
                                                id: chatAdapterConfig.id,
                                                threadId: chatAdapterConfig.threadId,
                                                pollingInterval: chatAdapterConfig.pollingInterval
                                            }))];
                                    case 5:
                                        _a.conversation = (_e.sent());
                                        this.scenarioMarker.completeScenario(TelemetryEvent_1.default.StartChat, {
                                            RequestId: this.requestId,
                                            ChatId: this.chatToken.chatId
                                        });
                                        return [3 /*break*/, 7];
                                    case 6:
                                        error_5 = _e.sent();
                                        telemetryData = {
                                            RequestId: this.requestId,
                                            ChatId: this.chatToken.chatId,
                                        };
                                        exceptionThrowers_1.default.throwMessagingClientConversationJoinFailure(error_5, this.scenarioMarker, TelemetryEvent_1.default.StartChat, telemetryData);
                                        return [3 /*break*/, 7];
                                    case 7: return [3 /*break*/, 14];
                                    case 8:
                                        _e.trys.push([8, 10, , 11]);
                                        return [4 /*yield*/, this.IC3Client.initialize({
                                                token: this.chatToken.token,
                                                regionGtms: this.chatToken.regionGTMS,
                                                visitor: true
                                            })];
                                    case 9:
                                        _e.sent();
                                        return [3 /*break*/, 11];
                                    case 10:
                                        error_6 = _e.sent();
                                        telemetryData = {
                                            RequestId: this.requestId,
                                            ChatId: this.chatToken.chatId,
                                        };
                                        exceptionThrowers_1.default.throwMessagingClientInitializationFailure(error_6, this.scenarioMarker, TelemetryEvent_1.default.StartChat, telemetryData);
                                        return [3 /*break*/, 11];
                                    case 11:
                                        _e.trys.push([11, 13, , 14]);
                                        _b = this;
                                        return [4 /*yield*/, this.IC3Client.joinConversation(this.chatToken.chatId)];
                                    case 12:
                                        _b.conversation = _e.sent();
                                        this.scenarioMarker.completeScenario(TelemetryEvent_1.default.StartChat, {
                                            RequestId: this.requestId,
                                            ChatId: this.chatToken.chatId
                                        });
                                        return [3 /*break*/, 14];
                                    case 13:
                                        error_7 = _e.sent();
                                        telemetryData = {
                                            RequestId: this.requestId,
                                            ChatId: this.chatToken.chatId,
                                        };
                                        exceptionThrowers_1.default.throwMessagingClientConversationJoinFailure(error_7, this.scenarioMarker, TelemetryEvent_1.default.StartChat, telemetryData);
                                        return [3 /*break*/, 14];
                                    case 14: return [2 /*return*/];
                                }
                            });
                        }); };
                        attachmentClientPromise = function () { return __awaiter(_this, void 0, void 0, function () {
                            var error_8, telemetryData;
                            var _a;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        _b.trys.push([0, 3, , 4]);
                                        if (!(this.liveChatVersion === LiveChatVersion_1.default.V2)) return [3 /*break*/, 2];
                                        return [4 /*yield*/, ((_a = this.AMSClient) === null || _a === void 0 ? void 0 : _a.initialize({ chatToken: this.chatToken }))];
                                    case 1:
                                        _b.sent();
                                        _b.label = 2;
                                    case 2: return [3 /*break*/, 4];
                                    case 3:
                                        error_8 = _b.sent();
                                        telemetryData = {
                                            RequestId: this.requestId,
                                            ChatId: this.chatToken.chatId,
                                        };
                                        exceptionThrowers_1.default.throwMessagingClientInitializationFailure(error_8, this.scenarioMarker, TelemetryEvent_1.default.StartChat, telemetryData);
                                        return [3 /*break*/, 4];
                                    case 4: return [2 /*return*/];
                                }
                            });
                        }); };
                        return [4 /*yield*/, Promise.all([sessionInitPromise(), messagingClientPromise(), attachmentClientPromise()])];
                    case 19:
                        _r.sent();
                        if (this.isPersistentChat && !((_o = this.chatSDKConfig.persistentChat) === null || _o === void 0 ? void 0 : _o.disable)) {
                            this.refreshTokenTimer = setInterval(function () { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.getChatToken(false)];
                                        case 1:
                                            _a.sent();
                                            this.updateChatToken(this.chatToken.token, this.chatToken.regionGTMS);
                                            return [2 /*return*/];
                                    }
                                });
                            }); }, (_p = this.chatSDKConfig.persistentChat) === null || _p === void 0 ? void 0 : _p.tokenUpdateTime);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    OmnichannelChatSDK.prototype.endChat = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        return __awaiter(this, void 0, void 0, function () {
            var sessionCloseOptionalParams, isReconnectChat, isChatReconnect, error_9, telemetryData;
            return __generator(this, function (_r) {
                switch (_r.label) {
                    case 0:
                        this.scenarioMarker.startScenario(TelemetryEvent_1.default.EndChat, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        sessionCloseOptionalParams = {};
                        if (this.isPersistentChat && !((_a = this.chatSDKConfig.persistentChat) === null || _a === void 0 ? void 0 : _a.disable)) {
                            isReconnectChat = this.reconnectId !== null ? true : false;
                            sessionCloseOptionalParams.isPersistentChat = this.isPersistentChat;
                            sessionCloseOptionalParams.isReconnectChat = isReconnectChat;
                        }
                        if (this.isChatReconnect && !((_b = this.chatSDKConfig.chatReconnect) === null || _b === void 0 ? void 0 : _b.disable) && !this.isPersistentChat) {
                            isChatReconnect = this.reconnectId !== null ? true : false;
                            this.requestId = isChatReconnect ? this.reconnectId : this.requestId; // Chat Reconnect session to close
                            sessionCloseOptionalParams.isReconnectChat = isChatReconnect;
                        }
                        if (this.authenticatedUserToken) {
                            sessionCloseOptionalParams.authenticatedUserToken = this.authenticatedUserToken;
                        }
                        _r.label = 1;
                    case 1:
                        _r.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.OCClient.sessionClose(this.requestId, sessionCloseOptionalParams)];
                    case 2:
                        _r.sent();
                        this.scenarioMarker.completeScenario(TelemetryEvent_1.default.EndChat, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        (_c = this.conversation) === null || _c === void 0 ? void 0 : _c.disconnect();
                        this.conversation = null;
                        this.requestId = ocsdk_1.uuidv4();
                        this.chatToken = {};
                        this.reconnectId = null;
                        if (this.IC3Client) {
                            this.IC3Client.dispose();
                            !platform_1.default.isNode() && !platform_1.default.isReactNative() && WebUtils_1.removeElementById(this.IC3Client.id);
                            this.IC3Client = null;
                        }
                        (_d = this.ic3ClientLogger) === null || _d === void 0 ? void 0 : _d.setRequestId(this.requestId);
                        (_e = this.ic3ClientLogger) === null || _e === void 0 ? void 0 : _e.setChatId('');
                        (_f = this.ocSdkLogger) === null || _f === void 0 ? void 0 : _f.setRequestId(this.requestId);
                        (_g = this.ocSdkLogger) === null || _g === void 0 ? void 0 : _g.setChatId('');
                        (_h = this.acsClientLogger) === null || _h === void 0 ? void 0 : _h.setRequestId(this.requestId);
                        (_j = this.acsClientLogger) === null || _j === void 0 ? void 0 : _j.setChatId('');
                        (_k = this.acsAdapterLogger) === null || _k === void 0 ? void 0 : _k.setRequestId(this.requestId);
                        (_l = this.acsAdapterLogger) === null || _l === void 0 ? void 0 : _l.setChatId('');
                        (_m = this.callingSdkLogger) === null || _m === void 0 ? void 0 : _m.setRequestId(this.requestId);
                        (_o = this.callingSdkLogger) === null || _o === void 0 ? void 0 : _o.setChatId('');
                        (_p = this.amsClientLogger) === null || _p === void 0 ? void 0 : _p.setRequestId(this.requestId);
                        (_q = this.amsClientLogger) === null || _q === void 0 ? void 0 : _q.setChatId('');
                        return [3 /*break*/, 4];
                    case 3:
                        error_9 = _r.sent();
                        telemetryData = {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        };
                        exceptionThrowers_1.default.throwConversationClosureFailure(error_9, this.scenarioMarker, TelemetryEvent_1.default.EndChat, telemetryData);
                        return [3 /*break*/, 4];
                    case 4:
                        if (this.refreshTokenTimer !== null) {
                            clearInterval(this.refreshTokenTimer);
                            this.refreshTokenTimer = null;
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    OmnichannelChatSDK.prototype.getCurrentLiveChatContext = function () {
        return __awaiter(this, void 0, void 0, function () {
            var chatToken, requestId, chatSession;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getChatToken()];
                    case 1:
                        chatToken = _a.sent();
                        requestId = this.requestId;
                        this.scenarioMarker.startScenario(TelemetryEvent_1.default.GetCurrentLiveChatContext, {
                            RequestId: requestId,
                            ChatId: chatToken.chatId
                        });
                        chatSession = {
                            chatToken: chatToken,
                            requestId: requestId
                        };
                        if (Object.keys(chatSession.chatToken).length === 0) {
                            return [2 /*return*/, {}];
                        }
                        if (this.reconnectId) {
                            chatSession.reconnectId = this.reconnectId;
                        }
                        this.scenarioMarker.completeScenario(TelemetryEvent_1.default.GetCurrentLiveChatContext, {
                            RequestId: requestId,
                            ChatId: chatToken.chatId
                        });
                        return [2 /*return*/, chatSession];
                }
            });
        });
    };
    OmnichannelChatSDK.prototype.getConversationDetails = function (optionalParams) {
        var _a, _b, _c;
        if (optionalParams === void 0) { optionalParams = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var requestId, chatToken, chatId, reconnectId, getLWIDetailsOptionalParams, lwiDetails, state, conversationId, agentAcceptedOn, canRenderPostChat, participantType, liveWorkItemDetails, error_10, telemetryData;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        requestId = this.requestId;
                        chatToken = this.chatToken;
                        chatId = chatToken.chatId;
                        reconnectId = this.reconnectId;
                        if (optionalParams.liveChatContext) {
                            requestId = optionalParams.liveChatContext.requestId;
                            chatToken = optionalParams.liveChatContext.chatToken;
                            chatId = chatToken.chatId;
                        }
                        if ((_a = optionalParams.liveChatContext) === null || _a === void 0 ? void 0 : _a.reconnectId) {
                            reconnectId = optionalParams.liveChatContext.reconnectId;
                        }
                        this.scenarioMarker.startScenario(TelemetryEvent_1.default.GetConversationDetails, {
                            RequestId: requestId,
                            ChatId: chatId || '',
                        });
                        getLWIDetailsOptionalParams = {};
                        if (this.isPersistentChat && !((_b = this.chatSDKConfig.persistentChat) === null || _b === void 0 ? void 0 : _b.disable) && reconnectId) {
                            getLWIDetailsOptionalParams.reconnectId = reconnectId;
                        }
                        if (this.isChatReconnect && !((_c = this.chatSDKConfig.chatReconnect) === null || _c === void 0 ? void 0 : _c.disable) && !this.isPersistentChat && reconnectId) {
                            getLWIDetailsOptionalParams.reconnectId = reconnectId;
                        }
                        if (this.authenticatedUserToken) {
                            getLWIDetailsOptionalParams.authenticatedUserToken = this.authenticatedUserToken;
                        }
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.OCClient.getLWIDetails(requestId, getLWIDetailsOptionalParams)];
                    case 2:
                        lwiDetails = _d.sent();
                        state = lwiDetails.State, conversationId = lwiDetails.ConversationId, agentAcceptedOn = lwiDetails.AgentAcceptedOn, canRenderPostChat = lwiDetails.CanRenderPostChat, participantType = lwiDetails.ParticipantType;
                        liveWorkItemDetails = {
                            state: state,
                            conversationId: conversationId
                        };
                        if (agentAcceptedOn) {
                            liveWorkItemDetails.agentAcceptedOn = agentAcceptedOn;
                        }
                        if (canRenderPostChat) {
                            liveWorkItemDetails.canRenderPostChat = canRenderPostChat;
                        }
                        if (participantType) {
                            liveWorkItemDetails.participantType = participantType;
                        }
                        this.scenarioMarker.completeScenario(TelemetryEvent_1.default.GetConversationDetails, {
                            RequestId: requestId,
                            ChatId: chatId || '',
                        });
                        return [2 /*return*/, liveWorkItemDetails];
                    case 3:
                        error_10 = _d.sent();
                        telemetryData = {
                            RequestId: requestId,
                            ChatId: chatId || ''
                        };
                        if (utilities_1.isClientIdNotFoundErrorMessage(error_10)) {
                            exceptionThrowers_1.default.throwAuthContactIdNotFoundFailure(error_10, this.scenarioMarker, TelemetryEvent_1.default.GetConversationDetails, telemetryData);
                        }
                        exceptionSuppressors_1.default.suppressConversationDetailsRetrievalFailure(error_10, this.scenarioMarker, TelemetryEvent_1.default.GetConversationDetails, telemetryData);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/, {}];
                }
            });
        });
    };
    /**
     * Gets PreChat Survey.
     * @param parse Whether to parse PreChatSurvey to JSON or not.
     */
    OmnichannelChatSDK.prototype.getPreChatSurvey = function (parse) {
        if (parse === void 0) { parse = true; }
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                this.scenarioMarker.startScenario(TelemetryEvent_1.default.GetPreChatSurvey);
                try {
                    result = parse ? JSON.parse(this.preChatSurvey) : this.preChatSurvey;
                    this.scenarioMarker.completeScenario(TelemetryEvent_1.default.GetPreChatSurvey);
                    return [2 /*return*/, result];
                }
                catch (_b) {
                    this.scenarioMarker.failScenario(TelemetryEvent_1.default.GetPreChatSurvey);
                }
                return [2 /*return*/];
            });
        });
    };
    OmnichannelChatSDK.prototype.getLiveChatConfig = function (optionalParams) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!optionalParams || optionalParams.useRuntimeCache === true) {
                    return [2 /*return*/, this.liveChatConfig];
                }
                return [2 /*return*/, this.getChatConfig({ sendCacheHeaders: (optionalParams === null || optionalParams === void 0 ? void 0 : optionalParams.sendCacheHeaders) || false })];
            });
        });
    };
    OmnichannelChatSDK.prototype.getChatToken = function (cached, optionalParams) {
        var _a, _b, _c;
        if (cached === void 0) { cached = true; }
        return __awaiter(this, void 0, void 0, function () {
            var getChatTokenOptionalParams, chatToken, chatId, token, regionGtms, expiresIn, visitorId, voiceVideoCallToken, acsEndpoint, attachmentConfiguration, error_11, telemetryData;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        this.scenarioMarker.startScenario(TelemetryEvent_1.default.GetChatToken, {
                            RequestId: this.requestId
                        });
                        if (!!cached) return [3 /*break*/, 5];
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 3, , 4]);
                        getChatTokenOptionalParams = {};
                        if (this.authenticatedUserToken) {
                            getChatTokenOptionalParams.authenticatedUserToken = this.authenticatedUserToken;
                        }
                        if (this.isPersistentChat && !((_a = this.chatSDKConfig.persistentChat) === null || _a === void 0 ? void 0 : _a.disable)) {
                            getChatTokenOptionalParams.reconnectId = this.reconnectId;
                        }
                        if (this.isChatReconnect && !((_b = this.chatSDKConfig.chatReconnect) === null || _b === void 0 ? void 0 : _b.disable) && !this.isPersistentChat) {
                            getChatTokenOptionalParams.reconnectId = this.reconnectId;
                        }
                        if ((optionalParams === null || optionalParams === void 0 ? void 0 : optionalParams.refreshToken) === true) {
                            getChatTokenOptionalParams.refreshToken = optionalParams === null || optionalParams === void 0 ? void 0 : optionalParams.refreshToken;
                        }
                        return [4 /*yield*/, this.OCClient.getChatToken(this.requestId, getChatTokenOptionalParams)];
                    case 2:
                        chatToken = _d.sent();
                        chatId = chatToken.ChatId, token = chatToken.Token, regionGtms = chatToken.RegionGtms, expiresIn = chatToken.ExpiresIn, visitorId = chatToken.VisitorId, voiceVideoCallToken = chatToken.VoiceVideoCallToken, acsEndpoint = chatToken.ACSEndpoint, attachmentConfiguration = chatToken.AttachmentConfiguration;
                        this.chatToken = {
                            chatId: chatId,
                            regionGTMS: JSON.parse(regionGtms),
                            requestId: this.requestId,
                            token: token,
                            expiresIn: expiresIn,
                            visitorId: visitorId,
                            voiceVideoCallToken: voiceVideoCallToken,
                            acsEndpoint: acsEndpoint,
                        };
                        if (attachmentConfiguration && attachmentConfiguration.AttachmentServiceEndpoint) {
                            this.chatToken.amsEndpoint = attachmentConfiguration.AttachmentServiceEndpoint;
                        }
                        this.scenarioMarker.completeScenario(TelemetryEvent_1.default.GetChatToken, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        return [3 /*break*/, 4];
                    case 3:
                        error_11 = _d.sent();
                        telemetryData = {
                            RequestId: this.requestId,
                            ChatId: (_c = this.chatToken) === null || _c === void 0 ? void 0 : _c.chatId,
                        };
                        if (utilities_1.isClientIdNotFoundErrorMessage(error_11)) {
                            exceptionThrowers_1.default.throwAuthContactIdNotFoundFailure(error_11, this.scenarioMarker, TelemetryEvent_1.default.GetChatToken, telemetryData);
                        }
                        else {
                            exceptionThrowers_1.default.throwChatTokenRetrievalFailure(error_11, this.scenarioMarker, TelemetryEvent_1.default.GetChatToken, telemetryData);
                        }
                        return [3 /*break*/, 4];
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        this.scenarioMarker.completeScenario(TelemetryEvent_1.default.GetChatToken, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        _d.label = 6;
                    case 6: return [2 /*return*/, this.chatToken];
                }
            });
        });
    };
    OmnichannelChatSDK.prototype.getCallingToken = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.chatToken && Object.keys(this.chatToken).length === 0) {
                    return [2 /*return*/, ''];
                }
                if (this.chatToken.voiceVideoCallToken) {
                    /* istanbul ignore next */
                    this.debug && console.log("calling:acs");
                    return [2 /*return*/, this.chatToken.voiceVideoCallToken.Token];
                }
                else {
                    /* istanbul ignore next */
                    this.debug && console.log("calling:skype");
                    return [2 /*return*/, this.chatToken.token];
                }
                return [2 /*return*/];
            });
        });
    };
    OmnichannelChatSDK.prototype.getMessages = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var messages, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        this.scenarioMarker.startScenario(TelemetryEvent_1.default.GetMessages, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, ((_a = this.conversation) === null || _a === void 0 ? void 0 : _a.getMessages())];
                    case 2:
                        messages = _c.sent();
                        this.scenarioMarker.completeScenario(TelemetryEvent_1.default.GetMessages, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        return [2 /*return*/, messages];
                    case 3:
                        _b = _c.sent();
                        this.scenarioMarker.failScenario(TelemetryEvent_1.default.GetMessages, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    OmnichannelChatSDK.prototype.getDataMaskingRules = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.dataMaskingRules];
            });
        });
    };
    OmnichannelChatSDK.prototype.sendMessage = function (message) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var _b, disable, maskingCharacter, content, _i, _c, maskingRule, regex, match, replaceStr, sendMessageRequest, error_12, messageToSend, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        this.scenarioMarker.startScenario(TelemetryEvent_1.default.SendMessages, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        _b = this.chatSDKConfig.dataMasking, disable = _b.disable, maskingCharacter = _b.maskingCharacter;
                        content = message.content;
                        if (Object.keys(this.dataMaskingRules).length > 0 && !disable) {
                            for (_i = 0, _c = Object.values(this.dataMaskingRules); _i < _c.length; _i++) {
                                maskingRule = _c[_i];
                                regex = new RegExp(maskingRule, 'g');
                                match = void 0;
                                while (match = regex.exec(content)) { // eslint-disable-line no-cond-assign
                                    replaceStr = match[0].replace(/./g, maskingCharacter);
                                    content = content.replace(match[0], replaceStr);
                                }
                            }
                        }
                        message.content = content;
                        if (!(this.liveChatVersion === LiveChatVersion_1.default.V2)) return [3 /*break*/, 5];
                        sendMessageRequest = {
                            content: message.content,
                        };
                        sendMessageRequest.metadata = {
                            widgetId: this.omnichannelConfig.widgetId,
                            clientMessageId: Date.now().toString()
                        };
                        if (message.metadata) {
                            sendMessageRequest.metadata = __assign(__assign({}, sendMessageRequest.metadata), message.metadata);
                        }
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, ((_a = this.conversation) === null || _a === void 0 ? void 0 : _a.sendMessage(sendMessageRequest))];
                    case 2:
                        _e.sent();
                        this.scenarioMarker.completeScenario(TelemetryEvent_1.default.SendMessages, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        return [3 /*break*/, 4];
                    case 3:
                        error_12 = _e.sent();
                        this.scenarioMarker.failScenario(TelemetryEvent_1.default.SendMessages, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        throw new Error('ChatSDKSendMessageFailed');
                    case 4: return [3 /*break*/, 9];
                    case 5:
                        messageToSend = {
                            content: message.content,
                            timestamp: new Date(),
                            contentType: MessageContentType_1.default.Text,
                            deliveryMode: DeliveryMode_1.default.Bridged,
                            messageType: MessageType_1.default.UserMessage,
                            properties: undefined,
                            tags: __spreadArrays(MessageTags_1.defaultMessageTags),
                            sender: {
                                displayName: "Customer",
                                id: "customer",
                                type: PersonType_1.default.User
                            }
                        };
                        if (message.tags) {
                            messageToSend.tags = message.tags;
                        }
                        if (message.timestamp) {
                            messageToSend.timestamp = message.timestamp;
                        }
                        _e.label = 6;
                    case 6:
                        _e.trys.push([6, 8, , 9]);
                        return [4 /*yield*/, this.conversation.sendMessage(messageToSend)];
                    case 7:
                        _e.sent();
                        this.scenarioMarker.completeScenario(TelemetryEvent_1.default.SendMessages, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        return [3 /*break*/, 9];
                    case 8:
                        _d = _e.sent();
                        this.scenarioMarker.failScenario(TelemetryEvent_1.default.SendMessages, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        throw new Error('ChatSDKSendMessageFailed');
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    OmnichannelChatSDK.prototype.onNewMessage = function (onNewMessageCallback, optionalParams) {
        var _a, _b;
        if (optionalParams === void 0) { optionalParams = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var postedMessages_1, messages, _i, _c, message, id, postedMessages_2, messages, _d, _e, message, clientmessageid, omnichannelMessage;
            var _this = this;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        this.scenarioMarker.startScenario(TelemetryEvent_1.default.OnNewMessage, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        if (!(this.liveChatVersion === LiveChatVersion_1.default.V2)) return [3 /*break*/, 3];
                        postedMessages_1 = new Set();
                        if (!optionalParams.rehydrate) return [3 /*break*/, 2];
                        this.debug && console.log('[OmnichannelChatSDK][onNewMessage] rehydrate');
                        return [4 /*yield*/, this.getMessages()];
                    case 1:
                        messages = _f.sent();
                        for (_i = 0, _c = messages.reverse(); _i < _c.length; _i++) {
                            message = _c[_i];
                            id = message.id;
                            if (postedMessages_1.has(id)) {
                                continue;
                            }
                            postedMessages_1.add(id);
                            onNewMessageCallback(message);
                        }
                        _f.label = 2;
                    case 2:
                        try {
                            (_a = this.conversation) === null || _a === void 0 ? void 0 : _a.registerOnNewMessage(function (event) {
                                var id = event.id;
                                var omnichannelMessage = createOmnichannelMessage_1.default(event, {
                                    liveChatVersion: _this.liveChatVersion,
                                    debug: _this.debug
                                });
                                if (!postedMessages_1.has(id)) {
                                    onNewMessageCallback(omnichannelMessage);
                                    postedMessages_1.add(id);
                                }
                            });
                            this.scenarioMarker.completeScenario(TelemetryEvent_1.default.OnNewMessage, {
                                RequestId: this.requestId,
                                ChatId: this.chatToken.chatId
                            });
                        }
                        catch (_g) {
                            this.scenarioMarker.failScenario(TelemetryEvent_1.default.OnNewMessage, {
                                RequestId: this.requestId,
                                ChatId: this.chatToken.chatId
                            });
                        }
                        return [3 /*break*/, 6];
                    case 3:
                        postedMessages_2 = new Set();
                        if (!optionalParams.rehydrate) return [3 /*break*/, 5];
                        this.debug && console.log('[OmnichannelChatSDK][onNewMessage] rehydrate');
                        return [4 /*yield*/, this.getMessages()];
                    case 4:
                        messages = _f.sent();
                        if (messages) {
                            for (_d = 0, _e = messages.reverse(); _d < _e.length; _d++) {
                                message = _e[_d];
                                clientmessageid = message.clientmessageid;
                                if (postedMessages_2.has(clientmessageid)) {
                                    continue;
                                }
                                postedMessages_2.add(clientmessageid);
                                omnichannelMessage = createOmnichannelMessage_1.default(message, {
                                    liveChatVersion: this.liveChatVersion,
                                    debug: this.debug
                                });
                                onNewMessageCallback(omnichannelMessage);
                            }
                        }
                        _f.label = 5;
                    case 5:
                        try {
                            (_b = this.conversation) === null || _b === void 0 ? void 0 : _b.registerOnNewMessage(function (message) {
                                var clientmessageid = message.clientmessageid, messageType = message.messageType;
                                // Filter out customer messages
                                if (utilities_1.isCustomerMessage(message)) {
                                    return;
                                }
                                // Skip duplicates
                                if (postedMessages_2.has(clientmessageid)) {
                                    return;
                                }
                                if (messageType !== MessageType_1.default.Typing) {
                                    var omnichannelMessage = createOmnichannelMessage_1.default(message, {
                                        liveChatVersion: _this.liveChatVersion,
                                        debug: _this.debug
                                    });
                                    onNewMessageCallback(omnichannelMessage);
                                }
                            });
                            this.scenarioMarker.completeScenario(TelemetryEvent_1.default.OnNewMessage, {
                                RequestId: this.requestId,
                                ChatId: this.chatToken.chatId
                            });
                        }
                        catch (_h) {
                            this.scenarioMarker.failScenario(TelemetryEvent_1.default.OnNewMessage, {
                                RequestId: this.requestId,
                                ChatId: this.chatToken.chatId
                            });
                        }
                        _f.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    OmnichannelChatSDK.prototype.sendTypingEvent = function () {
        return __awaiter(this, void 0, void 0, function () {
            var error_13, typingPayload, members, botMembers, error_14;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.scenarioMarker.startScenario(TelemetryEvent_1.default.SendTypingEvent, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        if (!(this.liveChatVersion === LiveChatVersion_1.default.V2)) return [3 /*break*/, 6];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, this.OCClient.sendTypingIndicator(this.requestId, LiveChatVersion_1.default.V2, {
                                customerDisplayName: ACSParticipantDisplayName_1.default.Customer
                            })];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.conversation.sendTyping()];
                    case 3:
                        _a.sent();
                        this.scenarioMarker.completeScenario(TelemetryEvent_1.default.SendTypingEvent, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        return [3 /*break*/, 5];
                    case 4:
                        error_13 = _a.sent();
                        this.scenarioMarker.failScenario(TelemetryEvent_1.default.SendTypingEvent, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        throw new Error('SendTypingFailure');
                    case 5: return [3 /*break*/, 12];
                    case 6:
                        typingPayload = "{isTyping: 0}";
                        _a.label = 7;
                    case 7:
                        _a.trys.push([7, 11, , 12]);
                        return [4 /*yield*/, this.conversation.indicateTypingStatus(0)];
                    case 8:
                        _a.sent();
                        return [4 /*yield*/, this.conversation.getMembers()];
                    case 9:
                        members = _a.sent();
                        botMembers = members.filter(function (member) { return member.type === PersonType_1.default.Bot; });
                        return [4 /*yield*/, this.conversation.sendMessageToBot(botMembers[0].id, { payload: typingPayload })];
                    case 10:
                        _a.sent();
                        this.scenarioMarker.completeScenario(TelemetryEvent_1.default.SendTypingEvent, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        return [3 /*break*/, 12];
                    case 11:
                        error_14 = _a.sent();
                        this.scenarioMarker.failScenario(TelemetryEvent_1.default.SendTypingEvent, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        throw new Error('SendTypingFailure');
                    case 12: return [2 /*return*/];
                }
            });
        });
    };
    OmnichannelChatSDK.prototype.onTypingEvent = function (onTypingEventCallback) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                this.scenarioMarker.startScenario(TelemetryEvent_1.default.OnTypingEvent, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                });
                if (this.liveChatVersion === LiveChatVersion_1.default.V2) {
                    try {
                        this.conversation.onTypingEvent(onTypingEventCallback);
                        this.scenarioMarker.completeScenario(TelemetryEvent_1.default.OnTypingEvent, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                    }
                    catch (_c) {
                        this.scenarioMarker.failScenario(TelemetryEvent_1.default.OnTypingEvent, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                    }
                }
                else {
                    try {
                        (_a = this.conversation) === null || _a === void 0 ? void 0 : _a.registerOnNewMessage(function (message) {
                            var messageType = message.messageType;
                            // Filter out customer messages
                            if (utilities_1.isCustomerMessage(message)) {
                                return;
                            }
                            if (messageType === MessageType_1.default.Typing) {
                                onTypingEventCallback(message);
                            }
                        });
                        this.scenarioMarker.completeScenario(TelemetryEvent_1.default.OnTypingEvent, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                    }
                    catch (_d) {
                        this.scenarioMarker.failScenario(TelemetryEvent_1.default.OnTypingEvent, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                    }
                }
                return [2 /*return*/];
            });
        });
    };
    OmnichannelChatSDK.prototype.onAgentEndSession = function (onAgentEndSessionCallback) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_b) {
                this.scenarioMarker.startScenario(TelemetryEvent_1.default.OnAgentEndSession, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                });
                if (this.liveChatVersion === LiveChatVersion_1.default.V2) {
                    try {
                        this.conversation.registerOnThreadUpdate(function (event) {
                            onAgentEndSessionCallback(event);
                        });
                        this.scenarioMarker.completeScenario(TelemetryEvent_1.default.OnAgentEndSession, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                    }
                    catch (error) {
                        this.scenarioMarker.failScenario(TelemetryEvent_1.default.OnAgentEndSession, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                    }
                }
                else {
                    try {
                        (_a = this.conversation) === null || _a === void 0 ? void 0 : _a.registerOnThreadUpdate(function (message) {
                            var members = message.members;
                            // Agent ending conversation would have 1 member left in the chat thread
                            if (members.length === 1) {
                                onAgentEndSessionCallback(message);
                                if (_this.refreshTokenTimer !== null) {
                                    clearInterval(_this.refreshTokenTimer);
                                    _this.refreshTokenTimer = null;
                                }
                            }
                        });
                        this.scenarioMarker.completeScenario(TelemetryEvent_1.default.OnAgentEndSession, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                    }
                    catch (error) {
                        this.scenarioMarker.failScenario(TelemetryEvent_1.default.OnAgentEndSession, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                    }
                }
                return [2 /*return*/];
            });
        });
    };
    OmnichannelChatSDK.prototype.uploadFileAttachment = function (fileInfo) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function () {
            var createObjectResponse, documentId, uploadDocumentResponse, fileIdsProperty, fileMetaProperty, sendMessageRequest, messageToSend, error_15, fileMetadata, messageToSend, error_16;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        this.scenarioMarker.startScenario(TelemetryEvent_1.default.UploadFileAttachment, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        if (!(this.liveChatVersion === LiveChatVersion_1.default.V2)) return [3 /*break*/, 7];
                        return [4 /*yield*/, ((_a = this.AMSClient) === null || _a === void 0 ? void 0 : _a.createObject((_b = this.chatToken) === null || _b === void 0 ? void 0 : _b.chatId, fileInfo))];
                    case 1:
                        createObjectResponse = _e.sent();
                        documentId = createObjectResponse.id;
                        return [4 /*yield*/, ((_c = this.AMSClient) === null || _c === void 0 ? void 0 : _c.uploadDocument(documentId, fileInfo))];
                    case 2:
                        uploadDocumentResponse = _e.sent();
                        fileIdsProperty = {
                            amsReferences: JSON.stringify([documentId]),
                            amsreferences: JSON.stringify([documentId])
                        };
                        fileMetaProperty = {
                            amsMetadata: JSON.stringify([{
                                    contentType: fileInfo.type,
                                    fileName: fileInfo.name
                                }])
                        };
                        sendMessageRequest = {
                            content: '',
                            metadata: __assign(__assign({ widgetId: this.omnichannelConfig.widgetId, clientMessageId: Date.now().toString() }, fileIdsProperty), fileMetaProperty)
                        };
                        messageToSend = {
                            content: "",
                            timestamp: new Date(),
                            contentType: MessageContentType_1.default.Text,
                            deliveryMode: DeliveryMode_1.default.Bridged,
                            messageType: MessageType_1.default.UserMessage,
                            tags: __spreadArrays(MessageTags_1.defaultMessageTags),
                            sender: {
                                displayName: "Customer",
                                id: "customer",
                                type: PersonType_1.default.User,
                            },
                            fileMetadata: uploadDocumentResponse
                        };
                        _e.label = 3;
                    case 3:
                        _e.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, ((_d = this.conversation) === null || _d === void 0 ? void 0 : _d.sendMessage(sendMessageRequest))];
                    case 4:
                        _e.sent();
                        this.scenarioMarker.completeScenario(TelemetryEvent_1.default.UploadFileAttachment, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        return [2 /*return*/, messageToSend];
                    case 5:
                        error_15 = _e.sent();
                        console.error("OmnichannelChatSDK/uploadFileAttachment/sendMessage/error");
                        this.scenarioMarker.failScenario(TelemetryEvent_1.default.UploadFileAttachment, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/, {}];
                    case 7:
                        fileMetadata = void 0;
                        if (!(platform_1.default.isReactNative() || platform_1.default.isNode())) return [3 /*break*/, 9];
                        return [4 /*yield*/, this.conversation.sendFileData(fileInfo, FileSharingProtocolType_1.default.AmsBasedFileSharing)];
                    case 8:
                        fileMetadata = _e.sent();
                        return [3 /*break*/, 11];
                    case 9: return [4 /*yield*/, this.conversation.uploadFile(fileInfo, FileSharingProtocolType_1.default.AmsBasedFileSharing)];
                    case 10:
                        fileMetadata = _e.sent();
                        _e.label = 11;
                    case 11:
                        messageToSend = {
                            content: "",
                            timestamp: new Date(),
                            contentType: MessageContentType_1.default.Text,
                            deliveryMode: DeliveryMode_1.default.Bridged,
                            messageType: MessageType_1.default.UserMessage,
                            tags: __spreadArrays(MessageTags_1.defaultMessageTags),
                            sender: {
                                displayName: "Customer",
                                id: "customer",
                                type: PersonType_1.default.User,
                            },
                            fileMetadata: fileMetadata
                        };
                        _e.label = 12;
                    case 12:
                        _e.trys.push([12, 14, , 15]);
                        return [4 /*yield*/, this.conversation.sendFileMessage(fileMetadata, messageToSend)];
                    case 13:
                        _e.sent();
                        this.scenarioMarker.completeScenario(TelemetryEvent_1.default.UploadFileAttachment, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        return [2 /*return*/, messageToSend];
                    case 14:
                        error_16 = _e.sent();
                        console.error("OmnichannelChatSDK/uploadFileAttachment/error: " + error_16);
                        this.scenarioMarker.failScenario(TelemetryEvent_1.default.UploadFileAttachment, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        return [3 /*break*/, 15];
                    case 15: return [2 /*return*/, {}];
                }
            });
        });
    };
    OmnichannelChatSDK.prototype.downloadFileAttachment = function (fileMetadata) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var response, view_location, viewResponse, _c, downloadedFile, error_17;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        this.scenarioMarker.startScenario(TelemetryEvent_1.default.DownloadFileAttachment, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        if (!(this.liveChatVersion === LiveChatVersion_1.default.V2)) return [3 /*break*/, 6];
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, ((_a = this.AMSClient) === null || _a === void 0 ? void 0 : _a.getViewStatus(fileMetadata))];
                    case 2:
                        response = _d.sent();
                        view_location = response.view_location;
                        return [4 /*yield*/, ((_b = this.AMSClient) === null || _b === void 0 ? void 0 : _b.getView(fileMetadata, view_location))];
                    case 3:
                        viewResponse = _d.sent();
                        this.scenarioMarker.completeScenario(TelemetryEvent_1.default.DownloadFileAttachment, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        return [2 /*return*/, viewResponse];
                    case 4:
                        _c = _d.sent();
                        this.scenarioMarker.failScenario(TelemetryEvent_1.default.DownloadFileAttachment, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        throw new Error('DownloadFileAttachmentFailed');
                    case 5: return [3 /*break*/, 9];
                    case 6:
                        _d.trys.push([6, 8, , 9]);
                        return [4 /*yield*/, this.conversation.downloadFile(fileMetadata)];
                    case 7:
                        downloadedFile = _d.sent();
                        this.scenarioMarker.completeScenario(TelemetryEvent_1.default.DownloadFileAttachment, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        return [2 /*return*/, downloadedFile];
                    case 8:
                        error_17 = _d.sent();
                        console.error("OmnichannelChatSDK/downloadFileAttachment/error: " + error_17);
                        this.scenarioMarker.failScenario(TelemetryEvent_1.default.DownloadFileAttachment, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        throw new Error('DownloadFileAttachmentFailed');
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    OmnichannelChatSDK.prototype.emailLiveChatTranscript = function (body) {
        return __awaiter(this, void 0, void 0, function () {
            var emailTranscriptOptionalParams, emailRequestBody, emailResponse;
            return __generator(this, function (_a) {
                emailTranscriptOptionalParams = {};
                this.scenarioMarker.startScenario(TelemetryEvent_1.default.EmailLiveChatTranscript, {
                    RequestId: this.requestId,
                    ChatId: this.chatToken.chatId
                });
                try {
                    if (this.authenticatedUserToken) {
                        emailTranscriptOptionalParams.authenticatedUserToken = this.authenticatedUserToken;
                    }
                    emailRequestBody = {
                        ChatId: this.chatToken.chatId,
                        EmailAddress: body.emailAddress,
                        DefaultAttachmentMessage: body.attachmentMessage,
                        CustomerLocale: body.locale || locale_1.getLocaleStringFromId(this.localeId)
                    };
                    emailResponse = this.OCClient.emailTranscript(this.requestId, this.chatToken.token, emailRequestBody, emailTranscriptOptionalParams);
                    this.scenarioMarker.completeScenario(TelemetryEvent_1.default.EmailLiveChatTranscript, {
                        RequestId: this.requestId,
                        ChatId: this.chatToken.chatId
                    });
                    return [2 /*return*/, emailResponse];
                }
                catch (error) {
                    console.error("OmnichannelChatSDK/emailLiveChatTranscript/error: " + error);
                    this.scenarioMarker.failScenario(TelemetryEvent_1.default.EmailLiveChatTranscript, {
                        RequestId: this.requestId,
                        ChatId: this.chatToken.chatId
                    });
                }
                return [2 /*return*/];
            });
        });
    };
    OmnichannelChatSDK.prototype.getLiveChatTranscript = function (optionalParams) {
        if (optionalParams === void 0) { optionalParams = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var getChatTranscriptOptionalParams, requestId, chatToken, chatId, transcriptResponse, error_18, telemetryData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        getChatTranscriptOptionalParams = {};
                        requestId = this.requestId;
                        chatToken = this.chatToken;
                        chatId = chatToken.chatId;
                        if (optionalParams.liveChatContext) {
                            requestId = optionalParams.liveChatContext.requestId;
                            chatToken = optionalParams.liveChatContext.chatToken;
                            chatId = chatToken.chatId;
                        }
                        this.scenarioMarker.startScenario(TelemetryEvent_1.default.GetLiveChatTranscript, {
                            RequestId: requestId,
                            ChatId: chatId
                        });
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        if (this.authenticatedUserToken) {
                            getChatTranscriptOptionalParams.authenticatedUserToken = this.authenticatedUserToken;
                        }
                        return [4 /*yield*/, this.OCClient.getChatTranscripts(requestId, chatToken.chatId, chatToken.token, getChatTranscriptOptionalParams)];
                    case 2:
                        transcriptResponse = _a.sent();
                        this.scenarioMarker.completeScenario(TelemetryEvent_1.default.GetLiveChatTranscript, {
                            RequestId: requestId,
                            ChatId: chatId
                        });
                        return [2 /*return*/, transcriptResponse];
                    case 3:
                        error_18 = _a.sent();
                        telemetryData = {
                            RequestId: requestId,
                            ChatId: chatId
                        };
                        exceptionThrowers_1.default.throwLiveChatTranscriptRetrievalFailure(error_18, this.scenarioMarker, TelemetryEvent_1.default.GetLiveChatTranscript, telemetryData);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    OmnichannelChatSDK.prototype.createChatAdapter = function (optionalParams) {
        var _a;
        if (optionalParams === void 0) { optionalParams = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var protocol, supportedChatAdapterProtocols, fileManager;
            return __generator(this, function (_b) {
                if (platform_1.default.isNode() || platform_1.default.isReactNative()) {
                    return [2 /*return*/, Promise.reject('ChatAdapter is only supported on browser')];
                }
                protocol = optionalParams.protocol;
                supportedChatAdapterProtocols = [ChatAdapterProtocols_1.default.ACS, ChatAdapterProtocols_1.default.IC3, ChatAdapterProtocols_1.default.DirectLine];
                if (protocol && !supportedChatAdapterProtocols.includes(protocol)) {
                    return [2 /*return*/, Promise.reject("ChatAdapter for protocol " + protocol + " currently not supported")];
                }
                if (protocol === ChatAdapterProtocols_1.default.DirectLine) {
                    return [2 /*return*/, chatAdapterCreators_1.createDirectLine(optionalParams, this.chatSDKConfig, this.liveChatVersion, ChatAdapterProtocols_1.default.DirectLine, this.telemetry, this.scenarioMarker)];
                }
                else if (protocol === ChatAdapterProtocols_1.default.ACS || this.liveChatVersion === LiveChatVersion_1.default.V2) {
                    fileManager = new AMSFileManager_1.default(this.AMSClient, this.acsAdapterLogger);
                    return [2 /*return*/, chatAdapterCreators_1.createACSAdapter(optionalParams, this.chatSDKConfig, this.liveChatVersion, ChatAdapterProtocols_1.default.ACS, this.telemetry, this.scenarioMarker, this.omnichannelConfig, this.chatToken, fileManager, (_a = this.ACSClient) === null || _a === void 0 ? void 0 : _a.getChatClient(), this.acsAdapterLogger)];
                }
                else if (protocol === ChatAdapterProtocols_1.default.IC3 || this.liveChatVersion === LiveChatVersion_1.default.V1) {
                    return [2 /*return*/, chatAdapterCreators_1.createIC3Adapter(optionalParams, this.chatSDKConfig, this.liveChatVersion, ChatAdapterProtocols_1.default.IC3, this.telemetry, this.scenarioMarker, this.chatToken, this.IC3Client, this.ic3ClientLogger)];
                }
                return [2 /*return*/, Promise.reject("ChatAdapter for protocol " + protocol + " currently not supported")];
            });
        });
    };
    OmnichannelChatSDK.prototype.getVoiceVideoCalling = function (params) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var message, message, chatConfig, liveWSAndLiveChatEngJoin, msdyn_widgetsnippet, widgetSnippetSourceRegex, result;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.scenarioMarker.startScenario(TelemetryEvent_1.default.GetVoiceVideoCalling);
                        if (platform_1.default.isNode() || platform_1.default.isReactNative()) {
                            message = "VoiceVideoCalling is only supported on browser";
                            exceptionThrowers_1.default.throwUnsupportedPlatform(this.scenarioMarker, TelemetryEvent_1.default.GetVoiceVideoCalling, message);
                        }
                        if (this.callingOption.toString() === CallingOptionsOptionSetNumber_1.default.NoCalling.toString()) {
                            message = "Voice and video call is not enabled";
                            exceptionThrowers_1.default.throwFeatureDisabled(this.scenarioMarker, TelemetryEvent_1.default.GetVoiceVideoCalling, message);
                        }
                        return [4 /*yield*/, this.getChatConfig()];
                    case 1:
                        chatConfig = _a.sent();
                        liveWSAndLiveChatEngJoin = chatConfig.LiveWSAndLiveChatEngJoin;
                        msdyn_widgetsnippet = liveWSAndLiveChatEngJoin.msdyn_widgetsnippet;
                        widgetSnippetSourceRegex = new RegExp("src=\"(https:\\/\\/[\\w-.]+)[\\w-.\\/]+\"");
                        result = msdyn_widgetsnippet.match(widgetSnippetSourceRegex);
                        if (result && result.length) {
                            return [2 /*return*/, new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                                    var LiveChatWidgetLibCDNUrl, defaultParams;
                                    var _this = this;
                                    var _a;
                                    return __generator(this, function (_b) {
                                        switch (_b.label) {
                                            case 0:
                                                LiveChatWidgetLibCDNUrl = result[1] + "/livechatwidget/WebChatControl/lib/CallingBundle.js";
                                                (_a = this.telemetry) === null || _a === void 0 ? void 0 : _a.setCDNPackages({
                                                    VoiceVideoCalling: LiveChatWidgetLibCDNUrl
                                                });
                                                defaultParams = {
                                                    logger: this.callingSdkLogger
                                                };
                                                return [4 /*yield*/, WebUtils_1.loadScript(LiveChatWidgetLibCDNUrl, function () { return __awaiter(_this, void 0, void 0, function () {
                                                        var VoiceVideoCalling;
                                                        return __generator(this, function (_a) {
                                                            switch (_a.label) {
                                                                case 0:
                                                                    this.debug && console.debug(LiveChatWidgetLibCDNUrl + " loaded!");
                                                                    return [4 /*yield*/, createVoiceVideoCalling_1.default(__assign(__assign({}, params), defaultParams))];
                                                                case 1:
                                                                    VoiceVideoCalling = _a.sent();
                                                                    this.scenarioMarker.completeScenario(TelemetryEvent_1.default.GetVoiceVideoCalling);
                                                                    VoiceVideoCalling.useScenarioMarker(this.scenarioMarker);
                                                                    resolve(VoiceVideoCalling);
                                                                    return [2 /*return*/];
                                                            }
                                                        });
                                                    }); }, function () { return __awaiter(_this, void 0, void 0, function () {
                                                        var exceptionDetails;
                                                        return __generator(this, function (_a) {
                                                            exceptionDetails = {
                                                                response: "VoiceVideoCallingLoadFailed",
                                                                message: "Failed to load VoiceVideoCalling"
                                                            };
                                                            this.scenarioMarker.failScenario(TelemetryEvent_1.default.GetVoiceVideoCalling, {
                                                                ExceptionDetails: JSON.stringify(exceptionDetails)
                                                            });
                                                            throw new Error(exceptionDetails.response);
                                                        });
                                                    }); })];
                                            case 1:
                                                _b.sent();
                                                return [2 /*return*/];
                                        }
                                    });
                                }); })];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    OmnichannelChatSDK.prototype.getPostChatSurveyContext = function () {
        return __awaiter(this, void 0, void 0, function () {
            var conversationId, chatConfig, liveWSAndLiveChatEngJoin, msdyn_postconversationsurveyenable, msfp_sourcesurveyidentifier, msfp_botsourcesurveyidentifier, postConversationSurveyOwnerId, postConversationBotSurveyOwnerId, liveWorkItemDetails, participantJoined, participantType, agentSurveyInviteLinkRequest, botSurveyInviteLinkRequest, optionalParams, agentSurveyInviteLinkResponse, botSurveyInviteLinkResponse, _a, agentSurveyInviteLink, agentFormsProLocale, botSurveyInviteLink, botFormsProLocale, postChatContext, ex_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.scenarioMarker.startScenario(TelemetryEvent_1.default.GetPostChatSurveyContext, {
                            RequestId: this.requestId
                        });
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 8, , 9]);
                        chatConfig = this.liveChatConfig;
                        liveWSAndLiveChatEngJoin = chatConfig.LiveWSAndLiveChatEngJoin;
                        msdyn_postconversationsurveyenable = liveWSAndLiveChatEngJoin.msdyn_postconversationsurveyenable, msfp_sourcesurveyidentifier = liveWSAndLiveChatEngJoin.msfp_sourcesurveyidentifier, msfp_botsourcesurveyidentifier = liveWSAndLiveChatEngJoin.msfp_botsourcesurveyidentifier, postConversationSurveyOwnerId = liveWSAndLiveChatEngJoin.postConversationSurveyOwnerId, postConversationBotSurveyOwnerId = liveWSAndLiveChatEngJoin.postConversationBotSurveyOwnerId;
                        if (!(msdyn_postconversationsurveyenable === "true")) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.getConversationDetails()];
                    case 2:
                        liveWorkItemDetails = _b.sent();
                        participantJoined = (liveWorkItemDetails === null || liveWorkItemDetails === void 0 ? void 0 : liveWorkItemDetails.canRenderPostChat) === "True";
                        participantType = liveWorkItemDetails === null || liveWorkItemDetails === void 0 ? void 0 : liveWorkItemDetails.participantType;
                        conversationId = liveWorkItemDetails === null || liveWorkItemDetails === void 0 ? void 0 : liveWorkItemDetails.conversationId;
                        agentSurveyInviteLinkRequest = {
                            "FormId": msfp_sourcesurveyidentifier,
                            "ConversationId": conversationId,
                            "OCLocaleCode": locale_1.getLocaleStringFromId(this.localeId)
                        };
                        botSurveyInviteLinkRequest = {
                            "FormId": msfp_botsourcesurveyidentifier,
                            "ConversationId": conversationId,
                            "OCLocaleCode": locale_1.getLocaleStringFromId(this.localeId)
                        };
                        optionalParams = {
                            "requestId": this.requestId
                        };
                        if (this.authenticatedUserToken) {
                            optionalParams.authenticatedUserToken = this.authenticatedUserToken;
                        }
                        return [4 /*yield*/, this.OCClient.getSurveyInviteLink(postConversationSurveyOwnerId, agentSurveyInviteLinkRequest, optionalParams)];
                    case 3:
                        agentSurveyInviteLinkResponse = _b.sent();
                        _a = postConversationBotSurveyOwnerId && msfp_botsourcesurveyidentifier;
                        if (!_a) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.OCClient.getSurveyInviteLink(postConversationBotSurveyOwnerId, botSurveyInviteLinkRequest, optionalParams)];
                    case 4:
                        _a = (_b.sent());
                        _b.label = 5;
                    case 5:
                        botSurveyInviteLinkResponse = _a;
                        agentSurveyInviteLink = void 0, agentFormsProLocale = void 0, botSurveyInviteLink = void 0, botFormsProLocale = void 0;
                        if (agentSurveyInviteLinkResponse != null) {
                            if (agentSurveyInviteLinkResponse.inviteList != null && agentSurveyInviteLinkResponse.inviteList.length == 1) {
                                agentSurveyInviteLink = agentSurveyInviteLinkResponse.inviteList[0].invitationLink;
                            }
                            else {
                                this.scenarioMarker.failScenario(TelemetryEvent_1.default.GetPostChatSurveyContext, {
                                    ConversationId: conversationId,
                                    RequestId: this.requestId,
                                    ExceptionDetails: "Survey Invite link failed to send response."
                                });
                                return [2 /*return*/, Promise.reject("Survey Invite link failed to send response.")];
                            }
                            if (agentSurveyInviteLinkResponse.formsProLocaleCode != null) {
                                agentFormsProLocale = agentSurveyInviteLinkResponse.formsProLocaleCode;
                            }
                            if (botSurveyInviteLinkResponse != null) {
                                if (botSurveyInviteLinkResponse.inviteList != null && botSurveyInviteLinkResponse.inviteList.length == 1) {
                                    botSurveyInviteLink = botSurveyInviteLinkResponse.inviteList[0].invitationLink;
                                }
                                if (botSurveyInviteLinkResponse.formsProLocaleCode != null) {
                                    botFormsProLocale = botSurveyInviteLinkResponse.formsProLocaleCode;
                                }
                            }
                            postChatContext = {
                                participantJoined: participantJoined,
                                participantType: participantType,
                                surveyInviteLink: agentSurveyInviteLink,
                                botSurveyInviteLink: botSurveyInviteLink,
                                formsProLocale: agentFormsProLocale,
                                botFormsProLocale: botFormsProLocale
                            };
                            return [2 /*return*/, Promise.resolve(postChatContext)];
                        }
                        else {
                            this.scenarioMarker.failScenario(TelemetryEvent_1.default.GetPostChatSurveyContext, {
                                ConversationId: conversationId,
                                RequestId: this.requestId,
                                ExceptionDetails: "surveyInviteLinkResponse is null."
                            });
                            return [2 /*return*/, Promise.reject("surveyInviteLinkResponse is null.")];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        this.scenarioMarker.failScenario(TelemetryEvent_1.default.GetPostChatSurveyContext, {
                            RequestId: this.requestId,
                            ExceptionDetails: "Post Chat Survey is disabled. Please check the Omnichannel Administration Portal."
                        });
                        return [2 /*return*/, Promise.reject("Post Chat is disabled from admin side.")];
                    case 7: return [3 /*break*/, 9];
                    case 8:
                        ex_1 = _b.sent();
                        this.scenarioMarker.failScenario(TelemetryEvent_1.default.GetPostChatSurveyContext, {
                            ConversationId: conversationId !== null && conversationId !== void 0 ? conversationId : "",
                            RequestId: this.requestId,
                            ExceptionDetails: JSON.stringify(ex_1)
                        });
                        return [2 /*return*/, Promise.reject("Retrieving post chat context failed " + JSON.stringify(ex_1))];
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    OmnichannelChatSDK.prototype.getAgentAvailability = function (optionalParams) {
        if (optionalParams === void 0) { optionalParams = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var reportError, getAgentAvailabilityOptionalParams, response, e_6;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        reportError = function (response, message, chatId) {
                            if (chatId === void 0) { chatId = ""; }
                            var exceptionDetails = {
                                response: response,
                                message: message
                            };
                            _this.scenarioMarker.failScenario(TelemetryEvent_1.default.GetAgentAvailability, {
                                RequestId: _this.requestId,
                                ExceptionDetails: JSON.stringify(exceptionDetails),
                                ChatId: chatId
                            });
                            throw new Error(exceptionDetails.message);
                        };
                        this.scenarioMarker.startScenario(TelemetryEvent_1.default.GetAgentAvailability, {
                            RequestId: this.requestId
                        });
                        if (!this.authSettings) {
                            reportError("Unsupported", "GetAgentAvailability is supported only for authenticated live chat widget.");
                        }
                        if (!this.authenticatedUserToken) {
                            reportError("UndefinedAuthToken", "Missing AuthToken for GetAgentAvailability.");
                        }
                        if (this.conversation) {
                            reportError("InvalidOperation", "GetAgentAvailability can only be called before a chat has started.", this.chatToken.chatId);
                        }
                        getAgentAvailabilityOptionalParams = {
                            initContext: {}
                        };
                        getAgentAvailabilityOptionalParams = this.populateInitChatOptionalParam(getAgentAvailabilityOptionalParams, optionalParams, TelemetryEvent_1.default.GetAgentAvailability);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.OCClient.getAgentAvailability(this.requestId, getAgentAvailabilityOptionalParams)];
                    case 2:
                        response = _a.sent();
                        return [2 /*return*/, response];
                    case 3:
                        e_6 = _a.sent();
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        reportError("GetAgentAvailabilityFailed", e_6.message);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    OmnichannelChatSDK.prototype.getIC3Client = function () {
        return __awaiter(this, void 0, void 0, function () {
            var IC3Client;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(platform_1.default.isNode() || platform_1.default.isReactNative())) return [3 /*break*/, 2];
                        this.debug && console.debug('IC3Core');
                        this.scenarioMarker.startScenario(TelemetryEvent_1.default.GetIC3Client);
                        // Use FramelessBridge from IC3Core
                        this.IC3SDKProvider = omnichannel_ic3core_1.SDKProvider;
                        return [4 /*yield*/, omnichannel_ic3core_1.SDKProvider.getSDK({
                                hostType: HostType_1.default.Page,
                                protocolType: ProtocoleType_1.default.IC3V1SDK
                            })];
                    case 1:
                        IC3Client = _a.sent();
                        IC3Client.setDebug(this.debug);
                        this.scenarioMarker.completeScenario(TelemetryEvent_1.default.GetIC3Client);
                        return [2 /*return*/, IC3Client];
                    case 2:
                        /* istanbul ignore next */
                        this.debug && console.debug('IC3Client');
                        // Use IC3Client if browser is detected
                        return [2 /*return*/, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                                var ic3ClientCDNUrl, IC3Client;
                                var _this = this;
                                var _a;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            ic3ClientCDNUrl = this.resolveIC3ClientUrl();
                                            (_a = this.telemetry) === null || _a === void 0 ? void 0 : _a.setCDNPackages({
                                                IC3Client: ic3ClientCDNUrl
                                            });
                                            this.scenarioMarker.startScenario(TelemetryEvent_1.default.GetIC3Client);
                                            if (!this.IC3SDKProvider) return [3 /*break*/, 2];
                                            return [4 /*yield*/, this.IC3SDKProvider.getSDK({
                                                    hostType: HostType_1.default.IFrame,
                                                    protocolType: ProtocoleType_1.default.IC3V1SDK,
                                                    logger: this.ic3ClientLogger // eslint-disable-line @typescript-eslint/no-explicit-any
                                                })];
                                        case 1:
                                            IC3Client = _b.sent();
                                            return [2 /*return*/, resolve(IC3Client)];
                                        case 2:
                                            window.addEventListener("ic3:sdk:load", function () { return __awaiter(_this, void 0, void 0, function () {
                                                var ic3sdk, IC3SDKProvider, IC3Client;
                                                return __generator(this, function (_a) {
                                                    switch (_a.label) {
                                                        case 0:
                                                            // Use FramedBridge from IC3Client
                                                            /* istanbul ignore next */
                                                            this.debug && console.debug('ic3:sdk:load');
                                                            ic3sdk = window.Microsoft.CRM.Omnichannel.IC3Client.SDK;
                                                            IC3SDKProvider = ic3sdk.SDKProvider;
                                                            this.IC3SDKProvider = IC3SDKProvider;
                                                            return [4 /*yield*/, IC3SDKProvider.getSDK({
                                                                    hostType: HostType_1.default.IFrame,
                                                                    protocolType: ProtocoleType_1.default.IC3V1SDK,
                                                                    logger: this.ic3ClientLogger
                                                                })];
                                                        case 1:
                                                            IC3Client = _a.sent();
                                                            this.scenarioMarker.completeScenario(TelemetryEvent_1.default.GetIC3Client);
                                                            resolve(IC3Client);
                                                            return [2 /*return*/];
                                                    }
                                                });
                                            }); });
                                            return [4 /*yield*/, WebUtils_1.loadScript(ic3ClientCDNUrl, function () {
                                                    /* istanbul ignore next */
                                                    _this.debug && console.debug('IC3Client loaded!');
                                                }, function () {
                                                    var exceptionDetails = {
                                                        response: "IC3ClientLoadFailed"
                                                    };
                                                    _this.scenarioMarker.failScenario(TelemetryEvent_1.default.GetIC3Client, {
                                                        ExceptionDetails: JSON.stringify(exceptionDetails)
                                                    });
                                                    reject('Failed to load IC3Client');
                                                })];
                                        case 3:
                                            _b.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); })];
                }
            });
        });
    };
    OmnichannelChatSDK.prototype.getChatConfig = function (optionalParams) {
        if (optionalParams === void 0) { optionalParams = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var sendCacheHeaders, bypassCache, liveChatConfig, dataMaskingConfig, authSettings, liveWSAndLiveChatEngJoin, liveChatVersion, chatWidgetLanguage, msdyn_localeid, setting, preChatSurvey, msdyn_prechatenabled, msdyn_callingoptions, msdyn_conversationmode, msdyn_enablechatreconnect, isPreChatEnabled, isChatReconnectEnabled;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sendCacheHeaders = optionalParams.sendCacheHeaders;
                        bypassCache = sendCacheHeaders === true;
                        return [4 /*yield*/, this.OCClient.getChatConfig(this.requestId, bypassCache)];
                    case 1:
                        liveChatConfig = _a.sent();
                        dataMaskingConfig = liveChatConfig.DataMaskingInfo, authSettings = liveChatConfig.LiveChatConfigAuthSettings, liveWSAndLiveChatEngJoin = liveChatConfig.LiveWSAndLiveChatEngJoin, liveChatVersion = liveChatConfig.LiveChatVersion, chatWidgetLanguage = liveChatConfig.ChatWidgetLanguage;
                        msdyn_localeid = chatWidgetLanguage.msdyn_localeid;
                        this.localeId = msdyn_localeid || locale_1.defaultLocaleId;
                        this.liveChatVersion = liveChatVersion || LiveChatVersion_1.default.V2;
                        /* istanbul ignore next */
                        this.debug && console.log("[OmnichannelChatSDK][getChatConfig][liveChatVersion] " + this.liveChatVersion);
                        setting = dataMaskingConfig.setting;
                        if (setting.msdyn_maskforcustomer) {
                            this.dataMaskingRules = dataMaskingConfig.dataMaskingRules;
                        }
                        if (authSettings) {
                            this.authSettings = authSettings;
                        }
                        preChatSurvey = liveWSAndLiveChatEngJoin.PreChatSurvey, msdyn_prechatenabled = liveWSAndLiveChatEngJoin.msdyn_prechatenabled, msdyn_callingoptions = liveWSAndLiveChatEngJoin.msdyn_callingoptions, msdyn_conversationmode = liveWSAndLiveChatEngJoin.msdyn_conversationmode, msdyn_enablechatreconnect = liveWSAndLiveChatEngJoin.msdyn_enablechatreconnect;
                        isPreChatEnabled = msdyn_prechatenabled === true || msdyn_prechatenabled == "true";
                        isChatReconnectEnabled = msdyn_enablechatreconnect === true || msdyn_enablechatreconnect == "true";
                        if ((msdyn_conversationmode === null || msdyn_conversationmode === void 0 ? void 0 : msdyn_conversationmode.toString()) === ConversationMode_1.default.PersistentChat.toString()) {
                            this.isPersistentChat = true;
                        }
                        if (isChatReconnectEnabled && !this.isPersistentChat) {
                            this.isChatReconnect = true;
                        }
                        if (isPreChatEnabled && preChatSurvey && preChatSurvey.trim().length > 0) {
                            this.preChatSurvey = preChatSurvey;
                        }
                        if (!this.authSettings) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.setAuthTokenProvider(this.chatSDKConfig.getAuthToken)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        if (this.preChatSurvey) {
                            /* istanbul ignore next */
                            this.debug && console.log('Prechat Survey!');
                        }
                        this.callingOption = msdyn_callingoptions;
                        this.liveChatConfig = liveChatConfig;
                        return [2 /*return*/, this.liveChatConfig];
                }
            });
        });
    };
    OmnichannelChatSDK.prototype.resolveIC3ClientUrl = function () {
        return urlResolvers_1.default.resolveIC3ClientUrl(this.chatSDKConfig);
    };
    OmnichannelChatSDK.prototype.resolveChatAdapterUrl = function (protocol) {
        return urlResolvers_1.default.resolveChatAdapterUrl(this.chatSDKConfig, this.liveChatVersion, protocol);
    };
    OmnichannelChatSDK.prototype.updateChatToken = function (newToken, newRegionGTMS) {
        return __awaiter(this, void 0, void 0, function () {
            var sessionInfo, error_19, exceptionDetails;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.scenarioMarker.startScenario(TelemetryEvent_1.default.UpdateChatToken, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        if (!(this.liveChatVersion === LiveChatVersion_1.default.V1)) return [3 /*break*/, 3];
                        sessionInfo = {
                            token: newToken,
                            regionGtms: newRegionGTMS,
                            visitor: true
                        };
                        return [4 /*yield*/, this.IC3Client.initialize(sessionInfo)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        this.scenarioMarker.completeScenario(TelemetryEvent_1.default.UpdateChatToken, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId
                        });
                        return [3 /*break*/, 5];
                    case 4:
                        error_19 = _a.sent();
                        exceptionDetails = {
                            response: "UpdateChatTokenFailed"
                        };
                        this.scenarioMarker.failScenario(TelemetryEvent_1.default.UpdateChatToken, {
                            RequestId: this.requestId,
                            ChatId: this.chatToken.chatId,
                            ExceptionDetails: JSON.stringify(exceptionDetails)
                        });
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    OmnichannelChatSDK.prototype.setAuthTokenProvider = function (provider) {
        return __awaiter(this, void 0, void 0, function () {
            var token, exceptionDetails, _a, exceptionDetails, exceptionDetails;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.scenarioMarker.startScenario(TelemetryEvent_1.default.GetAuthToken);
                        this.chatSDKConfig.getAuthToken = provider;
                        if (!this.chatSDKConfig.getAuthToken) return [3 /*break*/, 5];
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.chatSDKConfig.getAuthToken()];
                    case 2:
                        token = _b.sent();
                        if (token) {
                            this.authenticatedUserToken = token;
                            this.scenarioMarker.completeScenario(TelemetryEvent_1.default.GetAuthToken);
                        }
                        else {
                            exceptionDetails = {
                                response: "UndefinedAuthToken"
                            };
                            this.scenarioMarker.failScenario(TelemetryEvent_1.default.GetAuthToken, {
                                ExceptionDetails: JSON.stringify(exceptionDetails)
                            });
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        _a = _b.sent();
                        exceptionDetails = {
                            response: "GetAuthTokenFailed"
                        };
                        this.scenarioMarker.failScenario(TelemetryEvent_1.default.GetAuthToken, {
                            ExceptionDetails: JSON.stringify(exceptionDetails)
                        });
                        return [3 /*break*/, 4];
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        exceptionDetails = {
                            response: "GetAuthTokenNotFound"
                        };
                        this.scenarioMarker.failScenario(TelemetryEvent_1.default.GetAuthToken, {
                            ExceptionDetails: JSON.stringify(exceptionDetails)
                        });
                        _b.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    return OmnichannelChatSDK;
}());
exports.default = OmnichannelChatSDK;
//# sourceMappingURL=OmnichannelChatSDK.js.map