/**
 * Utilities to throw exception on failures in ChatSDK.
 *
 * It should throw ChatSDK standard errors.
 *
 * An exception details object would be logged in telemetry with ChatSDK standard errors as response with the exception object if any.
 *
 * The error thrown should have a short message in CamelCase to allow the exception to be caught easily programmatically.
 *
 * If a longer message needs to displayed to the user, a console.error() would be preferred.
 *
 * Stack trace should only be logged and not printed.
 */
import ChatSDKErrors from "../core/ChatSDKErrors";
import ScenarioMarker from "../telemetry/ScenarioMarker";
import TelemetryEvent from "../telemetry/TelemetryEvent";
export declare const throwChatSDKError: (chatSDKError: ChatSDKErrors, e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent, telemetryData?: {
    [key: string]: string;
}, message?: string) => void;
export declare const throwScriptLoadFailure: (e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent) => void;
export declare const throwUnsupportedPlatform: (scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent, message: string, telemetryData?: {
    [key: string]: string;
}) => void;
export declare const throwFeatureDisabled: (scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent, message: string) => void;
export declare const throwOmnichannelClientInitializationFailure: (e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent) => void;
export declare const throwChatConfigRetrievalFailure: (e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent) => void;
export declare const throwUnsupportedLiveChatVersionFailure: (e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent) => void;
export declare const throwMessagingClientCreationFailure: (e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent) => void;
export declare const throwUninitializedChatSDK: (scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent) => void;
export declare const throwChatTokenRetrievalFailure: (e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent, telemetryData: {
    [key: string]: string;
}) => void;
export declare const throwInvalidConversation: (scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent, telemetryData: {
    [key: string]: string;
}) => void;
export declare const throwClosedConversation: (scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent, telemetryData: {
    [key: string]: string;
}) => void;
export declare const throwAuthenticatedChatConversationRetrievalFailure: (e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent, telemetryData: {
    [key: string]: string;
}) => void;
export declare const throwPersistentChatConversationRetrievalFailure: (e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent, telemetryData: {
    [key: string]: string;
}) => void;
export declare const throwWidgetUseOutsideOperatingHour: (e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent, telemetryData: {
    [key: string]: string;
}) => void;
export declare const throwConversationInitializationFailure: (e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent, telemetryData: {
    [key: string]: string;
}) => void;
export declare const throwConversationClosureFailure: (e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent, telemetryData: {
    [key: string]: string;
}) => void;
export declare const throwMessagingClientInitializationFailure: (e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent, telemetryData: {
    [key: string]: string;
}) => void;
export declare const throwMessagingClientConversationJoinFailure: (e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent, telemetryData: {
    [key: string]: string;
}) => void;
export declare const throwChatAdapterInitializationFailure: (e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent) => void;
export declare const throwLiveChatTranscriptRetrievalFailure: (e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent, telemetryData: {
    [key: string]: string;
}) => void;
export declare const throwAuthContactIdNotFoundFailure: (e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent, telemetryData: {
    [key: string]: string;
}) => void;
declare const _default: {
    throwChatSDKError: (chatSDKError: ChatSDKErrors, e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent, telemetryData?: {
        [key: string]: string;
    }, message?: string) => void;
    throwScriptLoadFailure: (e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent) => void;
    throwUnsupportedPlatform: (scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent, message: string, telemetryData?: {
        [key: string]: string;
    }) => void;
    throwFeatureDisabled: (scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent, message: string) => void;
    throwOmnichannelClientInitializationFailure: (e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent) => void;
    throwUnsupportedLiveChatVersionFailure: (e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent) => void;
    throwChatConfigRetrievalFailure: (e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent) => void;
    throwMessagingClientCreationFailure: (e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent) => void;
    throwUninitializedChatSDK: (scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent) => void;
    throwChatTokenRetrievalFailure: (e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent, telemetryData: {
        [key: string]: string;
    }) => void;
    throwInvalidConversation: (scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent, telemetryData: {
        [key: string]: string;
    }) => void;
    throwClosedConversation: (scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent, telemetryData: {
        [key: string]: string;
    }) => void;
    throwAuthenticatedChatConversationRetrievalFailure: (e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent, telemetryData: {
        [key: string]: string;
    }) => void;
    throwPersistentChatConversationRetrievalFailure: (e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent, telemetryData: {
        [key: string]: string;
    }) => void;
    throwWidgetUseOutsideOperatingHour: (e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent, telemetryData: {
        [key: string]: string;
    }) => void;
    throwConversationInitializationFailure: (e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent, telemetryData: {
        [key: string]: string;
    }) => void;
    throwConversationClosureFailure: (e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent, telemetryData: {
        [key: string]: string;
    }) => void;
    throwMessagingClientInitializationFailure: (e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent, telemetryData: {
        [key: string]: string;
    }) => void;
    throwMessagingClientConversationJoinFailure: (e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent, telemetryData: {
        [key: string]: string;
    }) => void;
    throwChatAdapterInitializationFailure: (e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent) => void;
    throwLiveChatTranscriptRetrievalFailure: (e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent, telemetryData: {
        [key: string]: string;
    }) => void;
    throwAuthContactIdNotFoundFailure: (e: unknown, scenarioMarker: ScenarioMarker, telemetryEvent: TelemetryEvent, telemetryData: {
        [key: string]: string;
    }) => void;
};
export default _default;
