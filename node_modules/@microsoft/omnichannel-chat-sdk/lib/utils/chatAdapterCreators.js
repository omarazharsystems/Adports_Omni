"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createIC3Adapter = exports.createACSAdapter = exports.createDirectLine = void 0;
var ACSParticipantDisplayName_1 = require("../core/messaging/ACSParticipantDisplayName");
var TelemetryEvent_1 = require("../telemetry/TelemetryEvent");
var WebUtils_1 = require("./WebUtils");
var createChannelDataEgressMiddleware_1 = require("../external/ACSAdapter/createChannelDataEgressMiddleware");
var createFormatEgressTagsMiddleware_1 = require("../external/ACSAdapter/createFormatEgressTagsMiddleware");
var createFormatIngressTagsMiddleware_1 = require("../external/ACSAdapter/createFormatIngressTagsMiddleware");
var exceptionThrowers_1 = require("./exceptionThrowers");
var urlResolvers_1 = require("./urlResolvers");
var createDirectLine = function (optionalParams, chatSDKConfig, liveChatVersion, protocol, telemetry, scenarioMarker) { return __awaiter(void 0, void 0, void 0, function () {
    var options, directLineCDNUrl, error_1, DirectLine, adapter;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                options = optionalParams.DirectLine ? optionalParams.DirectLine.options : {};
                directLineCDNUrl = urlResolvers_1.default.resolveChatAdapterUrl(chatSDKConfig, liveChatVersion, protocol);
                telemetry === null || telemetry === void 0 ? void 0 : telemetry.setCDNPackages({
                    DirectLine: directLineCDNUrl
                });
                scenarioMarker.startScenario(TelemetryEvent_1.default.CreateDirectLine);
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, WebUtils_1.default.loadScript(directLineCDNUrl)];
            case 2:
                _a.sent();
                return [3 /*break*/, 4];
            case 3:
                error_1 = _a.sent();
                exceptionThrowers_1.default.throwScriptLoadFailure(error_1, scenarioMarker, TelemetryEvent_1.default.CreateDirectLine);
                return [3 /*break*/, 4];
            case 4:
                try {
                    DirectLine = window.DirectLine;
                    adapter = new DirectLine.DirectLine(__assign({}, options));
                    scenarioMarker.completeScenario(TelemetryEvent_1.default.CreateDirectLine);
                    return [2 /*return*/, adapter];
                }
                catch (error) {
                    exceptionThrowers_1.default.throwChatAdapterInitializationFailure(error, scenarioMarker, TelemetryEvent_1.default.CreateDirectLine);
                }
                return [2 /*return*/];
        }
    });
}); };
exports.createDirectLine = createDirectLine;
var createACSAdapter = function (optionalParams, chatSDKConfig, liveChatVersion, protocol, telemetry, scenarioMarker, omnichannelConfig, chatToken, fileManager, chatClient, logger) { return __awaiter(void 0, void 0, void 0, function () {
    var options, acsAdapterCDNUrl, defaultEgressMiddlewares, defaultIngressMiddlewares, egressMiddleware, ingressMiddleware, featuresOption, error_2, ChatAdapter, adapter;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                options = optionalParams.ACSAdapter ? optionalParams.ACSAdapter.options : {};
                acsAdapterCDNUrl = urlResolvers_1.default.resolveChatAdapterUrl(chatSDKConfig, liveChatVersion, protocol);
                telemetry === null || telemetry === void 0 ? void 0 : telemetry.setCDNPackages({
                    ACSAdapter: acsAdapterCDNUrl
                });
                defaultEgressMiddlewares = [createChannelDataEgressMiddleware_1.default({ widgetId: omnichannelConfig.widgetId }), createFormatEgressTagsMiddleware_1.default()];
                defaultIngressMiddlewares = [createFormatIngressTagsMiddleware_1.default()];
                egressMiddleware = (options === null || options === void 0 ? void 0 : options.egressMiddleware) ? __spreadArrays(options.egressMiddleware, defaultEgressMiddlewares) : __spreadArrays(defaultEgressMiddlewares);
                ingressMiddleware = (options === null || options === void 0 ? void 0 : options.ingressMiddleware) ? __spreadArrays(options.ingressMiddleware, defaultIngressMiddlewares) : __spreadArrays(defaultIngressMiddlewares);
                featuresOption = __assign(__assign({ enableAdaptiveCards: true, enableThreadMemberUpdateNotification: true, enableLeaveThreadOnWindowClosed: false, enableSenderDisplayNameInTypingNotification: true }, options), { // overrides
                    ingressMiddleware: ingressMiddleware,
                    egressMiddleware: egressMiddleware });
                scenarioMarker.startScenario(TelemetryEvent_1.default.CreateACSAdapter);
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, WebUtils_1.default.loadScript(acsAdapterCDNUrl)];
            case 2:
                _a.sent();
                return [3 /*break*/, 4];
            case 3:
                error_2 = _a.sent();
                exceptionThrowers_1.default.throwScriptLoadFailure(error_2, scenarioMarker, TelemetryEvent_1.default.CreateACSAdapter);
                return [3 /*break*/, 4];
            case 4:
                try {
                    ChatAdapter = window.ChatAdapter;
                    adapter = ChatAdapter.createACSAdapter(chatToken.token, chatToken.visitorId || 'teamsvisitor', chatToken.chatId, chatToken.acsEndpoint, fileManager, 30000, 
                    // eslint-disable-next-line @typescript-eslint/no-empty-function
                    { notifyErrorEvent: function () { } }, // Passing empty callback for now for backward compatibility
                    ACSParticipantDisplayName_1.default.Customer, chatClient, logger, featuresOption);
                    scenarioMarker.completeScenario(TelemetryEvent_1.default.CreateACSAdapter);
                    return [2 /*return*/, adapter];
                }
                catch (error) {
                    exceptionThrowers_1.default.throwChatAdapterInitializationFailure(error, scenarioMarker, TelemetryEvent_1.default.CreateACSAdapter);
                }
                return [2 /*return*/];
        }
    });
}); };
exports.createACSAdapter = createACSAdapter;
var createIC3Adapter = function (optionalParams, chatSDKConfig, liveChatVersion, protocol, telemetry, scenarioMarker, chatToken, ic3Client, logger) { return __awaiter(void 0, void 0, void 0, function () {
    var options, ic3AdapterCDNUrl, error_3, adapterConfig, adapter;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                options = optionalParams.IC3Adapter ? optionalParams.IC3Adapter.options : {};
                ic3AdapterCDNUrl = urlResolvers_1.default.resolveChatAdapterUrl(chatSDKConfig, liveChatVersion, protocol);
                telemetry === null || telemetry === void 0 ? void 0 : telemetry.setCDNPackages({
                    IC3Adapter: ic3AdapterCDNUrl
                });
                scenarioMarker.startScenario(TelemetryEvent_1.default.CreateIC3Adapter);
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, WebUtils_1.default.loadScript(ic3AdapterCDNUrl)];
            case 2:
                _a.sent();
                return [3 /*break*/, 4];
            case 3:
                error_3 = _a.sent();
                exceptionThrowers_1.default.throwScriptLoadFailure(error_3, scenarioMarker, TelemetryEvent_1.default.CreateACSAdapter);
                return [3 /*break*/, 4];
            case 4:
                adapterConfig = __assign({ chatToken: chatToken, userDisplayName: 'Customer', userId: chatToken.visitorId || 'teamsvisitor', sdkURL: urlResolvers_1.default.resolveIC3ClientUrl(chatSDKConfig), sdk: ic3Client }, options // overrides
                );
                try {
                    adapter = new window.Microsoft.BotFramework.WebChat.IC3Adapter(adapterConfig);
                    adapter.logger = logger;
                    scenarioMarker.completeScenario(TelemetryEvent_1.default.CreateIC3Adapter);
                    return [2 /*return*/, adapter];
                }
                catch (error) {
                    exceptionThrowers_1.default.throwChatAdapterInitializationFailure(error, scenarioMarker, TelemetryEvent_1.default.CreateIC3Adapter);
                }
                return [2 /*return*/];
        }
    });
}); };
exports.createIC3Adapter = createIC3Adapter;
exports.default = {
    createDirectLine: createDirectLine,
    createACSAdapter: createACSAdapter,
    createIC3Adapter: createIC3Adapter
};
//# sourceMappingURL=chatAdapterCreators.js.map