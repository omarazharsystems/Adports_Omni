import ACSClientConfig from "./ACSClientConfig";
import { ACSClientLogger } from "../../utils/loggers";
import ACSSessionInfo from "./ACSSessionInfo";
import { ChatClient, ChatParticipant } from "@azure/communication-chat";
import { AzureCommunicationTokenCredential } from "@azure/communication-common";
import ChatSDKMessage from "./ChatSDKMessage";
import OmnichannelMessage from "./OmnichannelMessage";
export interface ParticipantMapping {
    [key: string]: ChatParticipant;
}
export declare class ACSConversation {
    private logger;
    private tokenCredential;
    private chatClient;
    private chatThreadClient?;
    private sessionInfo?;
    private participantsMapping?;
    private eventListeners;
    constructor(tokenCredential: AzureCommunicationTokenCredential, chatClient: ChatClient, logger?: ACSClientLogger | null);
    initialize(sessionInfo: ACSSessionInfo): Promise<void>;
    getMessages(): Promise<OmnichannelMessage[]>;
    getParticipants(): Promise<ChatParticipant[]>;
    registerOnNewMessage(onNewMessageCallback: CallableFunction): Promise<void>;
    registerOnThreadUpdate(onThreadUpdateCallback: CallableFunction): Promise<void>;
    onTypingEvent(onTypingEventCallback: CallableFunction): Promise<void>;
    sendMessage(message: ChatSDKMessage): Promise<void>;
    sendTyping(): Promise<void>;
    sendFileMessage(): Promise<void>;
    sendFileData(): Promise<void>;
    uploadFile(): Promise<void>;
    downloadFile(): Promise<void>;
    disconnect(): Promise<void>;
    private createParticipantsMapping;
    private trackListener;
}
declare class ACSClient {
    private logger;
    private tokenCredential;
    private chatClient;
    constructor(logger?: ACSClientLogger | null);
    initialize(acsClientConfig: ACSClientConfig): Promise<void>;
    joinConversation(sessionInfo: ACSSessionInfo): Promise<ACSConversation>;
    getChatClient(): ChatClient | null;
}
export default ACSClient;
