import FileSharingProtocolType from "../model/FileSharingProtocolType";
import FileStatus from "../model/FileStatus";
import HostType from "../interfaces/HostType";
import IIC3Info from "../interfaces/IIC3Info";
import IC3Initializer from "./IC3Initializer";
import IFileInfo from "../interfaces/IFileInfo";
import IFileMetadata from "../model/IFileMetadata";
import IIC3Adapter from "../interfaces/IIC3Adapter";
import IIC3Message from "../interfaces/IIC3Message";
import IIC3Thread from "../interfaces/IIC3Thread";
import IInitializationInfo from "../model/IInitializationInfo";
import IInternalConversationData from "../interfaces/IInternalConversationData";
import IMessagePayload from "../model/IMessagePayload";
import IMessageProperties from "../model/IMessageProperties";
import IPerson from "../model/IPerson";
import IRawBotMessage from "../interfaces/IRawBotMessage";
import IRawConversation from "../model/IRawConversation";
import IRawLogger from "../logging/IRawLogger";
import IRawMessage from "../model/IRawMessage";
import IRawSDKSetupParameters from "../interfaces/IRawSDKSetupParameters";
import IRawThread from "../interfaces/IRawThread";
import ProtocolType from "../interfaces/ProtocoleType";
import ResourceType from "../model/ResourceType";
import TypingStatus from "../model/TypingStatus";
export default abstract class IC3ClientAdapter implements IIC3Adapter {
    id: string;
    hostType: HostType;
    protocolType: ProtocolType;
    logger: IRawLogger | undefined;
    heartBeatTimer?: number;
    protected conversations: IRawConversation[];
    protected ic3Info?: IIC3Info;
    protected EndpointUrl: string | undefined;
    protected EndpointId: string | undefined;
    protected newConversationMessageListeners: {
        [conversationId: string]: Array<(message: IRawMessage) => void>;
    };
    protected internalConversationsData: {
        [conversationId: string]: IInternalConversationData;
    };
    protected threadUpdateListeners: {
        [conversationId: string]: Array<(message: IRawThread) => void>;
    };
    protected ic3Initializer: IC3Initializer | undefined;
    protected liveStateFailureCount: number;
    protected debug: boolean;
    constructor(id: string);
    startPolling(): void;
    stopPolling(): void;
    setup(setupParams: IRawSDKSetupParameters): Promise<void>;
    initialize(sessionInfo: IInitializationInfo): Promise<void>;
    update(_sessionInfo: IInitializationInfo): Promise<void>;
    dispose(): Promise<void>;
    joinConversation(conversationId: string, sendHeartBeat?: boolean): Promise<IRawConversation>;
    /**
     * Sends live state to conversation.
     *
     * @param conversationId Conversation id
     */
    sendLiveState(conversationId: string): Promise<void>;
    /**
     * Sends live state regularly to prevent conversation from disconnecting after 2 minutes.
     *
     * @param conversationId Conversation id
     */
    sendHeartBeat(conversationId: string): void;
    stopHeartBeat(): void;
    sendMessage(conversation: IRawConversation, message: IRawMessage): Promise<void>;
    getMessages(conversation: IRawConversation): Promise<IRawMessage[]>;
    registerOnNewMessage(conversation: IRawConversation, callback: (message: IRawMessage) => void): Promise<void>;
    registerOnThreadUpdate(conversation: IRawConversation, callback: (message: IRawThread) => void): Promise<void>;
    disconnectFromConversation(conversation: IRawConversation): Promise<void>;
    sendFileData(conversation: IRawConversation, fileInfo: IFileInfo, fileSharingProtocolType?: FileSharingProtocolType): Promise<any>;
    sendFileMessage(conversation: IRawConversation, fileMetadata: IFileMetadata, message: IRawMessage): Promise<void>;
    downloadFileData(_conversation: IRawConversation, fileMetaData: IFileMetadata): Promise<any>;
    getFileStatus(_conversation: IRawConversation, fileMetadata: IFileMetadata): Promise<FileStatus>;
    indicateTypingStatus(conversation: IRawConversation, typingStatus: TypingStatus, optionalProperties?: IMessageProperties): Promise<void>;
    sendMessageToBot(conversation: IRawConversation, botId: string, botMessage: IRawBotMessage): Promise<void>;
    getMembers(conversation: IRawConversation): Promise<IPerson[]>;
    /**
     * Sends message to IC3.
     *
     * @param conversationId IC3 conversation thread id
     * @param messageData IC3 message payload
     */
    protected sendMessageToIC3(conversationId: string, messageData: IMessagePayload): Promise<any>;
    protected onNewMessage(conversation: IRawConversation, message: IIC3Message, resourceType?: ResourceType): void;
    protected onThreadUpdate(conversation: IRawConversation, message: IIC3Thread): void;
    private getAllMessagesFromBackwardLinkUrl;
    private getMessagesFromBackwardLinkUrl;
    private setupSession;
    setDebug(flag?: boolean): void;
}
