"use strict";
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unused-vars */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var HostType_1 = require("../interfaces/HostType");
var uuid_1 = require("../utils/uuid");
// TODO: Use TimeOutEventDispatcher in listeners
var ClientBridge = /** @class */ (function () {
    function ClientBridge(protocolType) {
        this.hostType = HostType_1.default.Page;
        this.id = (0, uuid_1.uuidv4)();
        this.protocolType = protocolType;
        this.newConversationMessageListeners = {};
        this.threadUpdateListeners = {};
        this.debug = false;
    }
    ClientBridge.prototype.setDebug = function (flag) {
        this.debug = flag;
    };
    ClientBridge.prototype.joinConversation = function (conversationId, sendHeartBeat) {
        var _this = this;
        return this.onJoinConversation(conversationId, sendHeartBeat).then(function (conversation) {
            var clientConversation = {
                disconnect: _this.disconnectFromConversation.bind(_this, conversation),
                downloadFile: _this.downloadFile.bind(_this, conversation),
                getFileStatus: _this.getFileStatus.bind(_this, conversation),
                getMembers: _this.getMembers.bind(_this, conversation),
                getMessages: _this.getMessages.bind(_this, conversation),
                id: conversation.id,
                indicateTypingStatus: _this.indicateTypingStatus.bind(_this, conversation),
                registerOnNewMessage: _this.registerOnNewMessage.bind(_this, conversation),
                registerOnThreadUpdate: _this.registerOnThreadUpdate.bind(_this, conversation),
                sendFileMessage: _this.sendFileMessage.bind(_this, conversation),
                sendMessage: _this.sendMessage.bind(_this, conversation),
                sendMessageToBot: _this.sendMessageToBot.bind(_this, conversation),
                uploadFile: _this.uploadFile.bind(_this, conversation),
                sendFileData: _this.sendFileData.bind(_this, conversation)
            };
            return clientConversation;
        });
    };
    ClientBridge.prototype.registerOnNewMessage = function (conversation, callback) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, Promise.resolve()];
            });
        });
    };
    ClientBridge.prototype.registerOnThreadUpdate = function (conversation, callback) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, Promise.resolve()];
            });
        });
    };
    // Web based
    ClientBridge.prototype.uploadFile = function (conversation, fileToSend, fileSharingProtocolType) {
        return Promise.resolve();
    };
    ClientBridge.prototype.downloadFile = function (conversation, fileMetadata) {
        this.debug && console.debug("IC3Core/ClientBridge/downloadFile");
        return this.downloadFileData(conversation, fileMetadata).then(function (dataAsArrayBuffer) {
            var dataAsBlob = dataAsArrayBuffer;
            if (dataAsBlob && dataAsBlob.size) {
                return dataAsBlob; //case when the parameter is blob. Not ArrayBuffer
            }
            var blob = new Blob([new Uint8Array(dataAsArrayBuffer)]);
            return (!blob || blob.size === 0 && blob.type === "")
                ? dataAsArrayBuffer
                : blob;
        });
    };
    return ClientBridge;
}());
exports.default = ClientBridge;
//# sourceMappingURL=ClientBridge.js.map