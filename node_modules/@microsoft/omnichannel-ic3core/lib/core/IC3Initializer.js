"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var Constants_1 = require("../common/Constants");
var HttpHeaders_1 = require("../http/HttpHeaders");
var IC3PollingV1InterestedResources_1 = require("../model/IC3PollingV1InterestedResources");
var IC3PollingV2EndpointFeatures_1 = require("../model/IC3PollingV2EndpointFeatures");
var RequestHelper_1 = require("../http/RequestHelper");
var ServiceEndpointHelper_1 = require("../common/ServiceEndpointHelper");
var Utilities_1 = require("../common/Utilities");
var Poller_1 = require("../polling/Poller");
var LogLevel_1 = require("../logging/LogLevel");
var IC3TelemetryEvent_1 = require("../logging/IC3TelemetryEvent");
var HttpCode_1 = require("../http/HttpCode");
var Util_1 = require("../common/Util");
var HttpClient_1 = require("../http/HttpClient");
var HttpRequestType_1 = require("../http/HttpRequestType");
var IC3Initializer = /** @class */ (function () {
    function IC3Initializer() {
        this.debug = false;
        this.current404RetryCount = 0;
        this.currentOtherRetryCount = 0;
        this.skipUnsubscribe = false;
        this.telemetryMessage = "";
        this.errorCode = '';
        this.pollDataHandler = function (data) { }; // eslint-disable-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any
        this.resetRetryCount();
    }
    IC3Initializer.prototype.setup = function (logger) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.logger = logger;
                return [2 /*return*/];
            });
        });
    };
    IC3Initializer.prototype.getPoller = function () {
        var pollDataHandler = this.pollDataHandler.bind(this);
        if (!this.poller) {
            this.poller = new Poller_1.default(this.ic3Info, pollDataHandler, this.redirectErrorHandler.bind(this), this.onRequestCreationFailure.bind(this) // eslint-disable-line @typescript-eslint/no-explicit-any
            );
        }
        return this.poller;
    };
    IC3Initializer.prototype.setIc3Info = function (ic3Info) {
        return __awaiter(this, void 0, void 0, function () {
            var localIc3Info;
            return __generator(this, function (_a) {
                localIc3Info = {
                    RegionGtms: JSON.parse(JSON.stringify(ic3Info.RegionGtms)),
                    SkypeToken: ic3Info.SkypeToken,
                    visitor: ic3Info.visitor
                };
                this.ic3Info = localIc3Info;
                return [2 /*return*/];
            });
        });
    };
    IC3Initializer.prototype.initializeIC3 = function (pollDataHandler) {
        var _this = this;
        var _a;
        if (pollDataHandler) {
            this.pollDataHandler = pollDataHandler;
        }
        (_a = this.logger) === null || _a === void 0 ? void 0 : _a.log(LogLevel_1.default.INFO, IC3TelemetryEvent_1.default.IC3InitializationBegins, {
            Description: "Endpoint to poll is " + JSON.stringify(this.ic3Info.RegionGtms.chatService),
            EndpointUrl: this.ic3Info.RegionGtms.chatService,
            EndpointId: this.ic3Info.endpointId
        });
        var initializeIC3Promise = this.createEndpoint()
            .then(function () { return _this.createSubscription(); })
            .then(function () { return _this.setEndpointProperty(); })
            .then(function () { return _this.startPolling(pollDataHandler); })
            .then(function () { return _this.resetRetryCount(); })
            .then(function () { return Promise.resolve(_this.ic3Info); })
            .catch(function (e) {
            return _this.redirectErrorHandler(e);
        });
        return initializeIC3Promise;
    };
    IC3Initializer.prototype.startPolling = function (handlePollData) {
        var _a;
        var handler = !handlePollData && this.pollDataHandler ? this.pollDataHandler.bind(this) : this.pollDataHandler;
        if (!this.poller) {
            this.poller = new Poller_1.default(this.ic3Info, handler, this.redirectErrorHandler.bind(this), this.onRequestCreationFailure.bind(this) // eslint-disable-line @typescript-eslint/no-explicit-any
            );
        }
        this.poller.ic3Info = this.ic3Info;
        (_a = this.logger) === null || _a === void 0 ? void 0 : _a.log(LogLevel_1.default.INFO, IC3TelemetryEvent_1.default.IC3StartedPolling, {
            EndpointUrl: this.ic3Info.RegionGtms.chatService,
            EndpointId: this.ic3Info.endpointId
        });
        this.poller.start();
    };
    IC3Initializer.prototype.stopPolling = function (oldInitializer) {
        var _a;
        var initializer = oldInitializer ? Constants_1.default.oldInitializer : Constants_1.default.newInitializer;
        (_a = this.logger) === null || _a === void 0 ? void 0 : _a.log(LogLevel_1.default.INFO, IC3TelemetryEvent_1.default.IC3StoppedPolling, {
            Description: initializer + " stopped polling.",
            EndpointUrl: this.ic3Info.RegionGtms.chatService,
            EndpointId: this.ic3Info.endpointId
        });
        if (this.poller) {
            this.poller.stop();
        }
    };
    IC3Initializer.prototype.reset = function (oldInitializer) {
        this.stopPolling(oldInitializer);
        return this.unsubscribeFromEndpoint();
    };
    IC3Initializer.prototype.resetRetryCount = function () {
        this.current404RetryCount = 0;
        this.currentOtherRetryCount = 0;
    };
    IC3Initializer.prototype.onEndpointCreationFailure = function (jqXHR) {
        this.onRequestCreationFailure(jqXHR, Constants_1.default.endpointRequestLog);
    };
    IC3Initializer.prototype.onEndpointCreationSuccess = function (jqXHR) {
        var _a, _b;
        var registrationTokenHeader = Utilities_1.default.getResponseHeader(jqXHR, HttpHeaders_1.default.SetRegistrationTokenHeader);
        if (!Utilities_1.default.isNullOrUndefined(registrationTokenHeader)) {
            this.ic3Info.RegistrationToken = Utilities_1.default.getRegistrationTokenValue(registrationTokenHeader);
        }
        var locationHeader = Utilities_1.default.getResponseHeader(jqXHR, HttpHeaders_1.default.LocationHeader);
        if (!Utilities_1.default.isNullOrUndefined(locationHeader)) {
            // location header value: <CHAT_SERVICE_URL>/v1/users/ME/endpoints/%7B<ENDPOINT_ID>%7D
            var epidMatch = locationHeader.match(/endpoints\/(%7B[\da-z\-]+%7D)/); // eslint-disable-line no-useless-escape
            this.ic3Info.endpointId = epidMatch && epidMatch[1];
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.log(LogLevel_1.default.INFO, IC3TelemetryEvent_1.default.IC3EndpointCreationSuccess, {
                Description: "IC3 endpoint Id is " + this.ic3Info.endpointId,
                EndpointUrl: this.ic3Info.RegionGtms.chatService,
                EndpointId: this.ic3Info.endpointId
            });
            if (jqXHR.status === HttpCode_1.default.Created && Util_1.default.parseChatServiceHostUrl(locationHeader) !== this.ic3Info.RegionGtms.chatService) {
                this.ic3Info.RegionGtms.chatService = Util_1.default.parseChatServiceHostUrl(locationHeader);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log(LogLevel_1.default.WARN, IC3TelemetryEvent_1.default.OnRequestCreationSuccessRedirect, {
                    Description: "Endpoint changed",
                    EndpointUrl: this.ic3Info.RegionGtms.chatService,
                    EndpointId: this.ic3Info.endpointId
                });
            }
        }
    };
    /**
     * Creates IC3 endpoint
     *
     * 1. Gets SkypeToken, RegionGtms
     * 2. Sets polling features
     * 3. API call to create endpoint
     * 4. Saves RegistrationToken
     * 5. Saves endpoint ID
     */
    IC3Initializer.prototype.createEndpointRequest = function () {
        var url = ServiceEndpointHelper_1.default.getV1EndpointUrl(this.ic3Info.RegionGtms);
        var headers = RequestHelper_1.default.getDefaultIC3Headers(); // eslint-disable-line @typescript-eslint/no-explicit-any
        headers[HttpHeaders_1.default.AuthenticationHeader] = HttpHeaders_1.default.SkypeTokenHeaderValue + this.ic3Info.SkypeToken;
        headers[HttpHeaders_1.default.ContentTypeHeader] = Constants_1.default.ContentTypeJson;
        var features = [
            IC3PollingV2EndpointFeatures_1.default.Agent,
            IC3PollingV2EndpointFeatures_1.default.InviteFree,
            IC3PollingV2EndpointFeatures_1.default.MessageProperties
        ];
        var payload = {
            endpointFeatures: features.join(',')
        };
        var requestParameters = {
            callbackOnFailure: this.onEndpointCreationFailure.bind(this),
            callbackOnSuccess: this.onEndpointCreationSuccess.bind(this),
            data: JSON.stringify(payload),
            enableExponentialBackoff: true,
            headers: headers,
            redirect404RetryCount: Constants_1.default.retryCount,
            retryCount: Constants_1.default.retryCount,
            shouldRedirectOn404: true,
            shouldResetOnFailure: true,
            shouldRetryOnFailure: Util_1.default.shouldRetryOnFailure,
            timeBetweenRetry: Constants_1.default.timeBetweenOperationRetry,
            type: HttpRequestType_1.default.POST,
            url: url
        };
        return HttpClient_1.HttpClient.MakeRequest(requestParameters);
    };
    IC3Initializer.prototype.createEndpoint = function () {
        var _this = this;
        return this.createEndpointRequest().then(function (response) {
            if (response.subscriptions && response.subscriptions.length > 0) {
                _this.ic3Info.subscriptionId = response.subscriptions[0].id;
            }
            return response;
        });
    };
    IC3Initializer.prototype.onSubscriptionCreationFailure = function (jqXHR) {
        this.onRequestCreationFailure(jqXHR, Constants_1.default.subscriptionRequestLog);
    };
    IC3Initializer.prototype.onSubscriptionCreationSuccess = function (jqXHR) {
        var _a;
        var locationHeader = Utilities_1.default.getResponseHeader(jqXHR, HttpHeaders_1.default.LocationHeader) || "";
        if (jqXHR.status === HttpCode_1.default.Created &&
            !Utilities_1.default.isNullOrUndefined(locationHeader) && Util_1.default.parseChatServiceHostUrl(locationHeader) !== this.ic3Info.RegionGtms.chatService) {
            this.ic3Info.RegionGtms.chatService = Util_1.default.parseChatServiceHostUrl(locationHeader);
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.log(LogLevel_1.default.WARN, IC3TelemetryEvent_1.default.OnRequestCreationSuccessRedirect, {
                Description: "Endpoint changed",
                EndpointUrl: this.ic3Info.RegionGtms.chatService,
                EndpointId: this.ic3Info.endpointId
            });
        }
        var subscriptionIdMatch = locationHeader.match(/\/(\d+)$/);
        if (subscriptionIdMatch) {
            this.ic3Info.subscriptionId = subscriptionIdMatch[1];
        }
    };
    IC3Initializer.prototype.createSubscriptionRequest = function () {
        var url = ServiceEndpointHelper_1.default.getV1SubscriptionUrl(this.ic3Info.RegionGtms);
        var headers = RequestHelper_1.default.getDefaultIC3Headers(); // eslint-disable-line @typescript-eslint/no-explicit-any
        headers[HttpHeaders_1.default.RegistrationTokenHeader] = this.ic3Info.RegistrationToken;
        headers[HttpHeaders_1.default.ContentTypeHeader] = Constants_1.default.ContentTypeJson;
        var payload = {
            channelType: Constants_1.default.HttpLongPoll,
            interestedResources: [
                IC3PollingV1InterestedResources_1.default.ConversationMessages,
                IC3PollingV1InterestedResources_1.default.ConversationProperties,
                IC3PollingV1InterestedResources_1.default.Threads,
                IC3PollingV1InterestedResources_1.default.Contacts
            ]
        };
        var requestParameters = {
            callbackOnFailure: this.onSubscriptionCreationFailure.bind(this),
            callbackOnSuccess: this.onSubscriptionCreationSuccess.bind(this),
            data: JSON.stringify(payload),
            enableExponentialBackoff: true,
            headers: headers,
            redirect404RetryCount: Constants_1.default.retryCount,
            retryCount: Constants_1.default.retryCount,
            shouldRedirectOn404: true,
            shouldResetOnFailure: true,
            shouldRetryOnFailure: Util_1.default.shouldRetryOnFailure,
            timeBetweenRetry: Constants_1.default.timeBetweenOperationRetry,
            type: HttpRequestType_1.default.POST,
            url: url
        };
        return HttpClient_1.HttpClient.MakeRequest(requestParameters);
    };
    IC3Initializer.prototype.createSubscription = function () {
        return this.createSubscriptionRequest();
    };
    IC3Initializer.prototype.onSetEndpointPropertyCreationFailure = function (jqXHR) {
        this.onRequestCreationFailure(jqXHR, Constants_1.default.setPropertiesRequestLog);
    };
    IC3Initializer.prototype.setEndpointProperty = function () {
        if (this.ic3Info.visitor) {
            return Promise.resolve();
        }
        var url = ServiceEndpointHelper_1.default.getV1SetPropertiesUrl(this.ic3Info.RegionGtms);
        var payload = {}; // eslint-disable-line @typescript-eslint/no-explicit-any
        var property = HttpHeaders_1.default.SetEndpointProperty;
        payload[property] = true; // eslint-disable-line security/detect-object-injection
        var headers = RequestHelper_1.default.getDefaultIC3Headers(); // eslint-disable-line @typescript-eslint/no-explicit-any
        headers[HttpHeaders_1.default.AuthenticationHeader] = HttpHeaders_1.default.SkypeTokenHeaderValue + this.ic3Info.SkypeToken;
        headers[HttpHeaders_1.default.RegistrationTokenHeader] = this.ic3Info.RegistrationToken;
        headers[HttpHeaders_1.default.ContentTypeHeader] = Constants_1.default.ContentTypeJson;
        var requestParameters = {
            callbackOnFailure: this.onSetEndpointPropertyCreationFailure.bind(this),
            data: JSON.stringify(payload),
            enableExponentialBackoff: true,
            headers: headers,
            redirect404RetryCount: Constants_1.default.retryCount,
            retryCount: Constants_1.default.retryCount,
            shouldRedirectOn404: true,
            shouldResetOnFailure: true,
            shouldRetryOnFailure: Util_1.default.shouldRetryOnFailure,
            timeBetweenRetry: Constants_1.default.timeBetweenOperationRetry,
            type: HttpRequestType_1.default.PUT,
            url: url
        };
        return HttpClient_1.HttpClient.MakeRequest(requestParameters);
    };
    IC3Initializer.prototype.onUnsubscribeCreationFailure = function (jqXHR) {
        this.onRequestCreationFailure(jqXHR, Constants_1.default.unsubscribeRequestLog);
    };
    IC3Initializer.prototype.unsubscribeFromEndpoint = function () {
        if (this.ic3Info.visitor || Utilities_1.default.isNullOrUndefined(this.ic3Info.endpointId) || this.skipUnsubscribe) {
            this.skipUnsubscribe = true;
            return Promise.resolve();
        }
        var url = ServiceEndpointHelper_1.default.getV1DeleteEndpointUrl(this.ic3Info.RegionGtms, this.ic3Info.endpointId);
        var headers = RequestHelper_1.default.getDefaultIC3Headers(); // eslint-disable-line @typescript-eslint/no-explicit-any
        headers[HttpHeaders_1.default.AuthenticationHeader] = HttpHeaders_1.default.SkypeTokenHeaderValue + this.ic3Info.SkypeToken;
        headers[HttpHeaders_1.default.RegistrationTokenHeader] = this.ic3Info.RegistrationToken;
        headers[HttpHeaders_1.default.ContentTypeHeader] = Constants_1.default.ContentTypeJson;
        var requestParameters = {
            callbackOnFailure: this.onUnsubscribeCreationFailure.bind(this),
            enableExponentialBackoff: true,
            headers: headers,
            redirect404RetryCount: Constants_1.default.retryCount,
            retryCount: Constants_1.default.retryCount,
            shouldRedirectOn404: true,
            shouldResetOnFailure: true,
            shouldRetryOnFailure: Util_1.default.shouldRetryOnFailure,
            timeBetweenRetry: Constants_1.default.timeBetweenOperationRetry,
            type: HttpRequestType_1.default.DELETE,
            url: url
        };
        return HttpClient_1.HttpClient.MakeRequest(requestParameters);
    };
    IC3Initializer.prototype.onRequestCreationFailure = function (jqXHR, request) {
        var _a, _b;
        var locationHeader = Utilities_1.default.getResponseHeader(jqXHR, HttpHeaders_1.default.LocationHeader);
        this.telemetryMessage = request + " failed. Error Code: " + jqXHR.status + ".";
        this.errorCode = jqXHR.status.toString();
        this.skipUnsubscribe = true; // never unsubscribe on error since endpoint is already invalid
        if (jqXHR.status === HttpCode_1.default.Redirect && !Utilities_1.default.isNullOrEmptyString(locationHeader)) {
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.log(LogLevel_1.default.WARN, IC3TelemetryEvent_1.default.RedirectOnRequestCreationFailure, {
                Description: this.telemetryMessage + " Trying to redirect.",
                ErrorCode: jqXHR.status.toString(),
                EndpointUrl: this.ic3Info.RegionGtms.chatService,
                EndpointId: this.ic3Info.endpointId
            });
            this.onRequestCreationFailureRedirect(jqXHR);
        }
        else {
            // Don't unsubscribe if the endpoint already doesn't exist (729)
            (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log(LogLevel_1.default.WARN, IC3TelemetryEvent_1.default.ResetOnRequestCreationFailure, {
                Description: this.telemetryMessage + " Trying to reset.",
                ErrorCode: jqXHR.status.toString(),
                EndpointUrl: this.ic3Info.RegionGtms.chatService,
                EndpointId: this.ic3Info.endpointId
            });
            this.current404RetryCount = 0;
            this.currentOtherRetryCount++;
        }
    };
    IC3Initializer.prototype.redirectErrorHandler = function (e) {
        var _this = this;
        var _a;
        if ((e.message === Constants_1.default.Reset_Flag) && this.current404RetryCount <= Constants_1.default.retry404Count
            && this.currentOtherRetryCount <= Constants_1.default.retryCount) {
            return this.reset().then(function () {
                return _this.initializeIC3();
            });
        }
        else {
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.log(LogLevel_1.default.ERROR, IC3TelemetryEvent_1.default.MaxRetryCountReachedForRedirect, {
                Description: "Fatal Error. Initialization failed. Maximum retry count reached. Exiting. " + this.telemetryMessage,
                ErrorCode: this.errorCode,
                ExceptionDetails: e,
                EndpointUrl: this.ic3Info.RegionGtms.chatService,
                EndpointId: this.ic3Info.endpointId
            });
            return this.reset().then(function () {
                return Promise.reject(e.message);
            });
        }
    };
    IC3Initializer.prototype.onRequestCreationFailureRedirect = function (jqXHR) {
        var _a;
        this.current404RetryCount++;
        this.currentOtherRetryCount = 0;
        this.ic3Info.RegionGtms.chatService = Util_1.default.parseChatServiceHostUrl(Utilities_1.default.getResponseHeader(jqXHR, HttpHeaders_1.default.LocationHeader));
        (_a = this.logger) === null || _a === void 0 ? void 0 : _a.log(LogLevel_1.default.WARN, IC3TelemetryEvent_1.default.OnRequestCreationFailureRedirect, {
            Description: "Endpoint changed.",
            EndpointUrl: this.ic3Info.RegionGtms.chatService,
            EndpointId: this.ic3Info.endpointId
        });
    };
    return IC3Initializer;
}());
exports.default = IC3Initializer;
//# sourceMappingURL=IC3Initializer.js.map