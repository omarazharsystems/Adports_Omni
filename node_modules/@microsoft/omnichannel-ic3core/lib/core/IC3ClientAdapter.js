"use strict";
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-non-null-assertion */
/* eslint-disable @typescript-eslint/no-explicit-any */
Object.defineProperty(exports, "__esModule", { value: true });
var AmsHelper_1 = require("../ams/AmsHelper");
var Constants_1 = require("../common/Constants");
var FileSharingProtocolType_1 = require("../model/FileSharingProtocolType");
var FileStatus_1 = require("../model/FileStatus");
var HostType_1 = require("../interfaces/HostType");
var HttpClient_1 = require("../http/HttpClient");
var HttpDataType_1 = require("../http/HttpDataType");
var HttpHeaders_1 = require("../http/HttpHeaders");
var HttpRequestType_1 = require("../http/HttpRequestType");
var IC3TelemetryEvent_1 = require("../logging/IC3TelemetryEvent");
var LogLevel_1 = require("../logging/LogLevel");
var MessageContentType_1 = require("../model/MessageContentType");
var MessagePayloadType_1 = require("../model/MessagePayloadType");
var ProtocoleType_1 = require("../interfaces/ProtocoleType");
var RequestHelper_1 = require("../http/RequestHelper");
var ServiceEndpointHelper_1 = require("../common/ServiceEndpointHelper");
var Util_1 = require("../common/Util");
var Utilities_1 = require("../common/Utilities");
var IC3ClientAdapter = /** @class */ (function () {
    function IC3ClientAdapter(id) {
        this.hostType = HostType_1.default.Page;
        this.protocolType = ProtocoleType_1.default.IC3V1SDK;
        this.id = id;
        this.conversations = [];
        this.newConversationMessageListeners = {};
        this.threadUpdateListeners = {};
        this.internalConversationsData = {};
        this.liveStateFailureCount = 0;
        this.debug = false;
    }
    IC3ClientAdapter.prototype.startPolling = function () {
        this.ic3Initializer && this.ic3Initializer.startPolling();
    };
    IC3ClientAdapter.prototype.stopPolling = function () {
        this.ic3Initializer && this.ic3Initializer.stopPolling();
    };
    IC3ClientAdapter.prototype.setup = function (setupParams) {
        this.logger = setupParams.logger;
        HttpClient_1.HttpClient.setLogger(this.logger);
        return Promise.resolve();
    };
    IC3ClientAdapter.prototype.initialize = function (sessionInfo) {
        this.setupSession(sessionInfo);
        return Promise.resolve();
    };
    IC3ClientAdapter.prototype.update = function (_sessionInfo) {
        return Promise.resolve();
    };
    IC3ClientAdapter.prototype.dispose = function () {
        // stop polling
        this.conversations = [];
        this.newConversationMessageListeners = {};
        this.threadUpdateListeners = {};
        this.internalConversationsData = {};
        return Promise.resolve();
    };
    IC3ClientAdapter.prototype.joinConversation = function (conversationId, sendHeartBeat) {
        var _a;
        if (sendHeartBeat === void 0) { sendHeartBeat = true; }
        var timer = Utilities_1.default.timer();
        var conversation = {
            id: conversationId
        };
        var conversationIndex = this.conversations.findIndex(function (conv) { return conv.id === conversation.id; });
        if (conversationIndex === -1) {
            this.conversations.push(conversation);
            this.newConversationMessageListeners[conversation.id] = this.newConversationMessageListeners[conversation.id] || [];
            this.threadUpdateListeners[conversation.id] = this.threadUpdateListeners[conversation.id] || [];
        }
        (_a = this.logger) === null || _a === void 0 ? void 0 : _a.log(LogLevel_1.default.INFO, IC3TelemetryEvent_1.default.JoinConversation, {
            ElapsedTimeInMilliseconds: timer.milliSecondsElapsed,
            EndpointUrl: this.EndpointUrl,
            EndpointId: this.EndpointId
        });
        if (!Utilities_1.default.isNullOrUndefined(sendHeartBeat) && sendHeartBeat === true) {
            this.sendHeartBeat(conversation.id);
        }
        return Promise.resolve(conversation);
    };
    /**
     * Sends live state to conversation.
     *
     * @param conversationId Conversation id
     */
    IC3ClientAdapter.prototype.sendLiveState = function (conversationId) {
        var _this = this;
        this.debug && console.debug("IC3Core/sendLiveState");
        var messageType = MessagePayloadType_1.default.LiveState;
        var messageContentType = MessageContentType_1.default.Text;
        var messagePayload = Util_1.default.createBaseMessageData(messageType, messageContentType, "");
        return this.sendMessageToIC3(conversationId, messagePayload).then(function () {
            _this.liveStateFailureCount = 0;
            return Promise.resolve();
        }).catch(function (e) {
            var _a;
            _this.liveStateFailureCount++;
            if (_this.liveStateFailureCount >= Constants_1.default.liveStateRetryCount) {
                (_a = _this.logger) === null || _a === void 0 ? void 0 : _a.log(LogLevel_1.default.ERROR, IC3TelemetryEvent_1.default.SendLiveStateFailure, {
                    ExceptionDetails: e,
                    EndpointUrl: _this.EndpointUrl,
                    EndpointId: _this.EndpointId
                });
                _this.stopHeartBeat();
                _this.liveStateFailureCount = 0;
            }
        });
    };
    /**
     * Sends live state regularly to prevent conversation from disconnecting after 2 minutes.
     *
     * @param conversationId Conversation id
     */
    IC3ClientAdapter.prototype.sendHeartBeat = function (conversationId) {
        if (!this.heartBeatTimer) {
            this.debug && console.debug("IC3Core/sendHeartBeat");
            this.sendLiveState(conversationId);
            this.heartBeatTimer = window.setInterval(this.sendLiveState.bind(this, conversationId), Constants_1.default.heartBeatDuration);
        }
    };
    IC3ClientAdapter.prototype.stopHeartBeat = function () {
        clearInterval(this.heartBeatTimer);
    };
    IC3ClientAdapter.prototype.sendMessage = function (conversation, message) {
        var messagePayload = Util_1.default.createMessageData(message);
        return this.sendMessageToIC3(conversation.id, messagePayload);
    };
    IC3ClientAdapter.prototype.getMessages = function (conversation) {
        var _this = this;
        var defaultGetMessagesQueryParameters = RequestHelper_1.default.getDefaultGetMessagesQueryParameters();
        var url = Utilities_1.default.addQueryParametersToPath(ServiceEndpointHelper_1.default.getMessagesUrl(conversation.id, this.ic3Info.RegionGtms), defaultGetMessagesQueryParameters);
        var headers = RequestHelper_1.default.getDefaultIC3Headers();
        headers[HttpHeaders_1.default.RegistrationTokenHeader] = this.ic3Info.RegistrationToken;
        headers[HttpHeaders_1.default.ContentTypeHeader] = Constants_1.default.ContentTypeJson;
        var requestParameters = {
            enableExponentialBackoff: true,
            headers: headers,
            redirect404RetryCount: Constants_1.default.retryCount,
            retryCount: Constants_1.default.retryCount,
            shouldRedirectOn404: false,
            shouldResetOnFailure: false,
            shouldRetryOnFailure: Util_1.default.shouldRetryOnFailure,
            timeBetweenRetry: Constants_1.default.timeBetweenOperationRetry,
            type: HttpRequestType_1.default.GET,
            url: url
        };
        return HttpClient_1.HttpClient.MakeRequest(requestParameters).then(function (response) {
            var previousMessages = [];
            for (var _i = 0, _a = response.messages; _i < _a.length; _i++) {
                var message = _a[_i];
                if (!Util_1.default.isSystemMessage(message)) {
                    previousMessages.push(Util_1.default.createIRawMessage(message, _this.ic3Info));
                }
            }
            return _this.getAllMessagesFromBackwardLinkUrl(response._metadata.backwardLink, defaultGetMessagesQueryParameters.startTime, previousMessages);
        });
    };
    IC3ClientAdapter.prototype.registerOnNewMessage = function (conversation, callback) {
        var _a;
        this.newConversationMessageListeners[conversation.id].push(callback);
        (_a = this.logger) === null || _a === void 0 ? void 0 : _a.log(LogLevel_1.default.INFO, IC3TelemetryEvent_1.default.RegisterOnNewMessage, {
            EndpointUrl: this.EndpointUrl,
            EndpointId: this.EndpointId
        });
        return Promise.resolve();
    };
    IC3ClientAdapter.prototype.registerOnThreadUpdate = function (conversation, callback) {
        var _a;
        this.threadUpdateListeners[conversation.id].push(callback);
        (_a = this.logger) === null || _a === void 0 ? void 0 : _a.log(LogLevel_1.default.INFO, IC3TelemetryEvent_1.default.RegisterOnThreadUpdate, {
            EndpointUrl: this.EndpointUrl,
            EndpointId: this.EndpointId
        });
        return Promise.resolve();
    };
    IC3ClientAdapter.prototype.disconnectFromConversation = function (conversation) {
        this.conversations.findIndex(function (conv) { return conv.id === conversation.id; });
        delete this.internalConversationsData[conversation.id];
        if (this.ic3Info.visitor) {
            this.stopHeartBeat();
            this.stopPolling();
        }
        return Promise.resolve();
    };
    IC3ClientAdapter.prototype.sendFileData = function (conversation, fileInfo, fileSharingProtocolType) {
        var _this = this;
        if (Utilities_1.default.isNullOrUndefined(fileSharingProtocolType)) {
            fileSharingProtocolType = FileSharingProtocolType_1.default.AmsBasedFileSharing;
        }
        if (fileInfo.size <= 0) {
            throw new Error("File size is lesser or equal to zero.");
        }
        var fileMetadata = {
            fileSharingProtocolType: fileSharingProtocolType,
            id: "",
            name: fileInfo.name,
            size: fileInfo.size,
            type: fileInfo.type,
            url: ""
        };
        return new Promise(function (resolve, reject) {
            AmsHelper_1.default.createNewDocument(conversation.id, fileInfo, _this.ic3Info)
                .then(function (response) {
                fileMetadata.id = response.id;
                var isFileImage = Util_1.default.isDocumentTypeImage(fileInfo.type);
                fileMetadata.url = ServiceEndpointHelper_1.default.getAmsObjectContentUrl(response.id, _this.ic3Info.RegionGtms, isFileImage);
                AmsHelper_1.default.uploadDocument(response.id, fileInfo, _this.ic3Info).then(function () {
                    resolve(fileMetadata);
                }).
                    catch(function (e) {
                    reject(e);
                });
            })
                .catch(function (e) {
                reject(e);
            });
        });
    };
    IC3ClientAdapter.prototype.sendFileMessage = function (conversation, fileMetadata, message) {
        return this.sendMessageToIC3(conversation.id, Util_1.default.createFileMessage(fileMetadata, this.ic3Info, message));
    };
    IC3ClientAdapter.prototype.downloadFileData = function (_conversation, fileMetaData) {
        var _this = this;
        this.debug && console.debug("IC3Core/IC3ClientAdapter/downloadFileData");
        return new Promise(function (resolve, reject) {
            var fileProtocolType = fileMetaData.fileSharingProtocolType;
            if (Utilities_1.default.isNullOrUndefined(fileProtocolType)) {
                fileProtocolType = FileSharingProtocolType_1.default.AmsBasedFileSharing;
            }
            if (fileProtocolType === FileSharingProtocolType_1.default.AmsBasedFileSharing) {
                AmsHelper_1.default.downloadDocument(fileMetaData, _this.ic3Info).then(function (response) {
                    resolve(response);
                })
                    .catch(function (e) {
                    reject(e);
                });
            }
            else {
                reject("This Protocol is not implemented");
            }
        });
    };
    IC3ClientAdapter.prototype.getFileStatus = function (_conversation, fileMetadata) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var fileProtocolType = fileMetadata.fileSharingProtocolType;
            if (Utilities_1.default.isNullOrUndefined(fileProtocolType)) {
                fileProtocolType = FileSharingProtocolType_1.default.AmsBasedFileSharing;
            }
            if (fileProtocolType === FileSharingProtocolType_1.default.AmsBasedFileSharing) {
                AmsHelper_1.default.getFileStatus(fileMetadata, _this.ic3Info)
                    .then(function (response) {
                    resolve(response);
                })
                    .catch(function (e) {
                    reject(FileStatus_1.default.Error + " e");
                });
            }
            else {
                reject("This Protocol is not implemented");
            }
        });
    };
    IC3ClientAdapter.prototype.indicateTypingStatus = function (conversation, typingStatus, optionalProperties) {
        var messageData = Util_1.default.createTypingStatusThreadMessageData(typingStatus, optionalProperties);
        return this.sendMessageToIC3(conversation.id, messageData);
    };
    IC3ClientAdapter.prototype.sendMessageToBot = function (conversation, botId, botMessage) {
        var messageData = Util_1.default.createBotMessageData(conversation.id, botMessage);
        var url = ServiceEndpointHelper_1.default.getBotMessagesUrl(botId, this.ic3Info.RegionGtms);
        var headers = RequestHelper_1.default.getDefaultIC3Headers();
        headers[HttpHeaders_1.default.RegistrationTokenHeader] = this.ic3Info.RegistrationToken;
        headers[HttpHeaders_1.default.ContentTypeHeader] = Constants_1.default.ContentTypeTextPlain;
        var requestParameters = {
            data: messageData,
            dataType: HttpDataType_1.default.TEXT,
            enableExponentialBackoff: true,
            headers: headers,
            redirect404RetryCount: Constants_1.default.retryCount,
            retryCount: Constants_1.default.retryCount,
            shouldRedirectOn404: false,
            shouldResetOnFailure: false,
            shouldRetryOnFailure: Util_1.default.shouldRetryOnFailure,
            timeBetweenRetry: Constants_1.default.timeBetweenOperationRetry,
            type: HttpRequestType_1.default.POST,
            url: url
        };
        return HttpClient_1.HttpClient.MakeRequest(requestParameters);
    };
    IC3ClientAdapter.prototype.getMembers = function (conversation) {
        // Note: Currently, the thread members are not updated each time a member is added or deleted
        // This functionality can be added in future
        var conversationMembers = this.internalConversationsData[conversation.id].members;
        var members = [];
        if (!Utilities_1.default.isNullOrUndefinedOrEmptyArray(conversationMembers)) {
            conversationMembers.forEach(function (conversationMember) {
                var memberToAdd = {
                    displayName: conversationMember.friendlyName,
                    id: conversationMember.id,
                    type: Util_1.default.getPersonType(conversationMember.id)
                };
                members.push(memberToAdd);
            });
        }
        return Promise.resolve(members);
    };
    /**
     * Sends message to IC3.
     *
     * @param conversationId IC3 conversation thread id
     * @param messageData IC3 message payload
     */
    IC3ClientAdapter.prototype.sendMessageToIC3 = function (conversationId, messageData) {
        var url = ServiceEndpointHelper_1.default.getMessagesUrl(conversationId, this.ic3Info.RegionGtms);
        var headers = RequestHelper_1.default.getDefaultIC3Headers();
        headers[HttpHeaders_1.default.RegistrationTokenHeader] = this.ic3Info.RegistrationToken;
        headers[HttpHeaders_1.default.ContentTypeHeader] = Constants_1.default.ContentTypeJson;
        var requestParameters = {
            data: JSON.stringify(messageData),
            enableExponentialBackoff: true,
            headers: headers,
            redirect404RetryCount: Constants_1.default.retryCount,
            retryCount: Constants_1.default.retryCount,
            shouldRedirectOn404: false,
            shouldResetOnFailure: false,
            shouldRetryOnFailure: Util_1.default.shouldRetryOnFailure,
            timeBetweenRetry: Constants_1.default.timeBetweenOperationRetry,
            type: HttpRequestType_1.default.POST,
            url: url
        };
        return HttpClient_1.HttpClient.MakeRequest(requestParameters);
    };
    IC3ClientAdapter.prototype.onNewMessage = function (conversation, message, resourceType) {
        var _this = this;
        var _a;
        var timer = Utilities_1.default.timer();
        try {
            if (conversation) {
                if (!Utilities_1.default.isNullOrUndefined(this.newConversationMessageListeners[conversation.id])) {
                    if (!Util_1.default.isSystemMessage(message)) {
                        this.newConversationMessageListeners[conversation.id].forEach(function (callback) {
                            var messageToBeSent = Util_1.default.createIRawMessage(message, _this.ic3Info, resourceType);
                            callback(messageToBeSent);
                            return;
                        });
                    }
                }
            }
        }
        catch (e) {
            var elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.log(LogLevel_1.default.ERROR, IC3TelemetryEvent_1.default.OnNewMessageFailure, {
                ExceptionDetails: e,
                ElapsedTimeInMilliseconds: elapsedTimeInMilliseconds,
                EndpointUrl: this.EndpointUrl,
                EndpointId: this.EndpointId
            });
            return;
        }
    };
    IC3ClientAdapter.prototype.onThreadUpdate = function (conversation, message) {
        var _a;
        var timer = Utilities_1.default.timer();
        try {
            if (conversation) {
                if (!Utilities_1.default.isNullOrUndefined(this.threadUpdateListeners[conversation.id])) {
                    this.threadUpdateListeners[conversation.id].forEach(function (callback) {
                        var messageToBeSent = Util_1.default.createIRawThread(message);
                        callback(messageToBeSent);
                        return;
                    });
                }
            }
        }
        catch (e) {
            var elapsedTimeInMilliseconds = timer.milliSecondsElapsed;
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.log(LogLevel_1.default.ERROR, IC3TelemetryEvent_1.default.OnThreadUpdateFailure, {
                ExceptionDetails: e,
                ElapsedTimeInMilliseconds: elapsedTimeInMilliseconds,
                EndpointUrl: this.EndpointUrl,
                EndpointId: this.EndpointId
            });
            return;
        }
    };
    IC3ClientAdapter.prototype.getAllMessagesFromBackwardLinkUrl = function (backwardLinkUrl, startTime, previousMessages) {
        var _this = this;
        if (Utilities_1.default.isNullOrEmptyString(backwardLinkUrl)) {
            return Promise.resolve(previousMessages);
        }
        return this.getMessagesFromBackwardLinkUrl(backwardLinkUrl, startTime).then(function (response) {
            for (var _i = 0, _a = response.messages; _i < _a.length; _i++) {
                var message = _a[_i];
                if (!Util_1.default.isSystemMessage(message)) {
                    previousMessages.push(Util_1.default.createIRawMessage(message, _this.ic3Info));
                }
            }
            return _this.getAllMessagesFromBackwardLinkUrl(response._metadata.backwardLink, startTime, previousMessages);
        });
    };
    IC3ClientAdapter.prototype.getMessagesFromBackwardLinkUrl = function (backwardLinkUrl, startTime) {
        var startTimeQueryParameter = { startTime: startTime };
        var url = Utilities_1.default.addQueryParametersToPath(backwardLinkUrl, startTimeQueryParameter);
        var headers = RequestHelper_1.default.getDefaultIC3Headers();
        headers[HttpHeaders_1.default.RegistrationTokenHeader] = this.ic3Info.RegistrationToken;
        headers[HttpHeaders_1.default.ContentTypeHeader] = Constants_1.default.ContentTypeJson;
        var requestParameters = {
            enableExponentialBackoff: true,
            headers: headers,
            redirect404RetryCount: Constants_1.default.retryCount,
            retryCount: Constants_1.default.retryCount,
            shouldRedirectOn404: false,
            shouldResetOnFailure: false,
            shouldRetryOnFailure: Util_1.default.shouldRetryOnFailure,
            timeBetweenRetry: Constants_1.default.timeBetweenOperationRetry,
            type: HttpRequestType_1.default.GET,
            url: url
        };
        return HttpClient_1.HttpClient.MakeRequest(requestParameters);
    };
    IC3ClientAdapter.prototype.setupSession = function (sessionInfo) {
        this.ic3Info = { SkypeToken: sessionInfo.token, RegionGtms: sessionInfo.regionGtms, visitor: sessionInfo.visitor };
        if (!Utilities_1.default.isNullOrUndefined(this.ic3Info)) {
            this.EndpointId = this.ic3Info.endpointId;
            this.EndpointUrl = this.ic3Info.RegionGtms ? this.ic3Info.RegionGtms.chatService : "";
        }
    };
    IC3ClientAdapter.prototype.setDebug = function (flag) {
        if (flag === void 0) { flag = false; }
        this.debug = flag;
    };
    return IC3ClientAdapter;
}());
exports.default = IC3ClientAdapter;
//# sourceMappingURL=IC3ClientAdapter.js.map