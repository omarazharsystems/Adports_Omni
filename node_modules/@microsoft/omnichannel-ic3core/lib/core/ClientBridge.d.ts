import HostType from "../interfaces/HostType";
import ProtocolType from "../interfaces/ProtocoleType";
import IConversation from "../model/IConversation";
import IRawSDKSetupParameters from "../interfaces/IRawSDKSetupParameters";
import IInitializationInfo from "../model/IInitializationInfo";
import IRawConversation from "../model/IRawConversation";
import IRawMessage from "../model/IRawMessage";
import IFileInfo from "../interfaces/IFileInfo";
import FileSharingProtocolType from "../model/FileSharingProtocolType";
import IFileMetadata from "../model/IFileMetadata";
import FileStatus from "../model/FileStatus";
import TypingStatus from "../model/TypingStatus";
import IMessageProperties from "../model/IMessageProperties";
import IRawBotMessage from "../interfaces/IRawBotMessage";
import IPerson from "../model/IPerson";
import IRawThread from "../interfaces/IRawThread";
import IRawSDK from "../interfaces/IRawSDK";
import IRawLogger from "../logging/IRawLogger";
export default abstract class ClientBridge implements IRawSDK {
    id: string;
    protocolType: ProtocolType;
    hostType: HostType;
    logger: IRawLogger;
    protected newConversationMessageListeners: {
        [conversationId: string]: any;
    };
    protected threadUpdateListeners: {
        [conversationId: string]: any;
    };
    private debug;
    constructor(protocolType: ProtocolType);
    abstract setup(setupParams: IRawSDKSetupParameters): Promise<void>;
    abstract initialize(sessionInfo: IInitializationInfo): Promise<void>;
    abstract update(sessionInfo: IInitializationInfo): Promise<void>;
    abstract dispose(): Promise<void>;
    abstract onJoinConversation(conversationId: string, sendHeartBeat?: boolean): Promise<IRawConversation>;
    abstract sendMessage(conversation: IRawConversation, message: IRawMessage): Promise<void>;
    abstract getMessages(conversation: IRawConversation): Promise<IRawMessage[]>;
    abstract onRegisterOnNewMessage(conversation: IRawConversation): Promise<void>;
    abstract onRegisterOnThreadUpdate(conversation: IRawConversation): Promise<void>;
    abstract sendFileData(conversation: IRawConversation, fileInfo: IFileInfo, fileSharingProtocolType?: FileSharingProtocolType): Promise<IFileMetadata>;
    abstract downloadFileData(conversation: IRawConversation, fileMetadata: IFileMetadata): Promise<ArrayBuffer>;
    abstract getFileStatus(conversation: IRawConversation, fileMetadata: IFileMetadata): Promise<FileStatus>;
    abstract indicateTypingStatus(conversation: IRawConversation, typingStatus: TypingStatus, optionalProperties?: IMessageProperties): Promise<void>;
    abstract disconnectFromConversation(conversation: IRawConversation): Promise<void>;
    abstract sendFileMessage(conversation: IRawConversation, fileMedata: IFileMetadata, message: IRawMessage): Promise<void>;
    abstract sendMessageToBot(conversation: IRawConversation, botId: string, botMessage: IRawBotMessage): Promise<void>;
    abstract getMembers(conversation: IRawConversation): Promise<IPerson[]>;
    setDebug(flag: boolean): void;
    joinConversation(conversationId: string, sendHeartBeat?: boolean): Promise<IConversation>;
    registerOnNewMessage(conversation: IRawConversation, callback: (message: IRawMessage) => void): Promise<void>;
    registerOnThreadUpdate(conversation: IRawConversation, callback: (message: IRawThread) => void): Promise<void>;
    uploadFile(conversation: IRawConversation, fileToSend: File, fileSharingProtocolType?: FileSharingProtocolType): Promise<any>;
    downloadFile(conversation: IRawConversation, fileMetadata: IFileMetadata): Promise<any>;
}
