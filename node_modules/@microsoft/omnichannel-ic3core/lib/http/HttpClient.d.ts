import HttpRequestType from "./HttpRequestType";
import IRawLogger from "../logging/IRawLogger";
import { AxiosResponse, AxiosError } from "axios";
export interface IHttpRequestAttributes {
    url: string;
    type: HttpRequestType;
    data?: any;
    timeout?: number;
    retryCount?: number;
    shouldResetOnFailure?: boolean;
    shouldRetryOnFailure?: (status: number) => boolean;
    timeBetweenRetry?: number;
    contentType?: string;
    headers?: {
        [key: string]: any;
    };
    callbackOnSuccess?: (response: AxiosResponse) => void;
    callbackOnFailure?: (error: AxiosError) => void;
    shouldRedirectOn404?: boolean;
    redirect404RetryCount?: number;
    dataType?: string;
    processData?: boolean;
    enableExponentialBackoff?: boolean;
    useXHRWithCredentials?: boolean;
}
export declare class HttpClient {
    static MakeRequest<T>(requestAttributes: IHttpRequestAttributes): Promise<T>;
    static isClientError(e: Error): boolean;
    static setLogger(logger: IRawLogger): void;
    private static logger;
    private static logError;
    private static logWarning;
}
