"use strict";
/* eslint-disable @typescript-eslint/no-explicit-any */
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpClient = void 0;
var Utilities_1 = require("../common/Utilities");
var Constants_1 = require("../common/Constants");
var IC3TelemetryEvent_1 = require("../logging/IC3TelemetryEvent");
var LogLevel_1 = require("../logging/LogLevel");
var HttpHeaders_1 = require("./HttpHeaders");
var HttpCode_1 = require("./HttpCode");
var axios_1 = require("axios");
var HttpClient = /** @class */ (function () {
    function HttpClient() {
    }
    HttpClient.MakeRequest = function (requestAttributes) {
        var responsePromise = new Promise(function (resolve, reject) {
            function onSuccess(data, response) {
                if (response.status >= 400) { // if not 2xx
                    var exceptionDetails = {
                        ResponseText: response.statusText,
                        Status: status
                    };
                    HttpClient.logWarning("Requesting " + requestAttributes.url, response.status, exceptionDetails);
                }
                if (requestAttributes.callbackOnSuccess) {
                    requestAttributes.callbackOnSuccess(response);
                }
                resolve(data);
            }
            function onFailure(error) {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
                var exceptionDetails = {
                    ErrorThrown: error.message,
                    ResponseText: (_a = error.response) === null || _a === void 0 ? void 0 : _a.statusText,
                    Status: (_b = error.response) === null || _b === void 0 ? void 0 : _b.status
                };
                var rejectAsError = function () {
                    var _a, _b;
                    HttpClient.logError("Request to " + requestAttributes.url + " failed.", ((_a = error.response) === null || _a === void 0 ? void 0 : _a.status) || 0, exceptionDetails);
                    reject(new Error(((_b = error.response) === null || _b === void 0 ? void 0 : _b.statusText) || ""));
                };
                var rejectAsRedirect = function () {
                    var _a;
                    HttpClient.logError("Request to " + requestAttributes.url + " failed. Resetting endpoint.", ((_a = error.response) === null || _a === void 0 ? void 0 : _a.status) || 0, exceptionDetails);
                    if (requestAttributes.callbackOnFailure) {
                        requestAttributes.callbackOnFailure(error);
                    }
                    reject(new Error(Constants_1.default.Reset_Flag));
                };
                var retry = function () {
                    var _a;
                    currentRetryCount++;
                    var timeBetweenRetry = requestAttributes.timeBetweenRetry || 0;
                    if (requestAttributes.enableExponentialBackoff || ((_a = error.response) === null || _a === void 0 ? void 0 : _a.status) === HttpCode_1.default.TooManyRequests) {
                        timeBetweenRetry = timeBetweenRetry * Math.exp(currentRetryCount);
                    }
                    setTimeout(function () {
                        makeAxiosRequest();
                    }, timeBetweenRetry);
                };
                var locationHeader = (_c = error.response) === null || _c === void 0 ? void 0 : _c.headers[HttpHeaders_1.default.LocationHeader];
                var registrationTokenHeader = (_d = error.response) === null || _d === void 0 ? void 0 : _d.headers[HttpHeaders_1.default.SetRegistrationTokenHeader];
                if (((_e = error.response) === null || _e === void 0 ? void 0 : _e.status) === HttpCode_1.default.Redirect && !Utilities_1.default.isNullOrEmptyString(locationHeader)) {
                    if (requestAttributes.shouldRedirectOn404) {
                        rejectAsRedirect();
                    }
                    else if (currentRetryCount <= maxRetryCount) {
                        requestAttributes.url = locationHeader;
                        retry();
                    }
                    else {
                        rejectAsError();
                    }
                }
                else if ((((_f = error.response) === null || _f === void 0 ? void 0 : _f.status) === HttpCode_1.default.Unauthorized || ((_g = error.response) === null || _g === void 0 ? void 0 : _g.status) === HttpCode_1.default.Forbidden) &&
                    !Utilities_1.default.isNullOrEmptyString(registrationTokenHeader)) {
                    if (currentRetryCount <= maxRetryCount
                        && requestAttributes.shouldRetryOnFailure
                        && requestAttributes.shouldRetryOnFailure(((_h = error.response) === null || _h === void 0 ? void 0 : _h.status) || 0)) {
                        if (requestAttributes.headers) {
                            requestAttributes.headers[HttpHeaders_1.default.RegistrationTokenHeader] = Utilities_1.default.getRegistrationTokenValue(registrationTokenHeader);
                        }
                        retry();
                    }
                    else if (requestAttributes.shouldResetOnFailure) {
                        rejectAsRedirect();
                    }
                    else {
                        rejectAsError();
                    }
                }
                else {
                    if (currentRetryCount <= maxRetryCount
                        && requestAttributes.shouldRetryOnFailure
                        && requestAttributes.shouldRetryOnFailure(((_j = error.response) === null || _j === void 0 ? void 0 : _j.status) || 0)
                        || ((_k = error.response) === null || _k === void 0 ? void 0 : _k.status) === HttpCode_1.default.TooManyRequests) {
                        retry();
                    }
                    else if (requestAttributes.shouldResetOnFailure) {
                        rejectAsRedirect();
                    }
                    else {
                        rejectAsError();
                    }
                }
            }
            var currentRetryCount = 0;
            var maxRetryCount = requestAttributes.retryCount || 1;
            var axiosConfig = {
                url: requestAttributes.url,
                method: requestAttributes.type,
                data: requestAttributes.data,
                timeout: requestAttributes.timeout,
                headers: requestAttributes.headers,
                withCredentials: requestAttributes.useXHRWithCredentials || false
            };
            var makeAxiosRequest = function () {
                axios_1.default.request(axiosConfig)
                    .then(function (response) {
                    onSuccess(response.data, response);
                })
                    .catch(function (error) {
                    onFailure(error);
                });
            };
            makeAxiosRequest();
        });
        return responsePromise;
    };
    HttpClient.isClientError = function (e) {
        if (!e) {
            return false;
        }
        var errorMsg = e.message;
        var isClientError = false;
        if (!Utilities_1.default.isNullOrEmptyString(errorMsg)) {
            isClientError = (errorMsg.search(/Status- 40\d/) >= -1);
        }
        return isClientError;
    };
    HttpClient.setLogger = function (logger) {
        HttpClient.logger = logger;
    };
    HttpClient.logError = function (errorDescription, errorCode, errorResponse) {
        if (HttpClient.logger) {
            HttpClient.logger.log(LogLevel_1.default.ERROR, IC3TelemetryEvent_1.default.HTTPRequestFailed, {
                Description: errorDescription,
                ErrorCode: errorCode.toString(),
                ExceptionDetails: errorResponse
            });
        }
    };
    HttpClient.logWarning = function (warningDescription, warningCode, warningResponse) {
        if (HttpClient.logger) {
            HttpClient.logger.log(LogLevel_1.default.INFO, IC3TelemetryEvent_1.default.HTTPRequestUnusualResponse, {
                Description: warningDescription,
                ErrorCode: warningCode.toString(),
                ExceptionDetails: warningResponse
            });
        }
    };
    return HttpClient;
}());
exports.HttpClient = HttpClient;
//# sourceMappingURL=HttpClient.js.map