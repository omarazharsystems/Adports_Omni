"use strict";
/* eslint-disable @typescript-eslint/no-explicit-any */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var Constants_1 = require("../common/Constants");
var HttpHeaders_1 = require("../http/HttpHeaders");
var HttpRequestType_1 = require("../http/HttpRequestType");
var HttpClient_1 = require("../http/HttpClient");
var ServiceEndpointHelper_1 = require("../common/ServiceEndpointHelper");
var RequestHelper_1 = require("../http/RequestHelper");
var AMSFilePermissions_1 = require("./AMSFilePermissions");
var FileStatus_1 = require("../model/FileStatus");
var Util_1 = require("../common/Util");
var AmsHelper = /** @class */ (function () {
    function AmsHelper() {
    }
    AmsHelper.getDocumentTypeFromContentType = function (contentType) {
        return Util_1.default.isDocumentTypeImage(contentType)
            ? Constants_1.default.DocumentTypeImage
            : Constants_1.default.DocumentTypeFile;
    };
    AmsHelper.createNewDocument = function (conversationId, file, ic3Info) {
        return __awaiter(this, void 0, void 0, function () {
            var permissions, body, url, headers, requestParameters;
            var _a;
            return __generator(this, function (_b) {
                permissions = (_a = {},
                    _a[conversationId] = [AMSFilePermissions_1.default[AMSFilePermissions_1.default.read]],
                    _a);
                body = {
                    filename: file.name,
                    permissions: permissions,
                    type: AmsHelper.getDocumentTypeFromContentType(file.type)
                };
                url = ServiceEndpointHelper_1.default.getAmsObjectsUrl(ic3Info.RegionGtms);
                headers = RequestHelper_1.default.getDefaultAMSHeaders(ic3Info.SkypeToken);
                headers[HttpHeaders_1.default.ContentTypeHeader] = Constants_1.default.ContentTypeJson;
                requestParameters = {
                    data: JSON.stringify(body),
                    headers: headers,
                    type: HttpRequestType_1.default.POST,
                    url: url
                };
                return [2 /*return*/, HttpClient_1.HttpClient.MakeRequest(requestParameters)];
            });
        });
    };
    AmsHelper.uploadDocument = function (documentId, file, ic3Info) {
        return __awaiter(this, void 0, void 0, function () {
            var isFileImage, url, headers, requestParameters;
            return __generator(this, function (_a) {
                console.log("AmsHelper.ts uploadDocument(): " + documentId + ", " + file + ", " + ic3Info);
                isFileImage = Util_1.default.isDocumentTypeImage(file.type);
                url = ServiceEndpointHelper_1.default.getAmsObjectContentUrl(documentId, ic3Info.RegionGtms, isFileImage);
                headers = RequestHelper_1.default.getDefaultAMSHeaders(ic3Info.SkypeToken);
                requestParameters = {
                    data: file.data,
                    headers: headers,
                    processData: false,
                    type: HttpRequestType_1.default.PUT,
                    url: url
                };
                return [2 /*return*/, HttpClient_1.HttpClient.MakeRequest(requestParameters)];
            });
        });
    };
    AmsHelper.getFileStatus = function (fileInfo, ic3Info) {
        var isFileImage = Util_1.default.isImageType(fileInfo.type);
        var url = ServiceEndpointHelper_1.default.getAmsStatusUrl(fileInfo.id, ic3Info.RegionGtms, isFileImage);
        return this.getViewStatus(url, ic3Info)
            .then(function (response) {
            var isScanFailed = response.scan && response.scan.status === Constants_1.default.Malware;
            if (isScanFailed) {
                return FileStatus_1.default.Error;
            }
            if (response.view_state === Constants_1.default.Ready) {
                return FileStatus_1.default.Success;
            }
            var isScanInProgress = response.scan && response.scan.status === Constants_1.default.InProgress;
            if (isScanInProgress) {
                return FileStatus_1.default.InProgress;
            }
            if (response.view_state && response.view_state !== Constants_1.default.Failed) {
                return FileStatus_1.default.InProgress;
            }
            return FileStatus_1.default.Error;
        })
            .catch(function () {
            return Promise.reject({});
        });
    };
    AmsHelper.downloadDocument = function (fileMetadata, ic3Info) {
        var _this = this;
        var isFileImage = Util_1.default.isImageType(fileMetadata.type);
        var statusUri = ServiceEndpointHelper_1.default.getAmsStatusUrl(fileMetadata.id, ic3Info.RegionGtms, isFileImage);
        return new Promise(function (resolve) {
            _this.getViewUri(statusUri, ic3Info).then(function (vUrl) {
                var headers = new Headers();
                headers.append("Authorization", "skype_token " + ic3Info.SkypeToken);
                headers.append("X-MS-Client-Version", Constants_1.default.ClientVersion);
                if (isFileImage) {
                    headers.append("accept", Constants_1.default.AMSAcceptHeaderValue);
                    headers.append("Accept-Encoding", Constants_1.default.AMSAcceptEncodingHeaderValue);
                }
                var requestParameters = {
                    headers: headers,
                    method: HttpRequestType_1.default.GET
                };
                return fetch(vUrl, requestParameters)
                    .then(function (response) {
                    resolve((response.blob()));
                })
                    .catch(function () {
                    return Promise.reject({});
                });
            });
        });
    };
    AmsHelper.getViewUri = function (statusUri, ic3Info) {
        var _this = this;
        return this.getViewStatus(statusUri, ic3Info)
            .then(function (response) {
            var isScanFailed = response.scan
                && response.scan.status === Constants_1.default.Malware;
            if (!response.view_location || response.view_state === Constants_1.default.Failed || isScanFailed) {
                return Promise.reject({});
            }
            if (response.view_state && response.view_state !== Constants_1.default.Ready) {
                return _this.getViewUri(statusUri, ic3Info);
            }
            if (response.content_state === Constants_1.default.Expired) {
                return Promise.reject({});
            }
            return Promise.resolve(response.view_location);
        })
            .catch(function () {
            return Promise.reject("");
        });
    };
    AmsHelper.getViewStatus = function (url, ic3Info) {
        var _this = this;
        console.log("AmsHelper.ts getViewStatus(): " + url + ", " + ic3Info);
        return new Promise(function (resolve) {
            setTimeout(resolve, Constants_1.default.DelayForAms);
        }).then(function () {
            var headers = RequestHelper_1.default.getDefaultAMSViewHeaders(ic3Info.SkypeToken);
            var requestParameters = {
                headers: headers,
                type: HttpRequestType_1.default.GET,
                url: url
            };
            return HttpClient_1.HttpClient.MakeRequest(requestParameters)
                .then(function (response) {
                if (response.status_location && !response.view_state) {
                    return _this.getViewStatus(response.status_location, ic3Info);
                }
                return Promise.resolve(response);
            })
                .catch(function (response) {
                if (response.status === 401 || response.status === 403) {
                    return Promise.reject("unauthorized");
                }
                return Promise.reject({});
            });
        });
    };
    return AmsHelper;
}());
exports.default = AmsHelper;
//# sourceMappingURL=AmsHelper.js.map