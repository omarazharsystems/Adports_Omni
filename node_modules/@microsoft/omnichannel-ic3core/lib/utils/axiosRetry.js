"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Custom handler for HTTP calls with Axios. Handler allows to retry HTTP calls if failed.
 *
 * @param axios Axios instance.
 * @param axiosRetryOptions Options for axios retry.
 */
var axiosRetry = function (axios, axiosRetryOptions) {
    var retries = axiosRetryOptions.retries;
    var currentTry = 0;
    // Method to intercepts responses within range of 2xx
    var onSuccess = undefined;
    // Method to intercepts responses outside range of 2xx
    var onError = function (error) {
        var config = error.config;
        // If we have no information of the request to retry
        if (!config) {
            return Promise.reject(error);
        }
        // Retry request if below threshold
        var shouldRetry = currentTry < retries;
        if (shouldRetry) {
            currentTry++;
            return new Promise(function (resolve) { return resolve(axios(config)); });
        }
        return Promise.reject(error);
    };
    axios.interceptors.response.use(onSuccess, onError);
};
exports.default = axiosRetry;
//# sourceMappingURL=axiosRetry.js.map