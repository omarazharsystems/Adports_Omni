"use strict";
/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable no-useless-escape */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var Constants_1 = require("./Constants");
var DeliveryMode_1 = require("../model/DeliveryMode");
var FileSharingProtocolType_1 = require("../model/FileSharingProtocolType");
var HttpCode_1 = require("../http/HttpCode");
var MessageContentType_1 = require("../model/MessageContentType");
var MessagePayloadType_1 = require("../model/MessagePayloadType");
var MessageType_1 = require("../model/MessageType");
var PersonType_1 = require("../model/PersonType");
var ServiceEndpointHelper_1 = require("./ServiceEndpointHelper");
var TypingStatus_1 = require("../model/TypingStatus");
var Utilities_1 = require("./Utilities");
var Util = /** @class */ (function () {
    function Util() {
    }
    Util.createMessageData = function (message) {
        var messageType = message.contentType === MessageContentType_1.default.Text ?
            MessagePayloadType_1.default.Text : MessagePayloadType_1.default.RichTextHtml;
        var encodedMessage = message.content;
        var messageData = Util.createBaseMessageData(messageType, message.contentType.toString(), encodedMessage);
        messageData.properties = this.getMessageProperties(message);
        if (!Utilities_1.default.isNullOrUndefined(message.sender.displayName)) {
            messageData.imdisplayname = message.sender.displayName;
        }
        return messageData;
    };
    Util.createBaseMessageData = function (messagetype, contenttype, content) {
        var messageData = {
            "Has-Mentions": "false",
            clientmessageid: Date.now().toString(),
            composetime: new Date().toISOString(),
            content: content,
            contenttype: contenttype,
            messagetype: messagetype
        };
        return messageData;
    };
    Util.getMessageProperties = function (message) {
        var properties = {};
        properties.deliveryMode = message.deliveryMode.toString();
        if (message.tags) {
            var tags_1 = [];
            message.tags.forEach(function (tagName) {
                tags_1.push(tagName);
            });
            properties.tags = tags_1.join();
        }
        return properties;
    };
    Util.createTypingStatusThreadMessageData = function (typingStatus, optionalProperties) {
        var messageType = "";
        switch (typingStatus) {
            case TypingStatus_1.default.Typing:
                messageType = MessagePayloadType_1.default.ControlTyping;
                break;
            case TypingStatus_1.default.ClearTyping:
                messageType = MessagePayloadType_1.default.ControlClearTyping;
                break;
        }
        var messageData = Util.createBaseMessageData(messageType, MessageContentType_1.default.Text, "");
        if (!Utilities_1.default.isNullOrUndefined(optionalProperties)) {
            messageData = __assign(__assign({}, optionalProperties), messageData);
        }
        return messageData;
    };
    Util.createBotMessageData = function (conversationId, message) {
        var botMessage = {
            conversation: {
                id: conversationId
            },
            value: message
        };
        return JSON.stringify(botMessage);
    };
    Util.createFileMessage = function (filemetadata, ic3Info, message) {
        var messageType = MessagePayloadType_1.default.Text;
        var contentType = MessageContentType_1.default.Text.toString().toLowerCase();
        var messageData = Util.createBaseMessageData(messageType, contentType.toString(), "");
        messageData.amsreferences = JSON.stringify([filemetadata.id]);
        messageData.properties = JSON.stringify(this.createFileMessageProperties(filemetadata, ic3Info, message));
        if (!Utilities_1.default.isNullOrUndefined(message.sender.displayName)) {
            messageData.imdisplayname = message.sender.displayName;
        }
        return messageData;
    };
    Util.createFileMessageProperties = function (fileInfo, ic3Info, message) {
        var properties = {};
        properties.deliveryMode = message.deliveryMode.toString();
        properties.files = JSON.stringify([this.createFileProperty(fileInfo, ic3Info)]);
        properties.importance = '';
        properties.subject = "";
        if (message.tags) {
            var tags_2 = [];
            message.tags.forEach(function (tagName) {
                tags_2.push(tagName);
            });
            properties.tags = tags_2.join();
        }
        return properties;
    };
    Util.createFileProperty = function (fileInfo, ic3Info) {
        var isFileImage = Util.isDocumentTypeImage(fileInfo.type)
            ? true
            : false;
        return {
            '@type': 'http://schema.skype.com/File',
            'type': fileInfo.type,
            'itemid': '',
            'baseUrl': '',
            'providerData': '',
            'version': 2,
            'id': fileInfo.id,
            'title': fileInfo.name,
            'state': 'active',
            'objectUrl': ServiceEndpointHelper_1.default.getAmsObjectViewUrl(fileInfo.id, ic3Info.RegionGtms, isFileImage),
            'fileName': fileInfo.name,
            'fileType': Util.getNameAndExtension(fileInfo.name).extension,
            'botFileProperties': {
                url: ServiceEndpointHelper_1.default.getAmsObjectViewUrl(fileInfo.id, ic3Info.RegionGtms, isFileImage)
            },
            'fileInfo': {
                fileUrl: ServiceEndpointHelper_1.default.getAmsObjectContentUrl(fileInfo.id, ic3Info.RegionGtms, isFileImage),
                siteUrl: '',
                serverRelativeUrl: ''
            },
            'filePreview': {
                previewUrl: ''
            }
        };
    };
    Util.getNameAndExtension = function (filename) {
        var nameAndExtensionMatcher = (filename || '').split('.');
        var name = '';
        var extension = '';
        if (nameAndExtensionMatcher.length > 1) {
            extension = nameAndExtensionMatcher.pop().toLowerCase(); // eslint-disable-line @typescript-eslint/no-non-null-assertion
            name = nameAndExtensionMatcher.join('.');
        }
        else {
            extension = '';
            name = nameAndExtensionMatcher[0];
        }
        return { name: name, extension: extension };
    };
    Util.createIRawMessage = function (message, ic3Info, resourceType) {
        var rawMessage = {
            clientmessageid: message.clientmessageid,
            content: message.content,
            contentType: Util.getMessageContentType(message),
            deliveryMode: !Utilities_1.default.isNullOrUndefined(message.properties) && message.properties.deliveryMode === DeliveryMode_1.default.Bridged ?
                DeliveryMode_1.default.Bridged : DeliveryMode_1.default.Unbridged,
            messageType: Util.getMessageType(message),
            properties: message.properties,
            sender: { displayName: message.imdisplayname, id: message.from, type: Util.getPersonType(message.from) },
            timestamp: new Date(Date.parse(message.originalarrivaltime))
        };
        if (resourceType) {
            rawMessage.resourceType = resourceType;
        }
        if (!Utilities_1.default.isNullOrUndefined(message.properties)) {
            if (!Utilities_1.default.isNullOrEmptyString(message.properties.tags)) {
                var tagsReceived = [];
                tagsReceived = message.properties.tags.split(",");
                rawMessage.tags = tagsReceived;
            }
        }
        if (!Utilities_1.default.isNullOrUndefined(message.properties)) {
            if (!Utilities_1.default.isNullOrEmptyString(message.properties.files)) {
                var filesRecieved = [];
                filesRecieved = JSON.parse(message.properties.files);
                if (filesRecieved.length > 0) {
                    var fileId = filesRecieved[0].id;
                    if (Utilities_1.default.isNullOrUndefined(fileId) && message.amsreferences) {
                        fileId = message.amsreferences[0];
                    }
                    var fileUrl = Util.getFileUrl(filesRecieved[0], fileId, ic3Info);
                    var fileMetadata = {
                        fileSharingProtocolType: FileSharingProtocolType_1.default.AmsBasedFileSharing,
                        id: fileId,
                        name: filesRecieved[0].fileName,
                        size: filesRecieved[0].version,
                        type: filesRecieved[0].fileType,
                        url: fileUrl
                    };
                    rawMessage.fileMetadata = fileMetadata;
                }
            }
        }
        return rawMessage;
    };
    Util.createIRawThread = function (message) {
        var rawThread = {
            id: message.id,
            members: message.members,
            messages: message.messages,
            properties: message.properties,
            rosterVersion: message.rosterVersion,
            type: message.type,
            version: message.version
        };
        return rawThread;
    };
    Util.getConversationIdFromUrl = function (url) {
        var matches = url && url.match(/\/(\d+:[^\/]*)[\/]?/);
        return (matches && matches[1]) ? matches[1] : undefined;
    };
    Util.isSystemMessage = function (message) {
        var isSystemMessage = false;
        if (!Utilities_1.default.isNullOrEmptyString(message.messagetype)) {
            isSystemMessage = Util.getSystemMessageTypes().reduce(function (isSystemMessageTillNow, systemMessageType) {
                return isSystemMessageTillNow || message.messagetype.toLowerCase().indexOf(systemMessageType.toLowerCase()) === 0;
            }, isSystemMessage);
        }
        return isSystemMessage;
    };
    Util.getPersonType = function (personId) {
        var personType = PersonType_1.default.Unknown;
        var sanitizedPersonId = personId.split("/").pop();
        if (sanitizedPersonId.indexOf("28:") === 0) {
            personType = PersonType_1.default.Bot;
        }
        else if (sanitizedPersonId.indexOf("19:") === 0) {
            personType = PersonType_1.default.User;
        }
        return personType;
    };
    Util.isImageType = function (fileType) {
        switch (fileType.toLowerCase()) {
            case "jpeg":
            case "jpg":
            case "gif":
            case "png":
            case "bmp":
            case "tiff":
            case "jfif":
                return true;
            default:
                return false;
        }
    };
    Util.getMessageType = function (message) {
        var messageType;
        switch (message.messagetype) {
            case MessageType_1.default.Typing:
                messageType = MessageType_1.default.Typing;
                break;
            case MessageType_1.default.ClearTyping:
                messageType = MessageType_1.default.ClearTyping;
                break;
            default:
                messageType = MessageType_1.default.UserMessage;
        }
        return messageType;
    };
    Util.getMessageContentType = function (message) {
        var messageContentType;
        var contentType = message.contenttype ? message.contenttype : message.messagetype;
        if (contentType === MessagePayloadType_1.default.Text.toLowerCase()) {
            messageContentType = MessageContentType_1.default.Text;
        }
        else if (contentType.indexOf(Constants_1.default.TextPlainMimeType) >= 0) {
            messageContentType = MessageContentType_1.default.Text;
        }
        else {
            messageContentType = MessageContentType_1.default.RichText;
        }
        return messageContentType;
    };
    Util.getSystemMessageTypes = function () {
        return [
            "ThreadActivity"
        ];
    };
    Util.getFileUrl = function (fileProperty, fileId, ic3Info) {
        var fileInfo = fileProperty.fileInfo;
        var fileUrl;
        if (fileInfo && fileInfo.fileUrl) {
            fileUrl = fileInfo.fileUrl;
        }
        else if (fileId) {
            var isFileImage = Util.isImageType(fileProperty.fileType);
            fileUrl = ServiceEndpointHelper_1.default.getAmsObjectContentUrl(fileId, ic3Info.RegionGtms, isFileImage);
        }
        return fileUrl;
    };
    Util.isDocumentTypeImage = function (contentType) {
        return contentType.indexOf(Constants_1.default.Image) !== -1;
    };
    Util.getDomainRegexp = function () {
        return new RegExp(/^(https?:.+?\.microsoft\.com)/i);
    };
    Util.parseDomain = function (url) {
        var match = url.match(Util.getDomainRegexp());
        if (match) {
            return match[1];
        }
        return null;
    };
    Util.parseChatServiceHostUrl = function (url) {
        return Util.parseDomain(url);
    };
    Util.shouldRetryOnFailure = function (status) {
        return (status !== HttpCode_1.default.Accepted && status !== HttpCode_1.default.Created);
    };
    return Util;
}());
exports.default = Util;
//# sourceMappingURL=Util.js.map