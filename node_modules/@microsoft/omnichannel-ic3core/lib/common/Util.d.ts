import IFileMetadata from "../model/IFileMetadata";
import IIC3FileProperty from "../interfaces/IIC3FileProperty";
import IIC3Info from "../interfaces/IIC3Info";
import IIC3Message from "../interfaces/IIC3Message";
import IIC3Thread from "../interfaces/IIC3Thread";
import IMessagePayload from "../model/IMessagePayload";
import IMessageProperties from "../model/IMessageProperties";
import IKeyValuePair from "../model/IKeyValuePair";
import IRawBotMessage from "../interfaces/IRawBotMessage";
import IRawMessage from "../model/IRawMessage";
import IRawThread from "../interfaces/IRawThread";
import PersonType from "../model/PersonType";
import ResourceType from "../model/ResourceType";
import TypingStatus from "../model/TypingStatus";
export default class Util {
    static createMessageData(message: IRawMessage): IMessagePayload;
    static createBaseMessageData(messagetype: string, contenttype: string, content: string): IMessagePayload;
    static getMessageProperties(message: IRawMessage): IKeyValuePair;
    static createTypingStatusThreadMessageData(typingStatus: TypingStatus, optionalProperties?: IMessageProperties): IMessagePayload;
    static createBotMessageData(conversationId: string, message: IRawBotMessage): string;
    static createFileMessage(filemetadata: IFileMetadata, ic3Info: IIC3Info, message: IRawMessage): IMessagePayload;
    static createFileMessageProperties(fileInfo: IFileMetadata, ic3Info: IIC3Info, message: IRawMessage): IKeyValuePair;
    static createFileProperty(fileInfo: IFileMetadata, ic3Info: IIC3Info): IIC3FileProperty;
    static getNameAndExtension(filename: string): {
        name: string;
        extension: string;
    };
    static createIRawMessage(message: IIC3Message, ic3Info: IIC3Info, resourceType?: ResourceType): IRawMessage;
    static createIRawThread(message: IIC3Thread): IRawThread;
    static getConversationIdFromUrl(url: any): any;
    static isSystemMessage(message: IIC3Message): boolean;
    static getPersonType(personId: string): PersonType;
    static isImageType(fileType: string): boolean;
    private static getMessageType;
    private static getMessageContentType;
    private static getSystemMessageTypes;
    private static getFileUrl;
    static isDocumentTypeImage(contentType: string): boolean;
    static getDomainRegexp(): RegExp;
    static parseDomain(url: string): string | null;
    static parseChatServiceHostUrl(url: string): string;
    static shouldRetryOnFailure(status: number): boolean;
}
