"use strict";
/* eslint-disable @typescript-eslint/no-explicit-any */
Object.defineProperty(exports, "__esModule", { value: true });
var HttpHeaders_1 = require("../http/HttpHeaders");
var Utilities = /** @class */ (function () {
    function Utilities() {
    }
    Utilities.isNullOrEmptyString = function (s) {
        return Utilities.isNullOrUndefined(s) || s === "";
    };
    Utilities.isNullOrUndefinedOrEmptyArray = function (obj) {
        return Utilities.isNullOrUndefined(obj) || obj.length === 0;
    };
    Utilities.isNullOrUndefined = function (obj) {
        return (obj === null || obj === undefined);
    };
    Utilities.isPrimitiveString = function (obj) {
        return (typeof obj === "string");
    };
    Utilities.convertStringToBoolean = function (input) {
        return (!Utilities.isNullOrUndefined(input) && input.toLowerCase() === "true");
    };
    Utilities.sanitizeUrlWithBackSlash = function (url) {
        return url.endsWith("/") ? url : url + "/";
    };
    Utilities.getRegistrationTokenValue = function (registrationTokenHeader) {
        var regToken = registrationTokenHeader.match(/registrationToken=(.+); expires=(\d+)/);
        if (regToken && regToken.length >= 2) {
            return HttpHeaders_1.default.RegistrationTokenHeaderValue + regToken[1];
        }
        return "";
    };
    Utilities.addQueryParametersToPath = function (basePath, queryParameters) {
        var finalPath = basePath;
        if (!Utilities.isNullOrUndefined(queryParameters)) {
            if (!(finalPath.indexOf("?") >= 0)) {
                finalPath += "?";
            }
            for (var queryParamKey in queryParameters) {
                if (queryParameters.hasOwnProperty(queryParamKey)) { // eslint-disable-line no-prototype-builtins
                    var queryParamData = queryParamKey + "=" + queryParameters[queryParamKey]; // eslint-disable-line security/detect-object-injection
                    if (finalPath[finalPath.length - 1] !== "?") {
                        queryParamData = "&" + queryParamData;
                    }
                    finalPath += queryParamData;
                }
            }
        }
        return finalPath;
    };
    Utilities.getResponseHeader = function (jqXHR, headerName) {
        var headerValue;
        if (!Utilities.isNullOrUndefined(jqXHR)) {
            headerValue = jqXHR.headers[headerName]; // eslint-disable-line security/detect-object-injection
        }
        return headerValue;
    };
    /**
     * Creates a timer with current time as the start time
     * Returns an ITimer instance
     * Use the milliSecondsElapsed property to get the time ellapsed since the timer was started
     * @returns {ITimer} An ITimer instance
     */
    Utilities.timer = function () {
        var timeStart = new Date().getTime();
        return {
            get milliSecondsElapsed() {
                var ms = (new Date().getTime() - timeStart);
                return ms;
            }
        };
    };
    Utilities.concatArrays = function (arr1, arr2) {
        if (!Utilities.isNullOrUndefined(arr1) && !Utilities.isNullOrUndefined(arr2)) {
            arr2.forEach(function (entry) {
                arr1.push(entry);
            });
        }
    };
    return Utilities;
}());
exports.default = Utilities;
//# sourceMappingURL=Utilities.js.map