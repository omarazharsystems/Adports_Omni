"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var API_1 = require("./API");
var fetchClientId_1 = require("./utils/fetchClientId");
var fetchDebugConfig_1 = require("./utils/fetchDebugConfig");
var fetchTelemetryConfig_1 = require("./utils/fetchTelemetryConfig");
var PostMessageEventName_1 = require("./PostMessageEventName");
var PostMessageEventStatus_1 = require("./PostMessageEventStatus");
var PostMessageEventType_1 = require("./PostMessageEventType");
var ScenarioMarker_1 = require("./telemetry/ScenarioMarker");
var AMSLogger_1 = require("./AMSLogger");
var extractFileExtension_1 = require("./utils/extractFileExtension");
var IframeCommunicator = /** @class */ (function () {
    function IframeCommunicator(clientId) {
        var _this = this;
        this.clientId = clientId;
        this.sourceWindow = window;
        this.targetWindow = window.parent;
        this.debug = false;
        this.telemetryEnabled = false;
        this.logger = {
            logClientSdkTelemetryEvent: function (logLevel, event) {
                _this.sendTelemetry(logLevel, event);
            }
        };
        this.scenarioMarker = new ScenarioMarker_1.default(new AMSLogger_1.default(this.logger));
    }
    IframeCommunicator.prototype.setDebug = function (flag) {
        this.debug = flag;
    };
    IframeCommunicator.prototype.enableTelemetry = function () {
        this.debug && console.log("[IframeCommunicator][enableTelemetry]");
        this.telemetryEnabled = true;
    };
    IframeCommunicator.prototype.initialize = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                this.onMessageEvent(function (event) { return _this.handleEvent(event); }); // eslint-disable-line @typescript-eslint/no-explicit-any
                // Posts message for FramedClient to find target window for posting upcoming messages
                this.postMessage(PostMessageEventType_1.default.Response, PostMessageEventName_1.default.IframeLoaded, {}, PostMessageEventStatus_1.default.Success);
                return [2 /*return*/];
            });
        });
    };
    IframeCommunicator.prototype.onMessageEvent = function (cb) {
        this.sourceWindow.addEventListener("message", cb);
    };
    IframeCommunicator.prototype.postMessage = function (eventType, eventName, data, eventStatus) {
        if (data === void 0) { data = {}; }
        this.targetWindow.postMessage(__assign({ clientId: this.clientId, eventType: eventType,
            eventName: eventName,
            eventStatus: eventStatus }, data), '*');
    };
    IframeCommunicator.prototype.handleEvent = function (event) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
        return __awaiter(this, void 0, void 0, function () {
            var data, response, postMessageData, error_1, response, postMessageData, error_2, response, postMessageData, error_3, response, postMessageData, error_4, response, postMessageData, error_5;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        if (event.data.clientId !== this.clientId) {
                            return [2 /*return*/];
                        }
                        if (!(event.data.eventType === PostMessageEventType_1.default.Request)) return [3 /*break*/, 24];
                        this.debug && console.log("[IframeCommunicator][Request]");
                        data = event.data;
                        if (!(event.data.eventName === PostMessageEventName_1.default.SkypeTokenAuth)) return [3 /*break*/, 5];
                        this.scenarioMarker.startScenario(PostMessageEventName_1.default.SkypeTokenAuth, {
                            AMSClientRuntimeId: data.runtimeId,
                            ChatId: data.chatToken.chatId
                        });
                        _u.label = 1;
                    case 1:
                        _u.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, API_1.default.skypeTokenAuth(data.chatToken)];
                    case 2:
                        response = _u.sent();
                        postMessageData = {
                            requestId: data.requestId,
                            eventType: PostMessageEventType_1.default.Response,
                            eventName: data.eventName,
                            eventStatus: PostMessageEventStatus_1.default.Success
                        };
                        if (!response.ok) {
                            postMessageData.eventStatus = PostMessageEventStatus_1.default.Failure;
                            this.scenarioMarker.failScenario(PostMessageEventName_1.default.SkypeTokenAuth, {
                                AMSClientRuntimeId: data.runtimeId,
                                ChatId: data.chatToken.chatId,
                                ExceptionDetails: {
                                    status: response.status
                                }
                            });
                        }
                        else {
                            this.scenarioMarker.completeScenario(PostMessageEventName_1.default.SkypeTokenAuth, {
                                AMSClientRuntimeId: data.runtimeId,
                                ChatId: data.chatToken.chatId,
                            });
                        }
                        this.postMessage(PostMessageEventType_1.default.Response, PostMessageEventName_1.default.SkypeTokenAuth, postMessageData, PostMessageEventStatus_1.default.Success);
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _u.sent();
                        this.postMessage(PostMessageEventType_1.default.Response, PostMessageEventName_1.default.SkypeTokenAuth, {}, PostMessageEventStatus_1.default.Failure);
                        this.scenarioMarker.failScenario(PostMessageEventName_1.default.SkypeTokenAuth, {
                            AMSClientRuntimeId: data.runtimeId,
                            ChatId: data.chatToken.chatId,
                            ExceptionDetails: error_1
                        });
                        return [3 /*break*/, 4];
                    case 4: return [3 /*break*/, 24];
                    case 5:
                        if (!(event.data.eventName === PostMessageEventName_1.default.CreateObject)) return [3 /*break*/, 10];
                        this.scenarioMarker.startScenario(PostMessageEventName_1.default.CreateObject, {
                            AMSClientRuntimeId: data.runtimeId,
                            ChatId: data.chatToken.chatId,
                            MimeType: data.file.type,
                            FileExtension: extractFileExtension_1.default(data.file.name)
                        });
                        _u.label = 6;
                    case 6:
                        _u.trys.push([6, 8, , 9]);
                        return [4 /*yield*/, API_1.default.createObject(data.id, data.file, data.chatToken)];
                    case 7:
                        response = _u.sent();
                        postMessageData = {
                            requestId: data.requestId,
                            eventType: PostMessageEventType_1.default.Response,
                            eventName: data.eventName,
                            eventStatus: PostMessageEventStatus_1.default.Success,
                            response: response,
                        };
                        this.scenarioMarker.completeScenario(PostMessageEventName_1.default.CreateObject, {
                            AMSClientRuntimeId: data.runtimeId,
                            ChatId: data.chatToken.chatId,
                            DocumentId: response === null || response === void 0 ? void 0 : response.id,
                            MimeType: data.file.type,
                            FileExtension: extractFileExtension_1.default(data.file.name)
                        });
                        this.postMessage(PostMessageEventType_1.default.Response, PostMessageEventName_1.default.CreateObject, postMessageData, PostMessageEventStatus_1.default.Success);
                        return [3 /*break*/, 9];
                    case 8:
                        error_2 = _u.sent();
                        this.postMessage(PostMessageEventType_1.default.Response, PostMessageEventName_1.default.CreateObject, {}, PostMessageEventStatus_1.default.Failure);
                        this.scenarioMarker.failScenario(PostMessageEventName_1.default.CreateObject, {
                            AMSClientRuntimeId: data.runtimeId,
                            ChatId: data.chatToken.chatId,
                            MimeType: data.file.type,
                            FileExtension: extractFileExtension_1.default(data.file.name),
                            ExceptionDetails: error_2
                        });
                        return [3 /*break*/, 9];
                    case 9: return [3 /*break*/, 24];
                    case 10:
                        if (!(event.data.eventName === PostMessageEventName_1.default.UploadDocument)) return [3 /*break*/, 15];
                        this.scenarioMarker.startScenario(PostMessageEventName_1.default.UploadDocument, {
                            AMSClientRuntimeId: data.runtimeId,
                            ChatId: data.chatToken.chatId,
                            DocumentId: data.documentId,
                            MimeType: data.file.type,
                            FileExtension: extractFileExtension_1.default(data.file.name)
                        });
                        _u.label = 11;
                    case 11:
                        _u.trys.push([11, 13, , 14]);
                        return [4 /*yield*/, API_1.default.uploadDocument(data.documentId, data.file, data.chatToken)];
                    case 12:
                        response = _u.sent();
                        postMessageData = {
                            requestId: data.requestId,
                            eventType: PostMessageEventType_1.default.Response,
                            eventName: data.eventName,
                            eventStatus: PostMessageEventStatus_1.default.Success,
                            response: response,
                            data: response,
                        };
                        this.scenarioMarker.completeScenario(PostMessageEventName_1.default.UploadDocument, {
                            AMSClientRuntimeId: data.runtimeId,
                            ChatId: data.chatToken.chatId,
                            DocumentId: data.documentId,
                            MimeType: data.file.type,
                            FileExtension: extractFileExtension_1.default(data.file.name)
                        });
                        this.postMessage(PostMessageEventType_1.default.Response, PostMessageEventName_1.default.UploadDocument, postMessageData, PostMessageEventStatus_1.default.Success);
                        return [3 /*break*/, 14];
                    case 13:
                        error_3 = _u.sent();
                        this.postMessage(PostMessageEventType_1.default.Response, PostMessageEventName_1.default.UploadDocument, {}, PostMessageEventStatus_1.default.Failure);
                        this.scenarioMarker.failScenario(PostMessageEventName_1.default.UploadDocument, {
                            AMSClientRuntimeId: data.runtimeId,
                            ChatId: data.chatToken.chatId,
                            DocumentId: data.documentId,
                            MimeType: data.file.type,
                            FileExtension: extractFileExtension_1.default(data.file.name),
                            ExceptionDetails: error_3
                        });
                        return [3 /*break*/, 14];
                    case 14: return [3 /*break*/, 24];
                    case 15:
                        if (!(event.data.eventName === PostMessageEventName_1.default.GetViewStatus)) return [3 /*break*/, 20];
                        this.scenarioMarker.startScenario(PostMessageEventName_1.default.GetViewStatus, {
                            AMSClientRuntimeId: data.runtimeId,
                            ChatId: data.chatToken.chatId,
                            DocumentId: (_a = data.fileMetadata) === null || _a === void 0 ? void 0 : _a.id,
                            MimeType: (_b = data.fileMetadata) === null || _b === void 0 ? void 0 : _b.type,
                            FileExtension: extractFileExtension_1.default((_c = data.fileMetadata) === null || _c === void 0 ? void 0 : _c.name),
                        });
                        _u.label = 16;
                    case 16:
                        _u.trys.push([16, 18, , 19]);
                        return [4 /*yield*/, API_1.default.getViewStatus(data.fileMetadata, data.chatToken)];
                    case 17:
                        response = _u.sent();
                        postMessageData = {
                            requestId: data.requestId,
                            eventType: PostMessageEventType_1.default.Response,
                            eventName: data.eventName,
                            eventStatus: PostMessageEventStatus_1.default.Success,
                            response: response,
                            data: response,
                        };
                        this.scenarioMarker.completeScenario(PostMessageEventName_1.default.GetViewStatus, {
                            AMSClientRuntimeId: data.runtimeId,
                            ChatId: data.chatToken.chatId,
                            DocumentId: (_d = data.fileMetadata) === null || _d === void 0 ? void 0 : _d.id,
                            MimeType: (_e = data.fileMetadata) === null || _e === void 0 ? void 0 : _e.type,
                            FileExtension: extractFileExtension_1.default((_f = data.fileMetadata) === null || _f === void 0 ? void 0 : _f.name),
                        });
                        this.postMessage(PostMessageEventType_1.default.Response, PostMessageEventName_1.default.GetViewStatus, postMessageData, PostMessageEventStatus_1.default.Success);
                        return [3 /*break*/, 19];
                    case 18:
                        error_4 = _u.sent();
                        this.postMessage(PostMessageEventType_1.default.Response, PostMessageEventName_1.default.GetViewStatus, {}, PostMessageEventStatus_1.default.Failure);
                        this.scenarioMarker.failScenario(PostMessageEventName_1.default.GetViewStatus, {
                            AMSClientRuntimeId: data.runtimeId,
                            ChatId: data.chatToken.chatId,
                            DocumentId: (_g = data.fileMetadata) === null || _g === void 0 ? void 0 : _g.id,
                            MimeType: (_h = data.fileMetadata) === null || _h === void 0 ? void 0 : _h.type,
                            FileExtension: extractFileExtension_1.default((_j = data.fileMetadata) === null || _j === void 0 ? void 0 : _j.name),
                            ExceptionDetails: error_4
                        });
                        return [3 /*break*/, 19];
                    case 19: return [3 /*break*/, 24];
                    case 20:
                        if (!(event.data.eventName === PostMessageEventName_1.default.GetView)) return [3 /*break*/, 24];
                        this.scenarioMarker.startScenario(PostMessageEventName_1.default.GetView, {
                            AMSClientRuntimeId: data.runtimeId,
                            ChatId: data.chatToken.chatId,
                            DocumentId: (_k = data.fileMetadata) === null || _k === void 0 ? void 0 : _k.id,
                            MimeType: (_l = data.fileMetadata) === null || _l === void 0 ? void 0 : _l.type,
                            FileExtension: extractFileExtension_1.default((_m = data.fileMetadata) === null || _m === void 0 ? void 0 : _m.name),
                        });
                        _u.label = 21;
                    case 21:
                        _u.trys.push([21, 23, , 24]);
                        return [4 /*yield*/, API_1.default.getView(data.fileMetadata, data.viewLocation, data.chatToken)];
                    case 22:
                        response = _u.sent();
                        postMessageData = {
                            requestId: data.requestId,
                            eventType: PostMessageEventType_1.default.Response,
                            eventName: data.eventName,
                            eventStatus: PostMessageEventStatus_1.default.Success,
                            response: response,
                            data: response,
                        };
                        this.scenarioMarker.completeScenario(PostMessageEventName_1.default.GetView, {
                            AMSClientRuntimeId: data.runtimeId,
                            ChatId: data.chatToken.chatId,
                            DocumentId: (_o = data.fileMetadata) === null || _o === void 0 ? void 0 : _o.id,
                            MimeType: (_p = data.fileMetadata) === null || _p === void 0 ? void 0 : _p.type,
                            FileExtension: extractFileExtension_1.default((_q = data.fileMetadata) === null || _q === void 0 ? void 0 : _q.name),
                        });
                        this.postMessage(PostMessageEventType_1.default.Response, PostMessageEventName_1.default.GetView, postMessageData, PostMessageEventStatus_1.default.Success);
                        return [3 /*break*/, 24];
                    case 23:
                        error_5 = _u.sent();
                        this.postMessage(PostMessageEventType_1.default.Response, PostMessageEventName_1.default.GetView, {}, PostMessageEventStatus_1.default.Failure);
                        this.scenarioMarker.failScenario(PostMessageEventName_1.default.GetView, {
                            AMSClientRuntimeId: data.runtimeId,
                            ChatId: data.chatToken.chatId,
                            DocumentId: (_r = data.fileMetadata) === null || _r === void 0 ? void 0 : _r.id,
                            MimeType: (_s = data.fileMetadata) === null || _s === void 0 ? void 0 : _s.type,
                            FileExtension: extractFileExtension_1.default((_t = data.fileMetadata) === null || _t === void 0 ? void 0 : _t.name),
                            ExceptionDetails: error_5
                        });
                        return [3 /*break*/, 24];
                    case 24: return [2 /*return*/];
                }
            });
        });
    };
    IframeCommunicator.prototype.sendTelemetry = function (logLevel, logData) {
        var data = {
            logLevel: logLevel,
            logData: logData
        };
        if (this.telemetryEnabled) {
            this.postMessage(PostMessageEventType_1.default.Response, PostMessageEventName_1.default.SendTelemetry, data, PostMessageEventStatus_1.default.Success);
        }
    };
    return IframeCommunicator;
}());
exports.default = IframeCommunicator;
(function () {
    var clientId = fetchClientId_1.default();
    var telemetryConfig = fetchTelemetryConfig_1.default();
    var debugConfig = fetchDebugConfig_1.default();
    !debugConfig.disable && console.log("[IframeCommunicator][init]");
    var iframeCommunicator = new IframeCommunicator(clientId);
    iframeCommunicator.initialize();
    iframeCommunicator.setDebug(!debugConfig.disable);
    !telemetryConfig.disable && iframeCommunicator.enableTelemetry();
})();
//# sourceMappingURL=IframeCommunicator.js.map