"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var API_1 = require("./API");
var PostMessageEventName_1 = require("./PostMessageEventName");
var platform_1 = require("./utils/platform");
var ScenarioMarker_1 = require("./telemetry/ScenarioMarker");
var uuid_1 = require("./utils/uuid");
var extractFileExtension_1 = require("./utils/extractFileExtension");
var FramedlessClient = /** @class */ (function () {
    function FramedlessClient(logger) {
        if (logger === void 0) { logger = undefined; }
        this.runtimeId = uuid_1.uuidv4();
        this.debug = false;
        this.logger = logger;
        if (platform_1.default.isBrowser()) {
            console.error('FramedMode should be used on Web platform');
        }
        if (logger) {
            this.scenarioMarker = new ScenarioMarker_1.default(logger);
            this.scenarioMarker.setRuntimeId(this.runtimeId);
        }
    }
    /* istanbul ignore next */
    FramedlessClient.prototype.setDebug = function (flag) {
        this.debug = flag;
    };
    FramedlessClient.prototype.setup = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, Promise.resolve()];
            });
        });
    };
    FramedlessClient.prototype.initialize = function (initConfig) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        /* istanbul ignore next */
                        this.debug && console.log("[FramedlessClient][initialize]");
                        this.chatToken = initConfig.chatToken;
                        return [4 /*yield*/, this.skypeTokenAuth()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    FramedlessClient.prototype.skypeTokenAuth = function (chatToken) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        if (chatToken === void 0) { chatToken = null; }
        return __awaiter(this, void 0, void 0, function () {
            var response, error_1;
            return __generator(this, function (_j) {
                switch (_j.label) {
                    case 0:
                        (_a = this.scenarioMarker) === null || _a === void 0 ? void 0 : _a.startScenario(PostMessageEventName_1.default.SkypeTokenAuth, {
                            AMSClientRuntimeId: this.runtimeId,
                            ChatId: chatToken ? chatToken.chatId : (_b = this.chatToken) === null || _b === void 0 ? void 0 : _b.chatId,
                        });
                        _j.label = 1;
                    case 1:
                        _j.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, API_1.default.skypeTokenAuth(chatToken || this.chatToken)];
                    case 2:
                        response = _j.sent();
                        if (!response.ok) {
                            (_c = this.scenarioMarker) === null || _c === void 0 ? void 0 : _c.failScenario(PostMessageEventName_1.default.SkypeTokenAuth, {
                                AMSClientRuntimeId: this.runtimeId,
                                ChatId: chatToken ? chatToken.chatId : (_d = this.chatToken) === null || _d === void 0 ? void 0 : _d.chatId,
                                ExceptionDetails: {
                                    status: response.status
                                }
                            });
                        }
                        (_e = this.scenarioMarker) === null || _e === void 0 ? void 0 : _e.completeScenario(PostMessageEventName_1.default.SkypeTokenAuth, {
                            AMSClientRuntimeId: this.runtimeId,
                            ChatId: chatToken ? chatToken.chatId : (_f = this.chatToken) === null || _f === void 0 ? void 0 : _f.chatId
                        });
                        return [2 /*return*/, response];
                    case 3:
                        error_1 = _j.sent();
                        (_g = this.scenarioMarker) === null || _g === void 0 ? void 0 : _g.failScenario(PostMessageEventName_1.default.SkypeTokenAuth, {
                            AMSClientRuntimeId: this.runtimeId,
                            ChatId: chatToken ? chatToken.chatId : (_h = this.chatToken) === null || _h === void 0 ? void 0 : _h.chatId,
                            ExceptionDetails: error_1
                        });
                        throw new Error('skypeTokenAuth');
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    FramedlessClient.prototype.createObject = function (id, file, chatToken, supportedImagesMimeTypes) {
        var _a, _b, _c, _d, _e, _f;
        if (chatToken === void 0) { chatToken = null; }
        if (supportedImagesMimeTypes === void 0) { supportedImagesMimeTypes = []; }
        return __awaiter(this, void 0, void 0, function () {
            var response, error_2;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        (_a = this.scenarioMarker) === null || _a === void 0 ? void 0 : _a.startScenario(PostMessageEventName_1.default.CreateObject, {
                            AMSClientRuntimeId: this.runtimeId,
                            ChatId: chatToken ? chatToken.chatId : (_b = this.chatToken) === null || _b === void 0 ? void 0 : _b.chatId,
                            MimeType: file.type,
                            FileExtension: extractFileExtension_1.default(file.name)
                        });
                        _g.label = 1;
                    case 1:
                        _g.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, API_1.default.createObject(id, file, chatToken || this.chatToken, supportedImagesMimeTypes)];
                    case 2:
                        response = _g.sent();
                        (_c = this.scenarioMarker) === null || _c === void 0 ? void 0 : _c.completeScenario(PostMessageEventName_1.default.CreateObject, {
                            AMSClientRuntimeId: this.runtimeId,
                            ChatId: chatToken ? chatToken.chatId : (_d = this.chatToken) === null || _d === void 0 ? void 0 : _d.chatId,
                            DocumentId: response === null || response === void 0 ? void 0 : response.id,
                            MimeType: file.type,
                            FileExtension: extractFileExtension_1.default(file.name)
                        });
                        return [2 /*return*/, response];
                    case 3:
                        error_2 = _g.sent();
                        (_e = this.scenarioMarker) === null || _e === void 0 ? void 0 : _e.failScenario(PostMessageEventName_1.default.CreateObject, {
                            AMSClientRuntimeId: this.runtimeId,
                            ChatId: chatToken ? chatToken.chatId : (_f = this.chatToken) === null || _f === void 0 ? void 0 : _f.chatId,
                            MimeType: file.type,
                            FileExtension: extractFileExtension_1.default(file.name),
                            ExceptionDetails: error_2
                        });
                        throw new Error('createObject');
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    FramedlessClient.prototype.uploadDocument = function (documentId, file, chatToken, supportedImagesMimeTypes) {
        var _a, _b, _c, _d, _e, _f;
        if (chatToken === void 0) { chatToken = null; }
        if (supportedImagesMimeTypes === void 0) { supportedImagesMimeTypes = []; }
        return __awaiter(this, void 0, void 0, function () {
            var response, error_3;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        (_a = this.scenarioMarker) === null || _a === void 0 ? void 0 : _a.startScenario(PostMessageEventName_1.default.UploadDocument, {
                            AMSClientRuntimeId: this.runtimeId,
                            ChatId: chatToken ? chatToken.chatId : (_b = this.chatToken) === null || _b === void 0 ? void 0 : _b.chatId,
                            DocumentId: documentId,
                            MimeType: file.type,
                            FileExtension: extractFileExtension_1.default(file.name)
                        });
                        _g.label = 1;
                    case 1:
                        _g.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, API_1.default.uploadDocument(documentId, file, chatToken || this.chatToken, supportedImagesMimeTypes)];
                    case 2:
                        response = _g.sent();
                        (_c = this.scenarioMarker) === null || _c === void 0 ? void 0 : _c.completeScenario(PostMessageEventName_1.default.UploadDocument, {
                            AMSClientRuntimeId: this.runtimeId,
                            ChatId: chatToken ? chatToken.chatId : (_d = this.chatToken) === null || _d === void 0 ? void 0 : _d.chatId,
                            DocumentId: documentId,
                            MimeType: file.type,
                            FileExtension: extractFileExtension_1.default(file.name)
                        });
                        return [2 /*return*/, response];
                    case 3:
                        error_3 = _g.sent();
                        (_e = this.scenarioMarker) === null || _e === void 0 ? void 0 : _e.failScenario(PostMessageEventName_1.default.UploadDocument, {
                            AMSClientRuntimeId: this.runtimeId,
                            ChatId: chatToken ? chatToken.chatId : (_f = this.chatToken) === null || _f === void 0 ? void 0 : _f.chatId,
                            DocumentId: documentId,
                            MimeType: file.type,
                            FileExtension: extractFileExtension_1.default(file.name),
                            ExceptionDetails: error_3
                        });
                        throw new Error('uploadDocument');
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    FramedlessClient.prototype.getViewStatus = function (fileMetadata, chatToken, supportedImagesMimeTypes) {
        var _a, _b, _c, _d, _e, _f;
        if (chatToken === void 0) { chatToken = null; }
        if (supportedImagesMimeTypes === void 0) { supportedImagesMimeTypes = []; }
        return __awaiter(this, void 0, void 0, function () {
            var response, error_4;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        (_a = this.scenarioMarker) === null || _a === void 0 ? void 0 : _a.startScenario(PostMessageEventName_1.default.GetViewStatus, {
                            AMSClientRuntimeId: this.runtimeId,
                            ChatId: chatToken ? chatToken.chatId : (_b = this.chatToken) === null || _b === void 0 ? void 0 : _b.chatId,
                            DocumentId: fileMetadata === null || fileMetadata === void 0 ? void 0 : fileMetadata.id,
                            MimeType: fileMetadata === null || fileMetadata === void 0 ? void 0 : fileMetadata.type,
                            FileExtension: extractFileExtension_1.default((fileMetadata === null || fileMetadata === void 0 ? void 0 : fileMetadata.name) || '')
                        });
                        _g.label = 1;
                    case 1:
                        _g.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, API_1.default.getViewStatus(fileMetadata, chatToken || this.chatToken, supportedImagesMimeTypes)];
                    case 2:
                        response = _g.sent();
                        (_c = this.scenarioMarker) === null || _c === void 0 ? void 0 : _c.completeScenario(PostMessageEventName_1.default.GetViewStatus, {
                            AMSClientRuntimeId: this.runtimeId,
                            ChatId: chatToken ? chatToken.chatId : (_d = this.chatToken) === null || _d === void 0 ? void 0 : _d.chatId,
                            DocumentId: fileMetadata === null || fileMetadata === void 0 ? void 0 : fileMetadata.id,
                            MimeType: fileMetadata === null || fileMetadata === void 0 ? void 0 : fileMetadata.type,
                            FileExtension: extractFileExtension_1.default((fileMetadata === null || fileMetadata === void 0 ? void 0 : fileMetadata.name) || '')
                        });
                        return [2 /*return*/, response];
                    case 3:
                        error_4 = _g.sent();
                        (_e = this.scenarioMarker) === null || _e === void 0 ? void 0 : _e.failScenario(PostMessageEventName_1.default.GetViewStatus, {
                            AMSClientRuntimeId: this.runtimeId,
                            ChatId: chatToken ? chatToken.chatId : (_f = this.chatToken) === null || _f === void 0 ? void 0 : _f.chatId,
                            DocumentId: fileMetadata === null || fileMetadata === void 0 ? void 0 : fileMetadata.id,
                            MimeType: fileMetadata === null || fileMetadata === void 0 ? void 0 : fileMetadata.type,
                            FileExtension: extractFileExtension_1.default((fileMetadata === null || fileMetadata === void 0 ? void 0 : fileMetadata.name) || ''),
                            ExceptionDetails: error_4
                        });
                        throw new Error('getViewStatus');
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    FramedlessClient.prototype.getView = function (fileMetadata, viewLocation, chatToken, supportedImagesMimeTypes) {
        var _a, _b, _c, _d, _e, _f;
        if (chatToken === void 0) { chatToken = null; }
        if (supportedImagesMimeTypes === void 0) { supportedImagesMimeTypes = []; }
        return __awaiter(this, void 0, void 0, function () {
            var response, error_5;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        (_a = this.scenarioMarker) === null || _a === void 0 ? void 0 : _a.startScenario(PostMessageEventName_1.default.GetView, {
                            AMSClientRuntimeId: this.runtimeId,
                            ChatId: chatToken ? chatToken.chatId : (_b = this.chatToken) === null || _b === void 0 ? void 0 : _b.chatId,
                            DocumentId: fileMetadata === null || fileMetadata === void 0 ? void 0 : fileMetadata.id,
                            MimeType: fileMetadata === null || fileMetadata === void 0 ? void 0 : fileMetadata.type,
                            FileExtension: extractFileExtension_1.default((fileMetadata === null || fileMetadata === void 0 ? void 0 : fileMetadata.name) || '')
                        });
                        _g.label = 1;
                    case 1:
                        _g.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, API_1.default.getView(fileMetadata, viewLocation, chatToken || this.chatToken, supportedImagesMimeTypes)];
                    case 2:
                        response = _g.sent();
                        (_c = this.scenarioMarker) === null || _c === void 0 ? void 0 : _c.completeScenario(PostMessageEventName_1.default.GetView, {
                            AMSClientRuntimeId: this.runtimeId,
                            ChatId: chatToken ? chatToken.chatId : (_d = this.chatToken) === null || _d === void 0 ? void 0 : _d.chatId,
                            DocumentId: fileMetadata === null || fileMetadata === void 0 ? void 0 : fileMetadata.id,
                            MimeType: fileMetadata === null || fileMetadata === void 0 ? void 0 : fileMetadata.type,
                            FileExtension: extractFileExtension_1.default((fileMetadata === null || fileMetadata === void 0 ? void 0 : fileMetadata.name) || '')
                        });
                        return [2 /*return*/, response];
                    case 3:
                        error_5 = _g.sent();
                        (_e = this.scenarioMarker) === null || _e === void 0 ? void 0 : _e.failScenario(PostMessageEventName_1.default.GetView, {
                            AMSClientRuntimeId: this.runtimeId,
                            ChatId: chatToken ? chatToken.chatId : (_f = this.chatToken) === null || _f === void 0 ? void 0 : _f.chatId,
                            DocumentId: fileMetadata === null || fileMetadata === void 0 ? void 0 : fileMetadata.id,
                            MimeType: fileMetadata === null || fileMetadata === void 0 ? void 0 : fileMetadata.type,
                            FileExtension: extractFileExtension_1.default((fileMetadata === null || fileMetadata === void 0 ? void 0 : fileMetadata.name) || ''),
                            ExceptionDetails: error_5
                        });
                        throw new Error('getView');
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    FramedlessClient.prototype.fetchBlob = function (contentUrl) {
        return __awaiter(this, void 0, void 0, function () {
            var response, blobResponse, error_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, fetch(contentUrl)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.blob()];
                    case 2:
                        blobResponse = _a.sent();
                        return [2 /*return*/, blobResponse];
                    case 3:
                        error_6 = _a.sent();
                        console.log(error_6);
                        throw new Error('fetchBlob');
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return FramedlessClient;
}());
exports.default = FramedlessClient;
//# sourceMappingURL=FramedlessClient.js.map