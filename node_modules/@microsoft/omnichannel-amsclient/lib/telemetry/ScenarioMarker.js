"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var LogLevel_1 = require("../LogLevel");
var config_1 = require("../config");
var EventMarker_1 = require("./EventMarker");
var StopWatch_1 = require("./StopWatch");
var ScenarioMarker = /** @class */ (function () {
    function ScenarioMarker(logger) {
        this.runtimeId = '';
        this.sdkVersion = '';
        this.logger = logger;
        this.sdkVersion = config_1.sdkVersion;
        this.telemetryEvents = new Map();
    }
    ScenarioMarker.prototype.setRuntimeId = function (runtimeId) {
        this.runtimeId = runtimeId;
    };
    ScenarioMarker.prototype.startScenario = function (event, additionalProperties) {
        if (additionalProperties === void 0) { additionalProperties = {}; }
        if (!this.telemetryEvents.has(event)) {
            var stopWatch = new StopWatch_1.default();
            stopWatch.start();
            this.telemetryEvents.set(event, stopWatch);
        }
        var properties = __assign({ AMSClientRuntimeId: this.runtimeId, Event: EventMarker_1.startEvent(event), AMSClientVersion: this.sdkVersion }, additionalProperties);
        this.logger.log(LogLevel_1.default.INFO, event, properties);
    };
    ScenarioMarker.prototype.failScenario = function (event, additionalProperties) {
        if (additionalProperties === void 0) { additionalProperties = {}; }
        if (!this.telemetryEvents.has(event)) {
            console.warn("'" + event + "' event has not started.");
            return;
        }
        var stopWatch = this.telemetryEvents.get(event);
        this.telemetryEvents.delete(event);
        var properties = __assign({ AMSClientRuntimeId: this.runtimeId, Event: EventMarker_1.failEvent(event), AMSClientVersion: this.sdkVersion, ElapsedTimeInMilliseconds: stopWatch.stop() }, additionalProperties);
        this.logger.log(LogLevel_1.default.ERROR, event, properties);
    };
    ScenarioMarker.prototype.completeScenario = function (event, additionalProperties) {
        if (additionalProperties === void 0) { additionalProperties = {}; }
        if (!this.telemetryEvents.has(event)) {
            console.warn("'" + event + "' event has not started.");
            return;
        }
        var stopWatch = this.telemetryEvents.get(event);
        this.telemetryEvents.delete(event);
        var properties = __assign({ AMSClientRuntimeId: this.runtimeId, Event: EventMarker_1.completeEvent(event), AMSClientVersion: this.sdkVersion, ElapsedTimeInMilliseconds: stopWatch.stop() }, additionalProperties);
        this.logger.log(LogLevel_1.default.INFO, event, properties);
    };
    return ScenarioMarker;
}());
exports.default = ScenarioMarker;
//# sourceMappingURL=ScenarioMarker.js.map