"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var GlobalConfiguration_1 = require("./GlobalConfiguration");
var AmsApiOperation;
(function (AmsApiOperation) {
    AmsApiOperation["Create"] = "Create";
    AmsApiOperation["Upload"] = "Upload";
})(AmsApiOperation || (AmsApiOperation = {}));
var DocumentTypes;
(function (DocumentTypes) {
    DocumentTypes["CreateDocumentType"] = "sharing/file";
    DocumentTypes["UploadDocumentType"] = "original";
    DocumentTypes["CreateImageType"] = "pish/image";
    DocumentTypes["UploadImageType"] = "imgpsh";
})(DocumentTypes || (DocumentTypes = {}));
var HeadersName;
(function (HeadersName) {
    HeadersName["Accept"] = "Accept";
    HeadersName["AcceptEncoding"] = "Accept-Encoding";
    HeadersName["BehaviorOverride"] = "BehaviorOverride";
    HeadersName["Authorization"] = "Authorization";
    HeadersName["ClientVersion"] = "X-MS-Client-Version";
    HeadersName["ContentType"] = "Content-Type";
})(HeadersName || (HeadersName = {}));
var MIMEType;
(function (MIMEType) {
    MIMEType["applicationFormUrlEncoded"] = "application/x-www-form-urlencoded";
    MIMEType["applicationJson"] = "application/json";
})(MIMEType || (MIMEType = {}));
var AMSFileStatus;
(function (AMSFileStatus) {
    AMSFileStatus["Expired"] = "expired";
    AMSFileStatus["Failed"] = "failed";
    AMSFileStatus["InProgress"] = "in progress";
    AMSFileStatus["Malware"] = "malware";
    AMSFileStatus["Ready"] = "ready";
})(AMSFileStatus || (AMSFileStatus = {}));
var defaultSupportedImagesMimeTypes = ["image/jpeg", "image/png", "image/gif"];
var patchChatToken = function (chatToken) {
    // Temporary
    if (!chatToken.regionGTMS) {
        chatToken.regionGTMS = {
            ams: 'https://us-api.asm.skype.com'
        };
    }
};
var createDefaultHeaders = function (token) {
    var _a;
    return _a = {},
        _a[HeadersName.Authorization] = "skype_token " + token,
        _a[HeadersName.ClientVersion] = 'os=Windows; osVer=10; proc=Win32; lcid=en-us; deviceType=1; country=IN; clientName=swc; clientVer=912/0.106.0.34//swc',
        _a;
};
var skypeTokenAuth = function (chatToken) { return __awaiter(void 0, void 0, void 0, function () {
    var url, headers, request, response, error_1;
    var _a;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                GlobalConfiguration_1.default.debug && console.log("[API][skypeTokenAuth]");
                patchChatToken(chatToken);
                url = (chatToken.amsEndpoint || ((_b = chatToken.regionGTMS) === null || _b === void 0 ? void 0 : _b.ams)) + "/v1/skypetokenauth";
                headers = (_a = {},
                    _a[HeadersName.Authorization] = "skype_token " + chatToken.token,
                    _a[HeadersName.Accept] = MIMEType.applicationJson,
                    _a[HeadersName.BehaviorOverride] = 'redirectAs404',
                    _a[HeadersName.ContentType] = MIMEType.applicationFormUrlEncoded,
                    _a);
                request = {
                    headers: headers,
                    method: 'POST',
                    body: "skypetoken=" + chatToken.token
                };
                _c.label = 1;
            case 1:
                _c.trys.push([1, 3, , 4]);
                return [4 /*yield*/, fetch(url, request)];
            case 2:
                response = _c.sent();
                return [2 /*return*/, response];
            case 3:
                error_1 = _c.sent();
                !GlobalConfiguration_1.default.silentError && console.log(error_1);
                throw new Error('AMSAuth');
            case 4: return [2 /*return*/];
        }
    });
}); };
var defineSupportedImagesMimeTypes = function (supportedImagesMimeTypes) {
    return (supportedImagesMimeTypes && supportedImagesMimeTypes.length > 0) ?
        supportedImagesMimeTypes :
        defaultSupportedImagesMimeTypes;
};
var defineTypeForOperation = function (fileType, apiOperation, supportedImagesMimeTypes) {
    var mimeTypes = defineSupportedImagesMimeTypes(supportedImagesMimeTypes);
    if (mimeTypes.includes(fileType.toLowerCase())) {
        return apiOperation === AmsApiOperation.Create ? DocumentTypes.CreateImageType : DocumentTypes.UploadImageType;
    }
    return apiOperation === AmsApiOperation.Create ? DocumentTypes.CreateDocumentType : DocumentTypes.UploadDocumentType;
};
var createObject = function (id, file, chatToken, supportedImagesMimeTypes) { return __awaiter(void 0, void 0, void 0, function () {
    var permissions, typeObject, body, url, headers, request, response, jsonResponse, error_2;
    var _a, _b;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                GlobalConfiguration_1.default.debug && console.log("[API][createObject]");
                permissions = (_a = {},
                    _a[id] = ['read'],
                    _a);
                typeObject = defineTypeForOperation(file.type, AmsApiOperation.Create, supportedImagesMimeTypes);
                body = {
                    filename: file.name,
                    permissions: permissions,
                    type: typeObject
                };
                patchChatToken(chatToken);
                url = (chatToken.amsEndpoint || ((_c = chatToken === null || chatToken === void 0 ? void 0 : chatToken.regionGTMS) === null || _c === void 0 ? void 0 : _c.ams)) + "/v1/objects";
                headers = __assign(__assign({}, createDefaultHeaders(chatToken.token)), (_b = {}, _b[HeadersName.ContentType] = MIMEType.applicationJson, _b));
                request = {
                    headers: headers,
                    method: 'POST',
                    body: JSON.stringify(body),
                    credentials: 'include'
                };
                _d.label = 1;
            case 1:
                _d.trys.push([1, 4, , 5]);
                return [4 /*yield*/, fetch(url, request)];
            case 2:
                response = _d.sent();
                return [4 /*yield*/, response.json()];
            case 3:
                jsonResponse = _d.sent();
                return [2 /*return*/, jsonResponse]; // returns document id
            case 4:
                error_2 = _d.sent();
                !GlobalConfiguration_1.default.silentError && console.log(error_2);
                throw new Error('AMSCreateObjectFailed');
            case 5: return [2 /*return*/];
        }
    });
}); };
var uploadDocument = function (documentId, file, chatToken, supportedImagesMimeTypes) { return __awaiter(void 0, void 0, void 0, function () {
    var typeObject, url, headers, request, fileMetadata, error_3;
    var _a;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                GlobalConfiguration_1.default.debug && console.log("[API][uploadDocument]");
                patchChatToken(chatToken);
                typeObject = defineTypeForOperation(file.type, AmsApiOperation.Upload, supportedImagesMimeTypes);
                url = (chatToken.amsEndpoint || ((_b = chatToken === null || chatToken === void 0 ? void 0 : chatToken.regionGTMS) === null || _b === void 0 ? void 0 : _b.ams)) + "/v1/objects/" + documentId + "/content/" + typeObject;
                headers = __assign(__assign({}, createDefaultHeaders(chatToken.token)), (_a = {}, _a[HeadersName.ContentType] = MIMEType.applicationFormUrlEncoded, _a));
                request = {
                    headers: headers,
                    method: 'PUT',
                    body: file.data ? file.data : file // eslint-disable-line @typescript-eslint/no-explicit-any
                };
                _c.label = 1;
            case 1:
                _c.trys.push([1, 3, , 4]);
                return [4 /*yield*/, fetch(url, request)];
            case 2:
                _c.sent();
                fileMetadata = {
                    name: file.name,
                    size: file.size,
                    type: file.type,
                    id: documentId,
                    url: url,
                    fileSharingProtocolType: 0 // AMSBasedFileSharing
                };
                return [2 /*return*/, fileMetadata];
            case 3:
                error_3 = _c.sent();
                !GlobalConfiguration_1.default.silentError && console.log(error_3);
                throw new Error('AMSUploadDocumentFailed');
            case 4: return [2 /*return*/];
        }
    });
}); };
var getViewStatus = function (fileMetadata, chatToken, supportedImagesMimeTypes) { return __awaiter(void 0, void 0, void 0, function () {
    var url, headers, request, response, jsonResponse, content_state, view_state, view_location, error_4;
    var _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                GlobalConfiguration_1.default.debug && console.log("[API][getViewStatus]");
                patchChatToken(chatToken);
                url = (chatToken.amsEndpoint || ((_a = chatToken === null || chatToken === void 0 ? void 0 : chatToken.regionGTMS) === null || _a === void 0 ? void 0 : _a.ams)) + "/v1/objects/" + fileMetadata.id + "/views/" + (defineSupportedImagesMimeTypes(supportedImagesMimeTypes).includes(fileMetadata.type) ? 'imgpsh_fullsize_anim' : 'original') + "/status";
                headers = createDefaultHeaders(chatToken.token);
                request = {
                    headers: headers,
                    method: 'GET',
                };
                _b.label = 1;
            case 1:
                _b.trys.push([1, 4, , 5]);
                return [4 /*yield*/, fetch(url, request)];
            case 2:
                response = _b.sent();
                return [4 /*yield*/, response.json()];
            case 3:
                jsonResponse = _b.sent();
                content_state = jsonResponse.content_state, view_state = jsonResponse.view_state, view_location = jsonResponse.view_location;
                if (!view_location) {
                    throw new Error('view_location is empty');
                }
                if (view_state && view_state !== AMSFileStatus.Ready.toString()) {
                    !GlobalConfiguration_1.default.silentError && console.error('view_state is not ready');
                }
                if (content_state === AMSFileStatus.Expired.toString()) {
                    throw new Error('content_state is expired');
                }
                return [2 /*return*/, jsonResponse];
            case 4:
                error_4 = _b.sent();
                !GlobalConfiguration_1.default.silentError && console.log(error_4);
                throw new Error('AMSGetViewStatusFailed');
            case 5: return [2 /*return*/];
        }
    });
}); };
var getView = function (fileMetadata, viewLocation, chatToken, supportedImagesMimeTypes) { return __awaiter(void 0, void 0, void 0, function () {
    var url, headers, request, response, blobResponse, error_5;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                GlobalConfiguration_1.default.debug && console.log("[API][getView]");
                patchChatToken(chatToken);
                url = viewLocation;
                headers = createDefaultHeaders(chatToken.token);
                if (defineSupportedImagesMimeTypes(supportedImagesMimeTypes).includes(fileMetadata.type)) {
                    headers[HeadersName.Accept] = 'image/webp,image/ *,*/*;q=0.8';
                    headers[HeadersName.AcceptEncoding] = 'gzip, deflate, sdch, br';
                }
                request = {
                    headers: headers,
                    method: 'GET',
                };
                _a.label = 1;
            case 1:
                _a.trys.push([1, 4, , 5]);
                return [4 /*yield*/, fetch(url, request)];
            case 2:
                response = _a.sent();
                return [4 /*yield*/, response.blob()];
            case 3:
                blobResponse = _a.sent();
                return [2 /*return*/, blobResponse];
            case 4:
                error_5 = _a.sent();
                !GlobalConfiguration_1.default.silentError && console.log(error_5);
                throw new Error('AMSGetViewFailed');
            case 5: return [2 /*return*/];
        }
    });
}); };
exports.default = {
    skypeTokenAuth: skypeTokenAuth,
    createObject: createObject,
    uploadDocument: uploadDocument,
    getViewStatus: getViewStatus,
    getView: getView
};
//# sourceMappingURL=API.js.map