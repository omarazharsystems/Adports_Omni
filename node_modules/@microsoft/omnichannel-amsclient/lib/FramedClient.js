"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = require("./config");
var GlobalConfiguration_1 = require("./GlobalConfiguration");
var platform_1 = require("./utils/platform");
var PostMessageEventName_1 = require("./PostMessageEventName");
var PostMessageEventType_1 = require("./PostMessageEventType");
var uuid_1 = require("./utils/uuid");
var version = config_1.sdkVersion;
var iframePrefix = 'Microsoft_Omnichannel_AMSClient_Iframe_Window';
var FramedClient = /** @class */ (function () {
    function FramedClient(logger, framedClientConfig) {
        if (logger === void 0) { logger = undefined; }
        if (framedClientConfig === void 0) { framedClientConfig = undefined; }
        this.runtimeId = uuid_1.uuidv4();
        this.clientId = uuid_1.uuidv4();
        this.origin = window.location.origin;
        this.requestCallbacks = {};
        this.debug = false;
        this.iframeLoaded = false;
        this.logger = logger;
        this.iframeId = iframePrefix;
        if (framedClientConfig && framedClientConfig.multiClient) {
            this.iframeId = this.clientId;
        }
    }
    /* istanbul ignore next */
    FramedClient.prototype.setDebug = function (flag) {
        this.debug = flag;
    };
    FramedClient.prototype.setup = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        /* istanbul ignore next */
                        this.debug && console.log("[FramedClient][initialize]");
                        this.onMessageEvent(function (event) { return _this.handleEvent(event); }); // eslint-disable-line @typescript-eslint/no-explicit-any
                        if (!platform_1.default.isBrowser()) {
                            throw new Error('FramedMode was used in non-Web platform');
                        }
                        return [4 /*yield*/, this.loadIframe()];
                    case 1:
                        _a.sent();
                        if (!this.iframeLoaded) {
                            !GlobalConfiguration_1.default.silentError && console.error('iframe not loaded');
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    FramedClient.prototype.initialize = function (initConfig) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        /* istanbul ignore next */
                        this.debug && console.log("[FramedClient][initialize]");
                        this.chatToken = initConfig.chatToken;
                        return [4 /*yield*/, this.skypeTokenAuth()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    FramedClient.prototype.skypeTokenAuth = function (chatToken) {
        if (chatToken === void 0) { chatToken = null; }
        return __awaiter(this, void 0, void 0, function () {
            var data;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        /* istanbul ignore next */
                        this.debug && console.log("[FramedClient][skypeAuth]");
                        data = {
                            chatToken: chatToken || this.chatToken
                        };
                        return [4 /*yield*/, this.loadIframe()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                _this.postMessage(PostMessageEventType_1.default.Request, PostMessageEventName_1.default.SkypeTokenAuth, data, resolve, reject);
                            })];
                }
            });
        });
    };
    FramedClient.prototype.createObject = function (id, file, chatToken, supportedImagesMimeTypes) {
        if (chatToken === void 0) { chatToken = null; }
        if (supportedImagesMimeTypes === void 0) { supportedImagesMimeTypes = []; }
        return __awaiter(this, void 0, void 0, function () {
            var data;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        /* istanbul ignore next */
                        this.debug && console.log("[FramedClient][createObject]");
                        data = {
                            id: id,
                            file: file,
                            chatToken: chatToken || this.chatToken,
                            supportedImagesMimeTypes: supportedImagesMimeTypes
                        };
                        return [4 /*yield*/, this.loadIframe()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                _this.postMessage(PostMessageEventType_1.default.Request, PostMessageEventName_1.default.CreateObject, data, resolve, reject);
                            })];
                }
            });
        });
    };
    FramedClient.prototype.uploadDocument = function (documentId, file, chatToken, supportedImagesMimeTypes) {
        if (chatToken === void 0) { chatToken = null; }
        if (supportedImagesMimeTypes === void 0) { supportedImagesMimeTypes = []; }
        return __awaiter(this, void 0, void 0, function () {
            var data;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        /* istanbul ignore next */
                        this.debug && console.log("[FramedClient][uploadDocument]");
                        data = {
                            documentId: documentId,
                            file: file,
                            chatToken: chatToken || this.chatToken,
                            supportedImagesMimeTypes: supportedImagesMimeTypes
                        };
                        return [4 /*yield*/, this.loadIframe()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                _this.postMessage(PostMessageEventType_1.default.Request, PostMessageEventName_1.default.UploadDocument, data, resolve, reject);
                            })];
                }
            });
        });
    };
    FramedClient.prototype.getViewStatus = function (fileMetadata, chatToken, supportedImagesMimeTypes) {
        if (chatToken === void 0) { chatToken = null; }
        if (supportedImagesMimeTypes === void 0) { supportedImagesMimeTypes = []; }
        return __awaiter(this, void 0, void 0, function () {
            var data;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        data = {
                            fileMetadata: fileMetadata,
                            chatToken: chatToken || this.chatToken,
                            supportedImagesMimeTypes: supportedImagesMimeTypes
                        };
                        return [4 /*yield*/, this.loadIframe()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                _this.postMessage(PostMessageEventType_1.default.Request, PostMessageEventName_1.default.GetViewStatus, data, resolve, reject);
                            })];
                }
            });
        });
    };
    FramedClient.prototype.getView = function (fileMetadata, viewLocation, chatToken, supportedImagesMimeTypes) {
        if (chatToken === void 0) { chatToken = null; }
        if (supportedImagesMimeTypes === void 0) { supportedImagesMimeTypes = []; }
        return __awaiter(this, void 0, void 0, function () {
            var data;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        data = {
                            fileMetadata: fileMetadata,
                            viewLocation: viewLocation,
                            chatToken: chatToken || this.chatToken,
                            supportedImagesMimeTypes: supportedImagesMimeTypes
                        };
                        return [4 /*yield*/, this.loadIframe()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                _this.postMessage(PostMessageEventType_1.default.Request, PostMessageEventName_1.default.GetView, data, resolve, reject);
                            })];
                }
            });
        });
    };
    FramedClient.prototype.fetchBlob = function (contentUrl) {
        return __awaiter(this, void 0, void 0, function () {
            var response, blobResponse, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, fetch(contentUrl)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.blob()];
                    case 2:
                        blobResponse = _a.sent();
                        return [2 /*return*/, blobResponse];
                    case 3:
                        error_1 = _a.sent();
                        !GlobalConfiguration_1.default.silentError && console.log(error_1);
                        throw new Error('fetchBlob');
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    FramedClient.prototype.onMessageEvent = function (cb) {
        window.addEventListener("message", cb, true);
    };
    FramedClient.prototype.postMessage = function (eventType, eventName, data, resolve, reject) {
        if (data === void 0) { data = {}; }
        if (resolve === void 0) { resolve = function (data) { return ({}); }; }
        if (reject === void 0) { reject = function (data) { return ({}); }; }
        var requestId = uuid_1.uuidv4();
        this.requestCallbacks[requestId] = {
            resolve: resolve,
            reject: reject
        };
        if (!this.targetWindow) {
            !GlobalConfiguration_1.default.silentError && console.error('Target window not found!');
            return;
        }
        this.targetWindow.postMessage(__assign({ runtimeId: this.runtimeId, clientId: this.clientId, requestId: requestId,
            eventType: eventType,
            eventName: eventName }, data), '*');
    };
    FramedClient.prototype.handleEvent = function (event) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_b) {
                if (event.origin !== this.origin && !config_1.baseUrl.includes(event.origin)) {
                    return [2 /*return*/];
                }
                if (event.data.clientId !== this.clientId) {
                    return [2 /*return*/];
                }
                /* istanbul ignore next */
                this.debug && console.log(event);
                // Finds target window to post message back
                if (event.source) {
                    this.targetWindow = event.source;
                }
                if (event.data.eventType === PostMessageEventType_1.default.Response) {
                    /* istanbul ignore next */
                    this.debug && console.log("[FramedClient][Response]");
                    data = event.data;
                    if (event.data.eventName === PostMessageEventName_1.default.SkypeTokenAuth) {
                        if (data.requestId in this.requestCallbacks) {
                            this.requestCallbacks[data.requestId].resolve();
                            delete this.requestCallbacks[data.requestId];
                        }
                    }
                    else if (event.data.eventName === PostMessageEventName_1.default.CreateObject) {
                        if (data.requestId in this.requestCallbacks) {
                            this.requestCallbacks[data.requestId].resolve(data.response);
                            delete this.requestCallbacks[data.requestId];
                        }
                    }
                    else if (event.data.eventName === PostMessageEventName_1.default.UploadDocument) {
                        if (data.requestId in this.requestCallbacks) {
                            this.requestCallbacks[data.requestId].resolve(data.response);
                            delete this.requestCallbacks[data.requestId];
                        }
                    }
                    else if (event.data.eventName === PostMessageEventName_1.default.GetViewStatus) {
                        if (data.requestId in this.requestCallbacks) {
                            this.requestCallbacks[data.requestId].resolve(data.response);
                            delete this.requestCallbacks[data.requestId];
                        }
                    }
                    else if (event.data.eventName === PostMessageEventName_1.default.GetView) {
                        if (data.requestId in this.requestCallbacks) {
                            this.requestCallbacks[data.requestId].resolve(data.response);
                            delete this.requestCallbacks[data.requestId];
                        }
                    }
                    else if (event.data.eventName === PostMessageEventName_1.default.SendTelemetry) {
                        (_a = this.logger) === null || _a === void 0 ? void 0 : _a.log(data.logLevel, data.logData.Event, data.logData);
                    }
                }
                return [2 /*return*/];
            });
        });
    };
    FramedClient.prototype.dispose = function () {
        var _a;
        (_a = document.getElementById(this.iframeId)) === null || _a === void 0 ? void 0 : _a.remove();
        this.requestCallbacks = {};
        this.iframeLoaded = false;
    };
    FramedClient.prototype.loadIframe = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var iframeElements = Array.from(document.getElementsByTagName('iframe'));
                        var foundIframeElement = iframeElements.filter(function (iframeElement) { return iframeElement.id == _this.iframeId; });
                        // Avoid duplicate load
                        if (foundIframeElement.length) {
                            return resolve();
                        }
                        var iframeElement = document.createElement('iframe');
                        iframeElement.id = _this.iframeId;
                        iframeElement.src = config_1.baseUrl + "/" + version + "/iframe.html?clientId=" + _this.clientId + "&debug=" + _this.debug + "&telemetry=true";
                        iframeElement.addEventListener('load', function () {
                            /* istanbul ignore next */
                            _this.debug && console.log('iframe loaded!');
                            _this.iframeLoaded = true;
                            resolve();
                        });
                        iframeElement.addEventListener('error', function () {
                            reject();
                        });
                        document.head.append(iframeElement);
                    })];
            });
        });
    };
    return FramedClient;
}());
exports.default = FramedClient;
//# sourceMappingURL=FramedClient.js.map