"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useObserveScrollLeft;
var _regeneratorRuntime2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/regeneratorRuntime"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/asyncToGenerator"));
var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/promise"));
var _setTimeout2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/set-timeout"));
var _memoizeOne = _interopRequireDefault(require("memoize-one"));
var _react = require("react");
var _debounce = _interopRequireDefault(require("../../util/debounce"));
/* eslint no-magic-numbers: ["error", { "ignore": [0, 100] }] */

function sleepZero() {
  return new _promise.default(function (resolve) {
    return (0, _setTimeout2.default)(function () {
      return resolve();
    });
  });
}
function useObserveScrollLeft(callbackRefWithSubscribe, observer) {
  (0, _react.useEffect)(function () {
    return callbackRefWithSubscribe.subscribe(function (current) {
      if (!current) {
        return;
      }
      var memoizedEmitValue = (0, _memoizeOne.default)(function (initial, fraction, width) {
        return observer && observer({
          initial: initial,
          fraction: fraction,
          width: width
        });
      });
      var emitValue = function emitValue(initial) {
        var offsetWidth = current.offsetWidth,
          scrollLeft = current.scrollLeft,
          scrollWidth = current.scrollWidth;
        memoizedEmitValue(initial, "".concat(scrollWidth === offsetWidth ? 0 : scrollLeft / (scrollWidth - offsetWidth) * 100, "%"), "".concat(offsetWidth / scrollWidth * 100, "%"));
      };
      var handleScroll = function handleScroll() {
        return emitValue(false);
      };
      var handlePointerOver = (0, _debounce.default)(function () {
        // We need to send "onScroll" because "scrollWidth" might have changed
        // For example, the container resized, the scroll width will be incorrect
        // We will debounce to prevent "pointerOver" calculating too often
        // We will memoize to prevent firing unnecessary "onScroll"
        emitValue(false);
      });
      current.addEventListener('pointerover', handlePointerOver, {
        passive: true
      });
      current.addEventListener('scroll', handleScroll, {
        passive: true
      });

      // eslint-disable-next-line wrap-iife
      (0, _asyncToGenerator2.default)( /*#__PURE__*/(0, _regeneratorRuntime2.default)().mark(function _callee() {
        return (0, _regeneratorRuntime2.default)().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!(current.scrollWidth === current.offsetWidth)) {
                _context.next = 3;
                break;
              }
              _context.next = 3;
              return sleepZero();
            case 3:
              emitValue(true);
            case 4:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }))();
      return function () {
        current.removeEventListener('pointerover', handlePointerOver);
        current.removeEventListener('scroll', handleScroll);
      };
    });
  }, [callbackRefWithSubscribe, observer]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzbGVlcFplcm8iLCJyZXNvbHZlIiwidXNlT2JzZXJ2ZVNjcm9sbExlZnQiLCJjYWxsYmFja1JlZldpdGhTdWJzY3JpYmUiLCJvYnNlcnZlciIsInVzZUVmZmVjdCIsInN1YnNjcmliZSIsImN1cnJlbnQiLCJtZW1vaXplZEVtaXRWYWx1ZSIsIm1lbW9pemUiLCJpbml0aWFsIiwiZnJhY3Rpb24iLCJ3aWR0aCIsImVtaXRWYWx1ZSIsIm9mZnNldFdpZHRoIiwic2Nyb2xsTGVmdCIsInNjcm9sbFdpZHRoIiwiaGFuZGxlU2Nyb2xsIiwiaGFuZGxlUG9pbnRlck92ZXIiLCJkZWJvdW5jZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJwYXNzaXZlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ob29rcy9pbnRlcm5hbC91c2VPYnNlcnZlU2Nyb2xsTGVmdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQgbm8tbWFnaWMtbnVtYmVyczogW1wiZXJyb3JcIiwgeyBcImlnbm9yZVwiOiBbMCwgMTAwXSB9XSAqL1xuXG5pbXBvcnQgbWVtb2l6ZSBmcm9tICdtZW1vaXplLW9uZSc7XG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBkZWJvdW5jZSBmcm9tICcuLi8uLi91dGlsL2RlYm91bmNlJztcblxuZnVuY3Rpb24gc2xlZXBaZXJvKCkge1xuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KCgpID0+IHJlc29sdmUoKSkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VPYnNlcnZlU2Nyb2xsTGVmdChjYWxsYmFja1JlZldpdGhTdWJzY3JpYmUsIG9ic2VydmVyKSB7XG4gIHVzZUVmZmVjdChcbiAgICAoKSA9PlxuICAgICAgY2FsbGJhY2tSZWZXaXRoU3Vic2NyaWJlLnN1YnNjcmliZShjdXJyZW50ID0+IHtcbiAgICAgICAgaWYgKCFjdXJyZW50KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbWVtb2l6ZWRFbWl0VmFsdWUgPSBtZW1vaXplKFxuICAgICAgICAgIChpbml0aWFsLCBmcmFjdGlvbiwgd2lkdGgpID0+IG9ic2VydmVyICYmIG9ic2VydmVyKHsgaW5pdGlhbCwgZnJhY3Rpb24sIHdpZHRoIH0pXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgZW1pdFZhbHVlID0gaW5pdGlhbCA9PiB7XG4gICAgICAgICAgY29uc3QgeyBvZmZzZXRXaWR0aCwgc2Nyb2xsTGVmdCwgc2Nyb2xsV2lkdGggfSA9IGN1cnJlbnQ7XG5cbiAgICAgICAgICBtZW1vaXplZEVtaXRWYWx1ZShcbiAgICAgICAgICAgIGluaXRpYWwsXG4gICAgICAgICAgICBgJHtzY3JvbGxXaWR0aCA9PT0gb2Zmc2V0V2lkdGggPyAwIDogKHNjcm9sbExlZnQgLyAoc2Nyb2xsV2lkdGggLSBvZmZzZXRXaWR0aCkpICogMTAwfSVgLFxuICAgICAgICAgICAgYCR7KG9mZnNldFdpZHRoIC8gc2Nyb2xsV2lkdGgpICogMTAwfSVgXG4gICAgICAgICAgKTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBoYW5kbGVTY3JvbGwgPSAoKSA9PiBlbWl0VmFsdWUoZmFsc2UpO1xuXG4gICAgICAgIGNvbnN0IGhhbmRsZVBvaW50ZXJPdmVyID0gZGVib3VuY2UoKCkgPT4ge1xuICAgICAgICAgIC8vIFdlIG5lZWQgdG8gc2VuZCBcIm9uU2Nyb2xsXCIgYmVjYXVzZSBcInNjcm9sbFdpZHRoXCIgbWlnaHQgaGF2ZSBjaGFuZ2VkXG4gICAgICAgICAgLy8gRm9yIGV4YW1wbGUsIHRoZSBjb250YWluZXIgcmVzaXplZCwgdGhlIHNjcm9sbCB3aWR0aCB3aWxsIGJlIGluY29ycmVjdFxuICAgICAgICAgIC8vIFdlIHdpbGwgZGVib3VuY2UgdG8gcHJldmVudCBcInBvaW50ZXJPdmVyXCIgY2FsY3VsYXRpbmcgdG9vIG9mdGVuXG4gICAgICAgICAgLy8gV2Ugd2lsbCBtZW1vaXplIHRvIHByZXZlbnQgZmlyaW5nIHVubmVjZXNzYXJ5IFwib25TY3JvbGxcIlxuICAgICAgICAgIGVtaXRWYWx1ZShmYWxzZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGN1cnJlbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcm92ZXInLCBoYW5kbGVQb2ludGVyT3ZlciwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuICAgICAgICBjdXJyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGhhbmRsZVNjcm9sbCwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB3cmFwLWlpZmVcbiAgICAgICAgKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoY3VycmVudC5zY3JvbGxXaWR0aCA9PT0gY3VycmVudC5vZmZzZXRXaWR0aCkge1xuICAgICAgICAgICAgLy8gSEFDSzogQ2hyb21lIDY2IHdpbGwgaW5pdGlhbGx5IHNheSBzY3JvbGxXaWR0aCBlcXVhbHMgdG8gb2Zmc2V0V2lkdGgsIHVudGlsIHNvbWUgdGltZSBsYXRlclxuICAgICAgICAgICAgYXdhaXQgc2xlZXBaZXJvKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZW1pdFZhbHVlKHRydWUpO1xuICAgICAgICB9KSgpO1xuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgY3VycmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyb3ZlcicsIGhhbmRsZVBvaW50ZXJPdmVyKTtcbiAgICAgICAgICBjdXJyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGhhbmRsZVNjcm9sbCk7XG4gICAgICAgIH07XG4gICAgICB9KSxcbiAgICBbY2FsbGJhY2tSZWZXaXRoU3Vic2NyaWJlLCBvYnNlcnZlcl1cbiAgKTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBRUE7QUFDQTtBQUVBO0FB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