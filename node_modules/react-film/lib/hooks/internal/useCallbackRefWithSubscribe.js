"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useCallbackRefWithSubscribe;
var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));
var _indexOf = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/index-of"));
var _splice = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/splice"));
var _react = require("react");
var SUBSCRIBER_LIMIT = 10;
function useCallbackRefWithSubscribe() {
  return (0, _react.useMemo)(function () {
    var subscriptions = [];
    var callbackRef = function callbackRef(current) {
      callbackRef.current = current;
      (0, _forEach.default)(subscriptions).call(subscriptions, function (subscription) {
        subscription.cleanup && subscription.cleanup();
        subscription.cleanup = subscription.callback(current);
      });
    };
    callbackRef.subscribe = function (callback) {
      var subscription = {
        callback: callback
      };
      subscriptions.push(subscription);
      if (subscriptions.length >= SUBSCRIBER_LIMIT) {
        console.warn("useSubscribe: Reaching maximum limit of subscribers (".concat(SUBSCRIBER_LIMIT, "), please make sure your code did clean up properly."));
      }
      subscription.cleanup = callback(callbackRef.current);
      return function () {
        subscription.cleanup && subscription.cleanup();
        var index = (0, _indexOf.default)(subscriptions).call(subscriptions, subscription);
        ~index && (0, _splice.default)(subscriptions).call(subscriptions, index, 1);
      };
    };
    return callbackRef;
  }, []);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTVUJTQ1JJQkVSX0xJTUlUIiwidXNlQ2FsbGJhY2tSZWZXaXRoU3Vic2NyaWJlIiwidXNlTWVtbyIsInN1YnNjcmlwdGlvbnMiLCJjYWxsYmFja1JlZiIsImN1cnJlbnQiLCJzdWJzY3JpcHRpb24iLCJjbGVhbnVwIiwiY2FsbGJhY2siLCJzdWJzY3JpYmUiLCJwdXNoIiwibGVuZ3RoIiwiY29uc29sZSIsIndhcm4iLCJpbmRleCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ob29rcy9pbnRlcm5hbC91c2VDYWxsYmFja1JlZldpdGhTdWJzY3JpYmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcblxuY29uc3QgU1VCU0NSSUJFUl9MSU1JVCA9IDEwO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VDYWxsYmFja1JlZldpdGhTdWJzY3JpYmUoKSB7XG4gIHJldHVybiB1c2VNZW1vKCgpID0+IHtcbiAgICBjb25zdCBzdWJzY3JpcHRpb25zID0gW107XG5cbiAgICBjb25zdCBjYWxsYmFja1JlZiA9IGN1cnJlbnQgPT4ge1xuICAgICAgY2FsbGJhY2tSZWYuY3VycmVudCA9IGN1cnJlbnQ7XG5cbiAgICAgIHN1YnNjcmlwdGlvbnMuZm9yRWFjaChzdWJzY3JpcHRpb24gPT4ge1xuICAgICAgICBzdWJzY3JpcHRpb24uY2xlYW51cCAmJiBzdWJzY3JpcHRpb24uY2xlYW51cCgpO1xuICAgICAgICBzdWJzY3JpcHRpb24uY2xlYW51cCA9IHN1YnNjcmlwdGlvbi5jYWxsYmFjayhjdXJyZW50KTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjYWxsYmFja1JlZi5zdWJzY3JpYmUgPSBjYWxsYmFjayA9PiB7XG4gICAgICBjb25zdCBzdWJzY3JpcHRpb24gPSB7IGNhbGxiYWNrIH07XG5cbiAgICAgIHN1YnNjcmlwdGlvbnMucHVzaChzdWJzY3JpcHRpb24pO1xuXG4gICAgICBpZiAoc3Vic2NyaXB0aW9ucy5sZW5ndGggPj0gU1VCU0NSSUJFUl9MSU1JVCkge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgYHVzZVN1YnNjcmliZTogUmVhY2hpbmcgbWF4aW11bSBsaW1pdCBvZiBzdWJzY3JpYmVycyAoJHtTVUJTQ1JJQkVSX0xJTUlUfSksIHBsZWFzZSBtYWtlIHN1cmUgeW91ciBjb2RlIGRpZCBjbGVhbiB1cCBwcm9wZXJseS5gXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHN1YnNjcmlwdGlvbi5jbGVhbnVwID0gY2FsbGJhY2soY2FsbGJhY2tSZWYuY3VycmVudCk7XG5cbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIHN1YnNjcmlwdGlvbi5jbGVhbnVwICYmIHN1YnNjcmlwdGlvbi5jbGVhbnVwKCk7XG5cbiAgICAgICAgY29uc3QgaW5kZXggPSBzdWJzY3JpcHRpb25zLmluZGV4T2Yoc3Vic2NyaXB0aW9uKTtcblxuICAgICAgICB+aW5kZXggJiYgc3Vic2NyaXB0aW9ucy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGNhbGxiYWNrUmVmO1xuICB9LCBbXSk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFFQSxJQUFNQSxnQkFBZ0IsR0FBRyxFQUFFO0FBRVosU0FBU0MsMkJBQTJCLEdBQUc7RUFDcEQsT0FBTyxJQUFBQyxjQUFPLEVBQUMsWUFBTTtJQUNuQixJQUFNQyxhQUFhLEdBQUcsRUFBRTtJQUV4QixJQUFNQyxXQUFXLEdBQUcsU0FBZEEsV0FBVyxDQUFHQyxPQUFPLEVBQUk7TUFDN0JELFdBQVcsQ0FBQ0MsT0FBTyxHQUFHQSxPQUFPO01BRTdCLHNCQUFBRixhQUFhLE9BQWJBLGFBQWEsRUFBUyxVQUFBRyxZQUFZLEVBQUk7UUFDcENBLFlBQVksQ0FBQ0MsT0FBTyxJQUFJRCxZQUFZLENBQUNDLE9BQU8sRUFBRTtRQUM5Q0QsWUFBWSxDQUFDQyxPQUFPLEdBQUdELFlBQVksQ0FBQ0UsUUFBUSxDQUFDSCxPQUFPLENBQUM7TUFDdkQsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVERCxXQUFXLENBQUNLLFNBQVMsR0FBRyxVQUFBRCxRQUFRLEVBQUk7TUFDbEMsSUFBTUYsWUFBWSxHQUFHO1FBQUVFLFFBQVEsRUFBUkE7TUFBUyxDQUFDO01BRWpDTCxhQUFhLENBQUNPLElBQUksQ0FBQ0osWUFBWSxDQUFDO01BRWhDLElBQUlILGFBQWEsQ0FBQ1EsTUFBTSxJQUFJWCxnQkFBZ0IsRUFBRTtRQUM1Q1ksT0FBTyxDQUFDQyxJQUFJLGdFQUM4Q2IsZ0JBQWdCLDBEQUN6RTtNQUNIO01BRUFNLFlBQVksQ0FBQ0MsT0FBTyxHQUFHQyxRQUFRLENBQUNKLFdBQVcsQ0FBQ0MsT0FBTyxDQUFDO01BRXBELE9BQU8sWUFBTTtRQUNYQyxZQUFZLENBQUNDLE9BQU8sSUFBSUQsWUFBWSxDQUFDQyxPQUFPLEVBQUU7UUFFOUMsSUFBTU8sS0FBSyxHQUFHLHNCQUFBWCxhQUFhLE9BQWJBLGFBQWEsRUFBU0csWUFBWSxDQUFDO1FBRWpELENBQUNRLEtBQUssSUFBSSxxQkFBQVgsYUFBYSxPQUFiQSxhQUFhLEVBQVFXLEtBQUssRUFBRSxDQUFDLENBQUM7TUFDMUMsQ0FBQztJQUNILENBQUM7SUFFRCxPQUFPVixXQUFXO0VBQ3BCLENBQUMsRUFBRSxFQUFFLENBQUM7QUFDUiJ9