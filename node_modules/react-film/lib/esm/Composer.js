import _objectSpread from "@babel/runtime-corejs3/helpers/objectSpread2";
import _slicedToArray from "@babel/runtime-corejs3/helpers/slicedToArray";
import _Object$fromEntries from "@babel/runtime-corejs3/core-js-stable/object/from-entries";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _Object$entries from "@babel/runtime-corejs3/core-js-stable/object/entries";
import _setTimeout from "@babel/runtime-corejs3/core-js-stable/set-timeout";
import createEmotion from '@emotion/css/create-instance';
import PropTypes from 'prop-types';
import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';
import AutoCenter from './AutoCenter';
import computeScrollLeft from './computeScrollLeft';
import createBasicStyleSet from './createBasicStyleSet';
import createCSSKey from './util/createCSSKey';
import FunctionContext from './FunctionContext';
import getView from './getView';
import InternalContext from './InternalContext';
import LegacyContext from './LegacyContext';
import patchStyleOptions from './patchStyleOptions';
import PropsContext from './PropsContext';
import useAnimateScrollLeft from './hooks/internal/useAnimateScrollLeft';
import useCallbackRefWithSubscribe from './hooks/internal/useCallbackRefWithSubscribe';
import useObserveScrollLeft from './hooks/internal/useObserveScrollLeft';
import ViewContext from './ViewContext';

// We pool the emotion, so we don't create a new set of <style> for every component and reuse as much as we could.
var emotionPool = {};
var Composer = function Composer(_ref) {
  var children = _ref.children,
    dir = _ref.dir,
    height = _ref.height,
    nonce = _ref.nonce,
    numItems = _ref.numItems,
    styleOptions = _ref.styleOptions,
    styleSet = _ref.styleSet;
  dir = dir === 'ltr' || dir === 'rtl' ? dir : undefined;
  var patchedStyleOptions = useMemo(function () {
    return patchStyleOptions(styleOptions);
  }, [styleOptions]);
  var patchedStyleSet = useMemo(function () {
    return styleSet || createBasicStyleSet(patchedStyleOptions);
  }, [patchedStyleOptions, styleSet]);
  var styleSetClassNames = useMemo(function () {
    var _context;
    var emotion = emotionPool[nonce] || (emotionPool[nonce] = createEmotion({
      key: "react-film--css-".concat(createCSSKey()),
      nonce: nonce
    }));
    return _Object$fromEntries(_mapInstanceProperty(_context = _Object$entries(patchedStyleSet)).call(_context, function (_ref2) {
      var _ref3 = _slicedToArray(_ref2, 2),
        name = _ref3[0],
        style = _ref3[1];
      return [name, emotion.css(style) + ''];
    }));
  }, [nonce, patchedStyleSet]);
  var _useState = useState(),
    _useState2 = _slicedToArray(_useState, 2),
    _ = _useState2[0],
    forceRender = _useState2[1];
  var itemContainerCallbackRefWithSubscribe = useCallbackRefWithSubscribe();
  var scrollableCallbackRefWithSubscribe = useCallbackRefWithSubscribe();
  var scrollLeftRef = useRef(null);
  var scrollTimeoutRef = useRef();
  useEffect(function () {
    return function () {
      return clearTimeout(scrollTimeoutRef.current);
    };
  }, [scrollTimeoutRef]);
  var scrollTo = useCallback(function (scrollFn) {
    var view = getView(dir, scrollableCallbackRefWithSubscribe.current, itemContainerCallbackRefWithSubscribe.current, scrollLeftRef.current);
    if (view) {
      var index = view.index,
        indexFraction = view.indexFraction;
      var targetIndex = scrollFn({
        index: index,
        indexFraction: indexFraction
      });
      if (typeof targetIndex === 'number') {
        scrollLeftRef.current = computeScrollLeft(dir, scrollableCallbackRefWithSubscribe.current, itemContainerCallbackRefWithSubscribe.current, targetIndex);
        forceRender({});
      }
    }
  }, [dir, forceRender, itemContainerCallbackRefWithSubscribe, scrollableCallbackRefWithSubscribe, scrollLeftRef]);
  var scrollOneLeft = useCallback(function () {
    scrollTo(function (_ref4) {
      var indexFraction = _ref4.indexFraction;
      return dir === 'rtl' ? Math.floor(indexFraction) + 1 : Math.ceil(indexFraction) - 1;
    });
  }, [dir, scrollTo]);
  var scrollOneRight = useCallback(function () {
    scrollTo(function (_ref5) {
      var indexFraction = _ref5.indexFraction;
      return dir === 'rtl' ? Math.ceil(indexFraction) - 1 : Math.floor(indexFraction) + 1;
    });
  }, [dir, scrollTo]);
  var functionContext = useMemo(function () {
    return {
      scrollTo: scrollTo,
      scrollOneLeft: scrollOneLeft,
      scrollOneRight: scrollOneRight
    };
  }, [scrollTo, scrollOneLeft, scrollOneRight]);
  var internalContext = useMemo(function () {
    return {
      itemContainerCallbackRefWithSubscribe: itemContainerCallbackRefWithSubscribe,
      scrollableCallbackRefWithSubscribe: scrollableCallbackRefWithSubscribe
    };
  }, [itemContainerCallbackRefWithSubscribe, scrollableCallbackRefWithSubscribe]);
  var propsContext = useMemo(function () {
    return {
      dir: dir,
      height: height,
      nonce: nonce,
      numItems: numItems,
      styleOptions: patchedStyleOptions,
      styleSetClassNames: styleSetClassNames
    };
  }, [dir, height, nonce, numItems, patchedStyleOptions, styleSetClassNames]);
  var _useState3 = useState({
      index: 0,
      indexFraction: 0,
      scrollBarPercentage: '0%',
      scrollBarWidth: '0%',
      scrolling: false
    }),
    _useState4 = _slicedToArray(_useState3, 2),
    viewContext = _useState4[0],
    setViewContext = _useState4[1];

  // This will setViewContext and reset the "scrolling" flag after a period of time.
  var setViewContext2 = useCallback(function (nextViewContext) {
    setViewContext(nextViewContext);
    clearTimeout(scrollTimeoutRef.current);
    if (nextViewContext.scrolling) {
      scrollTimeoutRef.current = _setTimeout(function () {
        return setViewContext(_objectSpread(_objectSpread({}, nextViewContext), {}, {
          scrolling: false
        }));
      },
      // eslint-disable-next-line no-magic-numbers
      500);
    }
  }, [scrollTimeoutRef, setViewContext]);
  var handleScroll = useCallback(function (_ref6) {
    var scrollBarPercentage = _ref6.fraction,
      initial = _ref6.initial,
      scrollBarWidth = _ref6.width;
    var view = getView(dir, scrollableCallbackRefWithSubscribe.current, itemContainerCallbackRefWithSubscribe.current, scrollLeftRef.current);
    if (view) {
      var index = view.index,
        indexFraction = view.indexFraction;
      setViewContext2({
        index: index,
        indexFraction: indexFraction,
        scrolling: !initial,
        scrollBarPercentage: scrollBarPercentage,
        scrollBarWidth: scrollBarWidth
      });
    }
  }, [dir, itemContainerCallbackRefWithSubscribe, scrollableCallbackRefWithSubscribe, scrollLeftRef, setViewContext2]);
  var handleScrollToEnd = useCallback(function () {
    scrollLeftRef.current = null;
    forceRender({});
  }, [forceRender, scrollLeftRef]);
  var legacyContext = useMemo(function () {
    return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, functionContext), internalContext), propsContext), viewContext);
  }, [functionContext, internalContext, propsContext, viewContext]);
  useAnimateScrollLeft(typeof scrollLeftRef.current === 'number' && scrollableCallbackRefWithSubscribe.current, scrollLeftRef.current, handleScrollToEnd);
  useEffect(function () {
    return scrollableCallbackRefWithSubscribe.subscribe(function (current) {
      if (current) {
        current.addEventListener('pointerdown', handleScrollToEnd, {
          passive: true
        });
        return function () {
          return current.removeEventListener('pointerdown', handleScrollToEnd);
        };
      }
    });
  }, [handleScrollToEnd, scrollableCallbackRefWithSubscribe]);
  useObserveScrollLeft(scrollableCallbackRefWithSubscribe, handleScroll);
  return /*#__PURE__*/React.createElement(PropsContext.Provider, {
    value: propsContext
  }, /*#__PURE__*/React.createElement(InternalContext.Provider, {
    value: internalContext
  }, /*#__PURE__*/React.createElement(FunctionContext.Provider, {
    value: functionContext
  }, /*#__PURE__*/React.createElement(ViewContext.Provider, {
    value: viewContext
  }, /*#__PURE__*/React.createElement(LegacyContext.Provider, {
    value: legacyContext
  }, children, patchedStyleOptions.autoCenter && /*#__PURE__*/React.createElement(AutoCenter, null))))));
};
Composer.defaultProps = {
  children: undefined,
  dir: undefined,
  height: undefined,
  nonce: undefined,
  styleOptions: undefined,
  styleSet: undefined
};
Composer.propTypes = {
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.element), PropTypes.element]),
  dir: PropTypes.oneOf(['ltr', 'rtl']),
  height: PropTypes.number,
  nonce: PropTypes.string,
  numItems: PropTypes.number.isRequired,
  styleOptions: PropTypes.any,
  styleSet: PropTypes.any
};
export default Composer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,