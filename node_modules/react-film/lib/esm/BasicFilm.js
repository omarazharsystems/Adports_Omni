import _slicedToArray from "@babel/runtime-corejs3/helpers/slicedToArray";
import classNames from 'classnames';
import PropTypes from 'prop-types';
import React, { useMemo } from 'react';
import Dots from './Dots';
import Filmstrip from './Filmstrip';
import Flipper from './Flipper';
import ScrollBar from './ScrollBar';
import useDir from './hooks/useDir';
import useHeight from './hooks/useHeight';
import useNumItems from './hooks/useNumItems';
import useScrollBarWidth from './hooks/useScrollBarWidth';
import useScrolling from './hooks/useScrolling';
import useStyleOptions from './hooks/useStyleOptions';
import useStyleSetClassNames from './hooks/useStyleSetClassNames';
var BasicFilm = function BasicFilm(_ref) {
  var children = _ref.children,
    className = _ref.className;
  var _useDir = useDir(),
    _useDir2 = _slicedToArray(_useDir, 1),
    dir = _useDir2[0];
  var _useHeight = useHeight(),
    _useHeight2 = _slicedToArray(_useHeight, 1),
    height = _useHeight2[0];
  var _useNumItems = useNumItems(),
    _useNumItems2 = _slicedToArray(_useNumItems, 1),
    numItems = _useNumItems2[0];
  var _useScrollBarWidth = useScrollBarWidth(),
    _useScrollBarWidth2 = _slicedToArray(_useScrollBarWidth, 1),
    scrollBarWidth = _useScrollBarWidth2[0];
  var _useScrolling = useScrolling(),
    _useScrolling2 = _slicedToArray(_useScrolling, 1),
    scrolling = _useScrolling2[0];
  var _useStyleSetClassName = useStyleSetClassNames(),
    _useStyleSetClassName2 = _slicedToArray(_useStyleSetClassName, 1),
    rootClassName = _useStyleSetClassName2[0].root;
  var _useStyleOptions = useStyleOptions(),
    _useStyleOptions2 = _slicedToArray(_useStyleOptions, 1),
    _useStyleOptions2$ = _useStyleOptions2[0],
    flipperBlurFocusOnClick = _useStyleOptions2$.flipperBlurFocusOnClick,
    leftFlipperAriaLabel = _useStyleOptions2$.leftFlipperAriaLabel,
    leftFlipperText = _useStyleOptions2$.leftFlipperText,
    rightFlipperAriaLabel = _useStyleOptions2$.rightFlipperAriaLabel,
    rightFlipperText = _useStyleOptions2$.rightFlipperText,
    showDots = _useStyleOptions2$.showDots,
    showFlipper = _useStyleOptions2$.showFlipper,
    showScrollBar = _useStyleOptions2$.showScrollBar;
  var contentStyle = useMemo(function () {
    return {
      height: height
    };
  }, [height]);
  return /*#__PURE__*/React.createElement("div", {
    className: classNames(rootClassName, (className || '') + ''),
    dir: dir
  }, /*#__PURE__*/React.createElement("div", {
    className: classNames('react-film__main', {
      'react-film__main--scrolling': scrolling
    }),
    style: contentStyle
  }, !!numItems && scrollBarWidth !== '100%' && !!showFlipper && /*#__PURE__*/React.createElement(Flipper, {
    "aria-label": leftFlipperAriaLabel,
    blurFocusOnClick: flipperBlurFocusOnClick,
    mode: "left"
  }, leftFlipperText), /*#__PURE__*/React.createElement(Filmstrip, null, children), !!numItems && scrollBarWidth !== '100%' && !!showFlipper && /*#__PURE__*/React.createElement(Flipper, {
    "aria-label": rightFlipperAriaLabel,
    blurFocusOnClick: flipperBlurFocusOnClick,
    mode: "right"
  }, rightFlipperText), !!numItems && scrollBarWidth !== '100%' && !!showScrollBar && /*#__PURE__*/React.createElement(ScrollBar, null)), !!numItems && scrollBarWidth !== '100%' && !!showDots && /*#__PURE__*/React.createElement(Dots, null));
};

// TODO: Move from styleSet to styleSheet.

BasicFilm.defaultProps = {
  children: undefined,
  className: undefined
};
BasicFilm.propTypes = {
  children: PropTypes.any,
  className: PropTypes.string
};
export default BasicFilm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjbGFzc05hbWVzIiwiUHJvcFR5cGVzIiwiUmVhY3QiLCJ1c2VNZW1vIiwiRG90cyIsIkZpbG1zdHJpcCIsIkZsaXBwZXIiLCJTY3JvbGxCYXIiLCJ1c2VEaXIiLCJ1c2VIZWlnaHQiLCJ1c2VOdW1JdGVtcyIsInVzZVNjcm9sbEJhcldpZHRoIiwidXNlU2Nyb2xsaW5nIiwidXNlU3R5bGVPcHRpb25zIiwidXNlU3R5bGVTZXRDbGFzc05hbWVzIiwiQmFzaWNGaWxtIiwiY2hpbGRyZW4iLCJjbGFzc05hbWUiLCJkaXIiLCJoZWlnaHQiLCJudW1JdGVtcyIsInNjcm9sbEJhcldpZHRoIiwic2Nyb2xsaW5nIiwicm9vdENsYXNzTmFtZSIsInJvb3QiLCJmbGlwcGVyQmx1ckZvY3VzT25DbGljayIsImxlZnRGbGlwcGVyQXJpYUxhYmVsIiwibGVmdEZsaXBwZXJUZXh0IiwicmlnaHRGbGlwcGVyQXJpYUxhYmVsIiwicmlnaHRGbGlwcGVyVGV4dCIsInNob3dEb3RzIiwic2hvd0ZsaXBwZXIiLCJzaG93U2Nyb2xsQmFyIiwiY29udGVudFN0eWxlIiwiZGVmYXVsdFByb3BzIiwidW5kZWZpbmVkIiwicHJvcFR5cGVzIiwiYW55Iiwic3RyaW5nIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL0Jhc2ljRmlsbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IERvdHMgZnJvbSAnLi9Eb3RzJztcbmltcG9ydCBGaWxtc3RyaXAgZnJvbSAnLi9GaWxtc3RyaXAnO1xuaW1wb3J0IEZsaXBwZXIgZnJvbSAnLi9GbGlwcGVyJztcbmltcG9ydCBTY3JvbGxCYXIgZnJvbSAnLi9TY3JvbGxCYXInO1xuaW1wb3J0IHVzZURpciBmcm9tICcuL2hvb2tzL3VzZURpcic7XG5pbXBvcnQgdXNlSGVpZ2h0IGZyb20gJy4vaG9va3MvdXNlSGVpZ2h0JztcbmltcG9ydCB1c2VOdW1JdGVtcyBmcm9tICcuL2hvb2tzL3VzZU51bUl0ZW1zJztcbmltcG9ydCB1c2VTY3JvbGxCYXJXaWR0aCBmcm9tICcuL2hvb2tzL3VzZVNjcm9sbEJhcldpZHRoJztcbmltcG9ydCB1c2VTY3JvbGxpbmcgZnJvbSAnLi9ob29rcy91c2VTY3JvbGxpbmcnO1xuaW1wb3J0IHVzZVN0eWxlT3B0aW9ucyBmcm9tICcuL2hvb2tzL3VzZVN0eWxlT3B0aW9ucyc7XG5pbXBvcnQgdXNlU3R5bGVTZXRDbGFzc05hbWVzIGZyb20gJy4vaG9va3MvdXNlU3R5bGVTZXRDbGFzc05hbWVzJztcblxuY29uc3QgQmFzaWNGaWxtID0gKHsgY2hpbGRyZW4sIGNsYXNzTmFtZSB9KSA9PiB7XG4gIGNvbnN0IFtkaXJdID0gdXNlRGlyKCk7XG4gIGNvbnN0IFtoZWlnaHRdID0gdXNlSGVpZ2h0KCk7XG4gIGNvbnN0IFtudW1JdGVtc10gPSB1c2VOdW1JdGVtcygpO1xuICBjb25zdCBbc2Nyb2xsQmFyV2lkdGhdID0gdXNlU2Nyb2xsQmFyV2lkdGgoKTtcbiAgY29uc3QgW3Njcm9sbGluZ10gPSB1c2VTY3JvbGxpbmcoKTtcbiAgY29uc3QgW3sgcm9vdDogcm9vdENsYXNzTmFtZSB9XSA9IHVzZVN0eWxlU2V0Q2xhc3NOYW1lcygpO1xuICBjb25zdCBbXG4gICAge1xuICAgICAgZmxpcHBlckJsdXJGb2N1c09uQ2xpY2ssXG4gICAgICBsZWZ0RmxpcHBlckFyaWFMYWJlbCxcbiAgICAgIGxlZnRGbGlwcGVyVGV4dCxcbiAgICAgIHJpZ2h0RmxpcHBlckFyaWFMYWJlbCxcbiAgICAgIHJpZ2h0RmxpcHBlclRleHQsXG4gICAgICBzaG93RG90cyxcbiAgICAgIHNob3dGbGlwcGVyLFxuICAgICAgc2hvd1Njcm9sbEJhclxuICAgIH1cbiAgXSA9IHVzZVN0eWxlT3B0aW9ucygpO1xuXG4gIGNvbnN0IGNvbnRlbnRTdHlsZSA9IHVzZU1lbW8oKCkgPT4gKHsgaGVpZ2h0IH0pLCBbaGVpZ2h0XSk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhyb290Q2xhc3NOYW1lLCAoY2xhc3NOYW1lIHx8ICcnKSArICcnKX0gZGlyPXtkaXJ9PlxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ3JlYWN0LWZpbG1fX21haW4nLCB7ICdyZWFjdC1maWxtX19tYWluLS1zY3JvbGxpbmcnOiBzY3JvbGxpbmcgfSl9XG4gICAgICAgIHN0eWxlPXtjb250ZW50U3R5bGV9XG4gICAgICA+XG4gICAgICAgIHshIW51bUl0ZW1zICYmIHNjcm9sbEJhcldpZHRoICE9PSAnMTAwJScgJiYgISFzaG93RmxpcHBlciAmJiAoXG4gICAgICAgICAgPEZsaXBwZXIgYXJpYS1sYWJlbD17bGVmdEZsaXBwZXJBcmlhTGFiZWx9IGJsdXJGb2N1c09uQ2xpY2s9e2ZsaXBwZXJCbHVyRm9jdXNPbkNsaWNrfSBtb2RlPVwibGVmdFwiPlxuICAgICAgICAgICAge2xlZnRGbGlwcGVyVGV4dH1cbiAgICAgICAgICA8L0ZsaXBwZXI+XG4gICAgICAgICl9XG4gICAgICAgIDxGaWxtc3RyaXA+e2NoaWxkcmVufTwvRmlsbXN0cmlwPlxuICAgICAgICB7ISFudW1JdGVtcyAmJiBzY3JvbGxCYXJXaWR0aCAhPT0gJzEwMCUnICYmICEhc2hvd0ZsaXBwZXIgJiYgKFxuICAgICAgICAgIDxGbGlwcGVyIGFyaWEtbGFiZWw9e3JpZ2h0RmxpcHBlckFyaWFMYWJlbH0gYmx1ckZvY3VzT25DbGljaz17ZmxpcHBlckJsdXJGb2N1c09uQ2xpY2t9IG1vZGU9XCJyaWdodFwiPlxuICAgICAgICAgICAge3JpZ2h0RmxpcHBlclRleHR9XG4gICAgICAgICAgPC9GbGlwcGVyPlxuICAgICAgICApfVxuICAgICAgICB7ISFudW1JdGVtcyAmJiBzY3JvbGxCYXJXaWR0aCAhPT0gJzEwMCUnICYmICEhc2hvd1Njcm9sbEJhciAmJiA8U2Nyb2xsQmFyIC8+fVxuICAgICAgPC9kaXY+XG4gICAgICB7ISFudW1JdGVtcyAmJiBzY3JvbGxCYXJXaWR0aCAhPT0gJzEwMCUnICYmICEhc2hvd0RvdHMgJiYgPERvdHMgLz59XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG4vLyBUT0RPOiBNb3ZlIGZyb20gc3R5bGVTZXQgdG8gc3R5bGVTaGVldC5cblxuQmFzaWNGaWxtLmRlZmF1bHRQcm9wcyA9IHtcbiAgY2hpbGRyZW46IHVuZGVmaW5lZCxcbiAgY2xhc3NOYW1lOiB1bmRlZmluZWRcbn07XG5cbkJhc2ljRmlsbS5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55LFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmdcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEJhc2ljRmlsbTtcbiJdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU9BLFVBQVUsTUFBTSxZQUFZO0FBQ25DLE9BQU9DLFNBQVMsTUFBTSxZQUFZO0FBQ2xDLE9BQU9DLEtBQUssSUFBSUMsT0FBTyxRQUFRLE9BQU87QUFFdEMsT0FBT0MsSUFBSSxNQUFNLFFBQVE7QUFDekIsT0FBT0MsU0FBUyxNQUFNLGFBQWE7QUFDbkMsT0FBT0MsT0FBTyxNQUFNLFdBQVc7QUFDL0IsT0FBT0MsU0FBUyxNQUFNLGFBQWE7QUFDbkMsT0FBT0MsTUFBTSxNQUFNLGdCQUFnQjtBQUNuQyxPQUFPQyxTQUFTLE1BQU0sbUJBQW1CO0FBQ3pDLE9BQU9DLFdBQVcsTUFBTSxxQkFBcUI7QUFDN0MsT0FBT0MsaUJBQWlCLE1BQU0sMkJBQTJCO0FBQ3pELE9BQU9DLFlBQVksTUFBTSxzQkFBc0I7QUFDL0MsT0FBT0MsZUFBZSxNQUFNLHlCQUF5QjtBQUNyRCxPQUFPQyxxQkFBcUIsTUFBTSwrQkFBK0I7QUFFakUsSUFBTUMsU0FBUyxHQUFHLFNBQVpBLFNBQVMsT0FBZ0M7RUFBQSxJQUExQkMsUUFBUSxRQUFSQSxRQUFRO0lBQUVDLFNBQVMsUUFBVEEsU0FBUztFQUN0QyxjQUFjVCxNQUFNLEVBQUU7SUFBQTtJQUFmVSxHQUFHO0VBQ1YsaUJBQWlCVCxTQUFTLEVBQUU7SUFBQTtJQUFyQlUsTUFBTTtFQUNiLG1CQUFtQlQsV0FBVyxFQUFFO0lBQUE7SUFBekJVLFFBQVE7RUFDZix5QkFBeUJULGlCQUFpQixFQUFFO0lBQUE7SUFBckNVLGNBQWM7RUFDckIsb0JBQW9CVCxZQUFZLEVBQUU7SUFBQTtJQUEzQlUsU0FBUztFQUNoQiw0QkFBa0NSLHFCQUFxQixFQUFFO0lBQUE7SUFBMUNTLGFBQWEsNkJBQW5CQyxJQUFJO0VBQ2IsdUJBV0lYLGVBQWUsRUFBRTtJQUFBO0lBQUE7SUFUakJZLHVCQUF1QixzQkFBdkJBLHVCQUF1QjtJQUN2QkMsb0JBQW9CLHNCQUFwQkEsb0JBQW9CO0lBQ3BCQyxlQUFlLHNCQUFmQSxlQUFlO0lBQ2ZDLHFCQUFxQixzQkFBckJBLHFCQUFxQjtJQUNyQkMsZ0JBQWdCLHNCQUFoQkEsZ0JBQWdCO0lBQ2hCQyxRQUFRLHNCQUFSQSxRQUFRO0lBQ1JDLFdBQVcsc0JBQVhBLFdBQVc7SUFDWEMsYUFBYSxzQkFBYkEsYUFBYTtFQUlqQixJQUFNQyxZQUFZLEdBQUc5QixPQUFPLENBQUM7SUFBQSxPQUFPO01BQUVnQixNQUFNLEVBQU5BO0lBQU8sQ0FBQztFQUFBLENBQUMsRUFBRSxDQUFDQSxNQUFNLENBQUMsQ0FBQztFQUUxRCxvQkFDRTtJQUFLLFNBQVMsRUFBRW5CLFVBQVUsQ0FBQ3VCLGFBQWEsRUFBRSxDQUFDTixTQUFTLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBRTtJQUFDLEdBQUcsRUFBRUM7RUFBSSxnQkFDMUU7SUFDRSxTQUFTLEVBQUVsQixVQUFVLENBQUMsa0JBQWtCLEVBQUU7TUFBRSw2QkFBNkIsRUFBRXNCO0lBQVUsQ0FBQyxDQUFFO0lBQ3hGLEtBQUssRUFBRVc7RUFBYSxHQUVuQixDQUFDLENBQUNiLFFBQVEsSUFBSUMsY0FBYyxLQUFLLE1BQU0sSUFBSSxDQUFDLENBQUNVLFdBQVcsaUJBQ3ZELG9CQUFDLE9BQU87SUFBQyxjQUFZTCxvQkFBcUI7SUFBQyxnQkFBZ0IsRUFBRUQsdUJBQXdCO0lBQUMsSUFBSSxFQUFDO0VBQU0sR0FDOUZFLGVBQWUsQ0FFbkIsZUFDRCxvQkFBQyxTQUFTLFFBQUVYLFFBQVEsQ0FBYSxFQUNoQyxDQUFDLENBQUNJLFFBQVEsSUFBSUMsY0FBYyxLQUFLLE1BQU0sSUFBSSxDQUFDLENBQUNVLFdBQVcsaUJBQ3ZELG9CQUFDLE9BQU87SUFBQyxjQUFZSCxxQkFBc0I7SUFBQyxnQkFBZ0IsRUFBRUgsdUJBQXdCO0lBQUMsSUFBSSxFQUFDO0VBQU8sR0FDaEdJLGdCQUFnQixDQUVwQixFQUNBLENBQUMsQ0FBQ1QsUUFBUSxJQUFJQyxjQUFjLEtBQUssTUFBTSxJQUFJLENBQUMsQ0FBQ1csYUFBYSxpQkFBSSxvQkFBQyxTQUFTLE9BQUcsQ0FDeEUsRUFDTCxDQUFDLENBQUNaLFFBQVEsSUFBSUMsY0FBYyxLQUFLLE1BQU0sSUFBSSxDQUFDLENBQUNTLFFBQVEsaUJBQUksb0JBQUMsSUFBSSxPQUFHLENBQzlEO0FBRVYsQ0FBQzs7QUFFRDs7QUFFQWYsU0FBUyxDQUFDbUIsWUFBWSxHQUFHO0VBQ3ZCbEIsUUFBUSxFQUFFbUIsU0FBUztFQUNuQmxCLFNBQVMsRUFBRWtCO0FBQ2IsQ0FBQztBQUVEcEIsU0FBUyxDQUFDcUIsU0FBUyxHQUFHO0VBQ3BCcEIsUUFBUSxFQUFFZixTQUFTLENBQUNvQyxHQUFHO0VBQ3ZCcEIsU0FBUyxFQUFFaEIsU0FBUyxDQUFDcUM7QUFDdkIsQ0FBQztBQUVELGVBQWV2QixTQUFTIn0=