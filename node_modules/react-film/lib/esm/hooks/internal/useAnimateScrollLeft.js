import _Math$sign from "@babel/runtime-corejs3/core-js-stable/math/sign";
import _Date$now from "@babel/runtime-corejs3/core-js-stable/date/now";
import { useEffect } from 'react';
function step(from, to, stepper, index) {
  var next = from;
  for (var i = 0; i < index; i++) {
    next = stepper(next, to);
  }
  return next;
}
function squareStepper(current, to) {
  var sign = _Math$sign(to - current);
  var step = Math.sqrt(Math.abs(to - current));
  var next = current + step * sign;
  if (sign > 0) {
    return Math.min(to, next);
  }
  return Math.max(to, next);
}
export default function useAnimateScrollLeft(element, to, onEnd) {
  useEffect(function () {
    if (element) {
      var start = _Date$now();
      var animator;
      var animate = function animate(from) {
        animator = requestAnimationFrame(function () {
          // eslint-disable-next-line no-magic-numbers
          var nextValue = step(from, to, squareStepper, (_Date$now() - start) / 5);

          // eslint-disable-next-line no-magic-numbers
          if (Math.abs(to - nextValue) < 0.5) {
            nextValue = to;
          }
          element.scrollLeft = nextValue;
          if (to === nextValue) {
            onEnd && onEnd(true);
          } else {
            animate(from);
          }
        });
      };
      animate(element.scrollLeft);
      return function () {
        return cancelAnimationFrame(animator);
      };
    }
  }, [element, to, onEnd]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1c2VFZmZlY3QiLCJzdGVwIiwiZnJvbSIsInRvIiwic3RlcHBlciIsImluZGV4IiwibmV4dCIsImkiLCJzcXVhcmVTdGVwcGVyIiwiY3VycmVudCIsInNpZ24iLCJNYXRoIiwic3FydCIsImFicyIsIm1pbiIsIm1heCIsInVzZUFuaW1hdGVTY3JvbGxMZWZ0IiwiZWxlbWVudCIsIm9uRW5kIiwic3RhcnQiLCJhbmltYXRvciIsImFuaW1hdGUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJuZXh0VmFsdWUiLCJzY3JvbGxMZWZ0IiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvaG9va3MvaW50ZXJuYWwvdXNlQW5pbWF0ZVNjcm9sbExlZnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuXG5mdW5jdGlvbiBzdGVwKGZyb20sIHRvLCBzdGVwcGVyLCBpbmRleCkge1xuICBsZXQgbmV4dCA9IGZyb207XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbmRleDsgaSsrKSB7XG4gICAgbmV4dCA9IHN0ZXBwZXIobmV4dCwgdG8pO1xuICB9XG5cbiAgcmV0dXJuIG5leHQ7XG59XG5cbmZ1bmN0aW9uIHNxdWFyZVN0ZXBwZXIoY3VycmVudCwgdG8pIHtcbiAgY29uc3Qgc2lnbiA9IE1hdGguc2lnbih0byAtIGN1cnJlbnQpO1xuICBjb25zdCBzdGVwID0gTWF0aC5zcXJ0KE1hdGguYWJzKHRvIC0gY3VycmVudCkpO1xuICBjb25zdCBuZXh0ID0gY3VycmVudCArIHN0ZXAgKiBzaWduO1xuXG4gIGlmIChzaWduID4gMCkge1xuICAgIHJldHVybiBNYXRoLm1pbih0bywgbmV4dCk7XG4gIH1cblxuICByZXR1cm4gTWF0aC5tYXgodG8sIG5leHQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VBbmltYXRlU2Nyb2xsTGVmdChlbGVtZW50LCB0bywgb25FbmQpIHtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xuXG4gICAgICBsZXQgYW5pbWF0b3I7XG5cbiAgICAgIGNvbnN0IGFuaW1hdGUgPSBmcm9tID0+IHtcbiAgICAgICAgYW5pbWF0b3IgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1tYWdpYy1udW1iZXJzXG4gICAgICAgICAgbGV0IG5leHRWYWx1ZSA9IHN0ZXAoZnJvbSwgdG8sIHNxdWFyZVN0ZXBwZXIsIChEYXRlLm5vdygpIC0gc3RhcnQpIC8gNSk7XG5cbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbWFnaWMtbnVtYmVyc1xuICAgICAgICAgIGlmIChNYXRoLmFicyh0byAtIG5leHRWYWx1ZSkgPCAwLjUpIHtcbiAgICAgICAgICAgIG5leHRWYWx1ZSA9IHRvO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGVsZW1lbnQuc2Nyb2xsTGVmdCA9IG5leHRWYWx1ZTtcblxuICAgICAgICAgIGlmICh0byA9PT0gbmV4dFZhbHVlKSB7XG4gICAgICAgICAgICBvbkVuZCAmJiBvbkVuZCh0cnVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYW5pbWF0ZShmcm9tKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgYW5pbWF0ZShlbGVtZW50LnNjcm9sbExlZnQpO1xuXG4gICAgICByZXR1cm4gKCkgPT4gY2FuY2VsQW5pbWF0aW9uRnJhbWUoYW5pbWF0b3IpO1xuICAgIH1cbiAgfSwgW2VsZW1lbnQsIHRvLCBvbkVuZF0pO1xufVxuIl0sIm1hcHBpbmdzIjoiOztBQUFBLFNBQVNBLFNBQVMsUUFBUSxPQUFPO0FBRWpDLFNBQVNDLElBQUksQ0FBQ0MsSUFBSSxFQUFFQyxFQUFFLEVBQUVDLE9BQU8sRUFBRUMsS0FBSyxFQUFFO0VBQ3RDLElBQUlDLElBQUksR0FBR0osSUFBSTtFQUVmLEtBQUssSUFBSUssQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHRixLQUFLLEVBQUVFLENBQUMsRUFBRSxFQUFFO0lBQzlCRCxJQUFJLEdBQUdGLE9BQU8sQ0FBQ0UsSUFBSSxFQUFFSCxFQUFFLENBQUM7RUFDMUI7RUFFQSxPQUFPRyxJQUFJO0FBQ2I7QUFFQSxTQUFTRSxhQUFhLENBQUNDLE9BQU8sRUFBRU4sRUFBRSxFQUFFO0VBQ2xDLElBQU1PLElBQUksR0FBRyxXQUFVUCxFQUFFLEdBQUdNLE9BQU8sQ0FBQztFQUNwQyxJQUFNUixJQUFJLEdBQUdVLElBQUksQ0FBQ0MsSUFBSSxDQUFDRCxJQUFJLENBQUNFLEdBQUcsQ0FBQ1YsRUFBRSxHQUFHTSxPQUFPLENBQUMsQ0FBQztFQUM5QyxJQUFNSCxJQUFJLEdBQUdHLE9BQU8sR0FBR1IsSUFBSSxHQUFHUyxJQUFJO0VBRWxDLElBQUlBLElBQUksR0FBRyxDQUFDLEVBQUU7SUFDWixPQUFPQyxJQUFJLENBQUNHLEdBQUcsQ0FBQ1gsRUFBRSxFQUFFRyxJQUFJLENBQUM7RUFDM0I7RUFFQSxPQUFPSyxJQUFJLENBQUNJLEdBQUcsQ0FBQ1osRUFBRSxFQUFFRyxJQUFJLENBQUM7QUFDM0I7QUFFQSxlQUFlLFNBQVNVLG9CQUFvQixDQUFDQyxPQUFPLEVBQUVkLEVBQUUsRUFBRWUsS0FBSyxFQUFFO0VBQy9EbEIsU0FBUyxDQUFDLFlBQU07SUFDZCxJQUFJaUIsT0FBTyxFQUFFO01BQ1gsSUFBTUUsS0FBSyxHQUFHLFdBQVU7TUFFeEIsSUFBSUMsUUFBUTtNQUVaLElBQU1DLE9BQU8sR0FBRyxTQUFWQSxPQUFPLENBQUduQixJQUFJLEVBQUk7UUFDdEJrQixRQUFRLEdBQUdFLHFCQUFxQixDQUFDLFlBQU07VUFDckM7VUFDQSxJQUFJQyxTQUFTLEdBQUd0QixJQUFJLENBQUNDLElBQUksRUFBRUMsRUFBRSxFQUFFSyxhQUFhLEVBQUUsQ0FBQyxXQUFVLEdBQUdXLEtBQUssSUFBSSxDQUFDLENBQUM7O1VBRXZFO1VBQ0EsSUFBSVIsSUFBSSxDQUFDRSxHQUFHLENBQUNWLEVBQUUsR0FBR29CLFNBQVMsQ0FBQyxHQUFHLEdBQUcsRUFBRTtZQUNsQ0EsU0FBUyxHQUFHcEIsRUFBRTtVQUNoQjtVQUVBYyxPQUFPLENBQUNPLFVBQVUsR0FBR0QsU0FBUztVQUU5QixJQUFJcEIsRUFBRSxLQUFLb0IsU0FBUyxFQUFFO1lBQ3BCTCxLQUFLLElBQUlBLEtBQUssQ0FBQyxJQUFJLENBQUM7VUFDdEIsQ0FBQyxNQUFNO1lBQ0xHLE9BQU8sQ0FBQ25CLElBQUksQ0FBQztVQUNmO1FBQ0YsQ0FBQyxDQUFDO01BQ0osQ0FBQztNQUVEbUIsT0FBTyxDQUFDSixPQUFPLENBQUNPLFVBQVUsQ0FBQztNQUUzQixPQUFPO1FBQUEsT0FBTUMsb0JBQW9CLENBQUNMLFFBQVEsQ0FBQztNQUFBO0lBQzdDO0VBQ0YsQ0FBQyxFQUFFLENBQUNILE9BQU8sRUFBRWQsRUFBRSxFQUFFZSxLQUFLLENBQUMsQ0FBQztBQUMxQiJ9