import _regeneratorRuntime from "@babel/runtime-corejs3/helpers/regeneratorRuntime";
import _asyncToGenerator from "@babel/runtime-corejs3/helpers/asyncToGenerator";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _setTimeout from "@babel/runtime-corejs3/core-js-stable/set-timeout";
/* eslint no-magic-numbers: ["error", { "ignore": [0, 100] }] */

import memoize from 'memoize-one';
import { useEffect } from 'react';
import debounce from '../../util/debounce';
function sleepZero() {
  return new _Promise(function (resolve) {
    return _setTimeout(function () {
      return resolve();
    });
  });
}
export default function useObserveScrollLeft(callbackRefWithSubscribe, observer) {
  useEffect(function () {
    return callbackRefWithSubscribe.subscribe(function (current) {
      if (!current) {
        return;
      }
      var memoizedEmitValue = memoize(function (initial, fraction, width) {
        return observer && observer({
          initial: initial,
          fraction: fraction,
          width: width
        });
      });
      var emitValue = function emitValue(initial) {
        var offsetWidth = current.offsetWidth,
          scrollLeft = current.scrollLeft,
          scrollWidth = current.scrollWidth;
        memoizedEmitValue(initial, "".concat(scrollWidth === offsetWidth ? 0 : scrollLeft / (scrollWidth - offsetWidth) * 100, "%"), "".concat(offsetWidth / scrollWidth * 100, "%"));
      };
      var handleScroll = function handleScroll() {
        return emitValue(false);
      };
      var handlePointerOver = debounce(function () {
        // We need to send "onScroll" because "scrollWidth" might have changed
        // For example, the container resized, the scroll width will be incorrect
        // We will debounce to prevent "pointerOver" calculating too often
        // We will memoize to prevent firing unnecessary "onScroll"
        emitValue(false);
      });
      current.addEventListener('pointerover', handlePointerOver, {
        passive: true
      });
      current.addEventListener('scroll', handleScroll, {
        passive: true
      });

      // eslint-disable-next-line wrap-iife
      _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!(current.scrollWidth === current.offsetWidth)) {
                _context.next = 3;
                break;
              }
              _context.next = 3;
              return sleepZero();
            case 3:
              emitValue(true);
            case 4:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }))();
      return function () {
        current.removeEventListener('pointerover', handlePointerOver);
        current.removeEventListener('scroll', handleScroll);
      };
    });
  }, [callbackRefWithSubscribe, observer]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZW1vaXplIiwidXNlRWZmZWN0IiwiZGVib3VuY2UiLCJzbGVlcFplcm8iLCJyZXNvbHZlIiwidXNlT2JzZXJ2ZVNjcm9sbExlZnQiLCJjYWxsYmFja1JlZldpdGhTdWJzY3JpYmUiLCJvYnNlcnZlciIsInN1YnNjcmliZSIsImN1cnJlbnQiLCJtZW1vaXplZEVtaXRWYWx1ZSIsImluaXRpYWwiLCJmcmFjdGlvbiIsIndpZHRoIiwiZW1pdFZhbHVlIiwib2Zmc2V0V2lkdGgiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsV2lkdGgiLCJoYW5kbGVTY3JvbGwiLCJoYW5kbGVQb2ludGVyT3ZlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJwYXNzaXZlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9ob29rcy9pbnRlcm5hbC91c2VPYnNlcnZlU2Nyb2xsTGVmdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQgbm8tbWFnaWMtbnVtYmVyczogW1wiZXJyb3JcIiwgeyBcImlnbm9yZVwiOiBbMCwgMTAwXSB9XSAqL1xuXG5pbXBvcnQgbWVtb2l6ZSBmcm9tICdtZW1vaXplLW9uZSc7XG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBkZWJvdW5jZSBmcm9tICcuLi8uLi91dGlsL2RlYm91bmNlJztcblxuZnVuY3Rpb24gc2xlZXBaZXJvKCkge1xuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KCgpID0+IHJlc29sdmUoKSkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VPYnNlcnZlU2Nyb2xsTGVmdChjYWxsYmFja1JlZldpdGhTdWJzY3JpYmUsIG9ic2VydmVyKSB7XG4gIHVzZUVmZmVjdChcbiAgICAoKSA9PlxuICAgICAgY2FsbGJhY2tSZWZXaXRoU3Vic2NyaWJlLnN1YnNjcmliZShjdXJyZW50ID0+IHtcbiAgICAgICAgaWYgKCFjdXJyZW50KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbWVtb2l6ZWRFbWl0VmFsdWUgPSBtZW1vaXplKFxuICAgICAgICAgIChpbml0aWFsLCBmcmFjdGlvbiwgd2lkdGgpID0+IG9ic2VydmVyICYmIG9ic2VydmVyKHsgaW5pdGlhbCwgZnJhY3Rpb24sIHdpZHRoIH0pXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgZW1pdFZhbHVlID0gaW5pdGlhbCA9PiB7XG4gICAgICAgICAgY29uc3QgeyBvZmZzZXRXaWR0aCwgc2Nyb2xsTGVmdCwgc2Nyb2xsV2lkdGggfSA9IGN1cnJlbnQ7XG5cbiAgICAgICAgICBtZW1vaXplZEVtaXRWYWx1ZShcbiAgICAgICAgICAgIGluaXRpYWwsXG4gICAgICAgICAgICBgJHtzY3JvbGxXaWR0aCA9PT0gb2Zmc2V0V2lkdGggPyAwIDogKHNjcm9sbExlZnQgLyAoc2Nyb2xsV2lkdGggLSBvZmZzZXRXaWR0aCkpICogMTAwfSVgLFxuICAgICAgICAgICAgYCR7KG9mZnNldFdpZHRoIC8gc2Nyb2xsV2lkdGgpICogMTAwfSVgXG4gICAgICAgICAgKTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBoYW5kbGVTY3JvbGwgPSAoKSA9PiBlbWl0VmFsdWUoZmFsc2UpO1xuXG4gICAgICAgIGNvbnN0IGhhbmRsZVBvaW50ZXJPdmVyID0gZGVib3VuY2UoKCkgPT4ge1xuICAgICAgICAgIC8vIFdlIG5lZWQgdG8gc2VuZCBcIm9uU2Nyb2xsXCIgYmVjYXVzZSBcInNjcm9sbFdpZHRoXCIgbWlnaHQgaGF2ZSBjaGFuZ2VkXG4gICAgICAgICAgLy8gRm9yIGV4YW1wbGUsIHRoZSBjb250YWluZXIgcmVzaXplZCwgdGhlIHNjcm9sbCB3aWR0aCB3aWxsIGJlIGluY29ycmVjdFxuICAgICAgICAgIC8vIFdlIHdpbGwgZGVib3VuY2UgdG8gcHJldmVudCBcInBvaW50ZXJPdmVyXCIgY2FsY3VsYXRpbmcgdG9vIG9mdGVuXG4gICAgICAgICAgLy8gV2Ugd2lsbCBtZW1vaXplIHRvIHByZXZlbnQgZmlyaW5nIHVubmVjZXNzYXJ5IFwib25TY3JvbGxcIlxuICAgICAgICAgIGVtaXRWYWx1ZShmYWxzZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGN1cnJlbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcm92ZXInLCBoYW5kbGVQb2ludGVyT3ZlciwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuICAgICAgICBjdXJyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGhhbmRsZVNjcm9sbCwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB3cmFwLWlpZmVcbiAgICAgICAgKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoY3VycmVudC5zY3JvbGxXaWR0aCA9PT0gY3VycmVudC5vZmZzZXRXaWR0aCkge1xuICAgICAgICAgICAgLy8gSEFDSzogQ2hyb21lIDY2IHdpbGwgaW5pdGlhbGx5IHNheSBzY3JvbGxXaWR0aCBlcXVhbHMgdG8gb2Zmc2V0V2lkdGgsIHVudGlsIHNvbWUgdGltZSBsYXRlclxuICAgICAgICAgICAgYXdhaXQgc2xlZXBaZXJvKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZW1pdFZhbHVlKHRydWUpO1xuICAgICAgICB9KSgpO1xuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgY3VycmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyb3ZlcicsIGhhbmRsZVBvaW50ZXJPdmVyKTtcbiAgICAgICAgICBjdXJyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGhhbmRsZVNjcm9sbCk7XG4gICAgICAgIH07XG4gICAgICB9KSxcbiAgICBbY2FsbGJhY2tSZWZXaXRoU3Vic2NyaWJlLCBvYnNlcnZlcl1cbiAgKTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUVBLE9BQU9BLE9BQU8s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