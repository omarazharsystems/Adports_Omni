import _slicedToArray from "@babel/runtime-corejs3/helpers/slicedToArray";
import PropTypes from 'prop-types';
import React, { useCallback } from 'react';
import useIndex from './hooks/useIndex';
import useScrollTo from './hooks/useScrollTo';
var Dot = function Dot(_ref) {
  var ariaLabel = _ref['aria-label'],
    itemIndex = _ref.itemIndex;
  var _useIndex = useIndex(),
    _useIndex2 = _slicedToArray(_useIndex, 1),
    index = _useIndex2[0];
  var scrollTo = useScrollTo();
  var checked = index === itemIndex;
  var handleChange = useCallback(function () {
    return scrollTo(function () {
      return itemIndex;
    });
  }, [itemIndex, scrollTo]);
  var handleKeyPress = useCallback(function (event) {
    var keyCode = event.keyCode;

    // 13 is ENTER, 32 is SPACEBAR.
    // eslint-disable-next-line no-magic-numbers
    if (keyCode === 13 || keyCode === 32) {
      event.preventDefault();
      event.stopPropagation();
      handleChange();
    }
  }, [handleChange]);
  return /*#__PURE__*/React.createElement("li", {
    className: "react-film__dot"
  }, /*#__PURE__*/React.createElement("input", {
    "aria-label": ariaLabel,
    "aria-pressed": checked,
    checked: checked,
    className: "react-film__dot__input",
    onChange: handleChange,
    onKeyPress: handleKeyPress,
    role: "button",
    type: "checkbox"
  }), /*#__PURE__*/React.createElement("div", {
    className: "react-film__dot__handle"
  }));
};
Dot.defaultProps = {
  'aria-label': undefined
};
Dot.propTypes = {
  'aria-label': PropTypes.string,
  itemIndex: PropTypes.number.isRequired
};
export default Dot;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wVHlwZXMiLCJSZWFjdCIsInVzZUNhbGxiYWNrIiwidXNlSW5kZXgiLCJ1c2VTY3JvbGxUbyIsIkRvdCIsImFyaWFMYWJlbCIsIml0ZW1JbmRleCIsImluZGV4Iiwic2Nyb2xsVG8iLCJjaGVja2VkIiwiaGFuZGxlQ2hhbmdlIiwiaGFuZGxlS2V5UHJlc3MiLCJldmVudCIsImtleUNvZGUiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImRlZmF1bHRQcm9wcyIsInVuZGVmaW5lZCIsInByb3BUeXBlcyIsInN0cmluZyIsIm51bWJlciIsImlzUmVxdWlyZWQiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvRG90LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB1c2VJbmRleCBmcm9tICcuL2hvb2tzL3VzZUluZGV4JztcbmltcG9ydCB1c2VTY3JvbGxUbyBmcm9tICcuL2hvb2tzL3VzZVNjcm9sbFRvJztcblxuY29uc3QgRG90ID0gKHsgJ2FyaWEtbGFiZWwnOiBhcmlhTGFiZWwsIGl0ZW1JbmRleCB9KSA9PiB7XG4gIGNvbnN0IFtpbmRleF0gPSB1c2VJbmRleCgpO1xuICBjb25zdCBzY3JvbGxUbyA9IHVzZVNjcm9sbFRvKCk7XG5cbiAgY29uc3QgY2hlY2tlZCA9IGluZGV4ID09PSBpdGVtSW5kZXg7XG4gIGNvbnN0IGhhbmRsZUNoYW5nZSA9IHVzZUNhbGxiYWNrKCgpID0+IHNjcm9sbFRvKCgpID0+IGl0ZW1JbmRleCksIFtpdGVtSW5kZXgsIHNjcm9sbFRvXSk7XG5cbiAgY29uc3QgaGFuZGxlS2V5UHJlc3MgPSB1c2VDYWxsYmFjayhcbiAgICBldmVudCA9PiB7XG4gICAgICBjb25zdCB7IGtleUNvZGUgfSA9IGV2ZW50O1xuXG4gICAgICAvLyAxMyBpcyBFTlRFUiwgMzIgaXMgU1BBQ0VCQVIuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbWFnaWMtbnVtYmVyc1xuICAgICAgaWYgKGtleUNvZGUgPT09IDEzIHx8IGtleUNvZGUgPT09IDMyKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBoYW5kbGVDaGFuZ2UoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtoYW5kbGVDaGFuZ2VdXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8bGkgY2xhc3NOYW1lPVwicmVhY3QtZmlsbV9fZG90XCI+XG4gICAgICA8aW5wdXRcbiAgICAgICAgYXJpYS1sYWJlbD17YXJpYUxhYmVsfVxuICAgICAgICBhcmlhLXByZXNzZWQ9e2NoZWNrZWR9XG4gICAgICAgIGNoZWNrZWQ9e2NoZWNrZWR9XG4gICAgICAgIGNsYXNzTmFtZT1cInJlYWN0LWZpbG1fX2RvdF9faW5wdXRcIlxuICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxuICAgICAgICBvbktleVByZXNzPXtoYW5kbGVLZXlQcmVzc31cbiAgICAgICAgcm9sZT1cImJ1dHRvblwiXG4gICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAvPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZWFjdC1maWxtX19kb3RfX2hhbmRsZVwiIC8+XG4gICAgPC9saT5cbiAgKTtcbn07XG5cbkRvdC5kZWZhdWx0UHJvcHMgPSB7XG4gICdhcmlhLWxhYmVsJzogdW5kZWZpbmVkXG59O1xuXG5Eb3QucHJvcFR5cGVzID0ge1xuICAnYXJpYS1sYWJlbCc6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGl0ZW1JbmRleDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXG59O1xuXG5leHBvcnQgZGVmYXVsdCBEb3Q7XG4iXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPQSxTQUFTLE1BQU0sWUFBWTtBQUNsQyxPQUFPQyxLQUFLLElBQUlDLFdBQVcsUUFBUSxPQUFPO0FBRTFDLE9BQU9DLFFBQVEsTUFBTSxrQkFBa0I7QUFDdkMsT0FBT0MsV0FBVyxNQUFNLHFCQUFxQjtBQUU3QyxJQUFNQyxHQUFHLEdBQUcsU0FBTkEsR0FBRyxPQUErQztFQUFBLElBQTNCQyxTQUFTLFFBQXZCLFlBQVk7SUFBYUMsU0FBUyxRQUFUQSxTQUFTO0VBQy9DLGdCQUFnQkosUUFBUSxFQUFFO0lBQUE7SUFBbkJLLEtBQUs7RUFDWixJQUFNQyxRQUFRLEdBQUdMLFdBQVcsRUFBRTtFQUU5QixJQUFNTSxPQUFPLEdBQUdGLEtBQUssS0FBS0QsU0FBUztFQUNuQyxJQUFNSSxZQUFZLEdBQUdULFdBQVcsQ0FBQztJQUFBLE9BQU1PLFFBQVEsQ0FBQztNQUFBLE9BQU1GLFNBQVM7SUFBQSxFQUFDO0VBQUEsR0FBRSxDQUFDQSxTQUFTLEVBQUVFLFFBQVEsQ0FBQyxDQUFDO0VBRXhGLElBQU1HLGNBQWMsR0FBR1YsV0FBVyxDQUNoQyxVQUFBVyxLQUFLLEVBQUk7SUFDUCxJQUFRQyxPQUFPLEdBQUtELEtBQUssQ0FBakJDLE9BQU87O0lBRWY7SUFDQTtJQUNBLElBQUlBLE9BQU8sS0FBSyxFQUFFLElBQUlBLE9BQU8sS0FBSyxFQUFFLEVBQUU7TUFDcENELEtBQUssQ0FBQ0UsY0FBYyxFQUFFO01BQ3RCRixLQUFLLENBQUNHLGVBQWUsRUFBRTtNQUN2QkwsWUFBWSxFQUFFO0lBQ2hCO0VBQ0YsQ0FBQyxFQUNELENBQUNBLFlBQVksQ0FBQyxDQUNmO0VBRUQsb0JBQ0U7SUFBSSxTQUFTLEVBQUM7RUFBaUIsZ0JBQzdCO0lBQ0UsY0FBWUwsU0FBVTtJQUN0QixnQkFBY0ksT0FBUTtJQUN0QixPQUFPLEVBQUVBLE9BQVE7SUFDakIsU0FBUyxFQUFDLHdCQUF3QjtJQUNsQyxRQUFRLEVBQUVDLFlBQWE7SUFDdkIsVUFBVSxFQUFFQyxjQUFlO0lBQzNCLElBQUksRUFBQyxRQUFRO0lBQ2IsSUFBSSxFQUFDO0VBQVUsRUFDZixlQUNGO0lBQUssU0FBUyxFQUFDO0VBQXlCLEVBQUcsQ0FDeEM7QUFFVCxDQUFDO0FBRURQLEdBQUcsQ0FBQ1ksWUFBWSxHQUFHO0VBQ2pCLFlBQVksRUFBRUM7QUFDaEIsQ0FBQztBQUVEYixHQUFHLENBQUNjLFNBQVMsR0FBRztFQUNkLFlBQVksRUFBRW5CLFNBQVMsQ0FBQ29CLE1BQU07RUFDOUJiLFNBQVMsRUFBRVAsU0FBUyxDQUFDcUIsTUFBTSxDQUFDQztBQUM5QixDQUFDO0FBRUQsZUFBZWpCLEdBQUcifQ==