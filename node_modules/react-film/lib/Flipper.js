"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");
var _interopRequireWildcard = require("@babel/runtime-corejs3/helpers/interopRequireWildcard").default;
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/slicedToArray"));
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _useDir3 = _interopRequireDefault(require("./hooks/useDir"));
var _useScrollBarPercentage = _interopRequireDefault(require("./hooks/useScrollBarPercentage"));
var _useScrollOneLeft = _interopRequireDefault(require("./hooks/useScrollOneLeft"));
var _useScrollOneRight = _interopRequireDefault(require("./hooks/useScrollOneRight"));
var Flipper = function Flipper(_ref) {
  var ariaLabel = _ref['aria-label'],
    blurFocusOnClick = _ref.blurFocusOnClick,
    children = _ref.children,
    mode = _ref.mode;
  var _useDir = (0, _useDir3.default)(),
    _useDir2 = (0, _slicedToArray2.default)(_useDir, 1),
    dir = _useDir2[0];
  var _useScrollBarPercenta = (0, _useScrollBarPercentage.default)(),
    _useScrollBarPercenta2 = (0, _slicedToArray2.default)(_useScrollBarPercenta, 1),
    scrollBarPercentage = _useScrollBarPercenta2[0];
  var buttonRef = (0, _react.useRef)();
  var left = mode === 'left';
  var scrollOneLeft = (0, _useScrollOneLeft.default)();
  var scrollOneRight = (0, _useScrollOneRight.default)();
  var handleClick = (0, _react.useCallback)(function () {
    left ? scrollOneLeft() : scrollOneRight();
    blurFocusOnClick && buttonRef.current && buttonRef.current.blur();
  }, [blurFocusOnClick, buttonRef, left, scrollOneLeft, scrollOneRight]);
  var handleKeyDown = (0, _react.useCallback)(function (event) {
    var key = event.key;
    if (key === 'Enter' || key === ' ') {
      event.preventDefault();
      left ? scrollOneLeft() : scrollOneRight();
    }
  }, [left, scrollOneLeft, scrollOneRight]);
  var hide;
  if (dir === 'rtl') {
    if (left) {
      hide = scrollBarPercentage === '100%' || scrollBarPercentage === '-100%';
    } else {
      hide = scrollBarPercentage === '0%';
    }
  } else {
    if (left) {
      hide = scrollBarPercentage === '0%';
    } else {
      hide = scrollBarPercentage === '100%';
    }
  }
  return /*#__PURE__*/_react.default.createElement("button", {
    "aria-label": ariaLabel || (left ? 'left' : 'right'),
    className: (0, _classnames.default)('react-film__flipper', 'react-film__main__overlay', {
      'react-film__flipper--left': left,
      'react-film__flipper--right': !left
    }),
    onClick: handleClick,
    onKeyDown: handleKeyDown,
    ref: buttonRef,
    type: "button"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('react-film__flipper__slider', 'react-film__main__slider', {
      'react-film__main__slider--hide': hide,
      'react-film__main__slider--left': left,
      'react-film__main__slider--right': !left
    })
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "react-film__flipper__body"
  }, children)));
};
Flipper.defaultProps = {
  'aria-label': undefined,
  blurFocusOnClick: false,
  children: undefined,
  mode: 'left'
};
Flipper.propTypes = {
  'aria-label': _propTypes.default.string,
  blurFocusOnClick: _propTypes.default.bool,
  children: _propTypes.default.any,
  mode: _propTypes.default.oneOf(['left', 'right'])
};
var _default = Flipper;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGbGlwcGVyIiwiYXJpYUxhYmVsIiwiYmx1ckZvY3VzT25DbGljayIsImNoaWxkcmVuIiwibW9kZSIsInVzZURpciIsImRpciIsInVzZVNjcm9sbEJhclBlcmNlbnRhZ2UiLCJzY3JvbGxCYXJQZXJjZW50YWdlIiwiYnV0dG9uUmVmIiwidXNlUmVmIiwibGVmdCIsInNjcm9sbE9uZUxlZnQiLCJ1c2VTY3JvbGxPbmVMZWZ0Iiwic2Nyb2xsT25lUmlnaHQiLCJ1c2VTY3JvbGxPbmVSaWdodCIsImhhbmRsZUNsaWNrIiwidXNlQ2FsbGJhY2siLCJjdXJyZW50IiwiYmx1ciIsImhhbmRsZUtleURvd24iLCJldmVudCIsImtleSIsInByZXZlbnREZWZhdWx0IiwiaGlkZSIsImNsYXNzTmFtZXMiLCJkZWZhdWx0UHJvcHMiLCJ1bmRlZmluZWQiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJib29sIiwiYW55Iiwib25lT2YiXSwic291cmNlcyI6WyIuLi9zcmMvRmxpcHBlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2ssIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHVzZURpciBmcm9tICcuL2hvb2tzL3VzZURpcic7XG5pbXBvcnQgdXNlU2Nyb2xsQmFyUGVyY2VudGFnZSBmcm9tICcuL2hvb2tzL3VzZVNjcm9sbEJhclBlcmNlbnRhZ2UnO1xuaW1wb3J0IHVzZVNjcm9sbE9uZUxlZnQgZnJvbSAnLi9ob29rcy91c2VTY3JvbGxPbmVMZWZ0JztcbmltcG9ydCB1c2VTY3JvbGxPbmVSaWdodCBmcm9tICcuL2hvb2tzL3VzZVNjcm9sbE9uZVJpZ2h0JztcblxuY29uc3QgRmxpcHBlciA9ICh7ICdhcmlhLWxhYmVsJzogYXJpYUxhYmVsLCBibHVyRm9jdXNPbkNsaWNrLCBjaGlsZHJlbiwgbW9kZSB9KSA9PiB7XG4gIGNvbnN0IFtkaXJdID0gdXNlRGlyKCk7XG4gIGNvbnN0IFtzY3JvbGxCYXJQZXJjZW50YWdlXSA9IHVzZVNjcm9sbEJhclBlcmNlbnRhZ2UoKTtcbiAgY29uc3QgYnV0dG9uUmVmID0gdXNlUmVmKCk7XG4gIGNvbnN0IGxlZnQgPSBtb2RlID09PSAnbGVmdCc7XG4gIGNvbnN0IHNjcm9sbE9uZUxlZnQgPSB1c2VTY3JvbGxPbmVMZWZ0KCk7XG4gIGNvbnN0IHNjcm9sbE9uZVJpZ2h0ID0gdXNlU2Nyb2xsT25lUmlnaHQoKTtcblxuICBjb25zdCBoYW5kbGVDbGljayA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBsZWZ0ID8gc2Nyb2xsT25lTGVmdCgpIDogc2Nyb2xsT25lUmlnaHQoKTtcbiAgICBibHVyRm9jdXNPbkNsaWNrICYmIGJ1dHRvblJlZi5jdXJyZW50ICYmIGJ1dHRvblJlZi5jdXJyZW50LmJsdXIoKTtcbiAgfSwgW2JsdXJGb2N1c09uQ2xpY2ssIGJ1dHRvblJlZiwgbGVmdCwgc2Nyb2xsT25lTGVmdCwgc2Nyb2xsT25lUmlnaHRdKTtcblxuICBjb25zdCBoYW5kbGVLZXlEb3duID0gdXNlQ2FsbGJhY2soXG4gICAgZXZlbnQgPT4ge1xuICAgICAgY29uc3QgeyBrZXkgfSA9IGV2ZW50O1xuXG4gICAgICBpZiAoa2V5ID09PSAnRW50ZXInIHx8IGtleSA9PT0gJyAnKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGxlZnQgPyBzY3JvbGxPbmVMZWZ0KCkgOiBzY3JvbGxPbmVSaWdodCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgW2xlZnQsIHNjcm9sbE9uZUxlZnQsIHNjcm9sbE9uZVJpZ2h0XVxuICApO1xuXG4gIGxldCBoaWRlO1xuXG4gIGlmIChkaXIgPT09ICdydGwnKSB7XG4gICAgaWYgKGxlZnQpIHtcbiAgICAgIGhpZGUgPSBzY3JvbGxCYXJQZXJjZW50YWdlID09PSAnMTAwJScgfHwgc2Nyb2xsQmFyUGVyY2VudGFnZSA9PT0gJy0xMDAlJztcbiAgICB9IGVsc2Uge1xuICAgICAgaGlkZSA9IHNjcm9sbEJhclBlcmNlbnRhZ2UgPT09ICcwJSc7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChsZWZ0KSB7XG4gICAgICBoaWRlID0gc2Nyb2xsQmFyUGVyY2VudGFnZSA9PT0gJzAlJztcbiAgICB9IGVsc2Uge1xuICAgICAgaGlkZSA9IHNjcm9sbEJhclBlcmNlbnRhZ2UgPT09ICcxMDAlJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxidXR0b25cbiAgICAgIGFyaWEtbGFiZWw9e2FyaWFMYWJlbCB8fCAobGVmdCA/ICdsZWZ0JyA6ICdyaWdodCcpfVxuICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCdyZWFjdC1maWxtX19mbGlwcGVyJywgJ3JlYWN0LWZpbG1fX21haW5fX292ZXJsYXknLCB7XG4gICAgICAgICdyZWFjdC1maWxtX19mbGlwcGVyLS1sZWZ0JzogbGVmdCxcbiAgICAgICAgJ3JlYWN0LWZpbG1fX2ZsaXBwZXItLXJpZ2h0JzogIWxlZnRcbiAgICAgIH0pfVxuICAgICAgb25DbGljaz17aGFuZGxlQ2xpY2t9XG4gICAgICBvbktleURvd249e2hhbmRsZUtleURvd259XG4gICAgICByZWY9e2J1dHRvblJlZn1cbiAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgID5cbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCdyZWFjdC1maWxtX19mbGlwcGVyX19zbGlkZXInLCAncmVhY3QtZmlsbV9fbWFpbl9fc2xpZGVyJywge1xuICAgICAgICAgICdyZWFjdC1maWxtX19tYWluX19zbGlkZXItLWhpZGUnOiBoaWRlLFxuICAgICAgICAgICdyZWFjdC1maWxtX19tYWluX19zbGlkZXItLWxlZnQnOiBsZWZ0LFxuICAgICAgICAgICdyZWFjdC1maWxtX19tYWluX19zbGlkZXItLXJpZ2h0JzogIWxlZnRcbiAgICAgICAgfSl9XG4gICAgICA+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmVhY3QtZmlsbV9fZmxpcHBlcl9fYm9keVwiPntjaGlsZHJlbn08L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvYnV0dG9uPlxuICApO1xufTtcblxuRmxpcHBlci5kZWZhdWx0UHJvcHMgPSB7XG4gICdhcmlhLWxhYmVsJzogdW5kZWZpbmVkLFxuICBibHVyRm9jdXNPbkNsaWNrOiBmYWxzZSxcbiAgY2hpbGRyZW46IHVuZGVmaW5lZCxcbiAgbW9kZTogJ2xlZnQnXG59O1xuXG5GbGlwcGVyLnByb3BUeXBlcyA9IHtcbiAgJ2FyaWEtbGFiZWwnOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBibHVyRm9jdXNPbkNsaWNrOiBQcm9wVHlwZXMuYm9vbCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5hbnksXG4gIG1vZGU6IFByb3BUeXBlcy5vbmVPZihbJ2xlZnQnLCAncmlnaHQnXSlcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEZsaXBwZXI7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLElBQU1BLE9BQU8sR0FBRyxTQUFWQSxPQUFPLE9BQXNFO0VBQUEsSUFBbERDLFNBQVMsUUFBdkIsWUFBWTtJQUFhQyxnQkFBZ0IsUUFBaEJBLGdCQUFnQjtJQUFFQyxRQUFRLFFBQVJBLFFBQVE7SUFBRUMsSUFBSSxRQUFKQSxJQUFJO0VBQzFFLGNBQWMsSUFBQUMsZ0JBQU0sR0FBRTtJQUFBO0lBQWZDLEdBQUc7RUFDViw0QkFBOEIsSUFBQUMsK0JBQXNCLEdBQUU7SUFBQTtJQUEvQ0MsbUJBQW1CO0VBQzFCLElBQU1DLFNBQVMsR0FBRyxJQUFBQyxhQUFNLEdBQUU7RUFDMUIsSUFBTUMsSUFBSSxHQUFHUCxJQUFJLEtBQUssTUFBTTtFQUM1QixJQUFNUSxhQUFhLEdBQUcsSUFBQUMseUJBQWdCLEdBQUU7RUFDeEMsSUFBTUMsY0FBYyxHQUFHLElBQUFDLDBCQUFpQixHQUFFO0VBRTFD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