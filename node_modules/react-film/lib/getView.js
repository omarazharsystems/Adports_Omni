"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");
var _interopRequireWildcard = require("@babel/runtime-corejs3/helpers/interopRequireWildcard").default;
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getView;
var _slice = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/slice"));
var browser = _interopRequireWildcard(require("./browser"));
var _best = _interopRequireDefault(require("./util/best"));
/* eslint no-magic-numbers: "off" */

function getView(dir, scrollable, itemContainer, scrollingTo) {
  var rtl = dir === 'rtl';
  if (itemContainer && scrollable) {
    var scrollLeft = scrollingTo || scrollable.scrollLeft;
    var trueScrollLeft = rtl && (browser.edgeUWP || browser.internetExplorer) ? -scrollLeft : scrollLeft;
    var items = itemContainer.children; // This will enumerate <li> inside <FilmStrip>
    var scrollCenter = trueScrollLeft + scrollable.offsetWidth / 2;
    var index = (0, _best.default)((0, _slice.default)([]).call(items), function (item) {
      var offsetCenter = item.offsetLeft + item.offsetWidth / 2;
      return 1 / Math.abs(scrollCenter - offsetCenter);
    });
    if (~index) {
      var item = items[index];
      var offsetCenter = item.offsetLeft + item.offsetWidth / 2;
      var indexFraction = index + (scrollCenter - offsetCenter) / item.offsetWidth * (rtl ? -1 : 1);

      // We "fix" indexFraction if the viewport is at the start/end of the content
      // This is to simplify code that use Math.round(indexFraction) to find the scrollable index
      // if (scrollLeft === 0) {
      //   indexFraction = 0;
      // } else if (scrollLeft >= scrollable.scrollWidth - scrollable.offsetWidth) {
      //   indexFraction = items.length - 1;
      // } else if (indexFraction % 1 > .99 || indexFraction % 1 < .01) {
      //   indexFraction = Math.round(indexFraction);
      // }

      if (indexFraction % 1 > 0.99 || indexFraction % 1 < 0.01) {
        indexFraction = Math.round(indexFraction);
      }
      var selectedIndex;
      if (Math.abs(trueScrollLeft) < 1) {
        selectedIndex = 0;
      } else if (rtl ? trueScrollLeft <= scrollable.offsetWidth - scrollable.scrollWidth : trueScrollLeft >= scrollable.scrollWidth - scrollable.offsetWidth) {
        selectedIndex = items.length - 1;
      } else {
        selectedIndex = Math.round(indexFraction);
      }
      return {
        index: selectedIndex,
        indexFraction: indexFraction
      };
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZXRWaWV3IiwiZGlyIiwic2Nyb2xsYWJsZSIsIml0ZW1Db250YWluZXIiLCJzY3JvbGxpbmdUbyIsInJ0bCIsInNjcm9sbExlZnQiLCJ0cnVlU2Nyb2xsTGVmdCIsImJyb3dzZXIiLCJlZGdlVVdQIiwiaW50ZXJuZXRFeHBsb3JlciIsIml0ZW1zIiwiY2hpbGRyZW4iLCJzY3JvbGxDZW50ZXIiLCJvZmZzZXRXaWR0aCIsImluZGV4IiwiYmVzdCIsImNhbGwiLCJpdGVtIiwib2Zmc2V0Q2VudGVyIiwib2Zmc2V0TGVmdCIsIk1hdGgiLCJhYnMiLCJpbmRleEZyYWN0aW9uIiwicm91bmQiLCJzZWxlY3RlZEluZGV4Iiwic2Nyb2xsV2lkdGgiLCJsZW5ndGgiXSwic291cmNlcyI6WyIuLi9zcmMvZ2V0Vmlldy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQgbm8tbWFnaWMtbnVtYmVyczogXCJvZmZcIiAqL1xuXG5pbXBvcnQgKiBhcyBicm93c2VyIGZyb20gJy4vYnJvd3Nlcic7XG5pbXBvcnQgYmVzdCBmcm9tICcuL3V0aWwvYmVzdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFZpZXcoZGlyLCBzY3JvbGxhYmxlLCBpdGVtQ29udGFpbmVyLCBzY3JvbGxpbmdUbykge1xuICBjb25zdCBydGwgPSBkaXIgPT09ICdydGwnO1xuXG4gIGlmIChpdGVtQ29udGFpbmVyICYmIHNjcm9sbGFibGUpIHtcbiAgICBjb25zdCBzY3JvbGxMZWZ0ID0gc2Nyb2xsaW5nVG8gfHwgc2Nyb2xsYWJsZS5zY3JvbGxMZWZ0O1xuICAgIGNvbnN0IHRydWVTY3JvbGxMZWZ0ID0gcnRsICYmIChicm93c2VyLmVkZ2VVV1AgfHwgYnJvd3Nlci5pbnRlcm5ldEV4cGxvcmVyKSA/IC1zY3JvbGxMZWZ0IDogc2Nyb2xsTGVmdDtcbiAgICBjb25zdCBpdGVtcyA9IGl0ZW1Db250YWluZXIuY2hpbGRyZW47IC8vIFRoaXMgd2lsbCBlbnVtZXJhdGUgPGxpPiBpbnNpZGUgPEZpbG1TdHJpcD5cbiAgICBjb25zdCBzY3JvbGxDZW50ZXIgPSB0cnVlU2Nyb2xsTGVmdCArIHNjcm9sbGFibGUub2Zmc2V0V2lkdGggLyAyO1xuICAgIGNvbnN0IGluZGV4ID0gYmVzdChbXS5zbGljZS5jYWxsKGl0ZW1zKSwgaXRlbSA9PiB7XG4gICAgICBjb25zdCBvZmZzZXRDZW50ZXIgPSBpdGVtLm9mZnNldExlZnQgKyBpdGVtLm9mZnNldFdpZHRoIC8gMjtcblxuICAgICAgcmV0dXJuIDEgLyBNYXRoLmFicyhzY3JvbGxDZW50ZXIgLSBvZmZzZXRDZW50ZXIpO1xuICAgIH0pO1xuXG4gICAgaWYgKH5pbmRleCkge1xuICAgICAgY29uc3QgaXRlbSA9IGl0ZW1zW2luZGV4XTtcblxuICAgICAgY29uc3Qgb2Zmc2V0Q2VudGVyID0gaXRlbS5vZmZzZXRMZWZ0ICsgaXRlbS5vZmZzZXRXaWR0aCAvIDI7XG4gICAgICBsZXQgaW5kZXhGcmFjdGlvbiA9IGluZGV4ICsgKChzY3JvbGxDZW50ZXIgLSBvZmZzZXRDZW50ZXIpIC8gaXRlbS5vZmZzZXRXaWR0aCkgKiAocnRsID8gLTEgOiAxKTtcblxuICAgICAgLy8gV2UgXCJmaXhcIiBpbmRleEZyYWN0aW9uIGlmIHRoZSB2aWV3cG9ydCBpcyBhdCB0aGUgc3RhcnQvZW5kIG9mIHRoZSBjb250ZW50XG4gICAgICAvLyBUaGlzIGlzIHRvIHNpbXBsaWZ5IGNvZGUgdGhhdCB1c2UgTWF0aC5yb3VuZChpbmRleEZyYWN0aW9uKSB0byBmaW5kIHRoZSBzY3JvbGxhYmxlIGluZGV4XG4gICAgICAvLyBpZiAoc2Nyb2xsTGVmdCA9PT0gMCkge1xuICAgICAgLy8gICBpbmRleEZyYWN0aW9uID0gMDtcbiAgICAgIC8vIH0gZWxzZSBpZiAoc2Nyb2xsTGVmdCA+PSBzY3JvbGxhYmxlLnNjcm9sbFdpZHRoIC0gc2Nyb2xsYWJsZS5vZmZzZXRXaWR0aCkge1xuICAgICAgLy8gICBpbmRleEZyYWN0aW9uID0gaXRlbXMubGVuZ3RoIC0gMTtcbiAgICAgIC8vIH0gZWxzZSBpZiAoaW5kZXhGcmFjdGlvbiAlIDEgPiAuOTkgfHwgaW5kZXhGcmFjdGlvbiAlIDEgPCAuMDEpIHtcbiAgICAgIC8vICAgaW5kZXhGcmFjdGlvbiA9IE1hdGgucm91bmQoaW5kZXhGcmFjdGlvbik7XG4gICAgICAvLyB9XG5cbiAgICAgIGlmIChpbmRleEZyYWN0aW9uICUgMSA+IDAuOTkgfHwgaW5kZXhGcmFjdGlvbiAlIDEgPCAwLjAxKSB7XG4gICAgICAgIGluZGV4RnJhY3Rpb24gPSBNYXRoLnJvdW5kKGluZGV4RnJhY3Rpb24pO1xuICAgICAgfVxuXG4gICAgICBsZXQgc2VsZWN0ZWRJbmRleDtcblxuICAgICAgaWYgKE1hdGguYWJzKHRydWVTY3JvbGxMZWZ0KSA8IDEpIHtcbiAgICAgICAgc2VsZWN0ZWRJbmRleCA9IDA7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBydGxcbiAgICAgICAgICA/IHRydWVTY3JvbGxMZWZ0IDw9IHNjcm9sbGFibGUub2Zmc2V0V2lkdGggLSBzY3JvbGxhYmxlLnNjcm9sbFdpZHRoXG4gICAgICAgICAgOiB0cnVlU2Nyb2xsTGVmdCA+PSBzY3JvbGxhYmxlLnNjcm9sbFdpZHRoIC0gc2Nyb2xsYWJsZS5vZmZzZXRXaWR0aFxuICAgICAgKSB7XG4gICAgICAgIHNlbGVjdGVkSW5kZXggPSBpdGVtcy5sZW5ndGggLSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZWN0ZWRJbmRleCA9IE1hdGgucm91bmQoaW5kZXhGcmFjdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGluZGV4OiBzZWxlY3RlZEluZGV4LFxuICAgICAgICBpbmRleEZyYWN0aW9uXG4gICAgICB9O1xuICAgIH1cbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBRUE7QUFDQTtBQUhBOztBQUtlLFNBQVNBLE9BQU8sQ0FBQ0MsR0FBRyxFQUFFQyxVQUFVLEVBQUVDLGFBQWEsRUFBRUMsV0FBVyxFQUFFO0VBQzNFLElBQU1DLEdBQUcsR0FBR0osR0FBRyxLQUFLLEtBQUs7RUFFekIsSUFBSUUsYUFBYSxJQUFJRCxVQUFVLEVBQUU7SUFDL0IsSUFBTUksVUFBVSxHQUFHRixXQUFXLElBQUlGLFVBQVUsQ0FBQ0ksVUFBVTtJQUN2RCxJQUFNQyxjQUFjLEdBQUdGLEdBQUcsS0FBS0csT0FBTyxDQUFDQyxPQUFPLElBQUlELE9BQU8sQ0FBQ0UsZ0JBQWdCLENBQUMsR0FBRyxDQUFDSixVQUFVLEdBQUdBLFVBQVU7SUFDdEcsSUFBTUssS0FBSyxHQUFHUixhQUFhLENBQUNTLFFBQVEsQ0FBQyxDQUFDO0lBQ3RDLElBQU1DLFlBQVksR0FBR04sY0FBYyxHQUFHTCxVQUFVLENBQUNZLFdBQVcsR0FBRyxDQUFDO0lBQ2hFLElBQU1DLEtBQUssR0FBRyxJQUFBQyxhQUFJLEVBQUMsc0JBQUUsRUFBT0MsSUFBSSxDQUFDTixLQUFLLENBQUMsRUFBRSxVQUFBTyxJQUFJLEVBQUk7TUFDL0MsSUFBTUMsWUFBWSxHQUFHRCxJQUFJLENBQUNFLFVBQVUsR0FBR0YsSUFBSSxDQUFDSixXQUFXLEdBQUcsQ0FBQztNQUUzRCxPQUFPLENBQUMsR0FBR08sSUFBSSxDQUFDQyxHQUFHLENBQUNULFlBQVksR0FBR00sWUFBWSxDQUFDO0lBQ2xELENBQUMsQ0FBQztJQUVGLElBQUksQ0FBQ0osS0FBSyxFQUFFO01BQ1YsSUFBTUcsSUFBSSxHQUFHUCxLQUFLLENBQUNJLEtBQUssQ0FBQztNQUV6QixJQUFNSSxZQUFZLEdBQUdELElBQUksQ0FBQ0UsVUFBVSxHQUFHRixJQUFJLENBQUNKLFdBQVcsR0FBRyxDQUFDO01BQzNELElBQUlTLGFBQWEsR0FBR1IsS0FBSyxHQUFJLENBQUNGLFlBQVksR0FBR00sWUFBWSxJQUFJRCxJQUFJLENBQUNKLFdBQVcsSUFBS1QsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQzs7TUFFL0Y7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBOztNQUVBLElBQUlrQixhQUFhLEdBQUcsQ0FBQyxHQUFHLElBQUksSUFBSUEsYUFBYSxHQUFHLENBQUMsR0FBRyxJQUFJLEVBQUU7UUFDeERBLGFBQWEsR0FBR0YsSUFBSSxDQUFDRyxLQUFLLENBQUNELGFBQWEsQ0FBQztNQUMzQztNQUVBLElBQUlFLGFBQWE7TUFFakIsSUFBSUosSUFBSSxDQUFDQyxHQUFHLENBQUNmLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNoQ2tCLGFBQWEsR0FBRyxDQUFDO01BQ25CLENBQUMsTUFBTSxJQUNMcEIsR0FBRyxHQUNDRSxjQUFjLElBQUlMLFVBQVUsQ0FBQ1ksV0FBVyxHQUFHWixVQUFVLENBQUN3QixXQUFXLEdBQ2pFbkIsY0FBYyxJQUFJTCxVQUFVLENBQUN3QixXQUFXLEdBQUd4QixVQUFVLENBQUNZLFdBQVcsRUFDckU7UUFDQVcsYUFBYSxHQUFHZCxLQUFLLENBQUNnQixNQUFNLEdBQUcsQ0FBQztNQUNsQyxDQUFDLE1BQU07UUFDTEYsYUFBYSxHQUFHSixJQUFJLENBQUNHLEtBQUssQ0FBQ0QsYUFBYSxDQUFDO01BQzNDO01BRUEsT0FBTztRQUNMUixLQUFLLEVBQUVVLGFBQWE7UUFDcEJGLGFBQWEsRUFBYkE7TUFDRixDQUFDO0lBQ0g7RUFDRjtBQUNGIn0=