"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");
var _interopRequireWildcard = require("@babel/runtime-corejs3/helpers/interopRequireWildcard").default;
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/objectSpread2"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _BasicFilm = _interopRequireDefault(require("./BasicFilm"));
var _Composer = _interopRequireDefault(require("./Composer"));
var ReactFilm = function ReactFilm(_ref) {
  var autoCenter = _ref.autoCenter,
    autoHide = _ref.autoHide,
    autoHideFlipperOnEdge = _ref.autoHideFlipperOnEdge,
    children = _ref.children,
    className = _ref.className,
    dir = _ref.dir,
    flipperBlurFocusOnClick = _ref.flipperBlurFocusOnClick,
    height = _ref.height,
    leftFlipperAriaLabel = _ref.leftFlipperAriaLabel,
    leftFlipperText = _ref.leftFlipperText,
    nonce = _ref.nonce,
    rightFlipperAriaLabel = _ref.rightFlipperAriaLabel,
    rightFlipperText = _ref.rightFlipperText,
    showDots = _ref.showDots,
    showFlipper = _ref.showFlipper,
    showScrollBar = _ref.showScrollBar,
    styleSet = _ref.styleSet;
  var styleOptions = (0, _react.useMemo)(function () {
    return {
      autoCenter: autoCenter,
      autoHide: autoHide,
      autoHideFlipperOnEdge: autoHideFlipperOnEdge,
      dir: dir,
      leftFlipperAriaLabel: leftFlipperAriaLabel,
      leftFlipperText: leftFlipperText,
      flipperBlurFocusOnClick: flipperBlurFocusOnClick,
      rightFlipperAriaLabel: rightFlipperAriaLabel,
      rightFlipperText: rightFlipperText,
      showDots: showDots,
      showFlipper: showFlipper,
      showScrollBar: showScrollBar
    };
  }, [autoCenter, autoHide, autoHideFlipperOnEdge, dir, leftFlipperAriaLabel, leftFlipperText, flipperBlurFocusOnClick, rightFlipperAriaLabel, rightFlipperText, showDots, showFlipper, showScrollBar]);
  return /*#__PURE__*/_react.default.createElement(_Composer.default, {
    dir: dir,
    height: height,
    nonce: nonce,
    numItems: children ? _react.Children.count(children) : 0,
    styleOptions: styleOptions,
    styleSet: styleSet
  }, /*#__PURE__*/_react.default.createElement(_BasicFilm.default, {
    className: className
  }, children));
};
ReactFilm.defaultProps = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, _BasicFilm.default.defaultProps), {}, {
  autoCenter: undefined,
  autoHide: undefined,
  autoHideFlipperOnEdge: undefined,
  children: undefined,
  className: undefined,
  dir: undefined,
  flipperBlurFocusOnClick: undefined,
  leftFlipperAriaLabel: undefined,
  leftFlipperText: undefined,
  nonce: undefined,
  rightFlipperAriaLabel: undefined,
  rightFlipperText: undefined,
  showDots: undefined,
  showFlipper: undefined,
  showScrollBar: undefined,
  styleSet: undefined
});
ReactFilm.propTypes = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, _BasicFilm.default.propTypes), {}, {
  autoCenter: _propTypes.default.bool,
  autoHide: _propTypes.default.bool,
  autoHideFlipperOnEdge: _propTypes.default.bool,
  children: _propTypes.default.any,
  className: _propTypes.default.string,
  dir: _propTypes.default.oneOf(['auto', 'ltr', 'rtl']),
  flipperBlurFocusOnClick: _propTypes.default.bool,
  height: _propTypes.default.number,
  leftFlipperAriaLabel: _propTypes.default.string,
  leftFlipperText: _propTypes.default.string,
  nonce: _propTypes.default.string,
  rightFlipperAriaLabel: _propTypes.default.string,
  rightFlipperText: _propTypes.default.string,
  showDots: _propTypes.default.bool,
  showFlipper: _propTypes.default.bool,
  showScrollBar: _propTypes.default.bool,
  styleSet: _propTypes.default.any
});
var _default = ReactFilm;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdEZpbG0iLCJhdXRvQ2VudGVyIiwiYXV0b0hpZGUiLCJhdXRvSGlkZUZsaXBwZXJPbkVkZ2UiLCJjaGlsZHJlbiIsImNsYXNzTmFtZSIsImRpciIsImZsaXBwZXJCbHVyRm9jdXNPbkNsaWNrIiwiaGVpZ2h0IiwibGVmdEZsaXBwZXJBcmlhTGFiZWwiLCJsZWZ0RmxpcHBlclRleHQiLCJub25jZSIsInJpZ2h0RmxpcHBlckFyaWFMYWJlbCIsInJpZ2h0RmxpcHBlclRleHQiLCJzaG93RG90cyIsInNob3dGbGlwcGVyIiwic2hvd1Njcm9sbEJhciIsInN0eWxlU2V0Iiwic3R5bGVPcHRpb25zIiwidXNlTWVtbyIsIkNoaWxkcmVuIiwiY291bnQiLCJkZWZhdWx0UHJvcHMiLCJCYXNpY0ZpbG0iLCJ1bmRlZmluZWQiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJib29sIiwiYW55Iiwic3RyaW5nIiwib25lT2YiLCJudW1iZXIiXSwic291cmNlcyI6WyIuLi9zcmMvUmVhY3RGaWxtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgQ2hpbGRyZW4sIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBCYXNpY0ZpbG0gZnJvbSAnLi9CYXNpY0ZpbG0nO1xuaW1wb3J0IENvbXBvc2VyIGZyb20gJy4vQ29tcG9zZXInO1xuXG5jb25zdCBSZWFjdEZpbG0gPSAoe1xuICBhdXRvQ2VudGVyLFxuICBhdXRvSGlkZSxcbiAgYXV0b0hpZGVGbGlwcGVyT25FZGdlLFxuICBjaGlsZHJlbixcbiAgY2xhc3NOYW1lLFxuICBkaXIsXG4gIGZsaXBwZXJCbHVyRm9jdXNPbkNsaWNrLFxuICBoZWlnaHQsXG4gIGxlZnRGbGlwcGVyQXJpYUxhYmVsLFxuICBsZWZ0RmxpcHBlclRleHQsXG4gIG5vbmNlLFxuICByaWdodEZsaXBwZXJBcmlhTGFiZWwsXG4gIHJpZ2h0RmxpcHBlclRleHQsXG4gIHNob3dEb3RzLFxuICBzaG93RmxpcHBlcixcbiAgc2hvd1Njcm9sbEJhcixcbiAgc3R5bGVTZXRcbn0pID0+IHtcbiAgY29uc3Qgc3R5bGVPcHRpb25zID0gdXNlTWVtbyhcbiAgICAoKSA9PiAoe1xuICAgICAgYXV0b0NlbnRlcixcbiAgICAgIGF1dG9IaWRlLFxuICAgICAgYXV0b0hpZGVGbGlwcGVyT25FZGdlLFxuICAgICAgZGlyLFxuICAgICAgbGVmdEZsaXBwZXJBcmlhTGFiZWwsXG4gICAgICBsZWZ0RmxpcHBlclRleHQsXG4gICAgICBmbGlwcGVyQmx1ckZvY3VzT25DbGljayxcbiAgICAgIHJpZ2h0RmxpcHBlckFyaWFMYWJlbCxcbiAgICAgIHJpZ2h0RmxpcHBlclRleHQsXG4gICAgICBzaG93RG90cyxcbiAgICAgIHNob3dGbGlwcGVyLFxuICAgICAgc2hvd1Njcm9sbEJhclxuICAgIH0pLFxuICAgIFtcbiAgICAgIGF1dG9DZW50ZXIsXG4gICAgICBhdXRvSGlkZSxcbiAgICAgIGF1dG9IaWRlRmxpcHBlck9uRWRnZSxcbiAgICAgIGRpcixcbiAgICAgIGxlZnRGbGlwcGVyQXJpYUxhYmVsLFxuICAgICAgbGVmdEZsaXBwZXJUZXh0LFxuICAgICAgZmxpcHBlckJsdXJGb2N1c09uQ2xpY2ssXG4gICAgICByaWdodEZsaXBwZXJBcmlhTGFiZWwsXG4gICAgICByaWdodEZsaXBwZXJUZXh0LFxuICAgICAgc2hvd0RvdHMsXG4gICAgICBzaG93RmxpcHBlcixcbiAgICAgIHNob3dTY3JvbGxCYXJcbiAgICBdXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8Q29tcG9zZXJcbiAgICAgIGRpcj17ZGlyfVxuICAgICAgaGVpZ2h0PXtoZWlnaHR9XG4gICAgICBub25jZT17bm9uY2V9XG4gICAgICBudW1JdGVtcz17Y2hpbGRyZW4gPyBDaGlsZHJlbi5jb3VudChjaGlsZHJlbikgOiAwfVxuICAgICAgc3R5bGVPcHRpb25zPXtzdHlsZU9wdGlvbnN9XG4gICAgICBzdHlsZVNldD17c3R5bGVTZXR9XG4gICAgPlxuICAgICAgPEJhc2ljRmlsbSBjbGFzc05hbWU9e2NsYXNzTmFtZX0+e2NoaWxkcmVufTwvQmFzaWNGaWxtPlxuICAgIDwvQ29tcG9zZXI+XG4gICk7XG59O1xuXG5SZWFjdEZpbG0uZGVmYXVsdFByb3BzID0ge1xuICAuLi5CYXNpY0ZpbG0uZGVmYXVsdFByb3BzLFxuICBhdXRvQ2VudGVyOiB1bmRlZmluZWQsXG4gIGF1dG9IaWRlOiB1bmRlZmluZWQsXG4gIGF1dG9IaWRlRmxpcHBlck9uRWRnZTogdW5kZWZpbmVkLFxuICBjaGlsZHJlbjogdW5kZWZpbmVkLFxuICBjbGFzc05hbWU6IHVuZGVmaW5lZCxcbiAgZGlyOiB1bmRlZmluZWQsXG4gIGZsaXBwZXJCbHVyRm9jdXNPbkNsaWNrOiB1bmRlZmluZWQsXG4gIGxlZnRGbGlwcGVyQXJpYUxhYmVsOiB1bmRlZmluZWQsXG4gIGxlZnRGbGlwcGVyVGV4dDogdW5kZWZpbmVkLFxuICBub25jZTogdW5kZWZpbmVkLFxuICByaWdodEZsaXBwZXJBcmlhTGFiZWw6IHVuZGVmaW5lZCxcbiAgcmlnaHRGbGlwcGVyVGV4dDogdW5kZWZpbmVkLFxuICBzaG93RG90czogdW5kZWZpbmVkLFxuICBzaG93RmxpcHBlcjogdW5kZWZpbmVkLFxuICBzaG93U2Nyb2xsQmFyOiB1bmRlZmluZWQsXG4gIHN0eWxlU2V0OiB1bmRlZmluZWRcbn07XG5cblJlYWN0RmlsbS5wcm9wVHlwZXMgPSB7XG4gIC4uLkJhc2ljRmlsbS5wcm9wVHlwZXMsXG4gIGF1dG9DZW50ZXI6IFByb3BUeXBlcy5ib29sLFxuICBhdXRvSGlkZTogUHJvcFR5cGVzLmJvb2wsXG4gIGF1dG9IaWRlRmxpcHBlck9uRWRnZTogUHJvcFR5cGVzLmJvb2wsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55LFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGRpcjogUHJvcFR5cGVzLm9uZU9mKFsnYXV0bycsICdsdHInLCAncnRsJ10pLFxuICBmbGlwcGVyQmx1ckZvY3VzT25DbGljazogUHJvcFR5cGVzLmJvb2wsXG4gIGhlaWdodDogUHJvcFR5cGVzLm51bWJlcixcbiAgbGVmdEZsaXBwZXJBcmlhTGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGxlZnRGbGlwcGVyVGV4dDogUHJvcFR5cGVzLnN0cmluZyxcbiAgbm9uY2U6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHJpZ2h0RmxpcHBlckFyaWFMYWJlbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgcmlnaHRGbGlwcGVyVGV4dDogUHJvcFR5cGVzLnN0cmluZyxcbiAgc2hvd0RvdHM6IFByb3BUeXBlcy5ib29sLFxuICBzaG93RmxpcHBlcjogUHJvcFR5cGVzLmJvb2wsXG4gIHNob3dTY3JvbGxCYXI6IFByb3BUeXBlcy5ib29sLFxuICBzdHlsZVNldDogUHJvcFR5cGVzLmFueVxufTtcblxuZXhwb3J0IGRlZmF1bHQgUmVhY3RGaWxtO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFFQSxJQUFNQSxTQUFTLEdBQUcsU0FBWkEsU0FBUyxPQWtCVDtFQUFBLElBakJKQyxVQUFVLFFBQVZBLFVBQVU7SUFDVkMsUUFBUSxRQUFSQSxRQUFRO0lBQ1JDLHFCQUFxQixRQUFyQkEscUJBQXFCO0lBQ3JCQyxRQUFRLFFBQVJBLFFBQVE7SUFDUkMsU0FBUyxRQUFUQSxTQUFTO0lBQ1RDLEdBQUcsUUFBSEEsR0FBRztJQUNIQyx1QkFBdUIsUUFBdkJBLHVCQUF1QjtJQUN2QkMsTUFBTSxRQUFOQSxNQUFNO0lBQ05DLG9CQUFvQixRQUFwQkEsb0JBQW9CO0lBQ3BCQyxlQUFlLFFBQWZBLGVBQWU7SUFDZkMsS0FBSyxRQUFMQSxLQUFLO0lBQ0xDLHFCQUFxQixRQUFyQkEscUJBQXFCO0lBQ3JCQyxnQkFBZ0IsUUFBaEJBLGdCQUFnQjtJQUNoQkMsUUFBUSxRQUFSQSxRQUFRO0lBQ1JDLFdBQVcsUUFBWEEsV0FBVztJQUNYQyxhQUFhLFFBQWJBLGFBQWE7SUFDYkMsUUFBUSxRQUFS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