"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _simpleUpdateIn = _interopRequireDefault(require("simple-update-in"));

var _botframeworkWebchatCore = require("botframework-webchat-core");

var _WebChatAPIContext = _interopRequireDefault(require("./internal/WebChatAPIContext"));

var _ActivityAcknowledgementComposer = _interopRequireDefault(require("../providers/ActivityAcknowledgement/ActivityAcknowledgementComposer"));

var _ActivityKeyerComposer = _interopRequireDefault(require("../providers/ActivityKeyer/ActivityKeyerComposer"));

var _ActivitySendStatusComposer = _interopRequireDefault(require("../providers/ActivitySendStatus/ActivitySendStatusComposer"));

var _ActivitySendStatusTelemetryComposer = _interopRequireDefault(require("../providers/ActivitySendStatusTelemetry/ActivitySendStatusTelemetryComposer"));

var _createCustomEvent = _interopRequireDefault(require("../utils/createCustomEvent"));

var _createDefaultCardActionMiddleware = _interopRequireDefault(require("./middleware/createDefaultCardActionMiddleware"));

var _createDefaultGroupActivitiesMiddleware = _interopRequireDefault(require("./middleware/createDefaultGroupActivitiesMiddleware"));

var _defaultSelectVoice = _interopRequireDefault(require("./internal/defaultSelectVoice"));

var _ErrorBoundary = _interopRequireDefault(require("./utils/ErrorBoundary"));

var _getAllLocalizedStrings = _interopRequireDefault(require("../localization/getAllLocalizedStrings"));

var _isObject = _interopRequireDefault(require("../utils/isObject"));

var _mapMap = _interopRequireDefault(require("../utils/mapMap"));

var _normalizeLanguage = _interopRequireDefault(require("../utils/normalizeLanguage"));

var _normalizeStyleOptions = _interopRequireDefault(require("../normalizeStyleOptions"));

var _observableToPromise = _interopRequireDefault(require("./utils/observableToPromise"));

var _patchStyleOptionsFromDeprecatedProps = _interopRequireDefault(require("../patchStyleOptionsFromDeprecatedProps"));

var _PonyfillComposer = _interopRequireDefault(require("../providers/Ponyfill/PonyfillComposer"));

var _Tracker = _interopRequireDefault(require("./internal/Tracker"));

var _useMarkAllAsAcknowledged = _interopRequireDefault(require("./useMarkAllAsAcknowledged"));

var _usePonyfill5 = _interopRequireDefault(require("../hooks/usePonyfill"));

var _WebChatReduxContext = _interopRequireWildcard(require("./internal/WebChatReduxContext"));

var _applyMiddleware = _interopRequireWildcard(require("./middleware/applyMiddleware"));

var _PrecompiledGlobalize = _interopRequireDefault(require("../external/PrecompiledGlobalize"));

var _excluded = ["onTelemetry", "store"],
    _excluded2 = ["internalRenderErrorBox", "onTelemetry", "ponyfill"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// List of Redux actions factory we are hoisting as Web Chat functions
var DISPATCHERS = {
  clearSuggestedActions: _botframeworkWebchatCore.clearSuggestedActions,
  dismissNotification: _botframeworkWebchatCore.dismissNotification,
  emitTypingIndicator: _botframeworkWebchatCore.emitTypingIndicator,
  markActivity: _botframeworkWebchatCore.markActivity,
  postActivity: _botframeworkWebchatCore.postActivity,
  sendEvent: _botframeworkWebchatCore.sendEvent,
  sendFiles: _botframeworkWebchatCore.sendFiles,
  sendMessage: _botframeworkWebchatCore.sendMessage,
  sendMessageBack: _botframeworkWebchatCore.sendMessageBack,
  sendPostBack: _botframeworkWebchatCore.sendPostBack,
  setDictateInterims: _botframeworkWebchatCore.setDictateInterims,
  setDictateState: _botframeworkWebchatCore.setDictateState,
  setNotification: _botframeworkWebchatCore.setNotification,
  setSendBox: _botframeworkWebchatCore.setSendBox,
  setSendTimeout: _botframeworkWebchatCore.setSendTimeout,
  startDictate: _botframeworkWebchatCore.startDictate,
  startSpeakingActivity: _botframeworkWebchatCore.startSpeakingActivity,
  stopDictate: _botframeworkWebchatCore.stopDictate,
  stopSpeakingActivity: _botframeworkWebchatCore.stopSpeakingActivity,
  submitSendBox: _botframeworkWebchatCore.submitSendBox
};

function createCardActionContext(_ref) {
  var cardActionMiddleware = _ref.cardActionMiddleware,
      directLine = _ref.directLine,
      dispatch = _ref.dispatch,
      markAllAsAcknowledged = _ref.markAllAsAcknowledged,
      ponyfill = _ref.ponyfill;

  var runMiddleware = _applyMiddleware.default.apply(void 0, ['card action'].concat(_toConsumableArray((0, _botframeworkWebchatCore.singleToArray)(cardActionMiddleware)), [(0, _createDefaultCardActionMiddleware.default)()]))({
    dispatch: dispatch
  });

  return {
    onCardAction: function onCardAction(cardAction) {
      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          target = _ref2.target;

      markAllAsAcknowledged();
      return runMiddleware({
        cardAction: cardAction,
        getSignInUrl: cardAction.type === 'signin' ? function () {
          var value = cardAction.value;

          if (directLine.getSessionId) {
            /**
             * @todo TODO: [P3] We should change this one to async/await.
             *       This is the first place in this project to use async.
             *       Thus, we need to add @babel/plugin-transform-runtime and @babel/runtime.
             */
            return (0, _observableToPromise.default)(directLine.getSessionId(), ponyfill).then(function (sessionId) {
              return "".concat(value).concat(encodeURIComponent("&code_challenge=".concat(sessionId)));
            });
          }

          console.warn('botframework-webchat: OAuth is not supported on this Direct Line adapter.');
          return value;
        } : null,
        target: target
      });
    }
  };
}

function createGroupActivitiesContext(_ref3) {
  var groupActivitiesMiddleware = _ref3.groupActivitiesMiddleware,
      groupTimestamp = _ref3.groupTimestamp,
      ponyfill = _ref3.ponyfill;

  var runMiddleware = _applyMiddleware.default.apply(void 0, ['group activities'].concat(_toConsumableArray((0, _botframeworkWebchatCore.singleToArray)(groupActivitiesMiddleware)), [(0, _createDefaultGroupActivitiesMiddleware.default)({
    groupTimestamp: groupTimestamp,
    ponyfill: ponyfill
  })]));

  return {
    groupActivities: runMiddleware({})
  };
}

function mergeStringsOverrides(localizedStrings, language, overrideLocalizedStrings) {
  if (!overrideLocalizedStrings) {
    return localizedStrings;
  } else if (typeof overrideLocalizedStrings === 'function') {
    var merged = overrideLocalizedStrings(localizedStrings, language);

    if (!(0, _isObject.default)(merged)) {
      throw new Error('botframework-webchat: overrideLocalizedStrings function must return an object.');
    }

    return merged;
  }

  if (!(0, _isObject.default)(overrideLocalizedStrings)) {
    throw new Error('botframework-webchat: overrideLocalizedStrings must be either a function, an object, or falsy.');
  }

  return _objectSpread(_objectSpread({}, localizedStrings), overrideLocalizedStrings);
} // It seems "react/require-default-props" did not pick up `ComposerCore.defaultProps`.
// And it falsely complaint `optional?: string` must have a corresponding `ComposerCore.defaultProps.optional = undefined`, even we already set it below.
// Since we set both TypeScript `Props` class and `ComposerCore.propTypes`, this check will be done there as well.
// Ignoring it in TypeScript version should be safe, as we have `propTypes` version to protect us.

/* eslint-disable react/require-default-props */


/* eslint-enable react/require-default-props */
var ComposerCore = function ComposerCore(_ref4) {
  var activityMiddleware = _ref4.activityMiddleware,
      activityRenderer = _ref4.activityRenderer,
      activityStatusMiddleware = _ref4.activityStatusMiddleware,
      activityStatusRenderer = _ref4.activityStatusRenderer,
      attachmentForScreenReaderMiddleware = _ref4.attachmentForScreenReaderMiddleware,
      attachmentMiddleware = _ref4.attachmentMiddleware,
      attachmentRenderer = _ref4.attachmentRenderer,
      avatarMiddleware = _ref4.avatarMiddleware,
      avatarRenderer = _ref4.avatarRenderer,
      cardActionMiddleware = _ref4.cardActionMiddleware,
      children = _ref4.children,
      dir = _ref4.dir,
      directLine = _ref4.directLine,
      disabled = _ref4.disabled,
      downscaleImageToDataURL = _ref4.downscaleImageToDataURL,
      grammars = _ref4.grammars,
      groupActivitiesMiddleware = _ref4.groupActivitiesMiddleware,
      groupTimestamp = _ref4.groupTimestamp,
      internalErrorBoxClass = _ref4.internalErrorBoxClass,
      locale = _ref4.locale,
      onTelemetry = _ref4.onTelemetry,
      overrideLocalizedStrings = _ref4.overrideLocalizedStrings,
      renderMarkdown = _ref4.renderMarkdown,
      scrollToEndButtonMiddleware = _ref4.scrollToEndButtonMiddleware,
      selectVoice = _ref4.selectVoice,
      sendTimeout = _ref4.sendTimeout,
      sendTypingIndicator = _ref4.sendTypingIndicator,
      styleOptions = _ref4.styleOptions,
      toastMiddleware = _ref4.toastMiddleware,
      toastRenderer = _ref4.toastRenderer,
      typingIndicatorMiddleware = _ref4.typingIndicatorMiddleware,
      typingIndicatorRenderer = _ref4.typingIndicatorRenderer,
      userID = _ref4.userID,
      username = _ref4.username;

  var _usePonyfill = (0, _usePonyfill5.default)(),
      _usePonyfill2 = _slicedToArray(_usePonyfill, 1),
      ponyfill = _usePonyfill2[0];

  var dispatch = (0, _WebChatReduxContext.useDispatch)();
  var telemetryDimensionsRef = (0, _react.useRef)({});
  var patchedDir = (0, _react.useMemo)(function () {
    return dir === 'ltr' || dir === 'rtl' ? dir : 'auto';
  }, [dir]);
  var patchedGrammars = (0, _react.useMemo)(function () {
    return grammars || [];
  }, [grammars]);
  var patchedStyleOptions = (0, _react.useMemo)(function () {
    return (0, _normalizeStyleOptions.default)((0, _patchStyleOptionsFromDeprecatedProps.default)(styleOptions, {
      groupTimestamp: groupTimestamp,
      sendTimeout: sendTimeout
    }));
  }, [groupTimestamp, sendTimeout, styleOptions]);
  (0, _react.useEffect)(function () {
    dispatch((0, _botframeworkWebchatCore.setLanguage)(locale));
  }, [dispatch, locale]);
  (0, _react.useEffect)(function () {
    typeof sendTimeout === 'number' && dispatch((0, _botframeworkWebchatCore.setSendTimeout)(sendTimeout));
  }, [dispatch, sendTimeout]);
  (0, _react.useEffect)(function () {
    dispatch((0, _botframeworkWebchatCore.setSendTypingIndicator)(!!sendTypingIndicator));
  }, [dispatch, sendTypingIndicator]);
  (0, _react.useEffect)(function () {
    dispatch((0, _botframeworkWebchatCore.connect)({
      directLine: directLine,
      userID: userID,
      username: username
    }));
    return function () {
      /**
       * @todo TODO: [P3] disconnect() is an async call (pending -> fulfilled), we need to wait, or change it to reconnect()
       */
      dispatch((0, _botframeworkWebchatCore.disconnect)());
    };
  }, [dispatch, directLine, userID, username]);
  var markAllAsAcknowledged = (0, _useMarkAllAsAcknowledged.default)();
  var cardActionContext = (0, _react.useMemo)(function () {
    return createCardActionContext({
      cardActionMiddleware: cardActionMiddleware,
      directLine: directLine,
      dispatch: dispatch,
      markAllAsAcknowledged: markAllAsAcknowledged,
      ponyfill: ponyfill
    });
  }, [cardActionMiddleware, directLine, dispatch, markAllAsAcknowledged, ponyfill]);
  var patchedSelectVoice = (0, _react.useMemo)(function () {
    return selectVoice || _defaultSelectVoice.default.bind(null, {
      language: locale
    });
  }, [locale, selectVoice]);
  var groupActivitiesContext = (0, _react.useMemo)(function () {
    return createGroupActivitiesContext({
      groupActivitiesMiddleware: groupActivitiesMiddleware,
      groupTimestamp: patchedStyleOptions.groupTimestamp,
      ponyfill: ponyfill
    });
  }, [groupActivitiesMiddleware, patchedStyleOptions.groupTimestamp, ponyfill]);
  var hoistedDispatchers = (0, _react.useMemo)(function () {
    return (0, _mapMap.default)(DISPATCHERS, function (dispatcher) {
      return function () {
        return dispatch(dispatcher.apply(void 0, arguments));
      };
    });
  }, [dispatch]);
  var patchedLocalizedStrings = (0, _react.useMemo)(function () {
    return mergeStringsOverrides((0, _getAllLocalizedStrings.default)()[(0, _normalizeLanguage.default)(locale)], locale, overrideLocalizedStrings);
  }, [locale, overrideLocalizedStrings]);
  var localizedGlobalize = (0, _react.useMemo)(function () {
    var _ref5 = patchedLocalizedStrings || {},
        GLOBALIZE = _ref5.GLOBALIZE,
        GLOBALIZE_LANGUAGE = _ref5.GLOBALIZE_LANGUAGE;

    return GLOBALIZE || GLOBALIZE_LANGUAGE && (0, _PrecompiledGlobalize.default)(GLOBALIZE_LANGUAGE) || (0, _PrecompiledGlobalize.default)('en');
  }, [patchedLocalizedStrings]);
  var trackDimension = (0, _react.useCallback)(function (name, data) {
    if (!name || typeof name !== 'string') {
      return console.warn('botframework-webchat: Telemetry dimension name must be a string.');
    }

    var type = _typeof(data);

    if (type !== 'string' && type !== 'undefined') {
      return console.warn('botframework-webchat: Telemetry dimension data must be a string or undefined.');
    }

    telemetryDimensionsRef.current = (0, _simpleUpdateIn.default)(telemetryDimensionsRef.current, [name], type === 'undefined' ? data : function () {
      return data;
    });
  }, [telemetryDimensionsRef]);
  var patchedActivityRenderer = (0, _react.useMemo)(function () {
    activityRenderer && console.warn('Web Chat: "activityRenderer" is deprecated and will be removed on 2022-06-15, please use "activityMiddleware" instead.');
    return activityRenderer || _applyMiddleware.forRenderer.apply(void 0, ['activity', {
      strict: false
    }].concat(_toConsumableArray((0, _botframeworkWebchatCore.singleToArray)(activityMiddleware)), [function () {
      return function () {
        return function (_ref6) {
          var activity = _ref6.activity;

          if (activity) {
            throw new Error("No renderer for activity of type \"".concat(activity.type, "\""));
          } else {
            throw new Error('No activity to render');
          }
        };
      };
    }]))({});
  }, [activityMiddleware, activityRenderer]);
  var patchedActivityStatusRenderer = (0, _react.useMemo)(function () {
    activityStatusRenderer && console.warn('Web Chat: "activityStatusRenderer" is deprecated and will be removed on 2022-06-15, please use "activityStatusMiddleware" instead.');
    return activityStatusRenderer || _applyMiddleware.forRenderer.apply(void 0, ['activity status', {
      strict: false
    }].concat(_toConsumableArray((0, _botframeworkWebchatCore.singleToArray)(activityStatusMiddleware)), [function () {
      return function () {
        return function () {
          return false;
        };
      };
    }]))({});
  }, [activityStatusMiddleware, activityStatusRenderer]);
  var patchedAttachmentForScreenReaderRenderer = (0, _react.useMemo)(function () {
    return _applyMiddleware.forRenderer.apply(void 0, ['attachment for screen reader', {
      strict: true
    }].concat(_toConsumableArray((0, _botframeworkWebchatCore.singleToArray)(attachmentForScreenReaderMiddleware)), [function () {
      return function () {
        return function (_ref7) {
          var attachment = _ref7.attachment;

          if (attachment) {
            console.warn("No renderer for attachment for screen reader of type \"".concat(attachment.contentType, "\""));
            return false;
          }

          return function () {
            /**
             * @todo TODO: [P4] Might be able to throw without returning a function -- investigate and possibly fix
             */
            throw new Error('No attachment to render');
          };
        };
      };
    }]))({});
  }, [attachmentForScreenReaderMiddleware]);
  var patchedAttachmentRenderer = (0, _react.useMemo)(function () {
    if (attachmentRenderer) {
      console.warn('Web Chat: "attachmentRenderer" is deprecated and will be removed on 2022-06-15, please use "attachmentMiddleware" instead.');
      return attachmentRenderer;
    } // Attachment renderer


    return _applyMiddleware.forLegacyRenderer.apply(void 0, ['attachment'].concat(_toConsumableArray((0, _botframeworkWebchatCore.singleToArray)(attachmentMiddleware)), [function () {
      return function () {
        return function (_ref8) {
          var attachment = _ref8.attachment;

          if (attachment) {
            throw new Error("No renderer for attachment of type \"".concat(attachment.contentType, "\""));
          } else {
            throw new Error('No attachment to render');
          }
        };
      };
    }]))({});
  }, [attachmentMiddleware, attachmentRenderer]);
  var patchedAvatarRenderer = (0, _react.useMemo)(function () {
    avatarRenderer && console.warn('Web Chat: "avatarRenderer" is deprecated and will be removed on 2022-06-15, please use "avatarMiddleware" instead.');
    return avatarRenderer || _applyMiddleware.forRenderer.apply(void 0, ['avatar', {
      strict: false
    }].concat(_toConsumableArray((0, _botframeworkWebchatCore.singleToArray)(avatarMiddleware)), [function () {
      return function () {
        return function () {
          return false;
        };
      };
    }]))({});
  }, [avatarMiddleware, avatarRenderer]);
  var patchedToastRenderer = (0, _react.useMemo)(function () {
    toastRenderer && console.warn('Web Chat: "toastRenderer" is deprecated and will be removed on 2022-06-15, please use "toastMiddleware" instead.');
    return toastRenderer || _applyMiddleware.forRenderer.apply(void 0, ['toast', {
      strict: false
    }].concat(_toConsumableArray((0, _botframeworkWebchatCore.singleToArray)(toastMiddleware)), [function () {
      return function () {
        return function (_ref9) {
          var notification = _ref9.notification;

          if (notification) {
            throw new Error("No renderer for notification of type \"".concat(notification.contentType, "\""));
          } else {
            throw new Error('No notification to render');
          }
        };
      };
    }]))({});
  }, [toastMiddleware, toastRenderer]);
  var patchedTypingIndicatorRenderer = (0, _react.useMemo)(function () {
    typingIndicatorRenderer && console.warn('Web Chat: "typingIndicatorRenderer" is deprecated and will be removed on 2022-06-15, please use "typingIndicatorMiddleware" instead.');
    return typingIndicatorRenderer || _applyMiddleware.forRenderer.apply(void 0, ['typing indicator', {
      strict: false
    }].concat(_toConsumableArray((0, _botframeworkWebchatCore.singleToArray)(typingIndicatorMiddleware)), [function () {
      return function () {
        return function () {
          return false;
        };
      };
    }]))({});
  }, [typingIndicatorMiddleware, typingIndicatorRenderer]);
  var scrollToEndButtonRenderer = (0, _react.useMemo)(function () {
    return _applyMiddleware.forRenderer.apply(void 0, ['scroll to end button', {
      strict: true
    }].concat(_toConsumableArray((0, _botframeworkWebchatCore.singleToArray)(scrollToEndButtonMiddleware)), [function () {
      return function () {
        return function () {
          return false;
        };
      };
    }]))();
  }, [scrollToEndButtonMiddleware]);
  /**
   * This is a heavy function, and it is expected to be only called when there is a need to recreate business logic, e.g.
   * - User ID changed, causing all send* functions to be updated
   * - send
   * @todo TODO: [P3] We should think about if we allow the user to change onSendBoxValueChanged/sendBoxValue, e.g.
   * 1. Turns text into UPPERCASE
   * 2. Filter out profanity
   * @todo TODO: [P4] Revisit all members of context
   *       This context should consist of members that are not in the Redux store
   *       i.e. members that are not interested in other types of UIs
   */

  var context = (0, _react.useMemo)(function () {
    return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, cardActionContext), groupActivitiesContext), hoistedDispatchers), {}, {
      activityRenderer: patchedActivityRenderer,
      activityStatusRenderer: patchedActivityStatusRenderer,
      attachmentForScreenReaderRenderer: patchedAttachmentForScreenReaderRenderer,
      attachmentRenderer: patchedAttachmentRenderer,
      avatarRenderer: patchedAvatarRenderer,
      dir: patchedDir,
      directLine: directLine,
      disabled: disabled,
      downscaleImageToDataURL: downscaleImageToDataURL,
      grammars: patchedGrammars,
      internalErrorBoxClass: internalErrorBoxClass,
      language: locale,
      localizedGlobalizeState: [localizedGlobalize],
      localizedStrings: patchedLocalizedStrings,
      onTelemetry: onTelemetry,
      renderMarkdown: renderMarkdown,
      scrollToEndButtonRenderer: scrollToEndButtonRenderer,
      selectVoice: patchedSelectVoice,
      sendTypingIndicator: sendTypingIndicator,
      styleOptions: patchedStyleOptions,
      telemetryDimensionsRef: telemetryDimensionsRef,
      toastRenderer: patchedToastRenderer,
      trackDimension: trackDimension,
      typingIndicatorRenderer: patchedTypingIndicatorRenderer,
      userID: userID,
      username: username
    });
  }, [cardActionContext, directLine, disabled, downscaleImageToDataURL, groupActivitiesContext, hoistedDispatchers, internalErrorBoxClass, locale, localizedGlobalize, onTelemetry, patchedActivityRenderer, patchedActivityStatusRenderer, patchedAttachmentForScreenReaderRenderer, patchedAttachmentRenderer, patchedAvatarRenderer, patchedDir, patchedGrammars, patchedLocalizedStrings, patchedSelectVoice, patchedStyleOptions, patchedToastRenderer, patchedTypingIndicatorRenderer, renderMarkdown, scrollToEndButtonRenderer, sendTypingIndicator, telemetryDimensionsRef, trackDimension, userID, username]);
  return /*#__PURE__*/_react.default.createElement(_WebChatAPIContext.default.Provider, {
    value: context
  }, /*#__PURE__*/_react.default.createElement(_ActivitySendStatusComposer.default, null, typeof children === 'function' ? children(context) : children, /*#__PURE__*/_react.default.createElement(_ActivitySendStatusTelemetryComposer.default, null)), onTelemetry && /*#__PURE__*/_react.default.createElement(_Tracker.default, null));
};
/**
 * @todo TODO: [P3] We should consider moving some data from Redux store to props
 *       Although we use `connectToWebChat` to hide the details of accessor of Redux store,
 *       we should clean up the responsibility between Context and Redux store
 *       We should decide which data is needed for React but not in other environment such as CLI/VSCode
 */


ComposerCore.defaultProps = {
  activityMiddleware: undefined,
  activityRenderer: undefined,
  activityStatusMiddleware: undefined,
  activityStatusRenderer: undefined,
  attachmentForScreenReaderMiddleware: undefined,
  attachmentMiddleware: undefined,
  attachmentRenderer: undefined,
  avatarMiddleware: undefined,
  avatarRenderer: undefined,
  cardActionMiddleware: undefined,
  children: undefined,
  dir: 'auto',
  disabled: false,
  downscaleImageToDataURL: undefined,
  grammars: [],
  groupActivitiesMiddleware: undefined,
  groupTimestamp: undefined,
  internalErrorBoxClass: undefined,
  locale: window.navigator.language || 'en-US',
  onTelemetry: undefined,
  overrideLocalizedStrings: undefined,
  renderMarkdown: undefined,
  scrollToEndButtonMiddleware: undefined,
  selectVoice: undefined,
  sendTimeout: undefined,
  sendTypingIndicator: false,
  styleOptions: {},
  toastMiddleware: undefined,
  toastRenderer: undefined,
  typingIndicatorMiddleware: undefined,
  typingIndicatorRenderer: undefined,
  userID: '',
  username: ''
};
ComposerCore.propTypes = {
  activityMiddleware: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.func), _propTypes.default.func]),
  activityRenderer: _propTypes.default.func,
  activityStatusMiddleware: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.func), _propTypes.default.func]),
  activityStatusRenderer: _propTypes.default.func,
  attachmentForScreenReaderMiddleware: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.func), _propTypes.default.func]),
  attachmentMiddleware: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.func), _propTypes.default.func]),
  attachmentRenderer: _propTypes.default.func,
  avatarMiddleware: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.func), _propTypes.default.func]),
  avatarRenderer: _propTypes.default.func,
  cardActionMiddleware: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.func), _propTypes.default.func]),
  children: _propTypes.default.any,
  dir: _propTypes.default.oneOf(['auto', 'ltr', 'rtl']),
  // PropTypes.shape({ ... }) did not honor isRequired for its members.
  // @ts-ignore
  directLine: _propTypes.default.shape({
    activity$: _propTypes.default.shape({
      subscribe: _propTypes.default.func.isRequired
    }).isRequired,
    connectionStatus$: _propTypes.default.shape({
      subscribe: _propTypes.default.func.isRequired
    }).isRequired,
    end: _propTypes.default.func,
    getSessionId: _propTypes.default.func,
    postActivity: _propTypes.default.func.isRequired,
    referenceGrammarID: _propTypes.default.string,
    token: _propTypes.default.string
  }).isRequired,
  disabled: _propTypes.default.bool,
  downscaleImageToDataURL: _propTypes.default.func,
  grammars: _propTypes.default.arrayOf(_propTypes.default.string),
  groupActivitiesMiddleware: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.func), _propTypes.default.func]),
  groupTimestamp: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.number]),
  internalErrorBoxClass: _propTypes.default.func,
  // This is for internal use only. We don't allow customization of error box.
  locale: _propTypes.default.string,
  onTelemetry: _propTypes.default.func,
  overrideLocalizedStrings: _propTypes.default.oneOfType([_propTypes.default.any, _propTypes.default.func]),
  renderMarkdown: _propTypes.default.func,
  scrollToEndButtonMiddleware: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.func), _propTypes.default.func]),
  selectVoice: _propTypes.default.func,
  sendTimeout: _propTypes.default.number,
  sendTypingIndicator: _propTypes.default.bool,
  styleOptions: _propTypes.default.any,
  toastMiddleware: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.func), _propTypes.default.func]),
  toastRenderer: _propTypes.default.func,
  typingIndicatorMiddleware: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.func), _propTypes.default.func]),
  typingIndicatorRenderer: _propTypes.default.func,
  userID: _propTypes.default.string,
  username: _propTypes.default.string
};

// We will create a Redux store if it was not passed in
var ComposerWithStore = function ComposerWithStore(_ref10) {
  var onTelemetry = _ref10.onTelemetry,
      store = _ref10.store,
      props = _objectWithoutProperties(_ref10, _excluded);

  var _usePonyfill3 = (0, _usePonyfill5.default)(),
      _usePonyfill4 = _slicedToArray(_usePonyfill3, 1),
      ponyfill = _usePonyfill4[0];

  var memoizedStore = (0, _react.useMemo)(function () {
    var _nextStore$getState$i;

    var nextStore = store || (0, _botframeworkWebchatCore.createStoreWithOptions)({
      ponyfill: ponyfill
    });
    var storePonyfill = ((_nextStore$getState$i = nextStore.getState().internal) === null || _nextStore$getState$i === void 0 ? void 0 : _nextStore$getState$i.ponyfill) || {};
    var keys = new Set([].concat(_toConsumableArray(Object.keys(storePonyfill)), _toConsumableArray(Object.keys(ponyfill)))); // Filter out forbidden properties.

    keys.delete('prototype');
    Object.getOwnPropertyNames(Object.prototype).forEach(function (key) {
      keys.delete(key);
    });

    var nativeFunction = function nativeFunction(fn) {
      return typeof fn === 'function' && ('' + fn).endsWith('() { [native code] }');
    };

    var ponyfillFunctionEquals = function ponyfillFunctionEquals(x, y) {
      return nativeFunction(x) && nativeFunction(y) || x === y;
    }; // We have filtered out all forbidden properties.
    // eslint-disable-next-line security/detect-object-injection


    var differentKeys = Array.from(keys).filter(function (key) {
      return !ponyfillFunctionEquals(storePonyfill[key], ponyfill[key]);
    });

    if (differentKeys.length) {
      console.warn("botframework-webchat: Ponyfill used in store should match the ponyfill passed in props: ".concat(differentKeys.join(', ')));
    }

    return nextStore;
  }, [ponyfill, store]);
  return /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
    context: _WebChatReduxContext.default,
    store: memoizedStore
  }, /*#__PURE__*/_react.default.createElement(_ActivityKeyerComposer.default, null, /*#__PURE__*/_react.default.createElement(_ActivityAcknowledgementComposer.default, null, /*#__PURE__*/_react.default.createElement(ComposerCore, _extends({
    onTelemetry: onTelemetry
  }, props)))));
};

ComposerWithStore.defaultProps = {
  onTelemetry: undefined,
  store: undefined
};
ComposerWithStore.propTypes = {
  onTelemetry: _propTypes.default.func,
  store: _propTypes.default.any
};

var Composer = function Composer(_ref11) {
  var internalRenderErrorBox = _ref11.internalRenderErrorBox,
      onTelemetry = _ref11.onTelemetry,
      ponyfill = _ref11.ponyfill,
      props = _objectWithoutProperties(_ref11, _excluded2);

  var _useState = (0, _react.useState)(),
      _useState2 = _slicedToArray(_useState, 2),
      error = _useState2[0],
      setError = _useState2[1];

  var handleError = (0, _react.useCallback)(function (error) {
    console.error('botframework-webchat: Uncaught exception', {
      error: error
    });
    onTelemetry && onTelemetry((0, _createCustomEvent.default)('exception', {
      error: error,
      fatal: true
    }));
    setError(error);
  }, [onTelemetry, setError]);
  return error ? !!internalRenderErrorBox && internalRenderErrorBox({
    error: error,
    type: 'uncaught exception'
  }) : /*#__PURE__*/_react.default.createElement(_ErrorBoundary.default, {
    onError: handleError
  }, /*#__PURE__*/_react.default.createElement(_PonyfillComposer.default, {
    ponyfill: ponyfill
  }, /*#__PURE__*/_react.default.createElement(ComposerWithStore, _extends({
    onTelemetry: onTelemetry
  }, props))));
};

Composer.defaultProps = _objectSpread(_objectSpread({}, ComposerWithStore.defaultProps), {}, {
  internalRenderErrorBox: undefined,
  onTelemetry: undefined,
  ponyfill: undefined
});
Composer.propTypes = _objectSpread(_objectSpread({}, ComposerWithStore.propTypes), {}, {
  internalRenderErrorBox: _propTypes.default.any,
  onTelemetry: _propTypes.default.func,
  ponyfill: _propTypes.default.any
});
var _default = Composer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,