"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = require("react");

var _WebChatReduxContext = require("./internal/WebChatReduxContext");

var _useForceRender = _interopRequireDefault(require("./internal/useForceRender"));

var _usePonyfill3 = _interopRequireDefault(require("./usePonyfill"));

var _useStyleOptions3 = _interopRequireDefault(require("./useStyleOptions"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function useActiveTyping(expireAfter) {
  var _usePonyfill = (0, _usePonyfill3.default)(),
      _usePonyfill2 = _slicedToArray(_usePonyfill, 1),
      _usePonyfill2$ = _usePonyfill2[0],
      clearTimeout = _usePonyfill2$.clearTimeout,
      Date = _usePonyfill2$.Date,
      setTimeout = _usePonyfill2$.setTimeout;

  var _useStyleOptions = (0, _useStyleOptions3.default)(),
      _useStyleOptions2 = _slicedToArray(_useStyleOptions, 1),
      typingAnimationDuration = _useStyleOptions2[0].typingAnimationDuration;

  var forceRender = (0, _useForceRender.default)();
  var typing = (0, _WebChatReduxContext.useSelector)(function (_ref) {
    var typing = _ref.typing;
    return typing;
  });
  var now = Date.now();

  if (typeof expireAfter !== 'number') {
    expireAfter = typingAnimationDuration;
  }

  var activeTyping = Object.entries(typing).reduce(function (activeTyping, _ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
        id = _ref3[0],
        _ref3$ = _ref3[1],
        at = _ref3$.at,
        last = _ref3$.last,
        name = _ref3$.name,
        role = _ref3$.role;

    var until = last + expireAfter;

    if (until > now) {
      return _objectSpread(_objectSpread({}, activeTyping), {}, _defineProperty({}, id, {
        at: at,
        expireAt: until,
        name: name,
        role: role
      }));
    }

    return activeTyping;
  }, {});
  var earliestExpireAt = Math.min.apply(Math, _toConsumableArray(Object.values(activeTyping).map(function (_ref4) {
    var expireAt = _ref4.expireAt;
    return expireAt;
  })));
  var timeToRender = earliestExpireAt && earliestExpireAt - now;
  (0, _react.useEffect)(function () {
    if (timeToRender && isFinite(timeToRender)) {
      var timeout = setTimeout(forceRender, Math.max(0, timeToRender));
      return function () {
        return clearTimeout(timeout);
      };
    }
  }, [clearTimeout, forceRender, setTimeout, timeToRender]);
  return [activeTyping];
}

var _default = useActiveTyping;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1c2VBY3RpdmVUeXBpbmciLCJleHBpcmVBZnRlciIsInVzZVBvbnlmaWxsIiwiY2xlYXJUaW1lb3V0IiwiRGF0ZSIsInNldFRpbWVvdXQiLCJ1c2VTdHlsZU9wdGlvbnMiLCJ0eXBpbmdBbmltYXRpb25EdXJhdGlvbiIsImZvcmNlUmVuZGVyIiwidXNlRm9yY2VSZW5kZXIiLCJ0eXBpbmciLCJ1c2VTZWxlY3RvciIsIm5vdyIsImFjdGl2ZVR5cGluZyIsIk9iamVjdCIsImVudHJpZXMiLCJyZWR1Y2UiLCJpZCIsImF0IiwibGFzdCIsIm5hbWUiLCJyb2xlIiwidW50aWwiLCJleHBpcmVBdCIsImVhcmxpZXN0RXhwaXJlQXQiLCJNYXRoIiwibWluIiwidmFsdWVzIiwibWFwIiwidGltZVRvUmVuZGVyIiwidXNlRWZmZWN0IiwiaXNGaW5pdGUiLCJ0aW1lb3V0IiwibWF4Il0sInNvdXJjZVJvb3QiOiJjb21wb25lbnQ6Ly8vIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaG9va3MvdXNlQWN0aXZlVHlwaW5nLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICcuL2ludGVybmFsL1dlYkNoYXRSZWR1eENvbnRleHQnO1xuaW1wb3J0IFR5cGluZyBmcm9tICcuLi90eXBlcy9UeXBpbmcnO1xuaW1wb3J0IHVzZUZvcmNlUmVuZGVyIGZyb20gJy4vaW50ZXJuYWwvdXNlRm9yY2VSZW5kZXInO1xuaW1wb3J0IHVzZVBvbnlmaWxsIGZyb20gJy4vdXNlUG9ueWZpbGwnO1xuaW1wb3J0IHVzZVN0eWxlT3B0aW9ucyBmcm9tICcuL3VzZVN0eWxlT3B0aW9ucyc7XG5cbmZ1bmN0aW9uIHVzZUFjdGl2ZVR5cGluZyhleHBpcmVBZnRlcj86IG51bWJlcik6IFt7IFt1c2VySWQ6IHN0cmluZ106IFR5cGluZyB9XSB7XG4gIGNvbnN0IFt7IGNsZWFyVGltZW91dCwgRGF0ZSwgc2V0VGltZW91dCB9XSA9IHVzZVBvbnlmaWxsKCk7XG4gIGNvbnN0IFt7IHR5cGluZ0FuaW1hdGlvbkR1cmF0aW9uIH1dID0gdXNlU3R5bGVPcHRpb25zKCk7XG4gIGNvbnN0IGZvcmNlUmVuZGVyID0gdXNlRm9yY2VSZW5kZXIoKTtcbiAgY29uc3QgdHlwaW5nOiB7IFt1c2VySWQ6IHN0cmluZ106IHsgYXQ6IG51bWJlcjsgbGFzdDogbnVtYmVyOyBuYW1lOiBzdHJpbmc7IHJvbGU6IHN0cmluZyB9IH0gPSB1c2VTZWxlY3RvcihcbiAgICAoeyB0eXBpbmcgfSkgPT4gdHlwaW5nXG4gICk7XG5cbiAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcblxuICBpZiAodHlwZW9mIGV4cGlyZUFmdGVyICE9PSAnbnVtYmVyJykge1xuICAgIGV4cGlyZUFmdGVyID0gdHlwaW5nQW5pbWF0aW9uRHVyYXRpb247XG4gIH1cblxuICBjb25zdCBhY3RpdmVUeXBpbmc6IHsgW3VzZXJJZDogc3RyaW5nXTogVHlwaW5nIH0gPSBPYmplY3QuZW50cmllcyh0eXBpbmcpLnJlZHVjZShcbiAgICAoYWN0aXZlVHlwaW5nLCBbaWQsIHsgYXQsIGxhc3QsIG5hbWUsIHJvbGUgfV0pID0+IHtcbiAgICAgIGNvbnN0IHVudGlsID0gbGFzdCArIGV4cGlyZUFmdGVyO1xuXG4gICAgICBpZiAodW50aWwgPiBub3cpIHtcbiAgICAgICAgcmV0dXJuIHsgLi4uYWN0aXZlVHlwaW5nLCBbaWRdOiB7IGF0LCBleHBpcmVBdDogdW50aWwsIG5hbWUsIHJvbGUgfSB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWN0aXZlVHlwaW5nO1xuICAgIH0sXG4gICAge31cbiAgKTtcblxuICBjb25zdCBlYXJsaWVzdEV4cGlyZUF0ID0gTWF0aC5taW4oLi4uT2JqZWN0LnZhbHVlcyhhY3RpdmVUeXBpbmcpLm1hcCgoeyBleHBpcmVBdCB9KSA9PiBleHBpcmVBdCkpO1xuICBjb25zdCB0aW1lVG9SZW5kZXIgPSBlYXJsaWVzdEV4cGlyZUF0ICYmIGVhcmxpZXN0RXhwaXJlQXQgLSBub3c7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAodGltZVRvUmVuZGVyICYmIGlzRmluaXRlKHRpbWVUb1JlbmRlcikpIHtcbiAgICAgIGNvbnN0IHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZvcmNlUmVuZGVyLCBNYXRoLm1heCgwLCB0aW1lVG9SZW5kZXIpKTtcblxuICAgICAgcmV0dXJuICgpID0+IGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICB9XG4gIH0sIFtjbGVhclRpbWVvdXQsIGZvcmNlUmVuZGVyLCBzZXRUaW1lb3V0LCB0aW1lVG9SZW5kZXJdKTtcblxuICByZXR1cm4gW2FjdGl2ZVR5cGluZ107XG59XG5cbmV4cG9ydCBkZWZhdWx0IHVzZUFjdGl2ZVR5cGluZztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBOztBQUVBOztBQUNBOztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxTQUFTQSxlQUFULENBQXlCQyxXQUF6QixFQUErRTtFQUM3RSxtQkFBNkMsSUFBQUMscUJBQUEsR0FBN0M7RUFBQTtFQUFBO0VBQUEsSUFBU0MsWUFBVCxrQkFBU0EsWUFBVDtFQUFBLElBQXVCQyxJQUF2QixrQkFBdUJBLElBQXZCO0VBQUEsSUFBNkJDLFVBQTdCLGtCQUE2QkEsVUFBN0I7O0VBQ0EsdUJBQXNDLElBQUFDLHlCQUFBLEdBQXRDO0VBQUE7RUFBQSxJQUFTQyx1QkFBVCx3QkFBU0EsdUJBQVQ7O0VBQ0EsSUFBTUMsV0FBVyxHQUFHLElBQUFDLHVCQUFBLEdBQXBCO0VBQ0EsSUFBTUMsTUFBc0YsR0FBRyxJQUFBQyxnQ0FBQSxFQUM3RjtJQUFBLElBQUdELE1BQUgsUUFBR0EsTUFBSDtJQUFBLE9BQWdCQSxNQUFoQjtFQUFBLENBRDZGLENBQS9GO0VBSUEsSUFBTUUsR0FBRyxHQUFHUixJQUFJLENBQUNRLEdBQUwsRUFBWjs7RUFFQSxJQUFJLE9BQU9YLFdBQVAsS0FBdUIsUUFBM0IsRUFBcUM7SUFDbkNBLFdBQVcsR0FBR00sdUJBQWQ7RUFDRDs7RUFFRCxJQUFNTSxZQUEwQyxHQUFHQyxNQUFNLENBQUNDLE9BQVAsQ0FBZUwsTUFBZixFQUF1Qk0sTUFBdkIsQ0FDakQsVUFBQ0gsWUFBRCxTQUFrRDtJQUFBO0lBQUEsSUFBbENJLEVBQWtDO0lBQUE7SUFBQSxJQUE1QkMsRUFBNEIsVUFBNUJBLEVBQTRCO0lBQUEsSUFBeEJDLElBQXdCLFVBQXhCQSxJQUF3QjtJQUFBLElBQWxCQyxJQUFrQixVQUFsQkEsSUFBa0I7SUFBQSxJQUFaQyxJQUFZLFVBQVpBLElBQVk7O0lBQ2hELElBQU1DLEtBQUssR0FBR0gsSUFBSSxHQUFHbEIsV0FBckI7O0lBRUEsSUFBSXFCLEtBQUssR0FBR1YsR0FBWixFQUFpQjtNQUNmLHVDQUFZQyxZQUFaLDJCQUEyQkksRUFBM0IsRUFBZ0M7UUFBRUMsRUFBRSxFQUFGQSxFQUFGO1FBQU1LLFFBQVEsRUFBRUQsS0FBaEI7UUFBdUJGLElBQUksRUFBSkEsSUFBdkI7UUFBNkJDLElBQUksRUFBSkE7TUFBN0IsQ0FBaEM7SUFDRDs7SUFFRCxPQUFPUixZQUFQO0VBQ0QsQ0FUZ0QsRUFVakQsRUFWaUQsQ0FBbkQ7RUFhQSxJQUFNVyxnQkFBZ0IsR0FBR0MsSUFBSSxDQUFDQyxHQUFMLE9BQUFELElBQUkscUJBQVFYLE1BQU0sQ0FBQ2EsTUFBUCxDQUFjZCxZQUFkLEVBQTRCZSxHQUE1QixDQUFnQztJQUFBLElBQUdMLFFBQUgsU0FBR0EsUUFBSDtJQUFBLE9BQWtCQSxRQUFsQjtFQUFBLENBQWhDLENBQVIsRUFBN0I7RUFDQSxJQUFNTSxZQUFZLEdBQUdMLGdCQUFnQixJQUFJQSxnQkFBZ0IsR0FBR1osR0FBNUQ7RUFFQSxJQUFBa0IsZ0JBQUEsRUFBVSxZQUFNO0lBQ2QsSUFBSUQsWUFBWSxJQUFJRSxRQUFRLENBQUNGLFlBQUQsQ0FBNUIsRUFBNEM7TUFDMUMsSUFBTUcsT0FBTyxHQUFHM0IsVUFBVSxDQUFDRyxXQUFELEVBQWNpQixJQUFJLENBQUNRLEdBQUwsQ0FBUyxDQUFULEVBQVlKLFlBQVosQ0FBZCxDQUExQjtNQUVBLE9BQU87UUFBQSxPQUFNMUIsWUFBWSxDQUFDNkIsT0FBRCxDQUFsQjtNQUFBLENBQVA7SUFDRDtFQUNGLENBTkQsRUFNRyxDQUFDN0IsWUFBRCxFQUFlSyxXQUFmLEVBQTRCSCxVQUE1QixFQUF3Q3dCLFlBQXhDLENBTkg7RUFRQSxPQUFPLENBQUNoQixZQUFELENBQVA7QUFDRDs7ZUFFY2IsZSJ9