"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useTrackEvent;

var _react = require("react");

var _createCustomEvent = _interopRequireDefault(require("../utils/createCustomEvent"));

var _isObject = _interopRequireDefault(require("../utils/isObject"));

var _useReadTelemetryDimensions = _interopRequireDefault(require("./internal/useReadTelemetryDimensions"));

var _useWebChatAPIContext2 = _interopRequireDefault(require("./internal/useWebChatAPIContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isNonNegativeFiniteNumberOrString(value) {
  return typeof value === 'number' && isFinite(value) && value >= 0 || typeof value === 'string';
}

function useTrackEvent() {
  var _useWebChatAPIContext = (0, _useWebChatAPIContext2.default)(),
      onTelemetry = _useWebChatAPIContext.onTelemetry;

  var readTelemetryDimensions = (0, _useReadTelemetryDimensions.default)();
  var trackEvent = (0, _react.useCallback)(function (level, name, data) {
    if (!name || typeof name !== 'string') {
      return console.warn('botframework-webchat: "name" passed to "useTrackEvent" hook must be a string.');
    }

    if (typeof data !== 'undefined') {
      if ((0, _isObject.default)(data)) {
        if (!Object.values(data).every(function (value) {
          return isNonNegativeFiniteNumberOrString(value);
        })) {
          return console.warn('botframework-webchat: Every value in "data" map passed to "useTrackEvent" hook must be a non-negative finite number or string.');
        }
      } else if (!isNonNegativeFiniteNumberOrString(data)) {
        return console.warn('botframework-webchat: "data" passed to "useTrackEvent" hook must be a non-negative finite number or string.');
      }
    }

    onTelemetry && onTelemetry((0, _createCustomEvent.default)('event', {
      data: data,
      dimensions: readTelemetryDimensions(),
      level: level,
      name: name
    }));
  }, [onTelemetry, readTelemetryDimensions]);
  return (0, _react.useMemo)(function () {
    var info = trackEvent.bind(null, 'info');
    info.debug = trackEvent.bind(null, 'debug');
    info.error = trackEvent.bind(null, 'error');
    info.info = info;
    info.warn = trackEvent.bind(null, 'warn');
    return info;
  }, [trackEvent]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc05vbk5lZ2F0aXZlRmluaXRlTnVtYmVyT3JTdHJpbmciLCJ2YWx1ZSIsImlzRmluaXRlIiwidXNlVHJhY2tFdmVudCIsInVzZVdlYkNoYXRBUElDb250ZXh0Iiwib25UZWxlbWV0cnkiLCJyZWFkVGVsZW1ldHJ5RGltZW5zaW9ucyIsInVzZVJlYWRUZWxlbWV0cnlEaW1lbnNpb25zIiwidHJhY2tFdmVudCIsInVzZUNhbGxiYWNrIiwibGV2ZWwiLCJuYW1lIiwiZGF0YSIsImNvbnNvbGUiLCJ3YXJuIiwiaXNPYmplY3QiLCJPYmplY3QiLCJ2YWx1ZXMiLCJldmVyeSIsImNyZWF0ZUN1c3RvbUV2ZW50IiwiZGltZW5zaW9ucyIsInVzZU1lbW8iLCJpbmZvIiwiYmluZCIsImRlYnVnIiwiZXJyb3IiXSwic291cmNlUm9vdCI6ImNvbXBvbmVudDovLy8iLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ob29rcy91c2VUcmFja0V2ZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgY3JlYXRlQ3VzdG9tRXZlbnQgZnJvbSAnLi4vdXRpbHMvY3JlYXRlQ3VzdG9tRXZlbnQnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4uL3V0aWxzL2lzT2JqZWN0JztcbmltcG9ydCB1c2VSZWFkVGVsZW1ldHJ5RGltZW5zaW9ucyBmcm9tICcuL2ludGVybmFsL3VzZVJlYWRUZWxlbWV0cnlEaW1lbnNpb25zJztcbmltcG9ydCB1c2VXZWJDaGF0QVBJQ29udGV4dCBmcm9tICcuL2ludGVybmFsL3VzZVdlYkNoYXRBUElDb250ZXh0JztcblxuZnVuY3Rpb24gaXNOb25OZWdhdGl2ZUZpbml0ZU51bWJlck9yU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZSh2YWx1ZSkgJiYgdmFsdWUgPj0gMCkgfHwgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbn1cblxudHlwZSBUcmFja0V2ZW50RnVuY3Rpb24gPSB7XG4gIChuYW1lOiBzdHJpbmcsIGRhdGE6IGFueSk6IHZvaWQ7XG4gIGRlYnVnOiAobmFtZTogc3RyaW5nLCBkYXRhOiBhbnkpID0+IHZvaWQ7XG4gIGVycm9yOiAobmFtZTogc3RyaW5nLCBkYXRhOiBhbnkpID0+IHZvaWQ7XG4gIGluZm86IChuYW1lOiBzdHJpbmcsIGRhdGE6IGFueSkgPT4gdm9pZDtcbiAgd2FybjogKG5hbWU6IHN0cmluZywgZGF0YTogYW55KSA9PiB2b2lkO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVHJhY2tFdmVudCgpOiBUcmFja0V2ZW50RnVuY3Rpb24ge1xuICBjb25zdCB7IG9uVGVsZW1ldHJ5IH0gPSB1c2VXZWJDaGF0QVBJQ29udGV4dCgpO1xuICBjb25zdCByZWFkVGVsZW1ldHJ5RGltZW5zaW9ucyA9IHVzZVJlYWRUZWxlbWV0cnlEaW1lbnNpb25zKCk7XG5cbiAgY29uc3QgdHJhY2tFdmVudCA9IHVzZUNhbGxiYWNrKFxuICAgIChsZXZlbCwgbmFtZSwgZGF0YSkgPT4ge1xuICAgICAgaWYgKCFuYW1lIHx8IHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKCdib3RmcmFtZXdvcmstd2ViY2hhdDogXCJuYW1lXCIgcGFzc2VkIHRvIFwidXNlVHJhY2tFdmVudFwiIGhvb2sgbXVzdCBiZSBhIHN0cmluZy4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBkYXRhICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAoaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgICAgICBpZiAoIU9iamVjdC52YWx1ZXMoZGF0YSkuZXZlcnkodmFsdWUgPT4gaXNOb25OZWdhdGl2ZUZpbml0ZU51bWJlck9yU3RyaW5nKHZhbHVlKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICdib3RmcmFtZXdvcmstd2ViY2hhdDogRXZlcnkgdmFsdWUgaW4gXCJkYXRhXCIgbWFwIHBhc3NlZCB0byBcInVzZVRyYWNrRXZlbnRcIiBob29rIG11c3QgYmUgYSBub24tbmVnYXRpdmUgZmluaXRlIG51bWJlciBvciBzdHJpbmcuJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzTm9uTmVnYXRpdmVGaW5pdGVOdW1iZXJPclN0cmluZyhkYXRhKSkge1xuICAgICAgICAgIHJldHVybiBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAnYm90ZnJhbWV3b3JrLXdlYmNoYXQ6IFwiZGF0YVwiIHBhc3NlZCB0byBcInVzZVRyYWNrRXZlbnRcIiBob29rIG11c3QgYmUgYSBub24tbmVnYXRpdmUgZmluaXRlIG51bWJlciBvciBzdHJpbmcuJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgb25UZWxlbWV0cnkgJiZcbiAgICAgICAgb25UZWxlbWV0cnkoY3JlYXRlQ3VzdG9tRXZlbnQoJ2V2ZW50JywgeyBkYXRhLCBkaW1lbnNpb25zOiByZWFkVGVsZW1ldHJ5RGltZW5zaW9ucygpLCBsZXZlbCwgbmFtZSB9KSk7XG4gICAgfSxcbiAgICBbb25UZWxlbWV0cnksIHJlYWRUZWxlbWV0cnlEaW1lbnNpb25zXVxuICApO1xuXG4gIHJldHVybiB1c2VNZW1vKCgpID0+IHtcbiAgICBjb25zdCBpbmZvOiBUcmFja0V2ZW50RnVuY3Rpb24gPSB0cmFja0V2ZW50LmJpbmQobnVsbCwgJ2luZm8nKTtcblxuICAgIGluZm8uZGVidWcgPSB0cmFja0V2ZW50LmJpbmQobnVsbCwgJ2RlYnVnJyk7XG4gICAgaW5mby5lcnJvciA9IHRyYWNrRXZlbnQuYmluZChudWxsLCAnZXJyb3InKTtcbiAgICBpbmZvLmluZm8gPSBpbmZvO1xuICAgIGluZm8ud2FybiA9IHRyYWNrRXZlbnQuYmluZChudWxsLCAnd2FybicpO1xuXG4gICAgcmV0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