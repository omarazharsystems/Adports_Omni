"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createDefaultCardActionMiddleware;

var _botframeworkWebchatCore = require("botframework-webchat-core");

function createDefaultCardActionMiddleware() {
  return function (_ref) {
    var dispatch = _ref.dispatch;
    return function (next) {
      return function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var _args$ = args[0],
            cardAction = _args$.cardAction,
            value = _args$.cardAction.value; // We cannot use destructured "type" here because TypeScript don't recognize "messageBack" is "MessageBackCardAction".

        switch (cardAction.type) {
          case 'imBack':
            if (typeof value === 'string') {
              // TODO: [P4] Instead of calling dispatch, we should move to dispatchers instead for completeness
              dispatch((0, _botframeworkWebchatCore.sendMessage)(value, 'imBack'));
            } else {
              throw new Error('cannot send "imBack" with a non-string value');
            }

            break;

          case 'messageBack':
            dispatch((0, _botframeworkWebchatCore.sendMessageBack)(value, cardAction.text, cardAction.displayText));
            break;

          case 'postBack':
            dispatch((0, _botframeworkWebchatCore.sendPostBack)(value));
            break;

          default:
            return next.apply(void 0, args);
        }
      };
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcmVhdGVEZWZhdWx0Q2FyZEFjdGlvbk1pZGRsZXdhcmUiLCJkaXNwYXRjaCIsIm5leHQiLCJhcmdzIiwiY2FyZEFjdGlvbiIsInZhbHVlIiwidHlwZSIsInNlbmRNZXNzYWdlIiwiRXJyb3IiLCJzZW5kTWVzc2FnZUJhY2siLCJ0ZXh0IiwiZGlzcGxheVRleHQiLCJzZW5kUG9zdEJhY2siXSwic291cmNlUm9vdCI6ImNvbXBvbmVudDovLy8iLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ob29rcy9taWRkbGV3YXJlL2NyZWF0ZURlZmF1bHRDYXJkQWN0aW9uTWlkZGxld2FyZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzZW5kTWVzc2FnZSwgc2VuZE1lc3NhZ2VCYWNrLCBzZW5kUG9zdEJhY2sgfSBmcm9tICdib3RmcmFtZXdvcmstd2ViY2hhdC1jb3JlJztcblxuaW1wb3J0IENhcmRBY3Rpb25NaWRkbGV3YXJlIGZyb20gJy4uLy4uL3R5cGVzL0NhcmRBY3Rpb25NaWRkbGV3YXJlJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlRGVmYXVsdENhcmRBY3Rpb25NaWRkbGV3YXJlKCk6IENhcmRBY3Rpb25NaWRkbGV3YXJlIHtcbiAgcmV0dXJuICh7IGRpc3BhdGNoIH0pID0+XG4gICAgbmV4dCA9PlxuICAgICguLi5hcmdzKSA9PiB7XG4gICAgICBjb25zdCBbXG4gICAgICAgIHtcbiAgICAgICAgICBjYXJkQWN0aW9uLFxuICAgICAgICAgIGNhcmRBY3Rpb246IHsgdmFsdWUgfVxuICAgICAgICB9XG4gICAgICBdID0gYXJncztcblxuICAgICAgLy8gV2UgY2Fubm90IHVzZSBkZXN0cnVjdHVyZWQgXCJ0eXBlXCIgaGVyZSBiZWNhdXNlIFR5cGVTY3JpcHQgZG9uJ3QgcmVjb2duaXplIFwibWVzc2FnZUJhY2tcIiBpcyBcIk1lc3NhZ2VCYWNrQ2FyZEFjdGlvblwiLlxuICAgICAgc3dpdGNoIChjYXJkQWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnaW1CYWNrJzpcbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgLy8gVE9ETzogW1A0XSBJbnN0ZWFkIG9mIGNhbGxpbmcgZGlzcGF0Y2gsIHdlIHNob3VsZCBtb3ZlIHRvIGRpc3BhdGNoZXJzIGluc3RlYWQgZm9yIGNvbXBsZXRlbmVzc1xuICAgICAgICAgICAgZGlzcGF0Y2goc2VuZE1lc3NhZ2UodmFsdWUsICdpbUJhY2snKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY2Fubm90IHNlbmQgXCJpbUJhY2tcIiB3aXRoIGEgbm9uLXN0cmluZyB2YWx1ZScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ21lc3NhZ2VCYWNrJzpcbiAgICAgICAgICBkaXNwYXRjaChzZW5kTWVzc2FnZUJhY2sodmFsdWUsIGNhcmRBY3Rpb24udGV4dCwgY2FyZEFjdGlvbi5kaXNwbGF5VGV4dCkpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAncG9zdEJhY2snOlxuICAgICAgICAgIGRpc3BhdGNoKHNlbmRQb3N0QmFjayh2YWx1ZSkpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbmV4dCguLi5hcmdzKTtcbiAgICAgIH1cbiAgICB9O1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBSWUsU0FBU0EsaUNBQVQsR0FBbUU7RUFDaEYsT0FBTztJQUFBLElBQUdDLFFBQUgsUUFBR0EsUUFBSDtJQUFBLE9BQ0wsVUFBQUMsSUFBSTtNQUFBLE9BQ0osWUFBYTtRQUFBLGtDQUFUQyxJQUFTO1VBQVRBLElBQVM7UUFBQTs7UUFDWCxhQUtJQSxJQUxKO1FBQUEsSUFFSUMsVUFGSixVQUVJQSxVQUZKO1FBQUEsSUFHa0JDLEtBSGxCLFVBR0lELFVBSEosQ0FHa0JDLEtBSGxCLENBRFcsQ0FRWDs7UUFDQSxRQUFRRCxVQUFVLENBQUNFLElBQW5CO1VBQ0UsS0FBSyxRQUFMO1lBQ0UsSUFBSSxPQUFPRCxLQUFQLEtBQWlCLFFBQXJCLEVBQStCO2NBQzdCO2NBQ0FKLFFBQVEsQ0FBQyxJQUFBTSxvQ0FBQSxFQUFZRixLQUFaLEVBQW1CLFFBQW5CLENBQUQsQ0FBUjtZQUNELENBSEQsTUFHTztjQUNMLE1BQU0sSUFBSUcsS0FBSixDQUFVLDhDQUFWLENBQU47WUFDRDs7WUFFRDs7VUFFRixLQUFLLGFBQUw7WUFDRVAsUUFBUSxDQUFDLElBQUFRLHdDQUFBLEVBQWdCSixLQUFoQixFQUF1QkQsVUFBVSxDQUFDTSxJQUFsQyxFQUF3Q04sVUFBVSxDQUFDTyxXQUFuRCxDQUFELENBQVI7WUFFQTs7VUFFRixLQUFLLFVBQUw7WUFDRVYsUUFBUSxDQUFDLElBQUFXLHFDQUFBLEVBQWFQLEtBQWIsQ0FBRCxDQUFSO1lBRUE7O1VBRUY7WUFDRSxPQUFPSCxJQUFJLE1BQUosU0FBUUMsSUFBUixDQUFQO1FBdEJKO01Bd0JELENBbENHO0lBQUEsQ0FEQztFQUFBLENBQVA7QUFvQ0QifQ==