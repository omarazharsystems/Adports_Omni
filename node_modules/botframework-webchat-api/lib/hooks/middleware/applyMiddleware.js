"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = applyMiddleware;
exports.forLegacyRenderer = forLegacyRenderer;
exports.forRenderer = forRenderer;

var _react = _interopRequireWildcard(require("react"));

var _ErrorBox = _interopRequireDefault(require("../internal/ErrorBox"));

var _concatMiddleware = _interopRequireDefault(require("./concatMiddleware"));

var _UserlandBoundary = _interopRequireDefault(require("./UserlandBoundary"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function applyMiddleware(type) {
  for (var _len = arguments.length, middleware = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    middleware[_key - 1] = arguments[_key];
  }

  return function () {
    return _concatMiddleware.default.apply(void 0, middleware).apply(void 0, arguments)(function () {
      throw new Error("reached terminator of ".concat(type));
    });
  };
}

function forLegacyRenderer(type) {
  for (var _len2 = arguments.length, middleware = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    middleware[_key2 - 1] = arguments[_key2];
  }

  return function () {
    var fn = _concatMiddleware.default.apply(void 0, middleware).apply(void 0, arguments)(function () {
      throw new Error("reached terminator of ".concat(type));
    });

    return function () {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      return /*#__PURE__*/_react.default.createElement(_UserlandBoundary.default, {
        type: "render of ".concat(type)
      }, function () {
        try {
          return fn.apply(void 0, args);
        } catch (err) {
          return /*#__PURE__*/_react.default.createElement(_ErrorBox.default, {
            error: err,
            type: "render of ".concat(type)
          });
        }
      });
    };
  };
}
/**
 *
 * @param {string} type Required. String equivalent of type of container to be rendered.
 * @param { strict = false } - Used to enforce new middleware format which cooperates with new activity grouping.
 * @see See {@link https://github.com/microsoft/BotFramework-WebChat/blob/main/CHANGELOG.md#4100---2020-08-18} and {@link https://github.com/microsoft/BotFramework-WebChat/pull/3365} for middleware breaking changes.
 * @param  {middleware[]} middleware list of middleware to be applied.
 * 'createRendererArgs' is "what to render"; for example, an activity.
 * @returns  Returns a function if there is a renderer *committed* to render OR returns false if nothing should be rendered.
 */


function forRenderer(type) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$strict = _ref.strict,
      strict = _ref$strict === void 0 ? false : _ref$strict;

  for (var _len4 = arguments.length, middleware = new Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {
    middleware[_key4 - 2] = arguments[_key4];
  }

  return function () {
    var runMiddleware = _concatMiddleware.default.apply(void 0, middleware).apply(void 0, arguments)(function () {
      return /*#__PURE__*/_react.default.createElement(_ErrorBox.default, {
        error: new Error("reached terminator of ".concat(type)),
        type: type
      });
    });

    return function () {
      try {
        var render = runMiddleware.apply(void 0, arguments);

        if (!render) {
          return false;
        } else if ( /*#__PURE__*/(0, _react.isValidElement)(render)) {
          if (strict) {
            console.error("botframework-webchat: ".concat(type, " should only return either false or a render function."));
            return false;
          }

          return /*#__PURE__*/_react.default.createElement(_UserlandBoundary.default, {
            type: "render of ".concat(type)
          }, render);
        }

        return function () {
          for (var _len5 = arguments.length, renderTimeArgs = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            renderTimeArgs[_key5] = arguments[_key5];
          }

          return /*#__PURE__*/_react.default.createElement(_UserlandBoundary.default, {
            type: "render of ".concat(type)
          }, function () {
            try {
              var element = render.apply(void 0, renderTimeArgs);

              if (strict && ! /*#__PURE__*/(0, _react.isValidElement)(element)) {
                console.error("botframework-webchat: ".concat(type, " should return React element only."));
              }

              return element;
            } catch (err) {
              return /*#__PURE__*/_react.default.createElement(_ErrorBox.default, {
                error: err,
                type: "render of ".concat(type)
              });
            }
          });
        };
      } catch (err) {
        return /*#__PURE__*/_react.default.createElement(_ErrorBox.default, {
          error: err,
          type: "render of ".concat(type)
        });
      }
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhcHBseU1pZGRsZXdhcmUiLCJ0eXBlIiwibWlkZGxld2FyZSIsImNvbmNhdE1pZGRsZXdhcmUiLCJFcnJvciIsImZvckxlZ2FjeVJlbmRlcmVyIiwiZm4iLCJhcmdzIiwiZXJyIiwiZm9yUmVuZGVyZXIiLCJzdHJpY3QiLCJydW5NaWRkbGV3YXJlIiwicmVuZGVyIiwiaXNWYWxpZEVsZW1lbnQiLCJjb25zb2xlIiwiZXJyb3IiLCJyZW5kZXJUaW1lQXJncyIsImVsZW1lbnQiXSwic291cmNlUm9vdCI6ImNvbXBvbmVudDovLy8iLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ob29rcy9taWRkbGV3YXJlL2FwcGx5TWlkZGxld2FyZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgaXNWYWxpZEVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRXJyb3JCb3ggZnJvbSAnLi4vaW50ZXJuYWwvRXJyb3JCb3gnO1xuaW1wb3J0IGNvbmNhdE1pZGRsZXdhcmUgZnJvbSAnLi9jb25jYXRNaWRkbGV3YXJlJztcbmltcG9ydCBVc2VybGFuZEJvdW5kYXJ5IGZyb20gJy4vVXNlcmxhbmRCb3VuZGFyeSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFwcGx5TWlkZGxld2FyZSh0eXBlLCAuLi5taWRkbGV3YXJlKSB7XG4gIHJldHVybiAoLi4uc2V0dXBBcmdzKSA9PlxuICAgIGNvbmNhdE1pZGRsZXdhcmUoLi4ubWlkZGxld2FyZSkoLi4uc2V0dXBBcmdzKSgoKSA9PiB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHJlYWNoZWQgdGVybWluYXRvciBvZiAke3R5cGV9YCk7XG4gICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JMZWdhY3lSZW5kZXJlcih0eXBlLCAuLi5taWRkbGV3YXJlKSB7XG4gIHJldHVybiAoLi4uc2V0dXBBcmdzKSA9PiB7XG4gICAgY29uc3QgZm4gPSBjb25jYXRNaWRkbGV3YXJlKC4uLm1pZGRsZXdhcmUpKC4uLnNldHVwQXJncykoKCkgPT4ge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGByZWFjaGVkIHRlcm1pbmF0b3Igb2YgJHt0eXBlfWApO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuICguLi5hcmdzKSA9PiAoXG4gICAgICA8VXNlcmxhbmRCb3VuZGFyeSB0eXBlPXtgcmVuZGVyIG9mICR7dHlwZX1gfT5cbiAgICAgICAgeygpID0+IHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGZuKC4uLmFyZ3MpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIDxFcnJvckJveCBlcnJvcj17ZXJyfSB0eXBlPXtgcmVuZGVyIG9mICR7dHlwZX1gfSAvPjtcbiAgICAgICAgICB9XG4gICAgICAgIH19XG4gICAgICA8L1VzZXJsYW5kQm91bmRhcnk+XG4gICAgKTtcbiAgfTtcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgUmVxdWlyZWQuIFN0cmluZyBlcXVpdmFsZW50IG9mIHR5cGUgb2YgY29udGFpbmVyIHRvIGJlIHJlbmRlcmVkLlxuICogQHBhcmFtIHsgc3RyaWN0ID0gZmFsc2UgfSAtIFVzZWQgdG8gZW5mb3JjZSBuZXcgbWlkZGxld2FyZSBmb3JtYXQgd2hpY2ggY29vcGVyYXRlcyB3aXRoIG5ldyBhY3Rpdml0eSBncm91cGluZy5cbiAqIEBzZWUgU2VlIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L0JvdEZyYW1ld29yay1XZWJDaGF0L2Jsb2IvbWFpbi9DSEFOR0VMT0cubWQjNDEwMC0tLTIwMjAtMDgtMTh9IGFuZCB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9Cb3RGcmFtZXdvcmstV2ViQ2hhdC9wdWxsLzMzNjV9IGZvciBtaWRkbGV3YXJlIGJyZWFraW5nIGNoYW5nZXMuXG4gKiBAcGFyYW0gIHttaWRkbGV3YXJlW119IG1pZGRsZXdhcmUgbGlzdCBvZiBtaWRkbGV3YXJlIHRvIGJlIGFwcGxpZWQuXG4gKiAnY3JlYXRlUmVuZGVyZXJBcmdzJyBpcyBcIndoYXQgdG8gcmVuZGVyXCI7IGZvciBleGFtcGxlLCBhbiBhY3Rpdml0eS5cbiAqIEByZXR1cm5zICBSZXR1cm5zIGEgZnVuY3Rpb24gaWYgdGhlcmUgaXMgYSByZW5kZXJlciAqY29tbWl0dGVkKiB0byByZW5kZXIgT1IgcmV0dXJucyBmYWxzZSBpZiBub3RoaW5nIHNob3VsZCBiZSByZW5kZXJlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvclJlbmRlcmVyKHR5cGUsIHsgc3RyaWN0ID0gZmFsc2UgfSA9IHt9LCAuLi5taWRkbGV3YXJlKSB7XG4gIHJldHVybiAoLi4uc2V0dXBBcmdzKSA9PiB7XG4gICAgY29uc3QgcnVuTWlkZGxld2FyZSA9IGNvbmNhdE1pZGRsZXdhcmUoLi4ubWlkZGxld2FyZSkoLi4uc2V0dXBBcmdzKSgoKSA9PiAoXG4gICAgICA8RXJyb3JCb3ggZXJyb3I9e25ldyBFcnJvcihgcmVhY2hlZCB0ZXJtaW5hdG9yIG9mICR7dHlwZX1gKX0gdHlwZT17dHlwZX0gLz5cbiAgICApKTtcblxuICAgIHJldHVybiAoLi4uY3JlYXRlUmVuZGVyZXJBcmdzKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZW5kZXIgPSBydW5NaWRkbGV3YXJlKC4uLmNyZWF0ZVJlbmRlcmVyQXJncyk7XG5cbiAgICAgICAgaWYgKCFyZW5kZXIpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNWYWxpZEVsZW1lbnQocmVuZGVyKSkge1xuICAgICAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYGJvdGZyYW1ld29yay13ZWJjaGF0OiAke3R5cGV9IHNob3VsZCBvbmx5IHJldHVybiBlaXRoZXIgZmFsc2Ugb3IgYSByZW5kZXIgZnVuY3Rpb24uYCk7XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gPFVzZXJsYW5kQm91bmRhcnkgdHlwZT17YHJlbmRlciBvZiAke3R5cGV9YH0+e3JlbmRlcn08L1VzZXJsYW5kQm91bmRhcnk+O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICguLi5yZW5kZXJUaW1lQXJncykgPT4gKFxuICAgICAgICAgIDxVc2VybGFuZEJvdW5kYXJ5IHR5cGU9e2ByZW5kZXIgb2YgJHt0eXBlfWB9PlxuICAgICAgICAgICAgeygpID0+IHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gcmVuZGVyKC4uLnJlbmRlclRpbWVBcmdzKTtcblxuICAgICAgICAgICAgICAgIGlmIChzdHJpY3QgJiYgIWlzVmFsaWRFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBib3RmcmFtZXdvcmstd2ViY2hhdDogJHt0eXBlfSBzaG91bGQgcmV0dXJuIFJlYWN0IGVsZW1lbnQgb25seS5gKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDxFcnJvckJveCBlcnJvcj17ZXJyfSB0eXBlPXtgcmVuZGVyIG9mICR7dHlwZX1gfSAvPjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA8L1VzZXJsYW5kQm91bmRhcnk+XG4gICAgICAgICk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIDxFcnJvckJveCBlcnJvcj17ZXJyfSB0eXBlPXtgcmVuZGVyIG9mICR7dHlwZX1gfSAvPjtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7OztBQUVlLFNBQVNBLGVBQVQsQ0FB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