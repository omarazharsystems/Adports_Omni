"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = concatMiddleware;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function concatMiddleware() {
  for (var _len = arguments.length, middleware = new Array(_len), _key = 0; _key < _len; _key++) {
    middleware[_key] = arguments[_key];
  }

  return function (setupArgs) {
    var setup = middleware.reduce(function (setup, middleware) {
      return middleware ? [].concat(_toConsumableArray(setup), [middleware(setupArgs)]) : setup;
    }, []);
    return function (last) {
      var stack = setup.slice();

      var work = function work(index) {
        return function () {
          var next = stack[+index];
          return (next ? next(work(index + 1)) : last).apply(void 0, arguments);
        };
      };

      return work(0);
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb25jYXRNaWRkbGV3YXJlIiwibWlkZGxld2FyZSIsInNldHVwQXJncyIsInNldHVwIiwicmVkdWNlIiwibGFzdCIsInN0YWNrIiwic2xpY2UiLCJ3b3JrIiwiaW5kZXgiLCJuZXh0Il0sInNvdXJjZVJvb3QiOiJjb21wb25lbnQ6Ly8vIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaG9va3MvbWlkZGxld2FyZS9jb25jYXRNaWRkbGV3YXJlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbInR5cGUgV29yazxUPiA9ICguLi5hcmdzOiBhbnlbXSkgPT4gVDtcbnR5cGUgRW5oYW5jZXI8VD4gPSAobmV4dDogV29yazxUPikgPT4gV29yazxUPjtcbnR5cGUgTWlkZGxld2FyZTxTZXR1cCwgUmVzdWx0PiA9IChzZXR1cDogU2V0dXApID0+IEVuaGFuY2VyPFJlc3VsdD47XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbmNhdE1pZGRsZXdhcmU8U2V0dXAsIFJlc3VsdD4oXG4gIC4uLm1pZGRsZXdhcmU6IE1pZGRsZXdhcmU8U2V0dXAsIFJlc3VsdD5bXVxuKTogTWlkZGxld2FyZTxTZXR1cCwgUmVzdWx0PiB7XG4gIHJldHVybiBzZXR1cEFyZ3MgPT4ge1xuICAgIGNvbnN0IHNldHVwID0gbWlkZGxld2FyZS5yZWR1Y2UoXG4gICAgICAoc2V0dXAsIG1pZGRsZXdhcmUpID0+IChtaWRkbGV3YXJlID8gWy4uLnNldHVwLCBtaWRkbGV3YXJlKHNldHVwQXJncyldIDogc2V0dXApLFxuICAgICAgW11cbiAgICApO1xuXG4gICAgcmV0dXJuIGxhc3QgPT4ge1xuICAgICAgY29uc3Qgc3RhY2sgPSBzZXR1cC5zbGljZSgpO1xuICAgICAgY29uc3Qgd29yayA9XG4gICAgICAgIChpbmRleDogbnVtYmVyKSA9PlxuICAgICAgICAoLi4ucnVuQXJncykgPT4ge1xuICAgICAgICAgIGNvbnN0IG5leHQgPSBzdGFja1sraW5kZXhdO1xuXG4gICAgICAgICAgcmV0dXJuIChuZXh0ID8gbmV4dCh3b3JrKGluZGV4ICsgMSkpIDogbGFzdCkoLi4ucnVuQXJncyk7XG4gICAgICAgIH07XG5cbiAgICAgIHJldHVybiB3b3JrKDApO1xuICAgIH07XG4gIH07XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFJZSxTQUFTQSxnQkFBVCxHQUVjO0VBQUEsa0NBRHhCQyxVQUN3QjtJQUR4QkEsVUFDd0I7RUFBQTs7RUFDM0IsT0FBTyxVQUFBQyxTQUFTLEVBQUk7SUFDbEIsSUFBTUMsS0FBSyxHQUFHRixVQUFVLENBQUNHLE1BQVgsQ0FDWixVQUFDRCxLQUFELEVBQVFGLFVBQVI7TUFBQSxPQUF3QkEsVUFBVSxnQ0FBT0UsS0FBUCxJQUFjRixVQUFVLENBQUNDLFNBQUQsQ0FBeEIsS0FBdUNDLEtBQXpFO0lBQUEsQ0FEWSxFQUVaLEVBRlksQ0FBZDtJQUtBLE9BQU8sVUFBQUUsSUFBSSxFQUFJO01BQ2IsSUFBTUMsS0FBSyxHQUFHSCxLQUFLLENBQUNJLEtBQU4sRUFBZDs7TUFDQSxJQUFNQyxJQUFJLEdBQ1IsU0FESUEsSUFDSixDQUFDQyxLQUFEO1FBQUEsT0FDQSxZQUFnQjtVQUNkLElBQU1DLElBQUksR0FBR0osS0FBSyxDQUFDLENBQUNHLEtBQUYsQ0FBbEI7VUFFQSxPQUFPLENBQUNDLElBQUksR0FBR0EsSUFBSSxDQUFDRixJQUFJLENBQUNDLEtBQUssR0FBRyxDQUFULENBQUwsQ0FBUCxHQUEyQkosSUFBaEMsMEJBQVA7UUFDRCxDQUxEO01BQUEsQ0FERjs7TUFRQSxPQUFPRyxJQUFJLENBQUMsQ0FBRCxDQUFYO0lBQ0QsQ0FYRDtFQVlELENBbEJEO0FBbUJEIn0=