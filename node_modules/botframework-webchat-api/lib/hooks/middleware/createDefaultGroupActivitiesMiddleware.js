"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createDefaultGroupActivitiesMiddleware;

var _SendStatus = require("../../types/internal/SendStatus");

function bin(items, grouping) {
  var lastBin;
  var bins = [];
  var lastItem;
  items.forEach(function (item) {
    if (lastItem && grouping(lastItem, item)) {
      lastBin.push(item);
    } else {
      lastBin = [item];
      bins.push(lastBin);
    }

    lastItem = item;
  });
  return bins;
}

function sending(activity) {
  if (activity.from.role === 'user') {
    var _activity$channelData = activity.channelData,
        state = _activity$channelData.state,
        sendStatus = _activity$channelData['webchat:send-status']; // `channelData.state` is being deprecated in favor of `channelData['webchat:send-status']`.
    // Please refer to #4362 for details. Remove on or after 2024-07-31.

    return sendStatus || (state === _SendStatus.SENT ? _SendStatus.SENT : _SendStatus.SENDING);
  }
}

function shouldGroupTimestamp(activityX, activityY, groupTimestamp, _ref) {
  var Date = _ref.Date;

  if (groupTimestamp === false) {
    // Hide timestamp for all activities.
    return true;
  } else if (activityX && activityY) {
    if (sending(activityX) !== sending(activityY)) {
      return false;
    }

    groupTimestamp = typeof groupTimestamp === 'number' ? groupTimestamp : Infinity;
    var timeX = new Date(activityX.timestamp).getTime();
    var timeY = new Date(activityY.timestamp).getTime();
    return Math.abs(timeX - timeY) <= groupTimestamp;
  }

  return false;
}

function createDefaultGroupActivitiesMiddleware(_ref2) {
  var groupTimestamp = _ref2.groupTimestamp,
      ponyfill = _ref2.ponyfill;
  return function () {
    return function () {
      return function (_ref3) {
        var activities = _ref3.activities;
        return {
          sender: bin(activities, function (x, y) {
            return x.from.role === y.from.role;
          }),
          status: bin(activities, function (x, y) {
            return shouldGroupTimestamp(x, y, groupTimestamp, ponyfill);
          })
        };
      };
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJiaW4iLCJpdGVtcyIsImdyb3VwaW5nIiwibGFzdEJpbiIsImJpbnMiLCJsYXN0SXRlbSIsImZvckVhY2giLCJpdGVtIiwicHVzaCIsInNlbmRpbmciLCJhY3Rpdml0eSIsImZyb20iLCJyb2xlIiwiY2hhbm5lbERhdGEiLCJzdGF0ZSIsInNlbmRTdGF0dXMiLCJTRU5UIiwiU0VORElORyIsInNob3VsZEdyb3VwVGltZXN0YW1wIiwiYWN0aXZpdHlYIiwiYWN0aXZpdHlZIiwiZ3JvdXBUaW1lc3RhbXAiLCJEYXRlIiwiSW5maW5pdHkiLCJ0aW1lWCIsInRpbWVzdGFtcCIsImdldFRpbWUiLCJ0aW1lWSIsIk1hdGgiLCJhYnMiLCJjcmVhdGVEZWZhdWx0R3JvdXBBY3Rpdml0aWVzTWlkZGxld2FyZSIsInBvbnlmaWxsIiwiYWN0aXZpdGllcyIsInNlbmRlciIsIngiLCJ5Iiwic3RhdHVzIl0sInNvdXJjZVJvb3QiOiJjb21wb25lbnQ6Ly8vIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaG9va3MvbWlkZGxld2FyZS9jcmVhdGVEZWZhdWx0R3JvdXBBY3Rpdml0aWVzTWlkZGxld2FyZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTRU5ESU5HLCBTRU5UIH0gZnJvbSAnLi4vLi4vdHlwZXMvaW50ZXJuYWwvU2VuZFN0YXR1cyc7XG5pbXBvcnQgR3JvdXBBY3Rpdml0aWVzTWlkZGxld2FyZSBmcm9tICcuLi8uLi90eXBlcy9Hcm91cEFjdGl2aXRpZXNNaWRkbGV3YXJlJztcblxuaW1wb3J0IHR5cGUgeyBHbG9iYWxTY29wZVBvbnlmaWxsLCBXZWJDaGF0QWN0aXZpdHkgfSBmcm9tICdib3RmcmFtZXdvcmstd2ViY2hhdC1jb3JlJztcbmltcG9ydCB0eXBlIHsgU2VuZFN0YXR1cyB9IGZyb20gJy4uLy4uL3R5cGVzL2ludGVybmFsL1NlbmRTdGF0dXMnO1xuXG5mdW5jdGlvbiBiaW48VD4oaXRlbXM6IFRbXSwgZ3JvdXBpbmc6IChsYXN0OiBULCBjdXJyZW50OiBUKSA9PiBib29sZWFuKTogVFtdW10ge1xuICBsZXQgbGFzdEJpbjogVFtdO1xuICBjb25zdCBiaW5zOiBUW11bXSA9IFtdO1xuICBsZXQgbGFzdEl0ZW06IFQ7XG5cbiAgaXRlbXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICBpZiAobGFzdEl0ZW0gJiYgZ3JvdXBpbmcobGFzdEl0ZW0sIGl0ZW0pKSB7XG4gICAgICBsYXN0QmluLnB1c2goaXRlbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxhc3RCaW4gPSBbaXRlbV07XG4gICAgICBiaW5zLnB1c2gobGFzdEJpbik7XG4gICAgfVxuXG4gICAgbGFzdEl0ZW0gPSBpdGVtO1xuICB9KTtcblxuICByZXR1cm4gYmlucztcbn1cblxuZnVuY3Rpb24gc2VuZGluZyhhY3Rpdml0eTogV2ViQ2hhdEFjdGl2aXR5KTogU2VuZFN0YXR1cyB8IHVuZGVmaW5lZCB7XG4gIGlmIChhY3Rpdml0eS5mcm9tLnJvbGUgPT09ICd1c2VyJykge1xuICAgIGNvbnN0IHtcbiAgICAgIGNoYW5uZWxEYXRhOiB7IHN0YXRlLCAnd2ViY2hhdDpzZW5kLXN0YXR1cyc6IHNlbmRTdGF0dXMgfVxuICAgIH0gPSBhY3Rpdml0eTtcblxuICAgIC8vIGBjaGFubmVsRGF0YS5zdGF0ZWAgaXMgYmVpbmcgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiBgY2hhbm5lbERhdGFbJ3dlYmNoYXQ6c2VuZC1zdGF0dXMnXWAuXG4gICAgLy8gUGxlYXNlIHJlZmVyIHRvICM0MzYyIGZvciBkZXRhaWxzLiBSZW1vdmUgb24gb3IgYWZ0ZXIgMjAyNC0wNy0zMS5cbiAgICByZXR1cm4gc2VuZFN0YXR1cyB8fCAoc3RhdGUgPT09IFNFTlQgPyBTRU5UIDogU0VORElORyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2hvdWxkR3JvdXBUaW1lc3RhbXAoXG4gIGFjdGl2aXR5WDogV2ViQ2hhdEFjdGl2aXR5LFxuICBhY3Rpdml0eVk6IFdlYkNoYXRBY3Rpdml0eSxcbiAgZ3JvdXBUaW1lc3RhbXA6IGJvb2xlYW4gfCBudW1iZXIsXG4gIHsgRGF0ZSB9OiBHbG9iYWxTY29wZVBvbnlmaWxsXG4pOiBib29sZWFuIHtcbiAgaWYgKGdyb3VwVGltZXN0YW1wID09PSBmYWxzZSkge1xuICAgIC8vIEhpZGUgdGltZXN0YW1wIGZvciBhbGwgYWN0aXZpdGllcy5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChhY3Rpdml0eVggJiYgYWN0aXZpdHlZKSB7XG4gICAgaWYgKHNlbmRpbmcoYWN0aXZpdHlYKSAhPT0gc2VuZGluZyhhY3Rpdml0eVkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZ3JvdXBUaW1lc3RhbXAgPSB0eXBlb2YgZ3JvdXBUaW1lc3RhbXAgPT09ICdudW1iZXInID8gZ3JvdXBUaW1lc3RhbXAgOiBJbmZpbml0eTtcblxuICAgIGNvbnN0IHRpbWVYID0gbmV3IERhdGUoYWN0aXZpdHlYLnRpbWVzdGFtcCkuZ2V0VGltZSgpO1xuICAgIGNvbnN0IHRpbWVZID0gbmV3IERhdGUoYWN0aXZpdHlZLnRpbWVzdGFtcCkuZ2V0VGltZSgpO1xuXG4gICAgcmV0dXJuIE1hdGguYWJzKHRpbWVYIC0gdGltZVkpIDw9IGdyb3VwVGltZXN0YW1wO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVEZWZhdWx0R3JvdXBBY3Rpdml0aWVzTWlkZGxld2FyZSh7XG4gIGdyb3VwVGltZXN0YW1wLFxuICBwb255ZmlsbFxufToge1xuICBncm91cFRpbWVzdGFtcDogYm9vbGVhbiB8IG51bWJlcjtcbiAgcG9ueWZpbGw6IEdsb2JhbFNjb3BlUG9ueWZpbGw7XG59KTogR3JvdXBBY3Rpdml0aWVzTWlkZGxld2FyZSB7XG4gIHJldHVybiAoKSA9PlxuICAgICgpID0+XG4gICAgKHsgYWN0aXZpdGllcyB9KSA9PiAoe1xuICAgICAgc2VuZGVyOiBiaW4oYWN0aXZpdGllcywgKHgsIHkpID0+IHguZnJvbS5yb2xlID09PSB5LmZyb20ucm9sZSksXG4gICAgICBzdGF0dXM6IGJpbihhY3Rpdml0aWVzLCAoeCwgeSkgPT4gc2hvdWxkR3JvdXBUaW1lc3RhbXAoeCwgeSwgZ3JvdXBUaW1lc3RhbXAsIHBvbnlmaWxsKSlcbiAgICB9KTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQU1BLFNBQVNBLEdBQVQsQ0FBZ0JDLEtBQWhCLEVBQTRCQyxRQUE1QixFQUErRTtFQUM3RSxJQUFJQyxPQUFKO0VBQ0EsSUFBTUMsSUFBVyxHQUFHLEVBQXBCO0VBQ0EsSUFBSUMsUUFBSjtFQUVBSixLQUFLLENBQUNLLE9BQU4sQ0FBYyxVQUFBQyxJQUFJLEVBQUk7SUFDcEIsSUFBSUYsUUFBUSxJQUFJSCxRQUFRLENBQUNHLFFBQUQsRUFBV0UsSUFBWCxDQUF4QixFQUEwQztNQUN4Q0osT0FBTyxDQUFDSyxJQUFSLENBQWFELElBQWI7SUFDRCxDQUZELE1BRU87TUFDTEosT0FBTyxHQUFHLENBQUNJLElBQUQsQ0FBVjtNQUNBSCxJQUFJLENBQUNJLElBQUwsQ0FBVUwsT0FBVjtJQUNEOztJQUVERSxRQUFRLEdBQUdFLElBQVg7RUFDRCxDQVREO0VBV0EsT0FBT0gsSUFBUDtBQUNEOztBQUVELFNBQVNLLE9BQVQsQ0FBaUJDLFFBQWpCLEVBQW9FO0VBQ2xFLElBQUlBLFFBQVEsQ0FBQ0MsSUFBVCxDQUFjQyxJQUFkLEtBQXVCLE1BQTNCLEVBQW1DO0lBQ2pDLDRCQUVJRixRQUZKLENBQ0VHLFdBREY7SUFBQSxJQUNpQkMsS0FEakIseUJBQ2lCQSxLQURqQjtJQUFBLElBQytDQyxVQUQvQyx5QkFDd0IscUJBRHhCLEVBRGlDLENBS2pDO0lBQ0E7O0lBQ0EsT0FBT0EsVUFBVSxLQUFLRCxLQUFLLEtBQUtFLGdCQUFWLEdBQWlCQSxnQkFBakIsR0FBd0JDLG1CQUE3QixDQUFqQjtFQUNEO0FBQ0Y7O0FBRUQsU0FBU0Msb0JBQVQsQ0FDRUMsU0FERixFQUVFQyxTQUZGLEVBR0VDLGNBSEYsUUFLVztFQUFBLElBRFBDLElBQ08sUUFEUEEsSUFDTzs7RUFDVCxJQUFJRCxjQUFjLEtBQUssS0FBdkIsRUFBOEI7SUFDNUI7SUFDQSxPQUFPLElBQVA7RUFDRCxDQUhELE1BR08sSUFBSUYsU0FBUyxJQUFJQyxTQUFqQixFQUE0QjtJQUNqQyxJQUFJWCxPQUFPLENBQUNVLFNBQUQsQ0FBUCxLQUF1QlYsT0FBTyxDQUFDVyxTQUFELENBQWxDLEVBQStDO01BQzdDLE9BQU8sS0FBUDtJQUNEOztJQUVEQyxjQUFjLEdBQUcsT0FBT0EsY0FBUCxLQUEwQixRQUExQixHQUFxQ0EsY0FBckMsR0FBc0RFLFFBQXZFO0lBRUEsSUFBTUMsS0FBSyxHQUFHLElBQUlGLElBQUosQ0FBU0gsU0FBUyxDQUFDTSxTQUFuQixFQUE4QkMsT0FBOUIsRUFBZDtJQUNBLElBQU1DLEtBQUssR0FBRyxJQUFJTCxJQUFKLENBQVNGLFNBQVMsQ0FBQ0ssU0FBbkIsRUFBOEJDLE9BQTlCLEVBQWQ7SUFFQSxPQUFPRSxJQUFJLENBQUNDLEdBQUwsQ0FBU0wsS0FBSyxHQUFHRyxLQUFqQixLQUEyQk4sY0FBbEM7RUFDRDs7RUFFRCxPQUFPLEtBQVA7QUFDRDs7QUFFYyxTQUFTUyxzQ0FBVCxRQU1lO0VBQUEsSUFMNUJULGNBSzRCLFNBTDVCQSxjQUs0QjtFQUFBLElBSjVCVSxRQUk0QixTQUo1QkEsUUFJNEI7RUFDNUIsT0FBTztJQUFBLE9BQ0w7TUFBQSxPQUNBO1FBQUEsSUFBR0MsVUFBSCxTQUFHQSxVQUFIO1FBQUEsT0FBcUI7VUFDbkJDLE1BQU0sRUFBRWpDLEdBQUcsQ0FBQ2dDLFVBQUQsRUFBYSxVQUFDRSxDQUFELEVBQUlDLENBQUo7WUFBQSxPQUFVRCxDQUFDLENBQUN2QixJQUFGLENBQU9DLElBQVAsS0FBZ0J1QixDQUFDLENBQUN4QixJQUFGLENBQU9DLElBQWpDO1VBQUEsQ0FBYixDQURRO1VBRW5Cd0IsTUFBTSxFQUFFcEMsR0FBRyxDQUFDZ0MsVUFBRCxFQUFhLFVBQUNFLENBQUQsRUFBSUMsQ0FBSjtZQUFBLE9BQVVqQixvQkFBb0IsQ0FBQ2dCLENBQUQsRUFBSUMsQ0FBSixFQUFPZCxjQUFQLEVBQXVCVSxRQUF2QixDQUE5QjtVQUFBLENBQWI7UUFGUSxDQUFyQjtNQUFBLENBREE7SUFBQSxDQURLO0VBQUEsQ0FBUDtBQU1EIn0=