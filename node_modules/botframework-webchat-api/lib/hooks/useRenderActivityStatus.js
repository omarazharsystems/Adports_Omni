"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useRenderActivityStatus;

var _react = require("react");

var _useCreateActivityStatusRenderer = _interopRequireDefault(require("./useCreateActivityStatusRenderer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Previously, useRenderActivity() was called like this:
//
// const element = useRenderActivityStatus({ activity, nextVisibleActivity });
// Now, the useCreateActivityRenderer() is a 3-pass function:
//
// const createActivityStatusRenderer = useCreateActivityStatusRenderer();
// const renderActivityStatus = createActivityStatusRenderer({ activity, hideTimestamp });
// const element = renderActivityStatus && renderActivityStatus(undefined);
// Despite deprecation, useRenderActivityStatus() can be retrofitted using useCreateActivityStatusRenderer().
var showDeprecationNotes = true;
/** @deprecated Please use `useCreateActivityStatusRenderer()` instead. */

function useRenderActivityStatus(_ref) {
  var activity = _ref.activity,
      nextVisibleActivity = _ref.nextVisibleActivity;

  if (showDeprecationNotes) {
    console.warn('botframework-webchat: "useRenderActivityStatus" is deprecated and will be removed on or after 2022-07-22. Please use "useCreateActivityStatusRenderer()" instead.');
    showDeprecationNotes = false;
  }

  var createActivityStatusRenderer = (0, _useCreateActivityStatusRenderer.default)();
  return (0, _react.useMemo)(function () {
    var renderActivityStatus = createActivityStatusRenderer({
      activity: activity,
      nextVisibleActivity: nextVisibleActivity
    });
    return !!renderActivityStatus && renderActivityStatus;
  }, [activity, createActivityStatusRenderer, nextVisibleActivity]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzaG93RGVwcmVjYXRpb25Ob3RlcyIsInVzZVJlbmRlckFjdGl2aXR5U3RhdHVzIiwiYWN0aXZpdHkiLCJuZXh0VmlzaWJsZUFjdGl2aXR5IiwiY29uc29sZSIsIndhcm4iLCJjcmVhdGVBY3Rpdml0eVN0YXR1c1JlbmRlcmVyIiwidXNlQ3JlYXRlQWN0aXZpdHlTdGF0dXNSZW5kZXJlciIsInVzZU1lbW8iLCJyZW5kZXJBY3Rpdml0eVN0YXR1cyJdLCJzb3VyY2VSb290IjoiY29tcG9uZW50Oi8vLyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2hvb2tzL3VzZVJlbmRlckFjdGl2aXR5U3RhdHVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB1c2VDcmVhdGVBY3Rpdml0eVN0YXR1c1JlbmRlcmVyIGZyb20gJy4vdXNlQ3JlYXRlQWN0aXZpdHlTdGF0dXNSZW5kZXJlcic7XG5cbi8vIFByZXZpb3VzbHksIHVzZVJlbmRlckFjdGl2aXR5KCkgd2FzIGNhbGxlZCBsaWtlIHRoaXM6XG4vL1xuLy8gY29uc3QgZWxlbWVudCA9IHVzZVJlbmRlckFjdGl2aXR5U3RhdHVzKHsgYWN0aXZpdHksIG5leHRWaXNpYmxlQWN0aXZpdHkgfSk7XG5cbi8vIE5vdywgdGhlIHVzZUNyZWF0ZUFjdGl2aXR5UmVuZGVyZXIoKSBpcyBhIDMtcGFzcyBmdW5jdGlvbjpcbi8vXG4vLyBjb25zdCBjcmVhdGVBY3Rpdml0eVN0YXR1c1JlbmRlcmVyID0gdXNlQ3JlYXRlQWN0aXZpdHlTdGF0dXNSZW5kZXJlcigpO1xuLy8gY29uc3QgcmVuZGVyQWN0aXZpdHlTdGF0dXMgPSBjcmVhdGVBY3Rpdml0eVN0YXR1c1JlbmRlcmVyKHsgYWN0aXZpdHksIGhpZGVUaW1lc3RhbXAgfSk7XG4vLyBjb25zdCBlbGVtZW50ID0gcmVuZGVyQWN0aXZpdHlTdGF0dXMgJiYgcmVuZGVyQWN0aXZpdHlTdGF0dXModW5kZWZpbmVkKTtcblxuLy8gRGVzcGl0ZSBkZXByZWNhdGlvbiwgdXNlUmVuZGVyQWN0aXZpdHlTdGF0dXMoKSBjYW4gYmUgcmV0cm9maXR0ZWQgdXNpbmcgdXNlQ3JlYXRlQWN0aXZpdHlTdGF0dXNSZW5kZXJlcigpLlxuXG5sZXQgc2hvd0RlcHJlY2F0aW9uTm90ZXMgPSB0cnVlO1xuXG4vKiogQGRlcHJlY2F0ZWQgUGxlYXNlIHVzZSBgdXNlQ3JlYXRlQWN0aXZpdHlTdGF0dXNSZW5kZXJlcigpYCBpbnN0ZWFkLiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlUmVuZGVyQWN0aXZpdHlTdGF0dXMoeyBhY3Rpdml0eSwgbmV4dFZpc2libGVBY3Rpdml0eSB9KSB7XG4gIGlmIChzaG93RGVwcmVjYXRpb25Ob3Rlcykge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdib3RmcmFtZXdvcmstd2ViY2hhdDogXCJ1c2VSZW5kZXJBY3Rpdml0eVN0YXR1c1wiIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBvbiBvciBhZnRlciAyMDIyLTA3LTIyLiBQbGVhc2UgdXNlIFwidXNlQ3JlYXRlQWN0aXZpdHlTdGF0dXNSZW5kZXJlcigpXCIgaW5zdGVhZC4nXG4gICAgKTtcblxuICAgIHNob3dEZXByZWNhdGlvbk5vdGVzID0gZmFsc2U7XG4gIH1cblxuICBjb25zdCBjcmVhdGVBY3Rpdml0eVN0YXR1c1JlbmRlcmVyID0gdXNlQ3JlYXRlQWN0aXZpdHlTdGF0dXNSZW5kZXJlcigpO1xuXG4gIHJldHVybiB1c2VNZW1vKCgpID0+IHtcbiAgICBjb25zdCByZW5kZXJBY3Rpdml0eVN0YXR1cyA9IGNyZWF0ZUFjdGl2aXR5U3RhdHVzUmVuZGVyZXIoeyBhY3Rpdml0eSwgbmV4dFZpc2libGVBY3Rpdml0eSB9KTtcblxuICAgIHJldHVybiAhIXJlbmRlckFjdGl2aXR5U3RhdHVzICYmIHJlbmRlckFjdGl2aXR5U3RhdHVzO1xuICB9LCBbYWN0aXZpdHksIGNyZWF0ZUFjdGl2aXR5U3RhdHVzUmVuZGVyZXIsIG5leHRWaXNpYmxlQWN0aXZpdHldKTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBOzs7O0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUEsSUFBSUEsb0JBQW9CLEdBQUcsSUFBM0I7QUFFQTs7QUFDZSxTQUFTQyx1QkFBVCxPQUFvRTtFQUFBLElBQWpDQyxRQUFpQyxRQUFqQ0EsUUFBaUM7RUFBQSxJQUF2QkMsbUJBQXVCLFFBQXZCQSxtQkFBdUI7O0VBQ2pGLElBQUlILG9CQUFKLEVBQTBCO0lBQ3hCSSxPQUFPLENBQUNDLElBQVIsQ0FDRSxtS0FERjtJQUlBTCxvQkFBb0IsR0FBRyxLQUF2QjtFQUNEOztFQUVELElBQU1NLDRCQUE0QixHQUFHLElBQUFDLHdDQUFBLEdBQXJDO0VBRUEsT0FBTyxJQUFBQyxjQUFBLEVBQVEsWUFBTTtJQUNuQixJQUFNQyxvQkFBb0IsR0FBR0gsNEJBQTRCLENBQUM7TUFBRUosUUFBUSxFQUFSQSxRQUFGO01BQVlDLG1CQUFtQixFQUFuQkE7SUFBWixDQUFELENBQXpEO0lBRUEsT0FBTyxDQUFDLENBQUNNLG9CQUFGLElBQTBCQSxvQkFBakM7RUFDRCxDQUpNLEVBSUosQ0FBQ1AsUUFBRCxFQUFXSSw0QkFBWCxFQUF5Q0gsbUJBQXpDLENBSkksQ0FBUDtBQUtEIn0=