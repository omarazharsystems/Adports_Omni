"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useRelativeTimeFormatter;

var _react = require("react");

var _useDateFormatter = _interopRequireDefault(require("./useDateFormatter"));

var _useLocalizedGlobalize = _interopRequireDefault(require("./internal/useLocalizedGlobalize"));

var _useLocalizer = _interopRequireDefault(require("./useLocalizer"));

var _usePonyfill3 = _interopRequireDefault(require("./usePonyfill"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

// False positive: we are using `Date` as a type.
// eslint-disable-next-line no-restricted-globals
function useRelativeTimeFormatter() {
  var _usePonyfill = (0, _usePonyfill3.default)(),
      _usePonyfill2 = _slicedToArray(_usePonyfill, 1),
      Date = _usePonyfill2[0].Date;

  var _useLocalizedGlobaliz = (0, _useLocalizedGlobalize.default)(),
      _useLocalizedGlobaliz2 = _slicedToArray(_useLocalizedGlobaliz, 1),
      globalize = _useLocalizedGlobaliz2[0];

  var formatDate = (0, _useDateFormatter.default)();
  var localize = (0, _useLocalizer.default)();
  return (0, _react.useMemo)(function () {
    var relativeTimeFormatter = globalize.relativeTimeFormatter.bind(globalize);
    return function (dateOrString) {
      var date = new Date(dateOrString);
      var dateTime = date.getTime();

      if (isNaN(dateTime)) {
        return dateOrString;
      }

      var now = Date.now();
      var deltaInMs = now - dateTime;
      var deltaInMinutes = Math.floor(deltaInMs / 60000);
      var deltaInHours = Math.floor(deltaInMs / 3600000);

      if (deltaInMinutes < 1) {
        return localize('ACTIVITY_STATUS_TIMESTAMP_JUST_NOW');
      } else if (deltaInMinutes === 1) {
        return localize('ACTIVITY_STATUS_TIMESTAMP_ONE_MINUTE_AGO');
      } else if (deltaInHours < 1) {
        return relativeTimeFormatter('minute')(-deltaInMinutes);
      } else if (deltaInHours === 1) {
        return localize('ACTIVITY_STATUS_TIMESTAMP_ONE_HOUR_AGO');
      } else if (deltaInHours < 5) {
        return relativeTimeFormatter('hour')(-deltaInHours);
      } else if (deltaInHours <= 24) {
        return localize('ACTIVITY_STATUS_TIMESTAMP_TODAY');
      } else if (deltaInHours <= 48) {
        return localize('ACTIVITY_STATUS_TIMESTAMP_YESTERDAY');
      }

      return formatDate(date);
    };
  }, [Date, formatDate, globalize, localize]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1c2VSZWxhdGl2ZVRpbWVGb3JtYXR0ZXIiLCJ1c2VQb255ZmlsbCIsIkRhdGUiLCJ1c2VMb2NhbGl6ZWRHbG9iYWxpemUiLCJnbG9iYWxpemUiLCJmb3JtYXREYXRlIiwidXNlRGF0ZUZvcm1hdHRlciIsImxvY2FsaXplIiwidXNlTG9jYWxpemVyIiwidXNlTWVtbyIsInJlbGF0aXZlVGltZUZvcm1hdHRlciIsImJpbmQiLCJkYXRlT3JTdHJpbmciLCJkYXRlIiwiZGF0ZVRpbWUiLCJnZXRUaW1lIiwiaXNOYU4iLCJub3ciLCJkZWx0YUluTXMiLCJkZWx0YUluTWludXRlcyIsIk1hdGgiLCJmbG9vciIsImRlbHRhSW5Ib3VycyJdLCJzb3VyY2VSb290IjoiY29tcG9uZW50Oi8vLyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2hvb2tzL3VzZVJlbGF0aXZlVGltZUZvcm1hdHRlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQgbm8tbWFnaWMtbnVtYmVyczogW1wiZXJyb3JcIiwgeyBcImlnbm9yZVwiOiBbMSwgNSwgMjQsIDQ4LCA2MDAwMCwgMzYwMDAwMF0gfV0gKi9cblxuaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHVzZURhdGVGb3JtYXR0ZXIgZnJvbSAnLi91c2VEYXRlRm9ybWF0dGVyJztcbmltcG9ydCB1c2VMb2NhbGl6ZWRHbG9iYWxpemUgZnJvbSAnLi9pbnRlcm5hbC91c2VMb2NhbGl6ZWRHbG9iYWxpemUnO1xuaW1wb3J0IHVzZUxvY2FsaXplciBmcm9tICcuL3VzZUxvY2FsaXplcic7XG5pbXBvcnQgdXNlUG9ueWZpbGwgZnJvbSAnLi91c2VQb255ZmlsbCc7XG5cbi8vIEZhbHNlIHBvc2l0aXZlOiB3ZSBhcmUgdXNpbmcgYERhdGVgIGFzIGEgdHlwZS5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVJlbGF0aXZlVGltZUZvcm1hdHRlcigpOiAoZGF0ZU9yU3RyaW5nOiBEYXRlIHwgc3RyaW5nKSA9PiBzdHJpbmcge1xuICBjb25zdCBbeyBEYXRlIH1dID0gdXNlUG9ueWZpbGwoKTtcbiAgY29uc3QgW2dsb2JhbGl6ZV0gPSB1c2VMb2NhbGl6ZWRHbG9iYWxpemUoKTtcbiAgY29uc3QgZm9ybWF0RGF0ZSA9IHVzZURhdGVGb3JtYXR0ZXIoKTtcbiAgY29uc3QgbG9jYWxpemUgPSB1c2VMb2NhbGl6ZXIoKTtcblxuICByZXR1cm4gdXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgcmVsYXRpdmVUaW1lRm9ybWF0dGVyID0gZ2xvYmFsaXplLnJlbGF0aXZlVGltZUZvcm1hdHRlci5iaW5kKGdsb2JhbGl6ZSk7XG5cbiAgICByZXR1cm4gZGF0ZU9yU3RyaW5nID0+IHtcbiAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShkYXRlT3JTdHJpbmcpO1xuICAgICAgY29uc3QgZGF0ZVRpbWUgPSBkYXRlLmdldFRpbWUoKTtcblxuICAgICAgaWYgKGlzTmFOKGRhdGVUaW1lKSkge1xuICAgICAgICByZXR1cm4gZGF0ZU9yU3RyaW5nO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgY29uc3QgZGVsdGFJbk1zID0gbm93IC0gZGF0ZVRpbWU7XG4gICAgICBjb25zdCBkZWx0YUluTWludXRlcyA9IE1hdGguZmxvb3IoZGVsdGFJbk1zIC8gNjAwMDApO1xuICAgICAgY29uc3QgZGVsdGFJbkhvdXJzID0gTWF0aC5mbG9vcihkZWx0YUluTXMgLyAzNjAwMDAwKTtcblxuICAgICAgaWYgKGRlbHRhSW5NaW51dGVzIDwgMSkge1xuICAgICAgICByZXR1cm4gbG9jYWxpemUoJ0FDVElWSVRZX1NUQVRVU19USU1FU1RBTVBfSlVTVF9OT1cnKTtcbiAgICAgIH0gZWxzZSBpZiAoZGVsdGFJbk1pbnV0ZXMgPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplKCdBQ1RJVklUWV9TVEFUVVNfVElNRVNUQU1QX09ORV9NSU5VVEVfQUdPJyk7XG4gICAgICB9IGVsc2UgaWYgKGRlbHRhSW5Ib3VycyA8IDEpIHtcbiAgICAgICAgcmV0dXJuIHJlbGF0aXZlVGltZUZvcm1hdHRlcignbWludXRlJykoLWRlbHRhSW5NaW51dGVzKTtcbiAgICAgIH0gZWxzZSBpZiAoZGVsdGFJbkhvdXJzID09PSAxKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZSgnQUNUSVZJVFlfU1RBVFVTX1RJTUVTVEFNUF9PTkVfSE9VUl9BR08nKTtcbiAgICAgIH0gZWxzZSBpZiAoZGVsdGFJbkhvdXJzIDwgNSkge1xuICAgICAgICByZXR1cm4gcmVsYXRpdmVUaW1lRm9ybWF0dGVyKCdob3VyJykoLWRlbHRhSW5Ib3Vycyk7XG4gICAgICB9IGVsc2UgaWYgKGRlbHRhSW5Ib3VycyA8PSAyNCkge1xuICAgICAgICByZXR1cm4gbG9jYWxpemUoJ0FDVElWSVRZX1NUQVRVU19USU1FU1RBTVBfVE9EQVknKTtcbiAgICAgIH0gZWxzZSBpZiAoZGVsdGFJbkhvdXJzIDw9IDQ4KSB7XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZSgnQUNUSVZJVFlfU1RBVFVTX1RJTUVTVEFNUF9ZRVNURVJEQVknKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZvcm1hdERhdGUoZGF0ZSk7XG4gICAgfTtcbiAgfSwgW0RhdGUsIGZvcm1hdERhdGUsIGdsb2JhbGl6ZSwgbG9jYWxpemVdKTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7QUFDQTtBQUNlLFNBQVNBLHdCQUFULEdBQTZFO0VBQzFGLG1CQUFtQixJQUFBQyxxQkFBQSxHQUFuQjtFQUFBO0VBQUEsSUFBU0MsSUFBVCxvQkFBU0EsSUFBVDs7RUFDQSw0QkFBb0IsSUFBQUMsOEJBQUEsR0FBcEI7RUFBQTtFQUFBLElBQU9DLFNBQVA7O0VBQ0EsSUFBTUMsVUFBVSxHQUFHLElBQUFDLHlCQUFBLEdBQW5CO0VBQ0EsSUFBTUMsUUFBUSxHQUFHLElBQUFDLHFCQUFBLEdBQWpCO0VBRUEsT0FBTyxJQUFBQyxjQUFBLEVBQVEsWUFBTTtJQUNuQixJQUFNQyxxQkFBcUIsR0FBR04sU0FBUyxDQUFDTSxxQkFBVixDQUFnQ0MsSUFBaEMsQ0FBcUNQLFNBQXJDLENBQTlCO0lBRUEsT0FBTyxVQUFBUSxZQUFZLEVBQUk7TUFDckIsSUFBTUMsSUFBSSxHQUFHLElBQUlYLElBQUosQ0FBU1UsWUFBVCxDQUFiO01BQ0EsSUFBTUUsUUFBUSxHQUFHRCxJQUFJLENBQUNFLE9BQUwsRUFBakI7O01BRUEsSUFBSUMsS0FBSyxDQUFDRixRQUFELENBQVQsRUFBcUI7UUFDbkIsT0FBT0YsWUFBUDtNQUNEOztNQUVELElBQU1LLEdBQUcsR0FBR2YsSUFBSSxDQUFDZSxHQUFMLEVBQVo7TUFDQSxJQUFNQyxTQUFTLEdBQUdELEdBQUcsR0FBR0gsUUFBeEI7TUFDQSxJQUFNSyxjQUFjLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXSCxTQUFTLEdBQUcsS0FBdkIsQ0FBdkI7TUFDQSxJQUFNSSxZQUFZLEdBQUdGLElBQUksQ0FBQ0MsS0FBTCxDQUFXSCxTQUFTLEdBQUcsT0FBdkIsQ0FBckI7O01BRUEsSUFBSUMsY0FBYyxHQUFHLENBQXJCLEVBQXdCO1FBQ3RCLE9BQU9aLFFBQVEsQ0FBQyxvQ0FBRCxDQUFmO01BQ0QsQ0FGRCxNQUVPLElBQUlZLGNBQWMsS0FBSyxDQUF2QixFQUEwQjtRQUMvQixPQUFPWixRQUFRLENBQUMsMENBQUQsQ0FBZjtNQUNELENBRk0sTUFFQSxJQUFJZSxZQUFZLEdBQUcsQ0FBbkIsRUFBc0I7UUFDM0IsT0FBT1oscUJBQXFCLENBQUMsUUFBRCxDQUFyQixDQUFnQyxDQUFDUyxjQUFqQyxDQUFQO01BQ0QsQ0FGTSxNQUVBLElBQUlHLFlBQVksS0FBSyxDQUFyQixFQUF3QjtRQUM3QixPQUFPZixRQUFRLENBQUMsd0NBQUQsQ0FBZjtNQUNELENBRk0sTUFFQSxJQUFJZSxZQUFZLEdBQUcsQ0FBbkIsRUFBc0I7UUFDM0IsT0FBT1oscUJBQXFCLENBQUMsTUFBRCxDQUFyQixDQUE4QixDQUFDWSxZQUEvQixDQUFQO01BQ0QsQ0FGTSxNQUVBLElBQUlBLFlBQVksSUFBSSxFQUFwQixFQUF3QjtRQUM3QixPQUFPZixRQUFRLENBQUMsaUNBQUQsQ0FBZjtNQUNELENBRk0sTUFFQSxJQUFJZSxZQUFZLElBQUksRUFBcEIsRUFBd0I7UUFDN0IsT0FBT2YsUUFBUSxDQUFDLHFDQUFELENBQWY7TUFDRDs7TUFFRCxPQUFPRixVQUFVLENBQUNRLElBQUQsQ0FBakI7SUFDRCxDQTlCRDtFQStCRCxDQWxDTSxFQWtDSixDQUFDWCxJQUFELEVBQU9HLFVBQVAsRUFBbUJELFNBQW5CLEVBQThCRyxRQUE5QixDQWxDSSxDQUFQO0FBbUNEIn0=