"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.getEarliestUpdateNotBefore = getEarliestUpdateNotBefore;

var _react = require("react");

var _simpleUpdateIn = _interopRequireDefault(require("simple-update-in"));

var _findMin = _interopRequireDefault(require("../utils/findMin"));

var _useForceRender = _interopRequireDefault(require("./internal/useForceRender"));

var _useNotifications3 = _interopRequireDefault(require("./useNotifications"));

var _usePonyfill3 = _interopRequireDefault(require("./usePonyfill"));

var _useStyleOptions3 = _interopRequireDefault(require("./useStyleOptions"));

var _useTimer = _interopRequireDefault(require("./internal/useTimer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function getEarliestUpdateNotBefore(notificationMap) {
  return (0, _findMin.default)(Object.values(notificationMap).filter(function (_ref) {
    var outOfDate = _ref.outOfDate;
    return outOfDate;
  }).map(function (_ref2) {
    var updateNotBefore = _ref2.updateNotBefore;
    return updateNotBefore;
  }));
}

function useDebouncedNotifications() {
  var _usePonyfill = (0, _usePonyfill3.default)(),
      _usePonyfill2 = _slicedToArray(_usePonyfill, 1),
      Date = _usePonyfill2[0].Date;

  var _useStyleOptions = (0, _useStyleOptions3.default)(),
      _useStyleOptions2 = _slicedToArray(_useStyleOptions, 1),
      notificationDebounceTimeout = _useStyleOptions2[0].notificationDebounceTimeout;

  var _useNotifications = (0, _useNotifications3.default)(),
      _useNotifications2 = _slicedToArray(_useNotifications, 1),
      notifications = _useNotifications2[0];

  var debouncedNotificationsRef = (0, _react.useRef)({});
  var forceRender = (0, _useForceRender.default)();
  var now = Date.now(); // Delete notifications or mark them to be deleted if debouncing.

  var _iterator = _createForOfIteratorHelper(Object.keys(debouncedNotificationsRef.current).filter(function (id) {
    return !(id in notifications);
  })),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _id = _step.value;
      debouncedNotificationsRef.current = (0, _simpleUpdateIn.default)(debouncedNotificationsRef.current, [_id], function (debouncedNotification) {
        if (now < debouncedNotification.updateNotBefore) {
          // The update need to be postponed.
          return _objectSpread(_objectSpread({}, debouncedNotification), {}, {
            outOfDate: true
          });
        } // Otherwise, return undefined will remove it.

      });
    } // For any changes, update notifications or mark them to be updated if debouncing.

  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  var _loop = function _loop() {
    var _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2),
        _Object$entries$_i$ = _Object$entries$_i[1],
        alt = _Object$entries$_i$.alt,
        data = _Object$entries$_i$.data,
        id = _Object$entries$_i$.id,
        level = _Object$entries$_i$.level,
        message = _Object$entries$_i$.message,
        timestamp = _Object$entries$_i$.timestamp;

    debouncedNotificationsRef.current = (0, _simpleUpdateIn.default)(debouncedNotificationsRef.current, [id], function (debouncedNotification) {
      if (debouncedNotification && alt === debouncedNotification.alt && Object.is(data, debouncedNotification.data) && level === debouncedNotification.level && message === debouncedNotification.message && timestamp === debouncedNotification.timestamp) {
        // If nothing changed, return as-is.
        return debouncedNotification;
      }

      if (debouncedNotification && now < debouncedNotification.updateNotBefore) {
        // The update need to be postponed.
        return _objectSpread(_objectSpread({}, debouncedNotification), {}, {
          outOfDate: true
        });
      } // Update the notification.


      return _objectSpread(_objectSpread({}, debouncedNotification), {}, {
        alt: alt,
        data: data,
        id: id,
        level: level,
        message: message,
        outOfDate: false,
        timestamp: timestamp,
        updateNotBefore: now + notificationDebounceTimeout
      });
    });
  };

  for (var _i2 = 0, _Object$entries = Object.entries(notifications); _i2 < _Object$entries.length; _i2++) {
    _loop();
  }

  (0, _useTimer.default)(getEarliestUpdateNotBefore(debouncedNotificationsRef.current), forceRender);
  return [debouncedNotificationsRef.current];
}

var _default = useDebouncedNotifications;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,