"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useReadTelemetryDimensions;

var _react = require("react");

var _useWebChatAPIContext2 = _interopRequireDefault(require("./useWebChatAPIContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function useReadTelemetryDimensions() {
  var _useWebChatAPIContext = (0, _useWebChatAPIContext2.default)(),
      telemetryDimensionsRef = _useWebChatAPIContext.telemetryDimensionsRef;

  return (0, _react.useCallback)(function () {
    return _objectSpread({}, telemetryDimensionsRef.current);
  }, [telemetryDimensionsRef]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1c2VSZWFkVGVsZW1ldHJ5RGltZW5zaW9ucyIsInVzZVdlYkNoYXRBUElDb250ZXh0IiwidGVsZW1ldHJ5RGltZW5zaW9uc1JlZiIsInVzZUNhbGxiYWNrIiwiY3VycmVudCJdLCJzb3VyY2VSb290IjoiY29tcG9uZW50Oi8vLyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2hvb2tzL2ludGVybmFsL3VzZVJlYWRUZWxlbWV0cnlEaW1lbnNpb25zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgdXNlV2ViQ2hhdEFQSUNvbnRleHQgZnJvbSAnLi91c2VXZWJDaGF0QVBJQ29udGV4dCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVJlYWRUZWxlbWV0cnlEaW1lbnNpb25zKCkge1xuICBjb25zdCB7IHRlbGVtZXRyeURpbWVuc2lvbnNSZWYgfSA9IHVzZVdlYkNoYXRBUElDb250ZXh0KCk7XG5cbiAgcmV0dXJuIHVzZUNhbGxiYWNrKCgpID0+ICh7IC4uLnRlbGVtZXRyeURpbWVuc2lvbnNSZWYuY3VycmVudCB9KSwgW3RlbGVtZXRyeURpbWVuc2lvbnNSZWZdKTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBOzs7Ozs7Ozs7O0FBRWUsU0FBU0EsMEJBQVQsR0FBc0M7RUFDbkQsNEJBQW1DLElBQUFDLDhCQUFBLEdBQW5DO0VBQUEsSUFBUUMsc0JBQVIseUJBQVFBLHNCQUFSOztFQUVBLE9BQU8sSUFBQUMsa0JBQUEsRUFBWTtJQUFBLHlCQUFZRCxzQkFBc0IsQ0FBQ0UsT0FBbkM7RUFBQSxDQUFaLEVBQTJELENBQUNGLHNCQUFELENBQTNELENBQVA7QUFDRCJ9