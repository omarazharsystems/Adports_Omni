"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useCreateActivityRendererInternal;

var _react = require("react");

var _useRenderAttachment = _interopRequireDefault(require("../useRenderAttachment"));

var _useWebChatAPIContext2 = _interopRequireDefault(require("./useWebChatAPIContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function useCreateActivityRendererInternal(renderAttachmentOverride) {
  var _useWebChatAPIContext = (0, _useWebChatAPIContext2.default)(),
      createActivityRenderer = _useWebChatAPIContext.activityRenderer;

  var defaultRenderAttachment = (0, _useRenderAttachment.default)();
  var renderAttachment = renderAttachmentOverride || defaultRenderAttachment;
  return (0, _react.useMemo)(function () {
    return function () {
      var renderActivity = createActivityRenderer.apply(void 0, arguments);

      if (!renderActivity) {
        return false;
      }

      return function (renderActivityOptions) {
        if ( /*#__PURE__*/(0, _react.isValidElement)(renderActivity)) {
          return renderActivity;
        }

        var activityElement = renderActivity(function () {
          return renderAttachment.apply(void 0, arguments);
        }, renderActivityOptions); // "activityElement" cannot be false. If the middleware want to hide the "activityElement", it should return "false" when we call createActivityRenderer().

        activityElement || console.warn('botframework-webchat: To hide an activity, the activity renderer should return false. It should not return a function that will return false when called.');
        return activityElement;
      };
    };
  }, [createActivityRenderer, renderAttachment]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1c2VDcmVhdGVBY3Rpdml0eVJlbmRlcmVySW50ZXJuYWwiLCJyZW5kZXJBdHRhY2htZW50T3ZlcnJpZGUiLCJ1c2VXZWJDaGF0QVBJQ29udGV4dCIsImNyZWF0ZUFjdGl2aXR5UmVuZGVyZXIiLCJhY3Rpdml0eVJlbmRlcmVyIiwiZGVmYXVsdFJlbmRlckF0dGFjaG1lbnQiLCJ1c2VSZW5kZXJBdHRhY2htZW50IiwicmVuZGVyQXR0YWNobWVudCIsInVzZU1lbW8iLCJyZW5kZXJBY3Rpdml0eSIsInJlbmRlckFjdGl2aXR5T3B0aW9ucyIsImlzVmFsaWRFbGVtZW50IiwiYWN0aXZpdHlFbGVtZW50IiwiY29uc29sZSIsIndhcm4iXSwic291cmNlUm9vdCI6ImNvbXBvbmVudDovLy8iLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ob29rcy9pbnRlcm5hbC91c2VDcmVhdGVBY3Rpdml0eVJlbmRlcmVySW50ZXJuYWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnQsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IEFjdGl2aXR5Q29tcG9uZW50RmFjdG9yeSB9IGZyb20gJy4uLy4uL3R5cGVzL0FjdGl2aXR5TWlkZGxld2FyZSc7XG5pbXBvcnQgeyBSZW5kZXJBdHRhY2htZW50IH0gZnJvbSAnLi4vLi4vdHlwZXMvQXR0YWNobWVudE1pZGRsZXdhcmUnO1xuaW1wb3J0IHVzZVJlbmRlckF0dGFjaG1lbnQgZnJvbSAnLi4vdXNlUmVuZGVyQXR0YWNobWVudCc7XG5pbXBvcnQgdXNlV2ViQ2hhdEFQSUNvbnRleHQgZnJvbSAnLi91c2VXZWJDaGF0QVBJQ29udGV4dCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUNyZWF0ZUFjdGl2aXR5UmVuZGVyZXJJbnRlcm5hbChcbiAgcmVuZGVyQXR0YWNobWVudE92ZXJyaWRlPzogUmVuZGVyQXR0YWNobWVudFxuKTogQWN0aXZpdHlDb21wb25lbnRGYWN0b3J5IHtcbiAgY29uc3QgeyBhY3Rpdml0eVJlbmRlcmVyOiBjcmVhdGVBY3Rpdml0eVJlbmRlcmVyIH0gPSB1c2VXZWJDaGF0QVBJQ29udGV4dCgpO1xuICBjb25zdCBkZWZhdWx0UmVuZGVyQXR0YWNobWVudCA9IHVzZVJlbmRlckF0dGFjaG1lbnQoKTtcblxuICBjb25zdCByZW5kZXJBdHRhY2htZW50OiBSZW5kZXJBdHRhY2htZW50ID0gcmVuZGVyQXR0YWNobWVudE92ZXJyaWRlIHx8IGRlZmF1bHRSZW5kZXJBdHRhY2htZW50O1xuXG4gIHJldHVybiB1c2VNZW1vKFxuICAgICgpID0+XG4gICAgICAoLi4uY3JlYXRlQWN0aXZpdHlSZW5kZXJlck9wdGlvbnMpID0+IHtcbiAgICAgICAgY29uc3QgcmVuZGVyQWN0aXZpdHkgPSBjcmVhdGVBY3Rpdml0eVJlbmRlcmVyKC4uLmNyZWF0ZUFjdGl2aXR5UmVuZGVyZXJPcHRpb25zKTtcblxuICAgICAgICBpZiAoIXJlbmRlckFjdGl2aXR5KSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlbmRlckFjdGl2aXR5T3B0aW9ucyA9PiB7XG4gICAgICAgICAgaWYgKGlzVmFsaWRFbGVtZW50KHJlbmRlckFjdGl2aXR5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlbmRlckFjdGl2aXR5O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IGFjdGl2aXR5RWxlbWVudCA9IHJlbmRlckFjdGl2aXR5KFxuICAgICAgICAgICAgKC4uLnJlbmRlckF0dGFjaG1lbnRBcmdzKSA9PiByZW5kZXJBdHRhY2htZW50KC4uLnJlbmRlckF0dGFjaG1lbnRBcmdzKSxcbiAgICAgICAgICAgIHJlbmRlckFjdGl2aXR5T3B0aW9uc1xuICAgICAgICAgICk7XG5cbiAgICAgICAgICAvLyBcImFjdGl2aXR5RWxlbWVudFwiIGNhbm5vdCBiZSBmYWxzZS4gSWYgdGhlIG1pZGRsZXdhcmUgd2FudCB0byBoaWRlIHRoZSBcImFjdGl2aXR5RWxlbWVudFwiLCBpdCBzaG91bGQgcmV0dXJuIFwiZmFsc2VcIiB3aGVuIHdlIGNhbGwgY3JlYXRlQWN0aXZpdHlSZW5kZXJlcigpLlxuICAgICAgICAgIGFjdGl2aXR5RWxlbWVudCB8fFxuICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAnYm90ZnJhbWV3b3JrLXdlYmNoYXQ6IFRvIGhpZGUgYW4gYWN0aXZpdHksIHRoZSBhY3Rpdml0eSByZW5kZXJlciBzaG91bGQgcmV0dXJuIGZhbHNlLiBJdCBzaG91bGQgbm90IHJldHVybiBhIGZ1bmN0aW9uIHRoYXQgd2lsbCByZXR1cm4gZmFsc2Ugd2hlbiBjYWxsZWQuJ1xuICAgICAgICAgICAgKTtcblxuICAgICAgICAgIHJldHVybiBhY3Rpdml0eUVsZW1lbnQ7XG4gICAgICAgIH07XG4gICAgICB9LFxuICAgIFtjcmVhdGVBY3Rpdml0eVJlbmRlcmVyLCByZW5kZXJBdHRhY2htZW50XVxuICApO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBSUE7O0FBQ0E7Ozs7QUFFZSxTQUFTQSxpQ0FBVCxDQUNiQyx3QkFEYSxFQUVhO0VBQzFCLDRCQUFxRCxJQUFBQyw4QkFBQSxHQUFyRDtFQUFBLElBQTBCQyxzQkFBMUIseUJBQVFDLGdCQUFSOztFQUNBLElBQU1DLHVCQUF1QixHQUFHLElBQUFDLDRCQUFBLEdBQWhDO0VBRUEsSUFBTUMsZ0JBQWtDLEdBQUdOLHdCQUF3QixJQUFJSSx1QkFBdkU7RUFFQSxPQUFPLElBQUFHLGNBQUEsRUFDTDtJQUFBLE9BQ0UsWUFBc0M7TUFDcEMsSUFBTUMsY0FBYyxHQUFHTixzQkFBc0IsTUFBdEIsbUJBQXZCOztNQUVBLElBQUksQ0FBQ00sY0FBTCxFQUFxQjtRQUNuQixPQUFPLEtBQVA7TUFDRDs7TUFFRCxPQUFPLFVBQUFDLHFCQUFxQixFQUFJO1FBQzlCLGtCQUFJLElBQUFDLHFCQUFBLEVBQWVGLGNBQWYsQ0FBSixFQUFvQztVQUNsQyxPQUFPQSxjQUFQO1FBQ0Q7O1FBRUQsSUFBTUcsZUFBZSxHQUFHSCxjQUFjLENBQ3BDO1VBQUEsT0FBNkJGLGdCQUFnQixNQUFoQixtQkFBN0I7UUFBQSxDQURvQyxFQUVwQ0cscUJBRm9DLENBQXRDLENBTDhCLENBVTlCOztRQUNBRSxlQUFlLElBQ2JDLE9BQU8sQ0FBQ0MsSUFBUixDQUNFLDJKQURGLENBREY7UUFLQSxPQUFPRixlQUFQO01BQ0QsQ0FqQkQ7SUFrQkQsQ0ExQkg7RUFBQSxDQURLLEVBNEJMLENBQUNULHNCQUFELEVBQXlCSSxnQkFBekIsQ0E1QkssQ0FBUDtBQThCRCJ9