import PropTypes from 'prop-types';
import React from 'react';
import { default as WebChatAPIContext } from './internal/WebChatAPIContext';
import ActivityMiddleware from '../types/ActivityMiddleware';
import AttachmentForScreenReaderMiddleware from '../types/AttachmentForScreenReaderMiddleware';
import AttachmentMiddleware from '../types/AttachmentMiddleware';
import AvatarMiddleware from '../types/AvatarMiddleware';
import CardActionMiddleware from '../types/CardActionMiddleware';
import GroupActivitiesMiddleware from '../types/GroupActivitiesMiddleware';
import LocalizedStrings from '../types/LocalizedStrings';
import ScrollToEndButtonMiddleware from '../types/ScrollToEndButtonMiddleware';
import StyleOptions from '../StyleOptions';
import TelemetryMeasurementEvent from '../types/TelemetryMeasurementEvent';
import ToastMiddleware from '../types/ToastMiddleware';
import TypingIndicatorMiddleware from '../types/TypingIndicatorMiddleware';
import type { ActivityStatusMiddleware } from '../types/ActivityStatusMiddleware';
import type { ContextOf } from '../types/internal/ContextOf';
import type { DirectLineJSBotConnection, OneOrMany, GlobalScopePonyfill, WebChatActivity } from 'botframework-webchat-core';
import type { ReactNode } from 'react';
type ComposerCoreProps = {
    activityMiddleware?: OneOrMany<ActivityMiddleware>;
    activityStatusMiddleware?: OneOrMany<ActivityStatusMiddleware>;
    attachmentForScreenReaderMiddleware?: OneOrMany<AttachmentForScreenReaderMiddleware>;
    attachmentMiddleware?: OneOrMany<AttachmentMiddleware>;
    avatarMiddleware?: OneOrMany<AvatarMiddleware>;
    cardActionMiddleware?: OneOrMany<CardActionMiddleware>;
    children?: ReactNode | ((context: ContextOf<typeof WebChatAPIContext>) => ReactNode);
    dir?: string;
    directLine: DirectLineJSBotConnection;
    disabled?: boolean;
    downscaleImageToDataURL?: (blob: Blob, maxWidth: number, maxHeight: number, type: string, quality: number) => string;
    grammars?: any;
    groupActivitiesMiddleware?: OneOrMany<GroupActivitiesMiddleware>;
    internalErrorBoxClass?: React.Component | Function;
    locale?: string;
    onTelemetry?: (event: TelemetryMeasurementEvent) => void;
    overrideLocalizedStrings?: LocalizedStrings | ((strings: LocalizedStrings, language: string) => LocalizedStrings);
    renderMarkdown?: (markdown: string, newLineOptions: {
        markdownRespectCRLF: boolean;
    }, linkOptions: {
        externalLinkAlt: string;
    }) => string;
    scrollToEndButtonMiddleware?: OneOrMany<ScrollToEndButtonMiddleware>;
    selectVoice?: (voices: (typeof window.SpeechSynthesisVoice)[], activity: WebChatActivity) => void;
    sendTypingIndicator?: boolean;
    styleOptions?: StyleOptions;
    toastMiddleware?: OneOrMany<ToastMiddleware>;
    typingIndicatorMiddleware?: OneOrMany<TypingIndicatorMiddleware>;
    userID?: string;
    username?: string;
    /** @deprecated Please use "activityMiddleware" instead. */
    activityRenderer?: any;
    /** @deprecated Please use "activityStatusMiddleware" instead. */
    activityStatusRenderer?: any;
    /** @deprecated Please use "attachmentMiddleware" instead. */
    attachmentRenderer?: any;
    /** @deprecated Please use "avatarMiddleware" instead. */
    avatarRenderer?: any;
    /** @deprecated Please use "styleOptions.groupTimestamp" instead. */
    groupTimestamp?: boolean | number;
    /** @deprecated Please use "styleOptions.sendTimeout" instead. */
    sendTimeout?: number;
    /** @deprecated Please use "toastMiddleware" instead. */
    toastRenderer?: any;
    /** @deprecated Please use "typingIndicatorRenderer" instead. */
    typingIndicatorRenderer?: any;
};
type ComposerWithStoreProps = ComposerCoreProps & {
    store?: any;
};
type ComposerProps = ComposerWithStoreProps & {
    internalRenderErrorBox?: any;
    /**
     * Ponyfill to overrides specific global scope members. This prop cannot be changed after initial render.
     *
     * This option is for development use only. Not all features in Web Chat are ponyfilled.
     *
     * To fake timers, `setTimeout` and related functions can be passed to overrides the original global scope members.
     *
     * Please see [#4662](https://github.com/microsoft/BotFramework-WebChat/pull/4662) for details.
     */
    ponyfill?: Partial<GlobalScopePonyfill>;
};
declare const Composer: {
    ({ internalRenderErrorBox, onTelemetry, ponyfill, ...props }: ComposerProps): any;
    defaultProps: {
        internalRenderErrorBox: any;
        onTelemetry: any;
        ponyfill: any;
        store: any;
    };
    propTypes: {
        internalRenderErrorBox: PropTypes.Requireable<any>;
        onTelemetry: PropTypes.Requireable<(...args: any[]) => any>;
        ponyfill: PropTypes.Requireable<any>;
        store: PropTypes.Requireable<any>;
    };
};
export default Composer;
export type { ComposerProps };
//# sourceMappingURL=Composer.d.ts.map