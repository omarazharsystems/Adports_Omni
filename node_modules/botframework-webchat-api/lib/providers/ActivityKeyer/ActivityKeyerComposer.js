"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _Context = _interopRequireDefault(require("./private/Context"));

var _getActivityId = _interopRequireDefault(require("./private/getActivityId"));

var _getClientActivityId = _interopRequireDefault(require("./private/getClientActivityId"));

var _uniqueId = _interopRequireDefault(require("./private/uniqueId"));

var _useActivities3 = _interopRequireDefault(require("../../hooks/useActivities"));

var _useContext = _interopRequireDefault(require("./private/useContext"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * React context composer component to assign a perma-key to every activity.
 * This will support both `useGetActivityByKey` and `useGetKeyByActivity` custom hooks.
 *
 * Today, `activity.id` is only guaranteed for activity from others.
 * Not all activities sent by the local user has `activity.id`.
 *
 * To track outgoing activities, we added `activity.channelData.clientActivityId`.
 *
 * This component will create a local key, which can be used to track both
 * incoming and outgoing activities in a consistent way.
 *
 * Local key are only persisted in memory. On refresh, they will be a new random key.
 */
var ActivityKeyerComposer = function ActivityKeyerComposer(_ref) {
  var children = _ref.children;
  var existingContext = (0, _useContext.default)(false);

  if (existingContext) {
    throw new Error('botframework-webchat internal: <ActivityKeyerComposer> should not be nested.');
  }

  var _useActivities = (0, _useActivities3.default)(),
      _useActivities2 = _slicedToArray(_useActivities, 1),
      activities = _useActivities2[0];

  var activityIdToKeyMapRef = (0, _react.useRef)(Object.freeze(new Map()));
  var activityToKeyMapRef = (0, _react.useRef)(Object.freeze(new Map()));
  var clientActivityIdToKeyMapRef = (0, _react.useRef)(Object.freeze(new Map()));
  var keyToActivityMapRef = (0, _react.useRef)(Object.freeze(new Map())); // TODO: [P1] `useMemoWithPrevious` to check and cache the resulting array if it hasn't changed.

  var activityKeysState = (0, _react.useMemo)(function () {
    var activityIdToKeyMap = activityIdToKeyMapRef.current;
    var activityToKeyMap = activityToKeyMapRef.current;
    var clientActivityIdToKeyMap = clientActivityIdToKeyMapRef.current;
    var nextActivityIdToKeyMap = new Map();
    var nextActivityKeys = [];
    var nextActivityToKeyMap = new Map();
    var nextClientActivityIdToKeyMap = new Map();
    var nextKeyToActivityMap = new Map();
    activities.forEach(function (activity) {
      var activityId = (0, _getActivityId.default)(activity);
      var clientActivityId = (0, _getClientActivityId.default)(activity);
      var key = clientActivityId && clientActivityIdToKeyMap.get(clientActivityId) || activityId && activityIdToKeyMap.get(activityId) || activityToKeyMap.get(activity) || (0, _uniqueId.default)();
      activityId && nextActivityIdToKeyMap.set(activityId, key);
      clientActivityId && nextClientActivityIdToKeyMap.set(clientActivityId, key);
      nextActivityToKeyMap.set(activity, key);
      nextKeyToActivityMap.set(key, activity);
      nextActivityKeys.push(key);
    });
    activityIdToKeyMapRef.current = Object.freeze(nextActivityIdToKeyMap);
    activityToKeyMapRef.current = Object.freeze(nextActivityToKeyMap);
    clientActivityIdToKeyMapRef.current = Object.freeze(nextClientActivityIdToKeyMap);
    keyToActivityMapRef.current = Object.freeze(nextKeyToActivityMap); // `nextActivityKeys` could potentially same as `prevActivityKeys` despite reference differences, we should memoize it.

    return Object.freeze([Object.freeze(nextActivityKeys)]);
  }, [activities, activityIdToKeyMapRef, activityToKeyMapRef, clientActivityIdToKeyMapRef, keyToActivityMapRef]);
  var getActivityByKey = (0, _react.useCallback)(function (key) {
    return key && keyToActivityMapRef.current.get(key);
  }, [keyToActivityMapRef]);
  var getKeyByActivity = (0, _react.useCallback)(function (activity) {
    return activity && activityToKeyMapRef.current.get(activity);
  }, [activityToKeyMapRef]);
  var getKeyByActivityId = (0, _react.useCallback)(function (activityId) {
    return activityId && activityIdToKeyMapRef.current.get(activityId);
  }, [activityIdToKeyMapRef]);
  var contextValue = (0, _react.useMemo)(function () {
    return {
      activityKeysState: activityKeysState,
      getActivityByKey: getActivityByKey,
      getKeyByActivity: getKeyByActivity,
      getKeyByActivityId: getKeyByActivityId
    };
  }, [activityKeysState, getActivityByKey, getKeyByActivity, getKeyByActivityId]);
  var numActivities = activities.length;

  if (activityIdToKeyMapRef.current.size > numActivities) {
    console.warn('botframework-webchat internal assertion: "activityIdToKeyMap.size" should be equal or less than "activities.length".');
  }

  if (activityToKeyMapRef.current.size !== numActivities) {
    console.warn('botframework-webchat internal assertion: "activityToKeyMap.size" should be same as "activities.length".');
  }

  if (clientActivityIdToKeyMapRef.current.size > numActivities) {
    console.warn('botframework-webchat internal assertion: "clientActivityIdToKeyMap.size" should be equal or less than "activities.length".');
  }

  if (keyToActivityMapRef.current.size !== numActivities) {
    console.warn('botframework-webchat internal assertion: "keyToActivityMap.size" should be same as "activities.length".');
  }

  if (activityKeysState[0].length !== numActivities) {
    console.warn('botframework-webchat internal assertion: "activityKeys.length" should be same as "activities.length".');
  }

  return /*#__PURE__*/_react.default.createElement(_Context.default.Provider, {
    value: contextValue
  }, children);
};

ActivityKeyerComposer.defaultProps = {
  children: undefined
};
ActivityKeyerComposer.propTypes = {
  children: _propTypes.default.any
};
var _default = ActivityKeyerComposer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,