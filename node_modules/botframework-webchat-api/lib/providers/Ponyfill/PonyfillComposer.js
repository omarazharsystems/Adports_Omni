"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _PonyfillContext = _interopRequireDefault(require("./private/PonyfillContext"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PonyfillComposer = function PonyfillComposer(_ref) {
  var children = _ref.children,
      partialPonyfill = _ref.ponyfill;

  // Note: `useRef(value)` always return the initial value that was called with.
  if ((0, _react.useRef)(partialPonyfill).current !== partialPonyfill) {
    // We does not support changing ponyfill.
    // This is because ponyfill is used to create Redux store (if not passed via props).
    // Once the store is created, we cannot change its ponyfill.
    // However, we could rework the `createStore` function to support changing ponyfill.
    // Locking down ponyfill is just for code simplicity.
    throw new Error('botframework-webchat: "ponyfill" props cannot be changed after initial render.');
  } // TODO: [P2] Dedupe: when we have an utility package, move this code there and mark it as internal use.


  var ponyfill = (0, _react.useMemo)( // The complexity is introduced by the check of ponyfill.
  // eslint-disable-next-line complexity
  function () {
    // IE Mode does not have `globalThis`.
    var globalThisOrWindow = typeof globalThis === 'undefined' ? window : globalThis;
    return {
      cancelAnimationFrame: (partialPonyfill === null || partialPonyfill === void 0 ? void 0 : partialPonyfill.cancelAnimationFrame) || ( // Using clock functions from global if not provided.
      // eslint-disable-next-line no-restricted-globals
      typeof cancelAnimationFrame === 'function' ? cancelAnimationFrame.bind(globalThisOrWindow) : undefined),
      cancelIdleCallback: (partialPonyfill === null || partialPonyfill === void 0 ? void 0 : partialPonyfill.cancelIdleCallback) || ( // eslint-disable-next-line no-restricted-globals
      typeof cancelIdleCallback === 'function' ? cancelIdleCallback.bind(globalThisOrWindow) : undefined),
      clearImmediate: (partialPonyfill === null || partialPonyfill === void 0 ? void 0 : partialPonyfill.clearImmediate) || ( // eslint-disable-next-line no-restricted-globals
      typeof clearImmediate === 'function' ? clearImmediate.bind(globalThisOrWindow) : undefined),
      clearInterval: (partialPonyfill === null || partialPonyfill === void 0 ? void 0 : partialPonyfill.clearInterval) || ( // eslint-disable-next-line no-restricted-globals
      typeof clearInterval === 'function' ? clearInterval.bind(globalThisOrWindow) : undefined),
      clearTimeout: (partialPonyfill === null || partialPonyfill === void 0 ? void 0 : partialPonyfill.clearTimeout) || ( // eslint-disable-next-line no-restricted-globals
      typeof clearTimeout === 'function' ? clearTimeout.bind(globalThisOrWindow) : undefined),
      // eslint-disable-next-line no-restricted-globals
      Date: (partialPonyfill === null || partialPonyfill === void 0 ? void 0 : partialPonyfill.Date) || Date,
      requestAnimationFrame: (partialPonyfill === null || partialPonyfill === void 0 ? void 0 : partialPonyfill.requestAnimationFrame) || ( // eslint-disable-next-line no-restricted-globals
      typeof requestAnimationFrame === 'function' ? requestAnimationFrame.bind(globalThisOrWindow) : undefined),
      requestIdleCallback: (partialPonyfill === null || partialPonyfill === void 0 ? void 0 : partialPonyfill.requestIdleCallback) || ( // eslint-disable-next-line no-restricted-globals
      typeof requestIdleCallback === 'function' ? requestIdleCallback.bind(globalThisOrWindow) : undefined),
      setImmediate: (partialPonyfill === null || partialPonyfill === void 0 ? void 0 : partialPonyfill.setImmediate) || ( // eslint-disable-next-line no-restricted-globals
      typeof setImmediate === 'function' ? setImmediate.bind(globalThisOrWindow) : undefined),
      setInterval: (partialPonyfill === null || partialPonyfill === void 0 ? void 0 : partialPonyfill.setInterval) || ( // eslint-disable-next-line no-restricted-globals
      typeof setInterval === 'function' ? setInterval.bind(globalThisOrWindow) : undefined),
      setTimeout: (partialPonyfill === null || partialPonyfill === void 0 ? void 0 : partialPonyfill.setTimeout) || ( // eslint-disable-next-line no-restricted-globals
      typeof setTimeout === 'function' ? setTimeout.bind(globalThisOrWindow) : undefined)
    };
  }, [partialPonyfill]);
  var contextValue = (0, _react.useMemo)(function () {
    return {
      ponyfillState: Object.freeze([ponyfill])
    };
  }, [ponyfill]);
  return /*#__PURE__*/_react.default.createElement(_PonyfillContext.default.Provider, {
    value: contextValue
  }, children);
};

PonyfillComposer.defaultProps = {
  ponyfill: undefined
};
PonyfillComposer.propTypes = {
  ponyfill: _propTypes.default.any
};
var _default = PonyfillComposer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,