"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _Context = _interopRequireDefault(require("./private/Context"));

var _findLastIndex = _interopRequireDefault(require("../../utils/findLastIndex"));

var _useActivities3 = _interopRequireDefault(require("../../hooks/useActivities"));

var _useActivityKeys3 = _interopRequireDefault(require("../ActivityKeyer/useActivityKeys"));

var _usePrevious = _interopRequireDefault(require("../../hooks/internal/usePrevious"));

var _useValueRef = _interopRequireDefault(require("../../hooks/internal/useValueRef"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function findClosestActivityKeyIfNotExists(activityKey, keys, prevKeys) {
  if (keys.includes(activityKey)) {
    return activityKey;
  } else if (!prevKeys || !activityKey) {
    // Initially, when the transcript was empty, there should be nothing read.
    return;
  } // If the last activity key is no longer in this activities (say, deleted), we try to find the closest one.


  var prevIndex = prevKeys.indexOf(activityKey);

  if (~prevIndex) {
    // List out all previously activity keys, find the closest one that is in the new transcript.
    var acknowledgedActivityKeys = prevKeys.slice(0, prevIndex).reverse();

    var _iterator = _createForOfIteratorHelper(acknowledgedActivityKeys),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var prevAcknowledgedActivityKey = _step.value;

        if (keys.includes(prevAcknowledgedActivityKey)) {
          return prevAcknowledgedActivityKey;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  } // If nothing is found, return `undefined`.

}

var ActivityAcknowledgementComposer = function ActivityAcknowledgementComposer(_ref) {
  var children = _ref.children;

  var _useActivities = (0, _useActivities3.default)(),
      _useActivities2 = _slicedToArray(_useActivities, 1),
      activities = _useActivities2[0];

  var _useActivityKeys = (0, _useActivityKeys3.default)(),
      _useActivityKeys2 = _slicedToArray(_useActivityKeys, 1),
      allActivityKeys = _useActivityKeys2[0];

  var _useState = (0, _react.useState)(),
      _useState2 = _slicedToArray(_useState, 2),
      rawLastAcknowledgedActivityKey = _useState2[0],
      setRawLastAcknowledgedActivityKey = _useState2[1];

  var _useState3 = (0, _react.useState)(),
      _useState4 = _slicedToArray(_useState3, 2),
      rawLastReadActivityKey = _useState4[0],
      setRawLastReadActivityKey = _useState4[1];

  var allActivityKeysRef = (0, _useValueRef.default)(allActivityKeys);
  var prevAllActivityKeys = (0, _usePrevious.default)(allActivityKeys);
  var lastOutgoingActivityKeyIndex = (0, _react.useMemo)(function () {
    return (0, _findLastIndex.default)(activities, function (activity) {
      var _activity$from;

      return ((_activity$from = activity.from) === null || _activity$from === void 0 ? void 0 : _activity$from.role) === 'user';
    });
  }, [activities]); // Make sure when we return "lastReadActivityKey" exists in the current transcript.

  var lastReadActivityKey = (0, _react.useMemo)(function () {
    rawLastReadActivityKey && !~prevAllActivityKeys.includes(rawLastReadActivityKey) && console.warn("botframework-webchat internal assertion: \"rawLastReadActivityKey\" of value ".concat(rawLastReadActivityKey, " should be in the \"prevAllActivityKeys\" array."));
    return findClosestActivityKeyIfNotExists(rawLastReadActivityKey, allActivityKeys, prevAllActivityKeys);
  }, [allActivityKeys, prevAllActivityKeys, rawLastReadActivityKey]);
  var lastReadActivityKeyRef = (0, _useValueRef.default)(lastReadActivityKey); // Make sure when we return "lastAcknowledgedActivityKey" exists in the current transcript.

  var lastAcknowledgedActivityKey = (0, _react.useMemo)(function () {
    rawLastAcknowledgedActivityKey && !~prevAllActivityKeys.includes(rawLastAcknowledgedActivityKey) && console.warn("botframework-webchat internal assertion: \"rawLastAcknowledgedActivityKey\" of value ".concat(rawLastAcknowledgedActivityKey, " should be in the \"prevAllActivityKeys\" array."));
    var lastAcknowledgedActivityKey = findClosestActivityKeyIfNotExists(rawLastAcknowledgedActivityKey, allActivityKeys, prevAllActivityKeys); // TODO: [P2] Since Direct Line may send history and does not have read receipt.
    //            Thus, if we don't assume everything is acknowledged initially, while displaying the history,
    //            the transcript would soon stop scrolling.
    //            Thus, before the first outgoing activity is detected, we need to assume everything is acknowledged.

    return allActivityKeys[Math.max(allActivityKeys.indexOf(lastAcknowledgedActivityKey), lastOutgoingActivityKeyIndex)] || allActivityKeys[allActivityKeys.length - 1];
  }, [allActivityKeys, lastOutgoingActivityKeyIndex, prevAllActivityKeys, rawLastAcknowledgedActivityKey]);
  var activityAcknowledgements = (0, _react.useMemo)(function () {
    var activityAcknowledgements = new Map();
    var lastAcknowledgedIndex = allActivityKeys.indexOf(lastAcknowledgedActivityKey);
    var lastReadIndex = allActivityKeys.indexOf(lastReadActivityKey);
    allActivityKeys.forEach(function (activityKey, index) {
      activityAcknowledgements.set(activityKey, {
        acknowledged: index <= lastAcknowledgedIndex,
        read: index <= lastReadIndex
      });
    });
    return Object.freeze(activityAcknowledgements);
  }, [allActivityKeys, lastAcknowledgedActivityKey, lastReadActivityKey]);
  var activityAcknowledgementsRef = (0, _useValueRef.default)(activityAcknowledgements);
  var getHasAcknowledgedByActivityKey = (0, _react.useCallback)(function (activityKey) {
    var _activityAcknowledgem;

    return (_activityAcknowledgem = activityAcknowledgementsRef.current.get(activityKey)) === null || _activityAcknowledgem === void 0 ? void 0 : _activityAcknowledgem.acknowledged;
  }, [activityAcknowledgementsRef]); // TODO: [P2] Memoize with `useMemoWithPrevious` for better memoization of arrays.

  var activityKeysByReadState = (0, _react.useMemo)(function () {
    var index = allActivityKeys.indexOf(lastReadActivityKey);
    return Object.freeze([Object.freeze(allActivityKeys.slice(0, index + 1)), Object.freeze(allActivityKeys.slice(index + 1))]);
  }, [allActivityKeys, lastReadActivityKey]);
  var markAllAsAcknowledged = (0, _react.useCallback)(function () {
    var allActivityKeys = allActivityKeysRef.current;
    setRawLastAcknowledgedActivityKey(allActivityKeys[allActivityKeys.length - 1]);
  }, [allActivityKeysRef, setRawLastAcknowledgedActivityKey]);
  var markActivityKeyAsRead = (0, _react.useCallback)(function (activityKey) {
    var allActivityKeys = allActivityKeysRef.current;
    var index = allActivityKeys.indexOf(activityKey);

    if (!~index) {
      return console.warn("botframework-webchat: Cannot mark activity with key ".concat(activityKey, " as read because it is not in the transcript."));
    }

    index > allActivityKeys.indexOf(lastReadActivityKeyRef.current) && setRawLastReadActivityKey(activityKey);
  }, [allActivityKeysRef, lastReadActivityKeyRef, setRawLastReadActivityKey]);

  if (activityKeysByReadState[0].length + activityKeysByReadState[1].length !== allActivityKeys.length) {
    console.warn('botframework-webchat internal: Sum of count of read and unread activity keys MUST equals to total number of activity keys.');
  }

  var contextValue = (0, _react.useMemo)(function () {
    return {
      activityKeysByReadState: activityKeysByReadState,
      getHasAcknowledgedByActivityKey: getHasAcknowledgedByActivityKey,
      lastAcknowledgedActivityKeyState: Object.freeze([lastAcknowledgedActivityKey]),
      lastReadActivityKeyState: Object.freeze([lastReadActivityKey]),
      markActivityKeyAsRead: markActivityKeyAsRead,
      markAllAsAcknowledged: markAllAsAcknowledged
    };
  }, [activityKeysByReadState, getHasAcknowledgedByActivityKey, lastAcknowledgedActivityKey, lastReadActivityKey, markActivityKeyAsRead, markAllAsAcknowledged]);
  return /*#__PURE__*/_react.default.createElement(_Context.default.Provider, {
    value: contextValue
  }, children);
};

var _default = ActivityAcknowledgementComposer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,