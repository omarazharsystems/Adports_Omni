"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _SendStatus = require("../../types/internal/SendStatus");

var _Context = _interopRequireDefault(require("./private/Context"));

var _freezeArray = _interopRequireDefault(require("../../utils/freezeArray"));

var _isMapEqual = _interopRequireDefault(require("./private/isMapEqual"));

var _useActivities3 = _interopRequireDefault(require("../../hooks/useActivities"));

var _useForceRender = _interopRequireDefault(require("../../hooks/internal/useForceRender"));

var _useGetKeyByActivity = _interopRequireDefault(require("../ActivityKeyer/useGetKeyByActivity"));

var _useGetSendTimeoutForActivity = _interopRequireDefault(require("../../hooks/useGetSendTimeoutForActivity"));

var _usePonyfill3 = _interopRequireDefault(require("../../hooks/usePonyfill"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

// Magic numbers for `expiryByActivityKey`.
var EXPIRY_SEND_FAILED = -Infinity;
var EXPIRY_SENT = Infinity;

var ActivitySendStatusComposer = function ActivitySendStatusComposer(_ref) {
  var children = _ref.children;

  var _useActivities = (0, _useActivities3.default)(),
      _useActivities2 = _slicedToArray(_useActivities, 1),
      activities = _useActivities2[0];

  var _usePonyfill = (0, _usePonyfill3.default)(),
      _usePonyfill2 = _slicedToArray(_usePonyfill, 1),
      _usePonyfill2$ = _usePonyfill2[0],
      clearTimeout = _usePonyfill2$.clearTimeout,
      Date = _usePonyfill2$.Date,
      setTimeout = _usePonyfill2$.setTimeout;

  var forceRender = (0, _useForceRender.default)();
  var getKeyByActivity = (0, _useGetKeyByActivity.default)();
  var getSendTimeoutForActivity = (0, _useGetSendTimeoutForActivity.default)();
  var sendStatusByActivityKeyRef = (0, _react.useRef)(Object.freeze(new Map()));
  /**
   * Map of outgoing activities and their respective expiry.
   *
   * The key is the activity key.
   *
   * The value is:
   *
   * - `Infinity` if the activity is already sent (and will never expire), otherwise;
   * - `-Infinity` if the activity failed to send (a.k.a. already expired), otherwise;
   * - An epoch time of when the activity will be expired.
   */

  var expiryByActivityKey = (0, _react.useMemo)( // We could build a `useMemoMap()` hook to memoize mapper function more efficiently.
  function () {
    return Object.freeze(activities.reduce(function (expiryByActivityKey, activity) {
      if (activity.from.role === 'user') {
        var key = getKeyByActivity(activity);

        if (key) {
          var _activity$channelData = activity.channelData,
              state = _activity$channelData.state,
              sendStatus = _activity$channelData['webchat:send-status']; // `channelData.state` is being deprecated in favor of `channelData['webchat:send-status']`.
          // Please refer to #4362 for details. Remove on or after 2024-07-31.

          var rectifiedSendStatus = sendStatus || (state === _SendStatus.SENT ? _SendStatus.SENT : _SendStatus.SENDING);

          if (rectifiedSendStatus === _SendStatus.SENT) {
            expiryByActivityKey.set(key, EXPIRY_SENT);
          } else if (rectifiedSendStatus === _SendStatus.SEND_FAILED) {
            expiryByActivityKey.set(key, EXPIRY_SEND_FAILED);
          } else {
            var expiry = +new Date(activity.localTimestamp) + getSendTimeoutForActivity({
              activity: activity
            });
            expiry && expiryByActivityKey.set(key, expiry);
          }
        }
      }

      return expiryByActivityKey;
    }, new Map()));
  }, [activities, Date, getKeyByActivity, getSendTimeoutForActivity]);
  /** Map of outgoing activities and their respective send status. */

  var nextSendStatusByActivityKey = new Map();
  var now = Date.now(); // Turns the expiry (epoch time) into `SendStatus`, which is based on current clock.

  var _iterator = _createForOfIteratorHelper(expiryByActivityKey),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = _slicedToArray(_step.value, 2),
          key = _step$value[0],
          expiry = _step$value[1];

      nextSendStatusByActivityKey.set(key, expiry === EXPIRY_SENT ? _SendStatus.SENT : now >= expiry ? _SendStatus.SEND_FAILED : _SendStatus.SENDING);
    } // Only memoize the new result if it has changed.

  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  if (!(0, _isMapEqual.default)(sendStatusByActivityKeyRef.current, nextSendStatusByActivityKey)) {
    sendStatusByActivityKeyRef.current = Object.freeze(nextSendStatusByActivityKey);
  } // Gets/realizes the `current` from `ref` because we need to use it for `deps` array in hooks for memoization.


  var sendStatusByActivityKey = sendStatusByActivityKeyRef.current;
  var sendStatusByActivityKeyState = (0, _react.useMemo)(function () {
    return (0, _freezeArray.default)([sendStatusByActivityKey]);
  }, [sendStatusByActivityKey]);
  var context = (0, _react.useMemo)(function () {
    return {
      sendStatusByActivityKeyState: sendStatusByActivityKeyState
    };
  }, [sendStatusByActivityKeyState]); // Finds the closest expiry. This is the time we should recompute `sendStatusByActivityKey`.

  var nextExpiry = Array.from(expiryByActivityKey.values()) // Ignores activities which are already marked as `"send failed"`, because the magic number its `-Infinity`.
  // We don't need to recompute them because `"send failed"` cannot change back to `"sending"` without modifying `activities` or `styleOptions`.
  .reduce(function (nextExpiry, expiry) {
    // Finds the next closest expiry, exclude those that already expired.
    if (expiry > now && expiry < nextExpiry) {
      return expiry;
    }

    return nextExpiry;
  }, Infinity); // When the activity with closest expiry expire, recomputes everything so the `sendStatusByActivityKey` will be updated.

  (0, _react.useEffect)(function () {
    if (nextExpiry) {
      var timeout = setTimeout(forceRender, nextExpiry - Date.now());
      return function () {
        return clearTimeout(timeout);
      };
    }
  }, [clearTimeout, Date, forceRender, nextExpiry, setTimeout]);
  return /*#__PURE__*/_react.default.createElement(_Context.default.Provider, {
    value: context
  }, children);
};

var _default = ActivitySendStatusComposer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,