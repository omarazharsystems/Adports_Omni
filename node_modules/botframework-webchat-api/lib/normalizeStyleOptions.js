"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = normalizeStyleOptions;

var _botframeworkWebchatCore = require("botframework-webchat-core");

var _defaultStyleOptions = _interopRequireDefault(require("./defaultStyleOptions"));

var _excluded = ["hideScrollToEndButton", "newMessagesButtonFontSize"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var hideScrollToEndButtonDeprecation = (0, _botframeworkWebchatCore.warnOnce)('"styleOptions.hideScrollToEndButton" has been deprecated. To hide scroll to end button, set "scrollToEndBehavior" to false. This deprecation migration will be removed on or after 2023-06-02.');
var newMessagesButtonFontSizeDeprecation = (0, _botframeworkWebchatCore.warnOnce)('"styleOptions.newMessagesButtonFontSize" has been renamed to "styleOptions.scrollToEndButtonFontSize". This deprecation migration will be removed on or after 2023-06-02.');
var suggestedActionBackgroundDeprecation = (0, _botframeworkWebchatCore.warnOnce)('"styleOptions.suggestedActionBackground" has been deprecated. Please use "styleOptions.suggestedActionBackgroundColor" instead. This deprecation migration will be removed on or after 2021-09-16.');
var suggestedActionXXXBackgroundDeprecation = (0, _botframeworkWebchatCore.warnOnce)('"styleOptions.suggestedActionXXXBackground" has been deprecated. Please use "styleOptions.suggestedActionBackgroundColorOnXXX" instead. This deprecation migration will be removed on or after 2021-09-16.');
var suggestedActionDisabledDeprecation = (0, _botframeworkWebchatCore.warnOnce)('"styleOptions.suggestedActionDisabledXXX" has been renamed to "styleOptions.suggestedActionXXXOnDisabled". This deprecation migration will be removed on or after 2021-09-16.'); // TODO: [P4] We should add a notice for people who want to use "styleSet" instead of "styleOptions".
//       "styleSet" is actually CSS stylesheet and it is based on the DOM tree.
//       DOM tree may change from time to time, thus, maintaining "styleSet" becomes a constant effort.
// eslint-disable-next-line complexity

function normalizeStyleOptions() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      hideScrollToEndButton = _ref.hideScrollToEndButton,
      newMessagesButtonFontSize = _ref.newMessagesButtonFontSize,
      options = _objectWithoutProperties(_ref, _excluded);

  var filledOptions = _objectSpread(_objectSpread({}, _defaultStyleOptions.default), options); // Keep this list flat (no nested style) and serializable (no functions)


  var bubbleFromUserNubOffset = filledOptions.bubbleFromUserNubOffset,
      bubbleNubOffset = filledOptions.bubbleNubOffset,
      emojiSet = filledOptions.emojiSet;
  var normalizedBubbleFromUserNubOffset;
  var normalizedBubbleNubOffset;
  var normalizedEmojiSet;

  if (bubbleFromUserNubOffset === 'top') {
    normalizedBubbleFromUserNubOffset = 0;
  } else if (typeof bubbleFromUserNubOffset !== 'number') {
    normalizedBubbleFromUserNubOffset = -0;
  } else {
    normalizedBubbleFromUserNubOffset = bubbleFromUserNubOffset;
  }

  if (bubbleNubOffset === 'top') {
    normalizedBubbleNubOffset = 0;
  } else if (typeof bubbleNubOffset !== 'number') {
    normalizedBubbleNubOffset = -0;
  } else {
    normalizedBubbleNubOffset = bubbleNubOffset;
  }

  if (emojiSet === true) {
    normalizedEmojiSet = {
      ':)': '😊',
      ':-)': '😊',
      '(:': '😊',
      '(-:': '😊',
      ':-|': '😐',
      ':|': '😐',
      ':-(': '☹️',
      ':(': '☹️',
      ':-D': '😀',
      ':D': '😀',
      ':-p': '😛',
      ':p': '😛',
      ':-P': '😛',
      ':P': '😛',
      ':-o': '😲',
      ':o': '😲',
      ':O': '😲',
      ':-O': '😲',
      ':-0': '😲',
      ':0': '😲',
      ';-)': '😉',
      ';)': '😉',
      '<3': '❤️',
      '</3': '💔',
      '<\\3': '💔'
    };
  } else if (Object.prototype.toString.call(emojiSet) !== '[object Object]') {
    console.warn('botframework-webchat: emojiSet must be a boolean or an object with emoticon: emojiValues');
    normalizedEmojiSet = false;
  } else {
    normalizedEmojiSet = emojiSet;
  }

  if (hideScrollToEndButton) {
    hideScrollToEndButtonDeprecation(); // Only set if the "scrollToEndButtonBehavior" is not set.
    // If it has been set, the developer should know the older "hideScrollToEndButton" option is deprecated.

    filledOptions.scrollToEndButtonBehavior = options.scrollToEndButtonBehavior || false;
  }

  var patchedScrollToEndButtonBehavior = filledOptions.scrollToEndButtonBehavior;

  if (patchedScrollToEndButtonBehavior !== 'any' && patchedScrollToEndButtonBehavior !== false) {
    patchedScrollToEndButtonBehavior === 'unread' || console.warn('Web Chat: "scrollToEndButtonBehavior" must be either "unread", "any", or false, will set to "unread".');
    patchedScrollToEndButtonBehavior = 'unread';
  }

  if (newMessagesButtonFontSize) {
    newMessagesButtonFontSizeDeprecation(); // Only set if the "scrollToEndButtonFontSize" is not set.

    filledOptions.scrollToEndButtonFontSize = options.scrollToEndButtonFontSize || newMessagesButtonFontSize;
  }

  options.suggestedActionBackground && suggestedActionBackgroundDeprecation();

  if (options.suggestedActionActiveBackground) {
    suggestedActionXXXBackgroundDeprecation();
    filledOptions.suggestedActionBackgroundColorOnActive = options.suggestedActionBackgroundColorOnActive || options.suggestedActionActiveBackground;
  }

  if (options.suggestedActionFocusBackground) {
    suggestedActionXXXBackgroundDeprecation();
    filledOptions.suggestedActionBackgroundColorOnFocus = options.suggestedActionBackgroundColorOnFocus || options.suggestedActionFocusBackground;
  }

  if (options.suggestedActionHoverBackground) {
    suggestedActionXXXBackgroundDeprecation();
    filledOptions.suggestedActionBackgroundColorOnHover = options.suggestedActionBackgroundColorOnHover || options.suggestedActionHoverBackground;
  }

  if (options.suggestedActionDisabledBackground) {
    suggestedActionXXXBackgroundDeprecation();
    filledOptions.suggestedActionBackgroundColorOnDisabled = options.suggestedActionBackgroundColorOnDisabled || options.suggestedActionDisabledBackground;
  }

  if (options.suggestedActionDisabledBorderColor) {
    suggestedActionDisabledDeprecation();
    filledOptions.suggestedActionBorderColorOnDisabled = options.suggestedActionBorderColorOnDisabled || options.suggestedActionDisabledBorderColor;
  }

  if (options.suggestedActionDisabledBorderStyle) {
    suggestedActionDisabledDeprecation();
    filledOptions.suggestedActionBorderStyleOnDisabled = options.suggestedActionBorderStyleOnDisabled || options.suggestedActionDisabledBorderStyle;
  }

  if (options.suggestedActionDisabledBorderWidth) {
    suggestedActionDisabledDeprecation();
    filledOptions.suggestedActionBorderWidthOnDisabled = options.suggestedActionBorderWidthOnDisabled || options.suggestedActionDisabledBorderWidth;
  }

  if (options.suggestedActionDisabledTextColor) {
    suggestedActionDisabledDeprecation();
    filledOptions.suggestedActionTextColorOnDisabled = options.suggestedActionTextColorOnDisabled || options.suggestedActionDisabledTextColor;
  }

  return _objectSpread(_objectSpread({}, filledOptions), {}, {
    bubbleFromUserNubOffset: normalizedBubbleFromUserNubOffset,
    bubbleNubOffset: normalizedBubbleNubOffset,
    emojiSet: normalizedEmojiSet,
    scrollToEndButtonBehavior: patchedScrollToEndButtonBehavior
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,