"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = patchStyleOptionsFromDeprecatedProps;

var _simpleUpdateIn = _interopRequireDefault(require("simple-update-in"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// TODO: [P4] We should add a notice for people who want to use "styleSet" instead of "styleOptions".
//       "styleSet" is actually CSS stylesheet and it is based on the DOM tree.
//       DOM tree may change from time to time, thus, maintaining "styleSet" becomes a constant effort.
function patchStyleOptionsFromDeprecatedProps(styleOptions, _ref) {
  var groupTimestampFromProps = _ref.groupTimestamp,
      sendTimeoutFromProps = _ref.sendTimeout;

  if (typeof groupTimestampFromProps !== 'undefined' && typeof styleOptions.groupTimestamp === 'undefined') {
    console.warn('Web Chat: "groupTimestamp" has been moved to "styleOptions". This deprecation migration will be removed on or after January 1 2022.');
    styleOptions = (0, _simpleUpdateIn.default)(styleOptions, ['groupTimestamp'], function () {
      return groupTimestampFromProps;
    });
  }

  if (typeof sendTimeoutFromProps !== 'undefined' && typeof styleOptions.sendTimeout === 'undefined') {
    console.warn('Web Chat: "sendTimeout" has been moved to "styleOptions". This deprecation migration will be removed on or after January 1 2022.');
    styleOptions = (0, _simpleUpdateIn.default)(styleOptions, ['sendTimeout'], function () {
      return sendTimeoutFromProps;
    });
  }

  if (styleOptions.slowConnectionAfter < 0) {
    console.warn('Web Chat: "slowConnectionAfter" cannot be negative, will set to 0.');
    styleOptions = (0, _simpleUpdateIn.default)(styleOptions, ['slowConnectionAfter'], function () {
      return 0;
    });
  }

  return styleOptions;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwYXRjaFN0eWxlT3B0aW9uc0Zyb21EZXByZWNhdGVkUHJvcHMiLCJzdHlsZU9wdGlvbnMiLCJncm91cFRpbWVzdGFtcEZyb21Qcm9wcyIsImdyb3VwVGltZXN0YW1wIiwic2VuZFRpbWVvdXRGcm9tUHJvcHMiLCJzZW5kVGltZW91dCIsImNvbnNvbGUiLCJ3YXJuIiwidXBkYXRlSW4iLCJzbG93Q29ubmVjdGlvbkFmdGVyIl0sInNvdXJjZVJvb3QiOiJjb21wb25lbnQ6Ly8vIiwic291cmNlcyI6WyIuLi9zcmMvcGF0Y2hTdHlsZU9wdGlvbnNGcm9tRGVwcmVjYXRlZFByb3BzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB1cGRhdGVJbiBmcm9tICdzaW1wbGUtdXBkYXRlLWluJztcblxuLy8gVE9ETzogW1A0XSBXZSBzaG91bGQgYWRkIGEgbm90aWNlIGZvciBwZW9wbGUgd2hvIHdhbnQgdG8gdXNlIFwic3R5bGVTZXRcIiBpbnN0ZWFkIG9mIFwic3R5bGVPcHRpb25zXCIuXG4vLyAgICAgICBcInN0eWxlU2V0XCIgaXMgYWN0dWFsbHkgQ1NTIHN0eWxlc2hlZXQgYW5kIGl0IGlzIGJhc2VkIG9uIHRoZSBET00gdHJlZS5cbi8vICAgICAgIERPTSB0cmVlIG1heSBjaGFuZ2UgZnJvbSB0aW1lIHRvIHRpbWUsIHRodXMsIG1haW50YWluaW5nIFwic3R5bGVTZXRcIiBiZWNvbWVzIGEgY29uc3RhbnQgZWZmb3J0LlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGF0Y2hTdHlsZU9wdGlvbnNGcm9tRGVwcmVjYXRlZFByb3BzKFxuICBzdHlsZU9wdGlvbnMsXG4gIHsgZ3JvdXBUaW1lc3RhbXA6IGdyb3VwVGltZXN0YW1wRnJvbVByb3BzLCBzZW5kVGltZW91dDogc2VuZFRpbWVvdXRGcm9tUHJvcHMgfVxuKSB7XG4gIGlmICh0eXBlb2YgZ3JvdXBUaW1lc3RhbXBGcm9tUHJvcHMgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBzdHlsZU9wdGlvbnMuZ3JvdXBUaW1lc3RhbXAgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ1dlYiBDaGF0OiBcImdyb3VwVGltZXN0YW1wXCIgaGFzIGJlZW4gbW92ZWQgdG8gXCJzdHlsZU9wdGlvbnNcIi4gVGhpcyBkZXByZWNhdGlvbiBtaWdyYXRpb24gd2lsbCBiZSByZW1vdmVkIG9uIG9yIGFmdGVyIEphbnVhcnkgMSAyMDIyLidcbiAgICApO1xuXG4gICAgc3R5bGVPcHRpb25zID0gdXBkYXRlSW4oc3R5bGVPcHRpb25zLCBbJ2dyb3VwVGltZXN0YW1wJ10sICgpID0+IGdyb3VwVGltZXN0YW1wRnJvbVByb3BzKTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc2VuZFRpbWVvdXRGcm9tUHJvcHMgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBzdHlsZU9wdGlvbnMuc2VuZFRpbWVvdXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ1dlYiBDaGF0OiBcInNlbmRUaW1lb3V0XCIgaGFzIGJlZW4gbW92ZWQgdG8gXCJzdHlsZU9wdGlvbnNcIi4gVGhpcyBkZXByZWNhdGlvbiBtaWdyYXRpb24gd2lsbCBiZSByZW1vdmVkIG9uIG9yIGFmdGVyIEphbnVhcnkgMSAyMDIyLidcbiAgICApO1xuXG4gICAgc3R5bGVPcHRpb25zID0gdXBkYXRlSW4oc3R5bGVPcHRpb25zLCBbJ3NlbmRUaW1lb3V0J10sICgpID0+IHNlbmRUaW1lb3V0RnJvbVByb3BzKTtcbiAgfVxuXG4gIGlmIChzdHlsZU9wdGlvbnMuc2xvd0Nvbm5lY3Rpb25BZnRlciA8IDApIHtcbiAgICBjb25zb2xlLndhcm4oJ1dlYiBDaGF0OiBcInNsb3dDb25uZWN0aW9uQWZ0ZXJcIiBjYW5ub3QgYmUgbmVnYXRpdmUsIHdpbGwgc2V0IHRvIDAuJyk7XG5cbiAgICBzdHlsZU9wdGlvbnMgPSB1cGRhdGVJbihzdHlsZU9wdGlvbnMsIFsnc2xvd0Nvbm5lY3Rpb25BZnRlciddLCAoKSA9PiAwKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZU9wdGlvbnM7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUVBO0FBQ0E7QUFDQTtBQUNlLFNBQVNBLG9DQUFULENBQ2JDLFlBRGEsUUFHYjtFQUFBLElBRGtCQyx1QkFDbEIsUUFERUMsY0FDRjtFQUFBLElBRHdEQyxvQkFDeEQsUUFEMkNDLFdBQzNDOztFQUNBLElBQUksT0FBT0gsdUJBQVAsS0FBbUMsV0FBbkMsSUFBa0QsT0FBT0QsWUFBWSxDQUFDRSxjQUFwQixLQUF1QyxXQUE3RixFQUEwRztJQUN4R0csT0FBTyxDQUFDQyxJQUFSLENBQ0UscUlBREY7SUFJQU4sWUFBWSxHQUFHLElBQUFPLHVCQUFBLEVBQVNQLFlBQVQsRUFBdUIsQ0FBQyxnQkFBRCxDQUF2QixFQUEyQztNQUFBLE9BQU1DLHVCQUFOO0lBQUEsQ0FBM0MsQ0FBZjtFQUNEOztFQUVELElBQUksT0FBT0Usb0JBQVAsS0FBZ0MsV0FBaEMsSUFBK0MsT0FBT0gsWUFBWSxDQUFDSSxXQUFwQixLQUFvQyxXQUF2RixFQUFvRztJQUNsR0MsT0FBTyxDQUFDQyxJQUFSLENBQ0Usa0lBREY7SUFJQU4sWUFBWSxHQUFHLElBQUFPLHVCQUFBLEVBQVNQLFlBQVQsRUFBdUIsQ0FBQyxhQUFELENBQXZCLEVBQXdDO01BQUEsT0FBTUcsb0JBQU47SUFBQSxDQUF4QyxDQUFmO0VBQ0Q7O0VBRUQsSUFBSUgsWUFBWSxDQUFDUSxtQkFBYixHQUFtQyxDQUF2QyxFQUEwQztJQUN4Q0gsT0FBTyxDQUFDQyxJQUFSLENBQWEsb0VBQWI7SUFFQU4sWUFBWSxHQUFHLElBQUFPLHVCQUFBLEVBQVNQLFlBQVQsRUFBdUIsQ0FBQyxxQkFBRCxDQUF2QixFQUFnRDtNQUFBLE9BQU0sQ0FBTjtJQUFBLENBQWhELENBQWY7RUFDRDs7RUFFRCxPQUFPQSxZQUFQO0FBQ0QifQ==