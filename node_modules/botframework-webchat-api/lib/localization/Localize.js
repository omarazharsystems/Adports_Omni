"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "getRTLList", {
  enumerable: true,
  get: function get() {
    return _getRTLList.default;
  }
});
exports.localize = localize;

var _botframeworkWebchatCore = require("botframework-webchat-core");

var _getAllLocalizedStrings = _interopRequireDefault(require("./getAllLocalizedStrings"));

var _getRTLList = _interopRequireDefault(require("./getRTLList"));

var _normalizeLanguage = _interopRequireDefault(require("../utils/normalizeLanguage"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var deprecationNotesShown;

function localize(id, language) {
  if (!deprecationNotesShown) {
    console.warn('botframework-webchat: localize() is deprecated. Please use the useLocalizer() hooks instead. This function will be removed on or after 2022-02-12.');
    deprecationNotesShown = true;
  }

  var allStrings = (0, _getAllLocalizedStrings.default)();
  var normalizedLanguage = (0, _normalizeLanguage.default)(language); // Mitigation through denylisting.
  // eslint-disable-next-line security/detect-object-injection

  var localizedStrings = (0, _botframeworkWebchatCore.isForbiddenPropertyName)(language) ? undefined : allStrings[normalizedLanguage];

  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  return Object.entries(args).reduce(function (value, _ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        index = _ref2[0],
        arg = _ref2[1];

    return typeof value === 'string' ? value.replace("$".concat(+index + 1), arg) : value;
  }, // Mitigation through denylisting.
  // eslint-disable-next-line security/detect-object-injection
  (0, _botframeworkWebchatCore.isForbiddenPropertyName)(id) ? '' : localizedStrings && localizedStrings[id] || allStrings['en-US'][id] || '');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZXByZWNhdGlvbk5vdGVzU2hvd24iLCJsb2NhbGl6ZSIsImlkIiwibGFuZ3VhZ2UiLCJjb25zb2xlIiwid2FybiIsImFsbFN0cmluZ3MiLCJnZXRBbGxMb2NhbGl6ZWRTdHJpbmdzIiwibm9ybWFsaXplZExhbmd1YWdlIiwibm9ybWFsaXplTGFuZ3VhZ2UiLCJsb2NhbGl6ZWRTdHJpbmdzIiwiaXNGb3JiaWRkZW5Qcm9wZXJ0eU5hbWUiLCJ1bmRlZmluZWQiLCJhcmdzIiwiT2JqZWN0IiwiZW50cmllcyIsInJlZHVjZSIsInZhbHVlIiwiaW5kZXgiLCJhcmciLCJyZXBsYWNlIl0sInNvdXJjZVJvb3QiOiJjb21wb25lbnQ6Ly8vIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbG9jYWxpemF0aW9uL0xvY2FsaXplLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIExvY2FsaXplIGlzIGRlc2lnbmVkIHRvIGJlIGVsYWJvcmF0aXZlbHkgcmV0dXJuIG11bHRpcGxlIHJlc3VsdHMgYW5kIHBvc3NpYmx5IGV4Y2VlZGluZyBjb21wbGV4aXR5IHJlcXVpcmVtZW50XG4vKiBlc2xpbnQgY29tcGxleGl0eTogXCJvZmZcIiAqL1xuXG5pbXBvcnQgeyBpc0ZvcmJpZGRlblByb3BlcnR5TmFtZSB9IGZyb20gJ2JvdGZyYW1ld29yay13ZWJjaGF0LWNvcmUnO1xuXG5pbXBvcnQgZ2V0QWxsTG9jYWxpemVkU3RyaW5ncyBmcm9tICcuL2dldEFsbExvY2FsaXplZFN0cmluZ3MnO1xuaW1wb3J0IGdldFJUTExpc3QgZnJvbSAnLi9nZXRSVExMaXN0JztcbmltcG9ydCBub3JtYWxpemVMYW5ndWFnZSBmcm9tICcuLi91dGlscy9ub3JtYWxpemVMYW5ndWFnZSc7XG5cbmxldCBkZXByZWNhdGlvbk5vdGVzU2hvd247XG5cbmZ1bmN0aW9uIGxvY2FsaXplKGlkOiBzdHJpbmcsIGxhbmd1YWdlOiBzdHJpbmcsIC4uLmFyZ3M6IHN0cmluZ1tdKSB7XG4gIGlmICghZGVwcmVjYXRpb25Ob3Rlc1Nob3duKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ2JvdGZyYW1ld29yay13ZWJjaGF0OiBsb2NhbGl6ZSgpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgdGhlIHVzZUxvY2FsaXplcigpIGhvb2tzIGluc3RlYWQuIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSByZW1vdmVkIG9uIG9yIGFmdGVyIDIwMjItMDItMTIuJ1xuICAgICk7XG5cbiAgICBkZXByZWNhdGlvbk5vdGVzU2hvd24gPSB0cnVlO1xuICB9XG5cbiAgY29uc3QgYWxsU3RyaW5ncyA9IGdldEFsbExvY2FsaXplZFN0cmluZ3MoKTtcbiAgY29uc3Qgbm9ybWFsaXplZExhbmd1YWdlID0gbm9ybWFsaXplTGFuZ3VhZ2UobGFuZ3VhZ2UpO1xuXG4gIC8vIE1pdGlnYXRpb24gdGhyb3VnaCBkZW55bGlzdGluZy5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHNlY3VyaXR5L2RldGVjdC1vYmplY3QtaW5qZWN0aW9uXG4gIGNvbnN0IGxvY2FsaXplZFN0cmluZ3MgPSBpc0ZvcmJpZGRlblByb3BlcnR5TmFtZShsYW5ndWFnZSkgPyB1bmRlZmluZWQgOiBhbGxTdHJpbmdzW25vcm1hbGl6ZWRMYW5ndWFnZV07XG5cbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKGFyZ3MpLnJlZHVjZTxib29sZWFuIHwgc3RyaW5nPihcbiAgICAodmFsdWUsIFtpbmRleCwgYXJnXSkgPT4gKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyB2YWx1ZS5yZXBsYWNlKGAkJHsraW5kZXggKyAxfWAsIGFyZykgOiB2YWx1ZSksXG4gICAgLy8gTWl0aWdhdGlvbiB0aHJvdWdoIGRlbnlsaXN0aW5nLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBzZWN1cml0eS9kZXRlY3Qtb2JqZWN0LWluamVjdGlvblxuICAgIGlzRm9yYmlkZGVuUHJvcGVydHlOYW1lKGlkKSA/ICcnIDogKGxvY2FsaXplZFN0cmluZ3MgJiYgbG9jYWxpemVkU3RyaW5nc1tpZF0pIHx8IGFsbFN0cmluZ3NbJ2VuLVVTJ11baWRdIHx8ICcnXG4gICk7XG59XG5cbmV4cG9ydCB7IGdldFJUTExpc3QsIGxvY2FsaXplIH07XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFHQTs7QUFFQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLElBQUlBLHFCQUFKOztBQUVBLFNBQVNDLFFBQVQsQ0FBa0JDLEVBQWxCLEVBQThCQyxRQUE5QixFQUFtRTtFQUNqRSxJQUFJLENBQUNILHFCQUFMLEVBQTRCO0lBQzFCSSxPQUFPLENBQUNDLElBQVIsQ0FDRSxvSkFERjtJQUlBTCxxQkFBcUIsR0FBRyxJQUF4QjtFQUNEOztFQUVELElBQU1NLFVBQVUsR0FBRyxJQUFBQywrQkFBQSxHQUFuQjtFQUNBLElBQU1DLGtCQUFrQixHQUFHLElBQUFDLDBCQUFBLEVBQWtCTixRQUFsQixDQUEzQixDQVZpRSxDQVlqRTtFQUNBOztFQUNBLElBQU1PLGdCQUFnQixHQUFHLElBQUFDLGdEQUFBLEVBQXdCUixRQUF4QixJQUFvQ1MsU0FBcEMsR0FBZ0ROLFVBQVUsQ0FBQ0Usa0JBQUQsQ0FBbkY7O0VBZGlFLGtDQUFoQkssSUFBZ0I7SUFBaEJBLElBQWdCO0VBQUE7O0VBZ0JqRSxPQUFPQyxNQUFNLENBQUNDLE9BQVAsQ0FBZUYsSUFBZixFQUFxQkcsTUFBckIsQ0FDTCxVQUFDQyxLQUFEO0lBQUE7SUFBQSxJQUFTQyxLQUFUO0lBQUEsSUFBZ0JDLEdBQWhCOztJQUFBLE9BQTBCLE9BQU9GLEtBQVAsS0FBaUIsUUFBakIsR0FBNEJBLEtBQUssQ0FBQ0csT0FBTixZQUFrQixDQUFDRixLQUFELEdBQVMsQ0FBM0IsR0FBZ0NDLEdBQWhDLENBQTVCLEdBQW1FRixLQUE3RjtFQUFBLENBREssRUFFTDtFQUNBO0VBQ0EsSUFBQU4sZ0RBQUEsRUFBd0JULEVBQXhCLElBQThCLEVBQTlCLEdBQW9DUSxnQkFBZ0IsSUFBSUEsZ0JBQWdCLENBQUNSLEVBQUQsQ0FBckMsSUFBOENJLFVBQVUsQ0FBQyxPQUFELENBQVYsQ0FBb0JKLEVBQXBCLENBQTlDLElBQXlFLEVBSnZHLENBQVA7QUFNRCJ9