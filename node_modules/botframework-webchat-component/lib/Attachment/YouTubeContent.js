"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _useStyleSet3 = _interopRequireDefault(require("../hooks/useStyleSet"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer;

var YouTubeContent = function YouTubeContent(_ref) {
  var alt = _ref.alt,
      autoPlay = _ref.autoPlay,
      embedID = _ref.embedID,
      loop = _ref.loop;

  var _useStyleSet = (0, _useStyleSet3.default)(),
      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),
      youTubeContentStyleSet = _useStyleSet2[0].youTubeContent;

  var localize = useLocalizer();
  var search = new URLSearchParams({
    autoplay: autoPlay ? '1' : '0',
    loop: loop ? '1' : '0',
    modestbranding: '1'
  }).toString();
  var title = localize('ATTACHMENT_VIDEO');
  return (
    /*#__PURE__*/
    // TODO: We should encodeURI the URL
    _react.default.createElement("iframe", {
      allowFullScreen: true,
      "aria-label": alt,
      className: youTubeContentStyleSet,
      sandbox: "allow-same-origin allow-scripts",
      src: "https://youtube.com/embed/".concat(embedID, "?").concat(search),
      title: title
    })
  );
};

YouTubeContent.defaultProps = {
  alt: '',
  autoPlay: false,
  loop: false
};
YouTubeContent.propTypes = {
  alt: _propTypes.default.string,
  autoPlay: _propTypes.default.bool,
  embedID: _propTypes.default.string.isRequired,
  loop: _propTypes.default.bool
};
var _default = YouTubeContent;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1c2VMb2NhbGl6ZXIiLCJob29rcyIsIllvdVR1YmVDb250ZW50IiwiYWx0IiwiYXV0b1BsYXkiLCJlbWJlZElEIiwibG9vcCIsInVzZVN0eWxlU2V0IiwieW91VHViZUNvbnRlbnRTdHlsZVNldCIsInlvdVR1YmVDb250ZW50IiwibG9jYWxpemUiLCJzZWFyY2giLCJVUkxTZWFyY2hQYXJhbXMiLCJhdXRvcGxheSIsIm1vZGVzdGJyYW5kaW5nIiwidG9TdHJpbmciLCJ0aXRsZSIsImRlZmF1bHRQcm9wcyIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsInN0cmluZyIsImJvb2wiLCJpc1JlcXVpcmVkIl0sInNvdXJjZVJvb3QiOiJjb21wb25lbnQ6Ly8vIiwic291cmNlcyI6WyIuLi8uLi9zcmMvQXR0YWNobWVudC9Zb3VUdWJlQ29udGVudC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaG9va3MgfSBmcm9tICdib3RmcmFtZXdvcmstd2ViY2hhdC1hcGknO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBGQyB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHVzZVN0eWxlU2V0IGZyb20gJy4uL2hvb2tzL3VzZVN0eWxlU2V0JztcblxuY29uc3QgeyB1c2VMb2NhbGl6ZXIgfSA9IGhvb2tzO1xuXG50eXBlIFlvdVR1YmVDb250ZW50UHJvcHMgPSB7XG4gIGFsdD86IHN0cmluZztcbiAgYXV0b1BsYXk/OiBib29sZWFuO1xuICBlbWJlZElEOiBzdHJpbmc7XG4gIGxvb3A/OiBib29sZWFuO1xufTtcblxuY29uc3QgWW91VHViZUNvbnRlbnQ6IEZDPFlvdVR1YmVDb250ZW50UHJvcHM+ID0gKHsgYWx0LCBhdXRvUGxheSwgZW1iZWRJRCwgbG9vcCB9KSA9PiB7XG4gIGNvbnN0IFt7IHlvdVR1YmVDb250ZW50OiB5b3VUdWJlQ29udGVudFN0eWxlU2V0IH1dID0gdXNlU3R5bGVTZXQoKTtcbiAgY29uc3QgbG9jYWxpemUgPSB1c2VMb2NhbGl6ZXIoKTtcblxuICBjb25zdCBzZWFyY2ggPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHtcbiAgICBhdXRvcGxheTogYXV0b1BsYXkgPyAnMScgOiAnMCcsXG4gICAgbG9vcDogbG9vcCA/ICcxJyA6ICcwJyxcbiAgICBtb2Rlc3RicmFuZGluZzogJzEnXG4gIH0pLnRvU3RyaW5nKCk7XG4gIGNvbnN0IHRpdGxlID0gbG9jYWxpemUoJ0FUVEFDSE1FTlRfVklERU8nKTtcblxuICByZXR1cm4gKFxuICAgIC8vIFRPRE86IFdlIHNob3VsZCBlbmNvZGVVUkkgdGhlIFVSTFxuICAgIDxpZnJhbWVcbiAgICAgIGFsbG93RnVsbFNjcmVlbj17dHJ1ZX1cbiAgICAgIGFyaWEtbGFiZWw9e2FsdH1cbiAgICAgIGNsYXNzTmFtZT17eW91VHViZUNvbnRlbnRTdHlsZVNldH1cbiAgICAgIHNhbmRib3g9XCJhbGxvdy1zYW1lLW9yaWdpbiBhbGxvdy1zY3JpcHRzXCJcbiAgICAgIHNyYz17YGh0dHBzOi8veW91dHViZS5jb20vZW1iZWQvJHtlbWJlZElEfT8ke3NlYXJjaH1gfVxuICAgICAgdGl0bGU9e3RpdGxlfVxuICAgIC8+XG4gICk7XG59O1xuXG5Zb3VUdWJlQ29udGVudC5kZWZhdWx0UHJvcHMgPSB7XG4gIGFsdDogJycsXG4gIGF1dG9QbGF5OiBmYWxzZSxcbiAgbG9vcDogZmFsc2Vcbn07XG5cbllvdVR1YmVDb250ZW50LnByb3BUeXBlcyA9IHtcbiAgYWx0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICBhdXRvUGxheTogUHJvcFR5cGVzLmJvb2wsXG4gIGVtYmVkSUQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgbG9vcDogUHJvcFR5cGVzLmJvb2xcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFlvdVR1YmVDb250ZW50O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxJQUFRQSxZQUFSLEdBQXlCQyw2QkFBekIsQ0FBUUQsWUFBUjs7QUFTQSxJQUFNRSxjQUF1QyxHQUFHLFNBQTFDQSxjQUEwQyxPQUFzQztFQUFBLElBQW5DQyxHQUFtQyxRQUFuQ0EsR0FBbUM7RUFBQSxJQUE5QkMsUUFBOEIsUUFBOUJBLFFBQThCO0VBQUEsSUFBcEJDLE9BQW9CLFFBQXBCQSxPQUFvQjtFQUFBLElBQVhDLElBQVcsUUFBWEEsSUFBVzs7RUFDcEYsbUJBQXFELElBQUFDLHFCQUFBLEdBQXJEO0VBQUE7RUFBQSxJQUF5QkMsc0JBQXpCLG9CQUFTQyxjQUFUOztFQUNBLElBQU1DLFFBQVEsR0FBR1YsWUFBWSxFQUE3QjtFQUVBLElBQU1XLE1BQU0sR0FBRyxJQUFJQyxlQUFKLENBQW9CO0lBQ2pDQyxRQUFRLEVBQUVULFFBQVEsR0FBRyxHQUFILEdBQVMsR0FETTtJQUVqQ0UsSUFBSSxFQUFFQSxJQUFJLEdBQUcsR0FBSCxHQUFTLEdBRmM7SUFHakNRLGNBQWMsRUFBRTtFQUhpQixDQUFwQixFQUlaQyxRQUpZLEVBQWY7RUFLQSxJQUFNQyxLQUFLLEdBQUdOLFFBQVEsQ0FBQyxrQkFBRCxDQUF0QjtFQUVBO0lBQUE7SUFDRTtJQUNBO01BQ0UsZUFBZSxFQUFFLElBRG5CO01BRUUsY0FBWVAsR0FGZDtNQUdFLFNBQVMsRUFBRUssc0JBSGI7TUFJRSxPQUFPLEVBQUMsaUNBSlY7TUFLRSxHQUFHLHNDQUErQkgsT0FBL0IsY0FBMENNLE1BQTFDLENBTEw7TUFNRSxLQUFLLEVBQUVLO0lBTlQ7RUFGRjtBQVdELENBdEJEOztBQXdCQWQsY0FBYyxDQUFDZSxZQUFmLEdBQThCO0VBQzVCZCxHQUFHLEVBQUUsRUFEdUI7RUFFNUJDLFFBQVEsRUFBRSxLQUZrQjtFQUc1QkUsSUFBSSxFQUFFO0FBSHNCLENBQTlCO0FBTUFKLGNBQWMsQ0FBQ2dCLFNBQWYsR0FBMkI7RUFDekJmLEdBQUcsRUFBRWdCLGtCQUFBLENBQVVDLE1BRFU7RUFFekJoQixRQUFRLEVBQUVlLGtCQUFBLENBQVVFLElBRks7RUFHekJoQixPQUFPLEVBQUVjLGtCQUFBLENBQVVDLE1BQVYsQ0FBaUJFLFVBSEQ7RUFJekJoQixJQUFJLEVBQUVhLGtCQUFBLENBQVVFO0FBSlMsQ0FBM0I7ZUFPZW5CLGMifQ==