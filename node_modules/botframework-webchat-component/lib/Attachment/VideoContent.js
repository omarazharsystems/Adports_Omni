"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _HTMLVideoContent = _interopRequireDefault(require("./HTMLVideoContent"));

var _VimeoContent = _interopRequireDefault(require("./VimeoContent"));

var _YouTubeContent = _interopRequireDefault(require("./YouTubeContent"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var YOUTUBE_DOMAIN = 'youtube.com';
var YOUTUBE_WWW_DOMAIN = 'www.youtube.com';
var YOUTUBE_SHORT_DOMAIN = 'youtu.be';
var YOUTUBE_WWW_SHORT_DOMAIN = 'www.youtu.be';
var VIMEO_DOMAIN = 'vimeo.com';
var VIMEO_WWW_DOMAIN = 'www.vimeo.com'; // This is a workaround
// - Today, there is no good URL polyfill for older browser
// - Instead of writing a URL parser, for older browser, we will use this <a href> trick to parse the URL

function parseURL(url) {
  var urlLike;

  if (typeof URL === 'function') {
    urlLike = new URL(url);
  } else {
    urlLike = document.createElement('a');
    urlLike.setAttribute('href', url);
  }

  var _urlLike = urlLike,
      hostname = _urlLike.hostname,
      pathname = _urlLike.pathname,
      search = _urlLike.search;
  return {
    hostname: hostname,
    pathname: pathname,
    search: search
  };
}

var VideoContent = function VideoContent(_ref) {
  var alt = _ref.alt,
      autoPlay = _ref.autoPlay,
      loop = _ref.loop,
      poster = _ref.poster,
      src = _ref.src;

  var _parseURL = parseURL(src),
      hostname = _parseURL.hostname,
      pathname = _parseURL.pathname,
      search = _parseURL.search;

  var lastSegment = pathname.split('/').pop();
  var searchParams = new URLSearchParams(search);

  switch (hostname) {
    case VIMEO_DOMAIN:
    case VIMEO_WWW_DOMAIN:
      return /*#__PURE__*/_react.default.createElement(_VimeoContent.default, {
        alt: alt,
        autoPlay: autoPlay,
        embedID: lastSegment,
        loop: loop
      });

    case YOUTUBE_DOMAIN:
    case YOUTUBE_WWW_DOMAIN:
      return /*#__PURE__*/_react.default.createElement(_YouTubeContent.default, {
        alt: alt,
        autoPlay: autoPlay,
        embedID: searchParams.get('v'),
        loop: loop
      });

    case YOUTUBE_SHORT_DOMAIN:
    case YOUTUBE_WWW_SHORT_DOMAIN:
      return /*#__PURE__*/_react.default.createElement(_YouTubeContent.default, {
        alt: alt,
        autoPlay: autoPlay,
        embedID: lastSegment,
        loop: loop
      });

    default:
      return /*#__PURE__*/_react.default.createElement(_HTMLVideoContent.default, {
        alt: alt,
        autoPlay: autoPlay,
        loop: loop,
        poster: poster,
        src: src
      });
  }
};

VideoContent.defaultProps = {
  alt: '',
  autoPlay: false,
  loop: false,
  poster: ''
};
VideoContent.propTypes = {
  alt: _propTypes.default.string,
  autoPlay: _propTypes.default.bool,
  loop: _propTypes.default.bool,
  poster: _propTypes.default.string,
  src: _propTypes.default.string.isRequired
};
var _default = VideoContent;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJZT1VUVUJFX0RPTUFJTiIsIllPVVRVQkVfV1dXX0RPTUFJTiIsIllPVVRVQkVfU0hPUlRfRE9NQUlOIiwiWU9VVFVCRV9XV1dfU0hPUlRfRE9NQUlOIiwiVklNRU9fRE9NQUlOIiwiVklNRU9fV1dXX0RPTUFJTiIsInBhcnNlVVJMIiwidXJsIiwidXJsTGlrZSIsIlVSTCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImhvc3RuYW1lIiwicGF0aG5hbWUiLCJzZWFyY2giLCJWaWRlb0NvbnRlbnQiLCJhbHQiLCJhdXRvUGxheSIsImxvb3AiLCJwb3N0ZXIiLCJzcmMiLCJsYXN0U2VnbWVudCIsInNwbGl0IiwicG9wIiwic2VhcmNoUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwiZ2V0IiwiZGVmYXVsdFByb3BzIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwic3RyaW5nIiwiYm9vbCIsImlzUmVxdWlyZWQiXSwic291cmNlUm9vdCI6ImNvbXBvbmVudDovLy8iLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BdHRhY2htZW50L1ZpZGVvQ29udGVudC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBGQyB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IEhUTUxWaWRlb0NvbnRlbnQgZnJvbSAnLi9IVE1MVmlkZW9Db250ZW50JztcbmltcG9ydCBWaW1lb0NvbnRlbnQgZnJvbSAnLi9WaW1lb0NvbnRlbnQnO1xuaW1wb3J0IFlvdVR1YmVDb250ZW50IGZyb20gJy4vWW91VHViZUNvbnRlbnQnO1xuXG5jb25zdCBZT1VUVUJFX0RPTUFJTiA9ICd5b3V0dWJlLmNvbSc7XG5jb25zdCBZT1VUVUJFX1dXV19ET01BSU4gPSAnd3d3LnlvdXR1YmUuY29tJztcbmNvbnN0IFlPVVRVQkVfU0hPUlRfRE9NQUlOID0gJ3lvdXR1LmJlJztcbmNvbnN0IFlPVVRVQkVfV1dXX1NIT1JUX0RPTUFJTiA9ICd3d3cueW91dHUuYmUnO1xuY29uc3QgVklNRU9fRE9NQUlOID0gJ3ZpbWVvLmNvbSc7XG5jb25zdCBWSU1FT19XV1dfRE9NQUlOID0gJ3d3dy52aW1lby5jb20nO1xuXG4vLyBUaGlzIGlzIGEgd29ya2Fyb3VuZFxuLy8gLSBUb2RheSwgdGhlcmUgaXMgbm8gZ29vZCBVUkwgcG9seWZpbGwgZm9yIG9sZGVyIGJyb3dzZXJcbi8vIC0gSW5zdGVhZCBvZiB3cml0aW5nIGEgVVJMIHBhcnNlciwgZm9yIG9sZGVyIGJyb3dzZXIsIHdlIHdpbGwgdXNlIHRoaXMgPGEgaHJlZj4gdHJpY2sgdG8gcGFyc2UgdGhlIFVSTFxuZnVuY3Rpb24gcGFyc2VVUkwodXJsKSB7XG4gIGxldCB1cmxMaWtlO1xuXG4gIGlmICh0eXBlb2YgVVJMID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdXJsTGlrZSA9IG5ldyBVUkwodXJsKTtcbiAgfSBlbHNlIHtcbiAgICB1cmxMaWtlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIHVybExpa2Uuc2V0QXR0cmlidXRlKCdocmVmJywgdXJsKTtcbiAgfVxuXG4gIGNvbnN0IHsgaG9zdG5hbWUsIHBhdGhuYW1lLCBzZWFyY2ggfSA9IHVybExpa2U7XG5cbiAgcmV0dXJuIHsgaG9zdG5hbWUsIHBhdGhuYW1lLCBzZWFyY2ggfTtcbn1cblxudHlwZSBWaWRlb0NvbnRlbnRQcm9wcyA9IHtcbiAgYWx0Pzogc3RyaW5nO1xuICBhdXRvUGxheT86IGJvb2xlYW47XG4gIGxvb3A/OiBib29sZWFuO1xuICBwb3N0ZXI/OiBzdHJpbmc7XG4gIHNyYzogc3RyaW5nO1xufTtcblxuY29uc3QgVmlkZW9Db250ZW50OiBGQzxWaWRlb0NvbnRlbnRQcm9wcz4gPSAoeyBhbHQsIGF1dG9QbGF5LCBsb29wLCBwb3N0ZXIsIHNyYyB9KSA9PiB7XG4gIGNvbnN0IHsgaG9zdG5hbWUsIHBhdGhuYW1lLCBzZWFyY2ggfSA9IHBhcnNlVVJMKHNyYyk7XG4gIGNvbnN0IGxhc3RTZWdtZW50ID0gcGF0aG5hbWUuc3BsaXQoJy8nKS5wb3AoKTtcbiAgY29uc3Qgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhzZWFyY2gpO1xuXG4gIHN3aXRjaCAoaG9zdG5hbWUpIHtcbiAgICBjYXNlIFZJTUVPX0RPTUFJTjpcbiAgICBjYXNlIFZJTUVPX1dXV19ET01BSU46XG4gICAgICByZXR1cm4gPFZpbWVvQ29udGVudCBhbHQ9e2FsdH0gYXV0b1BsYXk9e2F1dG9QbGF5fSBlbWJlZElEPXtsYXN0U2VnbWVudH0gbG9vcD17bG9vcH0gLz47XG5cbiAgICBjYXNlIFlPVVRVQkVfRE9NQUlOOlxuICAgIGNhc2UgWU9VVFVCRV9XV1dfRE9NQUlOOlxuICAgICAgcmV0dXJuIDxZb3VUdWJlQ29udGVudCBhbHQ9e2FsdH0gYXV0b1BsYXk9e2F1dG9QbGF5fSBlbWJlZElEPXtzZWFyY2hQYXJhbXMuZ2V0KCd2Jyl9IGxvb3A9e2xvb3B9IC8+O1xuXG4gICAgY2FzZSBZT1VUVUJFX1NIT1JUX0RPTUFJTjpcbiAgICBjYXNlIFlPVVRVQkVfV1dXX1NIT1JUX0RPTUFJTjpcbiAgICAgIHJldHVybiA8WW91VHViZUNvbnRlbnQgYWx0PXthbHR9IGF1dG9QbGF5PXthdXRvUGxheX0gZW1iZWRJRD17bGFzdFNlZ21lbnR9IGxvb3A9e2xvb3B9IC8+O1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiA8SFRNTFZpZGVvQ29udGVudCBhbHQ9e2FsdH0gYXV0b1BsYXk9e2F1dG9QbGF5fSBsb29wPXtsb29wfSBwb3N0ZXI9e3Bvc3Rlcn0gc3JjPXtzcmN9IC8+O1xuICB9XG59O1xuXG5WaWRlb0NvbnRlbnQuZGVmYXVsdFByb3BzID0ge1xuICBhbHQ6ICcnLFxuICBhdXRvUGxheTogZmFsc2UsXG4gIGxvb3A6IGZhbHNlLFxuICBwb3N0ZXI6ICcnXG59O1xuXG5WaWRlb0NvbnRlbnQucHJvcFR5cGVzID0ge1xuICBhbHQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGF1dG9QbGF5OiBQcm9wVHlwZXMuYm9vbCxcbiAgbG9vcDogUHJvcFR5cGVzLmJvb2wsXG4gIHBvc3RlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgc3JjOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWRcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFZpZGVvQ29udGVudDtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOzs7O0FBRUEsSUFBTUEsY0FBYyxHQUFHLGFBQXZCO0FBQ0EsSUFBTUMsa0JBQWtCLEdBQUcsaUJBQTNCO0FBQ0EsSUFBTUMsb0JBQW9CLEdBQUcsVUFBN0I7QUFDQSxJQUFNQyx3QkFBd0IsR0FBRyxjQUFqQztBQUNBLElBQU1DLFlBQVksR0FBRyxXQUFyQjtBQUNBLElBQU1DLGdCQUFnQixHQUFHLGVBQXpCLEMsQ0FFQTtBQUNBO0FBQ0E7O0FBQ0EsU0FBU0MsUUFBVCxDQUFrQkMsR0FBbEIsRUFBdUI7RUFDckIsSUFBSUMsT0FBSjs7RUFFQSxJQUFJLE9BQU9DLEdBQVAsS0FBZSxVQUFuQixFQUErQjtJQUM3QkQsT0FBTyxHQUFHLElBQUlDLEdBQUosQ0FBUUYsR0FBUixDQUFWO0VBQ0QsQ0FGRCxNQUVPO0lBQ0xDLE9BQU8sR0FBR0UsUUFBUSxDQUFDQyxhQUFULENBQXVCLEdBQXZCLENBQVY7SUFDQUgsT0FBTyxDQUFDSSxZQUFSLENBQXFCLE1BQXJCLEVBQTZCTCxHQUE3QjtFQUNEOztFQUVELGVBQXVDQyxPQUF2QztFQUFBLElBQVFLLFFBQVIsWUFBUUEsUUFBUjtFQUFBLElBQWtCQyxRQUFsQixZQUFrQkEsUUFBbEI7RUFBQSxJQUE0QkMsTUFBNUIsWUFBNEJBLE1BQTVCO0VBRUEsT0FBTztJQUFFRixRQUFRLEVBQVJBLFFBQUY7SUFBWUMsUUFBUSxFQUFSQSxRQUFaO0lBQXNCQyxNQUFNLEVBQU5BO0VBQXRCLENBQVA7QUFDRDs7QUFVRCxJQUFNQyxZQUFtQyxHQUFHLFNBQXRDQSxZQUFzQyxPQUEwQztFQUFBLElBQXZDQyxHQUF1QyxRQUF2Q0EsR0FBdUM7RUFBQSxJQUFsQ0MsUUFBa0MsUUFBbENBLFFBQWtDO0VBQUEsSUFBeEJDLElBQXdCLFFBQXhCQSxJQUF3QjtFQUFBLElBQWxCQyxNQUFrQixRQUFsQkEsTUFBa0I7RUFBQSxJQUFWQyxHQUFVLFFBQVZBLEdBQVU7O0VBQ3BGLGdCQUF1Q2YsUUFBUSxDQUFDZSxHQUFELENBQS9DO0VBQUEsSUFBUVIsUUFBUixhQUFRQSxRQUFSO0VBQUEsSUFBa0JDLFFBQWxCLGFBQWtCQSxRQUFsQjtFQUFBLElBQTRCQyxNQUE1QixhQUE0QkEsTUFBNUI7O0VBQ0EsSUFBTU8sV0FBVyxHQUFHUixRQUFRLENBQUNTLEtBQVQsQ0FBZSxHQUFmLEVBQW9CQyxHQUFwQixFQUFwQjtFQUNBLElBQU1DLFlBQVksR0FBRyxJQUFJQyxlQUFKLENBQW9CWCxNQUFwQixDQUFyQjs7RUFFQSxRQUFRRixRQUFSO0lBQ0UsS0FBS1QsWUFBTDtJQUNBLEtBQUtDLGdCQUFMO01BQ0Usb0JBQU8sNkJBQUMscUJBQUQ7UUFBYyxHQUFHLEVBQUVZLEdBQW5CO1FBQXdCLFFBQVEsRUFBRUMsUUFBbEM7UUFBNEMsT0FBTyxFQUFFSSxXQUFyRDtRQUFrRSxJQUFJLEVBQUVIO01BQXhFLEVBQVA7O0lBRUYsS0FBS25CLGNBQUw7SUFDQSxLQUFLQyxrQkFBTDtNQUNFLG9CQUFPLDZCQUFDLHVCQUFEO1FBQWdCLEdBQUcsRUFBRWdCLEdBQXJCO1FBQTBCLFFBQVEsRUFBRUMsUUFBcEM7UUFBOEMsT0FBTyxFQUFFTyxZQUFZLENBQUNFLEdBQWIsQ0FBaUIsR0FBakIsQ0FBdkQ7UUFBOEUsSUFBSSxFQUFFUjtNQUFwRixFQUFQOztJQUVGLEtBQUtqQixvQkFBTDtJQUNBLEtBQUtDLHdCQUFMO01BQ0Usb0JBQU8sNkJBQUMsdUJBQUQ7UUFBZ0IsR0FBRyxFQUFFYyxHQUFyQjtRQUEwQixRQUFRLEVBQUVDLFFBQXBDO1FBQThDLE9BQU8sRUFBRUksV0FBdkQ7UUFBb0UsSUFBSSxFQUFFSDtNQUExRSxFQUFQOztJQUVGO01BQ0Usb0JBQU8sNkJBQUMseUJBQUQ7UUFBa0IsR0FBRyxFQUFFRixHQUF2QjtRQUE0QixRQUFRLEVBQUVDLFFBQXRDO1FBQWdELElBQUksRUFBRUMsSUFBdEQ7UUFBNEQsTUFBTSxFQUFFQyxNQUFwRTtRQUE0RSxHQUFHLEVBQUVDO01BQWpGLEVBQVA7RUFkSjtBQWdCRCxDQXJCRDs7QUF1QkFMLFlBQVksQ0FBQ1ksWUFBYixHQUE0QjtFQUMxQlgsR0FBRyxFQUFFLEVBRHFCO0VBRTFCQyxRQUFRLEVBQUUsS0FGZ0I7RUFHMUJDLElBQUksRUFBRSxLQUhvQjtFQUkxQkMsTUFBTSxFQUFFO0FBSmtCLENBQTVCO0FBT0FKLFlBQVksQ0FBQ2EsU0FBYixHQUF5QjtFQUN2QlosR0FBRyxFQUFFYSxrQkFBQSxDQUFVQyxNQURRO0VBRXZCYixRQUFRLEVBQUVZLGtCQUFBLENBQVVFLElBRkc7RUFHdkJiLElBQUksRUFBRVcsa0JBQUEsQ0FBVUUsSUFITztFQUl2QlosTUFBTSxFQUFFVSxrQkFBQSxDQUFVQyxNQUpLO0VBS3ZCVixHQUFHLEVBQUVTLGtCQUFBLENBQVVDLE1BQVYsQ0FBaUJFO0FBTEMsQ0FBekI7ZUFRZWpCLFkifQ==