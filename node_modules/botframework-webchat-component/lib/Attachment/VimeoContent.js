"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _useStyleSet3 = _interopRequireDefault(require("../hooks/useStyleSet"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer;

var VimeoContent = function VimeoContent(_ref) {
  var alt = _ref.alt,
      autoPlay = _ref.autoPlay,
      embedID = _ref.embedID,
      loop = _ref.loop;

  var _useStyleSet = (0, _useStyleSet3.default)(),
      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),
      vimeoContentStyleSet = _useStyleSet2[0].vimeoContent;

  var localize = useLocalizer();
  var search = new URLSearchParams({
    autoplay: autoPlay ? '1' : '0',
    badge: '0',
    byline: '0',
    loop: loop ? '1' : '0',
    portrait: '0',
    title: '0'
  }).toString();
  var title = localize('ATTACHMENT_VIDEO');
  return /*#__PURE__*/_react.default.createElement("iframe", {
    allowFullScreen: true,
    "aria-label": alt,
    className: vimeoContentStyleSet,
    sandbox: "allow-same-origin allow-scripts",
    src: "https://player.vimeo.com/video/".concat(encodeURI(embedID), "?").concat(search),
    title: title
  });
};

VimeoContent.defaultProps = {
  alt: '',
  autoPlay: false,
  loop: false
};
VimeoContent.propTypes = {
  alt: _propTypes.default.string,
  autoPlay: _propTypes.default.bool,
  embedID: _propTypes.default.string.isRequired,
  loop: _propTypes.default.bool
};
var _default = VimeoContent;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1c2VMb2NhbGl6ZXIiLCJob29rcyIsIlZpbWVvQ29udGVudCIsImFsdCIsImF1dG9QbGF5IiwiZW1iZWRJRCIsImxvb3AiLCJ1c2VTdHlsZVNldCIsInZpbWVvQ29udGVudFN0eWxlU2V0IiwidmltZW9Db250ZW50IiwibG9jYWxpemUiLCJzZWFyY2giLCJVUkxTZWFyY2hQYXJhbXMiLCJhdXRvcGxheSIsImJhZGdlIiwiYnlsaW5lIiwicG9ydHJhaXQiLCJ0aXRsZSIsInRvU3RyaW5nIiwiZW5jb2RlVVJJIiwiZGVmYXVsdFByb3BzIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwic3RyaW5nIiwiYm9vbCIsImlzUmVxdWlyZWQiXSwic291cmNlUm9vdCI6ImNvbXBvbmVudDovLy8iLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BdHRhY2htZW50L1ZpbWVvQ29udGVudC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaG9va3MgfSBmcm9tICdib3RmcmFtZXdvcmstd2ViY2hhdC1hcGknO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBGQyB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHVzZVN0eWxlU2V0IGZyb20gJy4uL2hvb2tzL3VzZVN0eWxlU2V0JztcblxuY29uc3QgeyB1c2VMb2NhbGl6ZXIgfSA9IGhvb2tzO1xuXG50eXBlIFZpbWVvQ29udGVudFByb3BzID0ge1xuICBhbHQ/OiBzdHJpbmc7XG4gIGF1dG9QbGF5PzogYm9vbGVhbjtcbiAgZW1iZWRJRDogc3RyaW5nO1xuICBsb29wPzogYm9vbGVhbjtcbn07XG5cbmNvbnN0IFZpbWVvQ29udGVudDogRkM8VmltZW9Db250ZW50UHJvcHM+ID0gKHsgYWx0LCBhdXRvUGxheSwgZW1iZWRJRCwgbG9vcCB9KSA9PiB7XG4gIGNvbnN0IFt7IHZpbWVvQ29udGVudDogdmltZW9Db250ZW50U3R5bGVTZXQgfV0gPSB1c2VTdHlsZVNldCgpO1xuICBjb25zdCBsb2NhbGl6ZSA9IHVzZUxvY2FsaXplcigpO1xuXG4gIGNvbnN0IHNlYXJjaCA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoe1xuICAgIGF1dG9wbGF5OiBhdXRvUGxheSA/ICcxJyA6ICcwJyxcbiAgICBiYWRnZTogJzAnLFxuICAgIGJ5bGluZTogJzAnLFxuICAgIGxvb3A6IGxvb3AgPyAnMScgOiAnMCcsXG4gICAgcG9ydHJhaXQ6ICcwJyxcbiAgICB0aXRsZTogJzAnXG4gIH0pLnRvU3RyaW5nKCk7XG4gIGNvbnN0IHRpdGxlID0gbG9jYWxpemUoJ0FUVEFDSE1FTlRfVklERU8nKTtcblxuICByZXR1cm4gKFxuICAgIDxpZnJhbWVcbiAgICAgIGFsbG93RnVsbFNjcmVlbj17dHJ1ZX1cbiAgICAgIGFyaWEtbGFiZWw9e2FsdH1cbiAgICAgIGNsYXNzTmFtZT17dmltZW9Db250ZW50U3R5bGVTZXR9XG4gICAgICBzYW5kYm94PVwiYWxsb3ctc2FtZS1vcmlnaW4gYWxsb3ctc2NyaXB0c1wiXG4gICAgICBzcmM9e2BodHRwczovL3BsYXllci52aW1lby5jb20vdmlkZW8vJHtlbmNvZGVVUkkoZW1iZWRJRCl9PyR7c2VhcmNofWB9XG4gICAgICB0aXRsZT17dGl0bGV9XG4gICAgLz5cbiAgKTtcbn07XG5cblZpbWVvQ29udGVudC5kZWZhdWx0UHJvcHMgPSB7XG4gIGFsdDogJycsXG4gIGF1dG9QbGF5OiBmYWxzZSxcbiAgbG9vcDogZmFsc2Vcbn07XG5cblZpbWVvQ29udGVudC5wcm9wVHlwZXMgPSB7XG4gIGFsdDogUHJvcFR5cGVzLnN0cmluZyxcbiAgYXV0b1BsYXk6IFByb3BUeXBlcy5ib29sLFxuICBlbWJlZElEOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGxvb3A6IFByb3BUeXBlcy5ib29sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBWaW1lb0NvbnRlbnQ7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLElBQVFBLFlBQVIsR0FBeUJDLDZCQUF6QixDQUFRRCxZQUFSOztBQVNBLElBQU1FLFlBQW1DLEdBQUcsU0FBdENBLFlBQXNDLE9BQXNDO0VBQUEsSUFBbkNDLEdBQW1DLFFBQW5DQSxHQUFtQztFQUFBLElBQTlCQyxRQUE4QixRQUE5QkEsUUFBOEI7RUFBQSxJQUFwQkMsT0FBb0IsUUFBcEJBLE9BQW9CO0VBQUEsSUFBWEMsSUFBVyxRQUFYQSxJQUFXOztFQUNoRixtQkFBaUQsSUFBQUMscUJBQUEsR0FBakQ7RUFBQTtFQUFBLElBQXVCQyxvQkFBdkIsb0JBQVNDLFlBQVQ7O0VBQ0EsSUFBTUMsUUFBUSxHQUFHVixZQUFZLEVBQTdCO0VBRUEsSUFBTVcsTUFBTSxHQUFHLElBQUlDLGVBQUosQ0FBb0I7SUFDakNDLFFBQVEsRUFBRVQsUUFBUSxHQUFHLEdBQUgsR0FBUyxHQURNO0lBRWpDVSxLQUFLLEVBQUUsR0FGMEI7SUFHakNDLE1BQU0sRUFBRSxHQUh5QjtJQUlqQ1QsSUFBSSxFQUFFQSxJQUFJLEdBQUcsR0FBSCxHQUFTLEdBSmM7SUFLakNVLFFBQVEsRUFBRSxHQUx1QjtJQU1qQ0MsS0FBSyxFQUFFO0VBTjBCLENBQXBCLEVBT1pDLFFBUFksRUFBZjtFQVFBLElBQU1ELEtBQUssR0FBR1AsUUFBUSxDQUFDLGtCQUFELENBQXRCO0VBRUEsb0JBQ0U7SUFDRSxlQUFlLEVBQUUsSUFEbkI7SUFFRSxjQUFZUCxHQUZkO0lBR0UsU0FBUyxFQUFFSyxvQkFIYjtJQUlFLE9BQU8sRUFBQyxpQ0FKVjtJQUtFLEdBQUcsMkNBQW9DVyxTQUFTLENBQUNkLE9BQUQsQ0FBN0MsY0FBMERNLE1BQTFELENBTEw7SUFNRSxLQUFLLEVBQUVNO0VBTlQsRUFERjtBQVVELENBeEJEOztBQTBCQWYsWUFBWSxDQUFDa0IsWUFBYixHQUE0QjtFQUMxQmpCLEdBQUcsRUFBRSxFQURxQjtFQUUxQkMsUUFBUSxFQUFFLEtBRmdCO0VBRzFCRSxJQUFJLEVBQUU7QUFIb0IsQ0FBNUI7QUFNQUosWUFBWSxDQUFDbUIsU0FBYixHQUF5QjtFQUN2QmxCLEdBQUcsRUFBRW1CLGtCQUFBLENBQVVDLE1BRFE7RUFFdkJuQixRQUFRLEVBQUVrQixrQkFBQSxDQUFVRSxJQUZHO0VBR3ZCbkIsT0FBTyxFQUFFaUIsa0JBQUEsQ0FBVUMsTUFBVixDQUFpQkUsVUFISDtFQUl2Qm5CLElBQUksRUFBRWdCLGtCQUFBLENBQVVFO0FBSk8sQ0FBekI7ZUFPZXRCLFkifQ==