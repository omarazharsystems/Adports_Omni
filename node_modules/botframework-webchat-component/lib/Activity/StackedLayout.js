"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.connectStackedLayout = void 0;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _Bubble = _interopRequireDefault(require("./Bubble"));

var _connectToWebChat = _interopRequireDefault(require("../connectToWebChat"));

var _isZeroOrPositive = _interopRequireDefault(require("../Utils/isZeroOrPositive"));

var _ScreenReaderText = _interopRequireDefault(require("../ScreenReaderText"));

var _textFormatToContentType = _interopRequireDefault(require("../Utils/textFormatToContentType"));

var _useStyleSet3 = _interopRequireDefault(require("../hooks/useStyleSet"));

var _useStyleToEmotionObject = _interopRequireDefault(require("../hooks/internal/useStyleToEmotionObject"));

var _useUniqueId = _interopRequireDefault(require("../hooks/internal/useUniqueId"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useAvatarForBot = _botframeworkWebchatApi.hooks.useAvatarForBot,
    useAvatarForUser = _botframeworkWebchatApi.hooks.useAvatarForUser,
    useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer,
    useStyleOptions = _botframeworkWebchatApi.hooks.useStyleOptions;
var ROOT_STYLE = {
  '&.webchat__stacked-layout': {
    position: 'relative',
    // This is to keep screen reader text in the destinated area.
    '& .webchat__stacked-layout__attachment-row, & .webchat__stacked-layout__main, & .webchat__stacked-layout__message-row, & .webchat__stacked-layout__status': {
      display: 'flex'
    },
    '& .webchat__stacked-layout__alignment-pad': {
      flexShrink: 0
    },
    '& .webchat__stacked-layout__attachment': {
      width: '100%'
    },
    '& .webchat__stacked-layout__avatar-gutter': {
      display: 'flex',
      flexDirection: 'column',
      flexShrink: 0
    },
    '&.webchat__stacked-layout--from-user': {
      '& .webchat__stacked-layout__attachment-row, & .webchat__stacked-layout__main, & .webchat__stacked-layout__message-row, & .webchat__stacked-layout__status': {
        flexDirection: 'row-reverse'
      }
    },
    '& .webchat__stacked-layout__content': {
      flex: 1,
      // This is for bottom aligning an avatar with a message bubble shorter than the avatar.
      // Related to the test at activityGrouping.avatarMiddleware.atBottom.js.
      display: 'flex',
      flexDirection: 'column',
      // This "overflow: hidden" is to make sure text overflow will get clipped correctly.
      // Related to the test at basic.js "long URLs with keep-all".
      overflow: 'hidden'
    },
    '& .webchat__stacked-layout__nub-pad': {
      flexShrink: 0
    }
  }
};

var connectStackedLayout = function connectStackedLayout() {
  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {
    selectors[_key] = arguments[_key];
  }

  return _connectToWebChat.default.apply(void 0, [function (_ref, _ref2) {
    var language = _ref.language,
        _ref$styleSet$options = _ref.styleSet.options,
        botAvatarInitials = _ref$styleSet$options.botAvatarInitials,
        userAvatarInitials = _ref$styleSet$options.userAvatarInitials;
    var _ref2$activity = _ref2.activity;
    _ref2$activity = _ref2$activity === void 0 ? {} : _ref2$activity;
    var _ref2$activity$from = _ref2$activity.from;
    _ref2$activity$from = _ref2$activity$from === void 0 ? {} : _ref2$activity$from;
    var _ref2$activity$from$r = _ref2$activity$from.role,
        role = _ref2$activity$from$r === void 0 ? undefined : _ref2$activity$from$r;
    return {
      avatarInitials: role === 'user' ? userAvatarInitials : botAvatarInitials,
      language: language,
      // TODO: [P4] We want to deprecate botAvatarInitials/userAvatarInitials because they are not as helpful as avatarInitials
      botAvatarInitials: botAvatarInitials,
      userAvatarInitials: userAvatarInitials
    };
  }].concat(selectors));
};

exports.connectStackedLayout = connectStackedLayout;

var StackedLayout = function StackedLayout(_ref3) {
  var _activity$channelData, _activity$channelData2;

  var activity = _ref3.activity,
      hideTimestamp = _ref3.hideTimestamp,
      renderActivityStatus = _ref3.renderActivityStatus,
      renderAttachment = _ref3.renderAttachment,
      renderAvatar = _ref3.renderAvatar,
      showCallout = _ref3.showCallout;

  var _useStyleOptions = useStyleOptions(),
      _useStyleOptions2 = _slicedToArray(_useStyleOptions, 1),
      styleOptions = _useStyleOptions2[0];

  var _useAvatarForBot = useAvatarForBot(),
      _useAvatarForBot2 = _slicedToArray(_useAvatarForBot, 1),
      botInitials = _useAvatarForBot2[0].initials;

  var _useAvatarForUser = useAvatarForUser(),
      _useAvatarForUser2 = _slicedToArray(_useAvatarForUser, 1),
      userInitials = _useAvatarForUser2[0].initials;

  var _useStyleSet = (0, _useStyleSet3.default)(),
      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),
      stackedLayoutStyleSet = _useStyleSet2[0].stackedLayout;

  var ariaLabelId = (0, _useUniqueId.default)('webchat__stacked-layout__id');
  var localize = useLocalizer();
  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';
  var bubbleNubOffset = styleOptions.bubbleNubOffset,
      bubbleNubSize = styleOptions.bubbleNubSize,
      bubbleFromUserNubOffset = styleOptions.bubbleFromUserNubOffset,
      bubbleFromUserNubSize = styleOptions.bubbleFromUserNubSize;
  var isMessage = activity.type === 'message';
  var attachments = isMessage && activity.attachments || [];
  var fromUser = activity.from.role === 'user';
  var messageBackDisplayText = isMessage && ((_activity$channelData = activity.channelData) === null || _activity$channelData === void 0 ? void 0 : (_activity$channelData2 = _activity$channelData.messageBack) === null || _activity$channelData2 === void 0 ? void 0 : _activity$channelData2.displayText) || '';
  var activityDisplayText = isMessage ? messageBackDisplayText || activity.text : '';
  var attachedAlt = localize(fromUser ? 'ACTIVITY_YOU_ATTACHED_ALT' : 'ACTIVITY_BOT_ATTACHED_ALT');
  var greetingAlt = (fromUser ? localize('ACTIVITY_YOU_SAID_ALT') : localize('ACTIVITY_BOT_SAID_ALT', botInitials || '')).replace(/[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]{2,}/g, ' ');
  var initials = fromUser ? userInitials : botInitials;
  var nubOffset = fromUser ? bubbleFromUserNubOffset : bubbleNubOffset;
  var nubSize = fromUser ? bubbleFromUserNubSize : bubbleNubSize;
  var otherInitials = fromUser ? botInitials : userInitials;
  var otherNubSize = fromUser ? bubbleNubSize : bubbleFromUserNubSize;
  var hasAvatar = initials || typeof initials === 'string';
  var hasOtherAvatar = otherInitials || typeof otherInitials === 'string';
  var hasNub = typeof nubSize === 'number';
  var hasOtherNub = typeof otherNubSize === 'number';
  var topAlignedCallout = (0, _isZeroOrPositive.default)(nubOffset);
  var extraTrailing = !hasOtherAvatar && hasOtherNub; // This is for bot message with user nub and no user avatar. And vice versa.

  var showAvatar = showCallout && hasAvatar && !!renderAvatar;
  var showNub = showCallout && hasNub && (topAlignedCallout || !(attachments !== null && attachments !== void 0 && attachments.length));
  return /*#__PURE__*/_react.default.createElement("div", {
    "aria-labelledby": activityDisplayText ? ariaLabelId : undefined,
    className: (0, _classnames.default)('webchat__stacked-layout', rootClassName, stackedLayoutStyleSet + '', {
      'webchat__stacked-layout--extra-trailing': extraTrailing,
      'webchat__stacked-layout--from-user': fromUser,
      'webchat__stacked-layout--hide-avatar': hasAvatar && !showAvatar,
      'webchat__stacked-layout--hide-nub': hasNub && !showNub,
      'webchat__stacked-layout--no-message': !activityDisplayText,
      'webchat__stacked-layout--show-avatar': showAvatar,
      'webchat__stacked-layout--show-nub': showNub,
      'webchat__stacked-layout--top-callout': topAlignedCallout
    })
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__stacked-layout__main"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__stacked-layout__avatar-gutter"
  }, showAvatar && renderAvatar()), /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__stacked-layout__content"
  }, !!activityDisplayText && /*#__PURE__*/_react.default.createElement("div", {
    "aria-roledescription": "message",
    className: "webchat__stacked-layout__message-row" // Disable "Prop `id` is forbidden on DOM Nodes" rule because we are using the ID prop for accessibility.

    /* eslint-disable-next-line react/forbid-dom-props */
    ,
    id: ariaLabelId,
    role: "group"
  }, /*#__PURE__*/_react.default.createElement(_ScreenReaderText.default, {
    text: greetingAlt
  }), /*#__PURE__*/_react.default.createElement(_Bubble.default, {
    className: "webchat__stacked-layout__message",
    fromUser: fromUser,
    nub: showNub || (hasAvatar || hasNub ? 'hidden' : false)
  }, renderAttachment({
    activity: activity,
    attachment: isMessage ? {
      content: activityDisplayText,
      contentType: (0, _textFormatToContentType.default)(activity.textFormat)
    } : undefined
  }))), attachments.map(function (attachment, index) {
    return /*#__PURE__*/_react.default.createElement("div", {
      "aria-roledescription": "attachment",
      className: (0, _classnames.default)('webchat__stacked-layout__attachment-row', {
        'webchat__stacked-layout__attachment-row--first': !index
      })
      /* attachments do not have an ID, it is always indexed by number */

      /* eslint-disable-next-line react/no-array-index-key */
      ,
      key: index,
      role: "group"
    }, /*#__PURE__*/_react.default.createElement(_ScreenReaderText.default, {
      text: attachedAlt
    }), /*#__PURE__*/_react.default.createElement(_Bubble.default, {
      className: "webchat__stacked-layout__attachment",
      fromUser: fromUser
      /* eslint-disable-next-line react/no-array-index-key */
      ,
      key: index,
      nub: hasAvatar || hasNub ? 'hidden' : false
    }, renderAttachment({
      activity: activity,
      attachment: attachment
    })));
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__stacked-layout__alignment-pad"
  })), typeof renderActivityStatus === 'function' && /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__stacked-layout__status"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__stacked-layout__avatar-gutter"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__stacked-layout__nub-pad"
  }), renderActivityStatus({
    hideTimestamp: hideTimestamp
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__stacked-layout__alignment-pad"
  })));
};

StackedLayout.defaultProps = {
  hideTimestamp: false,
  renderActivityStatus: function renderActivityStatus() {
    return false;
  },
  renderAvatar: undefined,
  showCallout: true
};
StackedLayout.propTypes = {
  // PropTypes cannot fully capture TypeScript types.
  // @ts-ignore
  activity: _propTypes.default.shape({
    attachments: _propTypes.default.array,
    channelData: _propTypes.default.shape({
      messageBack: _propTypes.default.shape({
        displayText: _propTypes.default.string
      })
    }),
    from: _propTypes.default.shape({
      role: _propTypes.default.string.isRequired
    }).isRequired,
    text: _propTypes.default.string,
    textFormat: _propTypes.default.oneOf(['markdown', 'plain', 'xml']),
    timestamp: _propTypes.default.string,
    type: _propTypes.default.string.isRequired
  }).isRequired,
  hideTimestamp: _propTypes.default.bool,
  // PropTypes cannot validate precisely with its TypeScript counterpart.
  // @ts-ignore
  renderActivityStatus: _propTypes.default.oneOfType([_propTypes.default.oneOf([false]), _propTypes.default.func]),
  renderAttachment: _propTypes.default.func.isRequired,
  // PropTypes cannot validate precisely with its TypeScript counterpart.
  // @ts-ignore
  renderAvatar: _propTypes.default.oneOfType([_propTypes.default.oneOf([false]), _propTypes.default.func]),
  showCallout: _propTypes.default.bool
};
var _default = StackedLayout;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,