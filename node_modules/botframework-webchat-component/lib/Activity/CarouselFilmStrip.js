"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.connectCarouselFilmStrip = void 0;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _reactFilm = require("react-film");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _Bubble = _interopRequireDefault(require("./Bubble"));

var _CarouselFilmStripAttachment = _interopRequireDefault(require("./CarouselFilmStripAttachment"));

var _connectToWebChat = _interopRequireDefault(require("../connectToWebChat"));

var _isZeroOrPositive = _interopRequireDefault(require("../Utils/isZeroOrPositive"));

var _ScreenReaderText = _interopRequireDefault(require("../ScreenReaderText"));

var _textFormatToContentType = _interopRequireDefault(require("../Utils/textFormatToContentType"));

var _useStyleSet3 = _interopRequireDefault(require("../hooks/useStyleSet"));

var _useStyleToEmotionObject = _interopRequireDefault(require("../hooks/internal/useStyleToEmotionObject"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useAvatarForBot = _botframeworkWebchatApi.hooks.useAvatarForBot,
    useAvatarForUser = _botframeworkWebchatApi.hooks.useAvatarForUser,
    useDirection = _botframeworkWebchatApi.hooks.useDirection,
    useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer,
    useStyleOptions = _botframeworkWebchatApi.hooks.useStyleOptions;
var ROOT_STYLE = {
  '&.webchat__carousel-filmstrip': {
    display: 'flex',
    flexDirection: 'column',
    MsOverflowStyle: 'none',
    overflowX: 'scroll',
    overflowY: 'hidden',
    position: 'relative',
    // This is to keep screen reader text in the destinated area.
    touchAction: 'manipulation',
    WebkitOverflowScrolling: 'touch',
    '&::-webkit-scrollbar': {
      display: 'none'
    },
    '& .webchat__carousel-filmstrip__alignment-pad': {
      flexShrink: 0
    },
    '& .webchat__carousel-filmstrip-attachment': {
      flex: 1
    },
    '& .webchat__carousel-filmstrip__attachments': {
      display: 'flex',
      listStyleType: 'none',
      margin: 0,
      padding: 0
    },
    '& .webchat__carousel-filmstrip__avatar': {
      flexShrink: 0
    },
    '& .webchat__carousel-filmstrip__avatar-gutter': {
      display: 'flex',
      flexDirection: 'column',
      flexShrink: 0
    },
    '& .webchat__carousel-filmstrip__complimentary': {
      display: 'flex'
    },
    '& .webchat__carousel-filmstrip__complimentary-content': {
      display: 'flex',
      flexGrow: 1,
      flexDirection: 'column'
    },
    '& .webchat__carousel-filmstrip__content': {
      display: 'flex',
      flexGrow: 1,
      flexDirection: 'column'
    },
    '& .webchat__carousel-filmstrip__filler': {
      flexGrow: 10000,
      flexShrink: 1
    },
    '& .webchat__carousel-filmstrip__main': {
      display: 'flex'
    },
    '& .webchat__carousel-filmstrip__message': {
      display: 'flex'
    },
    '& .webchat__carousel-filmstrip__nub-pad': {
      flexShrink: 0
    },
    '& .webchat__carousel-filmstrip__status': {
      display: 'flex'
    }
  }
};

var connectCarouselFilmStrip = function connectCarouselFilmStrip() {
  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {
    selectors[_key] = arguments[_key];
  }

  return _connectToWebChat.default.apply(void 0, [function (_ref, _ref2) {
    var language = _ref.language,
        _ref$styleSet$options = _ref.styleSet.options,
        botAvatarInitials = _ref$styleSet$options.botAvatarInitials,
        userAvatarInitials = _ref$styleSet$options.userAvatarInitials;
    var _ref2$activity = _ref2.activity;
    _ref2$activity = _ref2$activity === void 0 ? {} : _ref2$activity;
    var _ref2$activity$from = _ref2$activity.from;
    _ref2$activity$from = _ref2$activity$from === void 0 ? {} : _ref2$activity$from;
    var role = _ref2$activity$from.role;
    return {
      avatarInitials: role === 'user' ? userAvatarInitials : botAvatarInitials,
      language: language
    };
  }].concat(selectors));
};

exports.connectCarouselFilmStrip = connectCarouselFilmStrip;

var CarouselFilmStrip = function CarouselFilmStrip(_ref3) {
  var activity = _ref3.activity,
      className = _ref3.className,
      hideTimestamp = _ref3.hideTimestamp,
      renderActivityStatus = _ref3.renderActivityStatus,
      renderAttachment = _ref3.renderAttachment,
      renderAvatar = _ref3.renderAvatar,
      showCallout = _ref3.showCallout;

  var _useStyleOptions = useStyleOptions(),
      _useStyleOptions2 = _slicedToArray(_useStyleOptions, 1),
      _useStyleOptions2$ = _useStyleOptions2[0],
      bubbleNubOffset = _useStyleOptions2$.bubbleNubOffset,
      bubbleNubSize = _useStyleOptions2$.bubbleNubSize,
      bubbleFromUserNubOffset = _useStyleOptions2$.bubbleFromUserNubOffset,
      bubbleFromUserNubSize = _useStyleOptions2$.bubbleFromUserNubSize;

  var _useStyleSet = (0, _useStyleSet3.default)(),
      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),
      carouselFilmStripStyleSet = _useStyleSet2[0].carouselFilmStrip;

  var _useAvatarForBot = useAvatarForBot(),
      _useAvatarForBot2 = _slicedToArray(_useAvatarForBot, 1),
      botInitials = _useAvatarForBot2[0].initials;

  var _useAvatarForUser = useAvatarForUser(),
      _useAvatarForUser2 = _slicedToArray(_useAvatarForUser, 1),
      userInitials = _useAvatarForUser2[0].initials;

  var _useDirection = useDirection(),
      _useDirection2 = _slicedToArray(_useDirection, 1),
      direction = _useDirection2[0];

  var localize = useLocalizer();
  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';
  var showActivityStatus = typeof renderActivityStatus === 'function';
  var itemContainerCallbackRef = (0, _reactFilm.useItemContainerCallbackRef)();
  var scrollableCallbackRef = (0, _reactFilm.useScrollableCallbackRef)();
  var _activity$attachments = activity.attachments,
      attachments = _activity$attachments === void 0 ? [] : _activity$attachments,
      _activity$channelData = activity.channelData;
  _activity$channelData = _activity$channelData === void 0 ? {} : _activity$channelData;
  var _activity$channelData2 = _activity$channelData.messageBack;
  _activity$channelData2 = _activity$channelData2 === void 0 ? {} : _activity$channelData2;
  var messageBackDisplayText = _activity$channelData2.displayText,
      _activity$from = activity.from;
  _activity$from = _activity$from === void 0 ? {} : _activity$from;
  var role = _activity$from.role,
      text = activity.text,
      textFormat = activity.textFormat;
  var activityDisplayText = messageBackDisplayText || text;
  var fromUser = role === 'user';
  var greetingAlt = (fromUser ? localize('ACTIVITY_YOU_SAID_ALT') : localize('ACTIVITY_BOT_SAID_ALT', botInitials || '')).replace(/[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]{2,}/g, ' ');
  var initials = fromUser ? userInitials : botInitials;
  var nubOffset = fromUser ? bubbleFromUserNubOffset : bubbleNubOffset;
  var nubSize = fromUser ? bubbleFromUserNubSize : bubbleNubSize;
  var otherInitials = fromUser ? botInitials : userInitials;
  var otherNubSize = fromUser ? bubbleNubSize : bubbleFromUserNubSize;
  var hasAvatar = initials || typeof initials === 'string';
  var hasOtherAvatar = otherInitials || typeof otherInitials === 'string';
  var hasNub = typeof nubSize === 'number';
  var hasOtherNub = typeof otherNubSize === 'number';
  var topAlignedCallout = (0, _isZeroOrPositive.default)(nubOffset);
  var extraTrailing = !hasOtherAvatar && hasOtherNub; // This is for bot message with user nub and no user avatar. And vice versa.

  var showAvatar = showCallout && hasAvatar && !!renderAvatar;
  var showNub = showCallout && hasNub && (topAlignedCallout || !attachments.length);
  var hideNub = hasNub && !showNub;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('webchat__carousel-filmstrip', {
      'webchat__carousel-filmstrip--extra-trailing': extraTrailing,
      'webchat__carousel-filmstrip--hide-avatar': hasAvatar && !showAvatar,
      'webchat__carousel-filmstrip--hide-nub': hideNub,
      'webchat__carousel-filmstrip--no-message': !activityDisplayText,
      'webchat__carousel-filmstrip--rtl': direction === 'rtl',
      'webchat__carousel-filmstrip--show-avatar': showAvatar,
      'webchat__carousel-filmstrip--show-nub': showNub,
      'webchat__carousel-filmstrip--top-callout': topAlignedCallout
    }, 'react-film__filmstrip', rootClassName, carouselFilmStripStyleSet + '', (className || '') + ''),
    ref: scrollableCallbackRef
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__carousel-filmstrip__main"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__carousel-filmstrip__avatar-gutter"
  }, showAvatar && renderAvatar({
    activity: activity
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__carousel-filmstrip__content"
  }, !!activityDisplayText && /*#__PURE__*/_react.default.createElement("div", {
    "aria-roledescription": "message",
    className: "webchat__carousel-filmstrip__message",
    role: "group"
  }, /*#__PURE__*/_react.default.createElement(_ScreenReaderText.default, {
    text: greetingAlt
  }), /*#__PURE__*/_react.default.createElement(_Bubble.default, {
    className: "webchat__carousel-filmstrip__bubble",
    fromUser: fromUser,
    nub: showNub || (hasAvatar || hasNub) && 'hidden'
  }, renderAttachment({
    activity: activity,
    attachment: {
      content: activityDisplayText,
      contentType: (0, _textFormatToContentType.default)(textFormat)
    }
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__carousel-filmstrip__filler"
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__carousel-filmstrip__complimentary"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__carousel-filmstrip__nub-pad"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__carousel-filmstrip__complimentary-content c"
  }, /*#__PURE__*/_react.default.createElement("ul", {
    className: "webchat__carousel-filmstrip__attachments react-film__filmstrip__list",
    ref: itemContainerCallbackRef
  }, attachments.map(function (attachment, index) {
    return /*#__PURE__*/_react.default.createElement(_CarouselFilmStripAttachment.default, {
      activity: activity,
      attachment: attachment,
      fromUser: fromUser,
      hasAvatar: hasAvatar,
      hideNub: hideNub,
      index: index
      /* Attachments do not have an ID; it is always indexed by number */
      // eslint-disable-next-line react/no-array-index-key
      ,
      key: index,
      renderAttachment: renderAttachment,
      showAvatar: showAvatar,
      showNub: showNub
    });
  }))))), /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__carousel-filmstrip__alignment-pad"
  })), showActivityStatus && /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__carousel-filmstrip__status"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__carousel-filmstrip__avatar-gutter"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__carousel-filmstrip__nub-pad"
  }), renderActivityStatus({
    hideTimestamp: hideTimestamp
  })));
};

CarouselFilmStrip.defaultProps = {
  className: '',
  hideTimestamp: false,
  renderActivityStatus: false,
  renderAvatar: false,
  showCallout: false
};
CarouselFilmStrip.propTypes = {
  activity: _propTypes.default.shape({
    attachments: _propTypes.default.array,
    channelData: _propTypes.default.shape({
      messageBack: _propTypes.default.shape({
        displayText: _propTypes.default.string
      })
    }),
    from: _propTypes.default.shape({
      role: _propTypes.default.string.isRequired
    }).isRequired,
    text: _propTypes.default.string,
    textFormat: _propTypes.default.string,
    timestamp: _propTypes.default.string
  }).isRequired,
  className: _propTypes.default.string,
  hideTimestamp: _propTypes.default.bool,
  renderActivityStatus: _propTypes.default.oneOfType([_propTypes.default.oneOf([false]), _propTypes.default.func]),
  renderAttachment: _propTypes.default.func.isRequired,
  renderAvatar: _propTypes.default.oneOfType([_propTypes.default.oneOf([false]), _propTypes.default.func]),
  showCallout: _propTypes.default.bool
};
var _default = CarouselFilmStrip;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,