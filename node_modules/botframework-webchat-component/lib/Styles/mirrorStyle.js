"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mirrorStyle;

var _botframeworkWebchatCore = require("botframework-webchat-core");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function mirrorStyle(mirrorSelector, styles) {
  var _ref;

  var mirrored = {};

  for (var _i = 0, _Object$entries = Object.entries(styles); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
        key = _Object$entries$_i[0],
        value = _Object$entries$_i[1];

    if (typeof value === 'number' || typeof value === 'string') {
      var patchedKey = key.replace(/(^left|^right|Left|Right)/, function (match) {
        return match === 'Left' ? 'Right' : match === 'left' ? 'right' : match === 'Right' ? 'Left' : 'left';
      });

      if (!(0, _botframeworkWebchatCore.isForbiddenPropertyName)(patchedKey)) {
        // Mitigated through denylisting.
        // eslint-disable-next-line security/detect-object-injection
        mirrored[patchedKey] = value;
      }
    } else if (!(0, _botframeworkWebchatCore.isForbiddenPropertyName)(key)) {
      // Mitigated through denylisting.
      // eslint-disable-next-line security/detect-object-injection
      mirrored[key] = mirrorStyle('', value);
    }
  }

  var relative = /^&[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*/g.exec(mirrorSelector) || '';
  return mirrorSelector ? (_ref = {}, _defineProperty(_ref, "".concat(relative, ":not(").concat(mirrorSelector.substr(relative.length), ")"), styles), _defineProperty(_ref, mirrorSelector, mirrored), _ref) : mirrored;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtaXJyb3JTdHlsZSIsIm1pcnJvclNlbGVjdG9yIiwic3R5bGVzIiwibWlycm9yZWQiLCJPYmplY3QiLCJlbnRyaWVzIiwia2V5IiwidmFsdWUiLCJwYXRjaGVkS2V5IiwicmVwbGFjZSIsIm1hdGNoIiwiaXNGb3JiaWRkZW5Qcm9wZXJ0eU5hbWUiLCJyZWxhdGl2ZSIsImV4ZWMiLCJzdWJzdHIiLCJsZW5ndGgiXSwic291cmNlUm9vdCI6ImNvbXBvbmVudDovLy8iLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9TdHlsZXMvbWlycm9yU3R5bGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNGb3JiaWRkZW5Qcm9wZXJ0eU5hbWUgfSBmcm9tICdib3RmcmFtZXdvcmstd2ViY2hhdC1jb3JlJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWlycm9yU3R5bGUobWlycm9yU2VsZWN0b3IsIHN0eWxlcykge1xuICBjb25zdCBtaXJyb3JlZCA9IHt9O1xuXG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHN0eWxlcykpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zdCBwYXRjaGVkS2V5ID0ga2V5LnJlcGxhY2UoLyhebGVmdHxecmlnaHR8TGVmdHxSaWdodCkvdSwgbWF0Y2ggPT5cbiAgICAgICAgbWF0Y2ggPT09ICdMZWZ0JyA/ICdSaWdodCcgOiBtYXRjaCA9PT0gJ2xlZnQnID8gJ3JpZ2h0JyA6IG1hdGNoID09PSAnUmlnaHQnID8gJ0xlZnQnIDogJ2xlZnQnXG4gICAgICApO1xuXG4gICAgICBpZiAoIWlzRm9yYmlkZGVuUHJvcGVydHlOYW1lKHBhdGNoZWRLZXkpKSB7XG4gICAgICAgIC8vIE1pdGlnYXRlZCB0aHJvdWdoIGRlbnlsaXN0aW5nLlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgc2VjdXJpdHkvZGV0ZWN0LW9iamVjdC1pbmplY3Rpb25cbiAgICAgICAgbWlycm9yZWRbcGF0Y2hlZEtleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFpc0ZvcmJpZGRlblByb3BlcnR5TmFtZShrZXkpKSB7XG4gICAgICAvLyBNaXRpZ2F0ZWQgdGhyb3VnaCBkZW55bGlzdGluZy5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBzZWN1cml0eS9kZXRlY3Qtb2JqZWN0LWluamVjdGlvblxuICAgICAgbWlycm9yZWRba2V5XSA9IG1pcnJvclN0eWxlKCcnLCB2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgcmVsYXRpdmUgPSAvXiZcXHMqL2d1LmV4ZWMobWlycm9yU2VsZWN0b3IpIHx8ICcnO1xuXG4gIHJldHVybiBtaXJyb3JTZWxlY3RvclxuICAgID8ge1xuICAgICAgICBbYCR7cmVsYXRpdmV9Om5vdCgke21pcnJvclNlbGVjdG9yLnN1YnN0cihyZWxhdGl2ZS5sZW5ndGgpfSlgXTogc3R5bGVzLFxuICAgICAgICBbbWlycm9yU2VsZWN0b3JdOiBtaXJyb3JlZFxuICAgICAgfVxuICAgIDogbWlycm9yZWQ7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7OztBQUVlLFNBQVNBLFdBQVQsQ0FBcUJDLGNBQXJCLEVBQXFDQyxNQUFyQyxFQUE2QztFQUFBOztFQUMxRCxJQUFNQyxRQUFRLEdBQUcsRUFBakI7O0VBRUEsbUNBQTJCQyxNQUFNLENBQUNDLE9BQVAsQ0FBZUgsTUFBZixDQUEzQixxQ0FBbUQ7SUFBOUM7SUFBQSxJQUFPSSxHQUFQO0lBQUEsSUFBWUMsS0FBWjs7SUFDSCxJQUFJLE9BQU9BLEtBQVAsS0FBaUIsUUFBakIsSUFBNkIsT0FBT0EsS0FBUCxLQUFpQixRQUFsRCxFQUE0RDtNQUMxRCxJQUFNQyxVQUFVLEdBQUdGLEdBQUcsQ0FBQ0csT0FBSixDQUFZLDJCQUFaLEVBQTBDLFVBQUFDLEtBQUs7UUFBQSxPQUNoRUEsS0FBSyxLQUFLLE1BQVYsR0FBbUIsT0FBbkIsR0FBNkJBLEtBQUssS0FBSyxNQUFWLEdBQW1CLE9BQW5CLEdBQTZCQSxLQUFLLEtBQUssT0FBVixHQUFvQixNQUFwQixHQUE2QixNQUR2QjtNQUFBLENBQS9DLENBQW5COztNQUlBLElBQUksQ0FBQyxJQUFBQyxnREFBQSxFQUF3QkgsVUFBeEIsQ0FBTCxFQUEwQztRQUN4QztRQUNBO1FBQ0FMLFFBQVEsQ0FBQ0ssVUFBRCxDQUFSLEdBQXVCRCxLQUF2QjtNQUNEO0lBQ0YsQ0FWRCxNQVVPLElBQUksQ0FBQyxJQUFBSSxnREFBQSxFQUF3QkwsR0FBeEIsQ0FBTCxFQUFtQztNQUN4QztNQUNBO01BQ0FILFFBQVEsQ0FBQ0csR0FBRCxDQUFSLEdBQWdCTixXQUFXLENBQUMsRUFBRCxFQUFLTyxLQUFMLENBQTNCO0lBQ0Q7RUFDRjs7RUFFRCxJQUFNSyxRQUFRLEdBQUcsMEVBQVVDLElBQVYsQ0FBZVosY0FBZixLQUFrQyxFQUFuRDtFQUVBLE9BQU9BLGNBQWMsK0NBRVhXLFFBRlcsa0JBRUtYLGNBQWMsQ0FBQ2EsTUFBZixDQUFzQkYsUUFBUSxDQUFDRyxNQUEvQixDQUZMLFFBRWlEYixNQUZqRCx5QkFHZEQsY0FIYyxFQUdHRSxRQUhILFdBS2pCQSxRQUxKO0FBTUQifQ==