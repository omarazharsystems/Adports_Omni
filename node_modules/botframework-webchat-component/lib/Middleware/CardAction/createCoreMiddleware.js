"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createDefaultCardActionMiddleware;

var _detectBrowser = require("../../Utils/detectBrowser");

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

// This code is adopted from sanitize-html/naughtyScheme.
// sanitize-html is a dependency of Web Chat but the naughtScheme function is neither exposed nor reusable.
// https://github.com/apostrophecms/sanitize-html/
function getScheme(href) {
  // Browsers ignore character codes of 32 (space) and below in a surprising
  // number of situations. Start reading here:
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet#Embedded_tab

  /* eslint-disable-next-line no-control-regex */
  href = href.replace(/[\0- ]+/g, ''); // Clobber any comments in URLs, which the browser might
  // interpret inside an XML data island, allowing
  // a javascript: URL to be snuck through

  href = href.replace(/<!\x2D\x2D(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*?\x2D\x2D>/g, ''); // Case insensitive so we don't get faked out by JAVASCRIPT #1

  var matches = href.match(/^([A-Za-z]+):/);

  if (!matches) {
    // Protocol-relative URL or no scheme
    return;
  }

  return matches[1].toLowerCase();
}

var ALLOWED_SCHEMES = ['data', 'http', 'https', 'ftp', 'mailto', 'sip', 'tel'];

function createDefaultCardActionMiddleware() {
  return [function () {
    return function (next) {
      return function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var _args$ = args[0],
            _args$$cardAction = _args$.cardAction,
            type = _args$$cardAction.type,
            value = _args$$cardAction.value,
            getSignInUrl = _args$.getSignInUrl;

        switch (type) {
          case 'call':
          case 'downloadFile':
          case 'openUrl':
          case 'playAudio':
          case 'playVideo':
          case 'showImage':
            if (ALLOWED_SCHEMES.includes(getScheme(value))) {
              if (_detectBrowser.ie11) {
                var newWindow = window.open();
                newWindow.opener = null;
                newWindow.location = value;
              } else {
                window.open(value, '_blank', 'noopener noreferrer');
              }
            } else {
              console.warn('botframework-webchat: Cannot open URL with disallowed schemes.', value);
            }

            break;

          case 'signin':
            {
              /**
               * @todo TODO: [P3] We should prime the URL into the OAuthCard directly, instead of calling getSessionId on-demand
               *       This is to eliminate the delay between window.open() and location.href call
               */
              _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
                var popup, url;
                return _regeneratorRuntime().wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        popup = window.open();
                        _context.next = 3;
                        return getSignInUrl();

                      case 3:
                        url = _context.sent;

                        if (['http', 'https'].includes(getScheme(url))) {
                          popup.location.href = url;
                        } else {
                          console.warn('botframework-webchat: Cannot open URL with disallowed schemes.', url);
                          popup.close();
                        }

                      case 5:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }))();

              break;
            }

          default:
            return next.apply(void 0, args);
        }
      };
    };
  }];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZXRTY2hlbWUiLCJocmVmIiwicmVwbGFjZSIsIm1hdGNoZXMiLCJtYXRjaCIsInRvTG93ZXJDYXNlIiwiQUxMT1dFRF9TQ0hFTUVTIiwiY3JlYXRlRGVmYXVsdENhcmRBY3Rpb25NaWRkbGV3YXJlIiwibmV4dCIsImFyZ3MiLCJjYXJkQWN0aW9uIiwidHlwZSIsInZhbHVlIiwiZ2V0U2lnbkluVXJsIiwiaW5jbHVkZXMiLCJpZTExIiwibmV3V2luZG93Iiwid2luZG93Iiwib3BlbiIsIm9wZW5lciIsImxvY2F0aW9uIiwiY29uc29sZSIsIndhcm4iLCJwb3B1cCIsInVybCIsImNsb3NlIl0sInNvdXJjZVJvb3QiOiJjb21wb25lbnQ6Ly8vIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvTWlkZGxld2FyZS9DYXJkQWN0aW9uL2NyZWF0ZUNvcmVNaWRkbGV3YXJlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGllMTEgfSBmcm9tICcuLi8uLi9VdGlscy9kZXRlY3RCcm93c2VyJztcblxuLy8gVGhpcyBjb2RlIGlzIGFkb3B0ZWQgZnJvbSBzYW5pdGl6ZS1odG1sL25hdWdodHlTY2hlbWUuXG4vLyBzYW5pdGl6ZS1odG1sIGlzIGEgZGVwZW5kZW5jeSBvZiBXZWIgQ2hhdCBidXQgdGhlIG5hdWdodFNjaGVtZSBmdW5jdGlvbiBpcyBuZWl0aGVyIGV4cG9zZWQgbm9yIHJldXNhYmxlLlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Fwb3N0cm9waGVjbXMvc2FuaXRpemUtaHRtbC9cbmZ1bmN0aW9uIGdldFNjaGVtZShocmVmKSB7XG4gIC8vIEJyb3dzZXJzIGlnbm9yZSBjaGFyYWN0ZXIgY29kZXMgb2YgMzIgKHNwYWNlKSBhbmQgYmVsb3cgaW4gYSBzdXJwcmlzaW5nXG4gIC8vIG51bWJlciBvZiBzaXR1YXRpb25zLiBTdGFydCByZWFkaW5nIGhlcmU6XG4gIC8vIGh0dHBzOi8vd3d3Lm93YXNwLm9yZy9pbmRleC5waHAvWFNTX0ZpbHRlcl9FdmFzaW9uX0NoZWF0X1NoZWV0I0VtYmVkZGVkX3RhYlxuXG4gIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4ICovXG4gIGhyZWYgPSBocmVmLnJlcGxhY2UoL1tcXHgwMC1cXHgyMF0rL2d1LCAnJyk7XG5cbiAgLy8gQ2xvYmJlciBhbnkgY29tbWVudHMgaW4gVVJMcywgd2hpY2ggdGhlIGJyb3dzZXIgbWlnaHRcbiAgLy8gaW50ZXJwcmV0IGluc2lkZSBhbiBYTUwgZGF0YSBpc2xhbmQsIGFsbG93aW5nXG4gIC8vIGEgamF2YXNjcmlwdDogVVJMIHRvIGJlIHNudWNrIHRocm91Z2hcbiAgaHJlZiA9IGhyZWYucmVwbGFjZSgvPCEtLS4qPy0tPi9ndSwgJycpO1xuXG4gIC8vIENhc2UgaW5zZW5zaXRpdmUgc28gd2UgZG9uJ3QgZ2V0IGZha2VkIG91dCBieSBKQVZBU0NSSVBUICMxXG4gIGNvbnN0IG1hdGNoZXMgPSBocmVmLm1hdGNoKC9eKFthLXpBLVpdKyk6L3UpO1xuXG4gIGlmICghbWF0Y2hlcykge1xuICAgIC8vIFByb3RvY29sLXJlbGF0aXZlIFVSTCBvciBubyBzY2hlbWVcbiAgICByZXR1cm47XG4gIH1cblxuICByZXR1cm4gbWF0Y2hlc1sxXS50b0xvd2VyQ2FzZSgpO1xufVxuXG5jb25zdCBBTExPV0VEX1NDSEVNRVMgPSBbJ2RhdGEnLCAnaHR0cCcsICdodHRwcycsICdmdHAnLCAnbWFpbHRvJywgJ3NpcCcsICd0ZWwnXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlRGVmYXVsdENhcmRBY3Rpb25NaWRkbGV3YXJlKCkge1xuICByZXR1cm4gW1xuICAgICgpID0+XG4gICAgICBuZXh0ID0+XG4gICAgICAoLi4uYXJncykgPT4ge1xuICAgICAgICBjb25zdCBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgY2FyZEFjdGlvbjogeyB0eXBlLCB2YWx1ZSB9LFxuICAgICAgICAgICAgZ2V0U2lnbkluVXJsXG4gICAgICAgICAgfVxuICAgICAgICBdID0gYXJncztcblxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICBjYXNlICdjYWxsJzpcbiAgICAgICAgICBjYXNlICdkb3dubG9hZEZpbGUnOlxuICAgICAgICAgIGNhc2UgJ29wZW5VcmwnOlxuICAgICAgICAgIGNhc2UgJ3BsYXlBdWRpbyc6XG4gICAgICAgICAgY2FzZSAncGxheVZpZGVvJzpcbiAgICAgICAgICBjYXNlICdzaG93SW1hZ2UnOlxuICAgICAgICAgICAgaWYgKEFMTE9XRURfU0NIRU1FUy5pbmNsdWRlcyhnZXRTY2hlbWUodmFsdWUpKSkge1xuICAgICAgICAgICAgICBpZiAoaWUxMSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1dpbmRvdyA9IHdpbmRvdy5vcGVuKCk7XG4gICAgICAgICAgICAgICAgbmV3V2luZG93Lm9wZW5lciA9IG51bGw7XG4gICAgICAgICAgICAgICAgbmV3V2luZG93LmxvY2F0aW9uID0gdmFsdWU7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgd2luZG93Lm9wZW4odmFsdWUsICdfYmxhbmsnLCAnbm9vcGVuZXIgbm9yZWZlcnJlcicpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2JvdGZyYW1ld29yay13ZWJjaGF0OiBDYW5ub3Qgb3BlbiBVUkwgd2l0aCBkaXNhbGxvd2VkIHNjaGVtZXMuJywgdmFsdWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ3NpZ25pbic6IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQHRvZG8gVE9ETzogW1AzXSBXZSBzaG91bGQgcHJpbWUgdGhlIFVSTCBpbnRvIHRoZSBPQXV0aENhcmQgZGlyZWN0bHksIGluc3RlYWQgb2YgY2FsbGluZyBnZXRTZXNzaW9uSWQgb24tZGVtYW5kXG4gICAgICAgICAgICAgKiAgICAgICBUaGlzIGlzIHRvIGVsaW1pbmF0ZSB0aGUgZGVsYXkgYmV0d2VlbiB3aW5kb3cub3BlbigpIGFuZCBsb2NhdGlvbi5ocmVmIGNhbGxcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBjb25zdCBwb3B1cCA9IHdpbmRvdy5vcGVuKCk7XG4gICAgICAgICAgICAgIGNvbnN0IHVybCA9IGF3YWl0IGdldFNpZ25JblVybCgpO1xuXG4gICAgICAgICAgICAgIGlmIChbJ2h0dHAnLCAnaHR0cHMnXS5pbmNsdWRlcyhnZXRTY2hlbWUodXJsKSkpIHtcbiAgICAgICAgICAgICAgICBwb3B1cC5sb2NhdGlvbi5ocmVmID0gdXJsO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignYm90ZnJhbWV3b3JrLXdlYmNoYXQ6IENhbm5vdCBvcGVuIFVSTCB3aXRoIGRpc2FsbG93ZWQgc2NoZW1lcy4nLCB1cmwpO1xuXG4gICAgICAgICAgICAgICAgcG9wdXAuY2xvc2UoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkoKTtcblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBuZXh0KC4uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gIF07XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOzsrQ0FDQSxvSjs7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0EsU0FBVCxDQUFtQkMsSUFBbkIsRUFBeUI7RUFDdkI7RUFDQTtFQUNBOztFQUVBO0VBQ0FBLElBQUksR0FBR0EsSUFBSSxDQUFDQyxPQUFMLENBQWEsVUFBYixFQUErQixFQUEvQixDQUFQLENBTnVCLENBUXZCO0VBQ0E7RUFDQTs7RUFDQUQsSUFBSSxHQUFHQSxJQUFJLENBQUNDLE9BQUwsQ0FBYSxzTEFBYixF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