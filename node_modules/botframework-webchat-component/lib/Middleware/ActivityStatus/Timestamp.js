"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _AbsoluteTime = _interopRequireDefault(require("./AbsoluteTime"));

var _RelativeTime = _interopRequireDefault(require("./RelativeTime"));

var _useStyleSet3 = _interopRequireDefault(require("../../hooks/useStyleSet"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useStyleOptions = _botframeworkWebchatApi.hooks.useStyleOptions;

var Timestamp = function Timestamp(_ref) {
  var timestamp = _ref.activity.timestamp,
      className = _ref.className;

  var _useStyleOptions = useStyleOptions(),
      _useStyleOptions2 = _slicedToArray(_useStyleOptions, 1),
      timestampFormat = _useStyleOptions2[0].timestampFormat;

  var _useStyleSet = (0, _useStyleSet3.default)(),
      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),
      _useStyleSet2$ = _useStyleSet2[0],
      timestampStyleSet = _useStyleSet2$.timestamp,
      sendStatusStyleSet = _useStyleSet2$.sendStatus;

  timestampStyleSet && console.warn('botframework-webchat: "styleSet.timestamp" is deprecated. Please use "styleSet.sendStatus". This deprecation migration will be removed on or after December 31, 2021.');
  return !!timestamp && /*#__PURE__*/_react.default.createElement("span", {
    className: (0, _classnames.default)((timestampStyleSet || '') + '', (sendStatusStyleSet || '') + '', (className || '') + '')
  }, timestampFormat === 'relative' ? /*#__PURE__*/_react.default.createElement(_RelativeTime.default, {
    value: timestamp
  }) : /*#__PURE__*/_react.default.createElement(_AbsoluteTime.default, {
    value: timestamp
  }));
};

Timestamp.defaultProps = {
  className: ''
};
Timestamp.propTypes = {
  // PropTypes cannot fully capture TypeScript types.
  // @ts-ignore
  activity: _propTypes.default.shape({
    timestamp: _propTypes.default.string
  }).isRequired,
  className: _propTypes.default.string
};
var _default = Timestamp;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1c2VTdHlsZU9wdGlvbnMiLCJob29rcyIsIlRpbWVzdGFtcCIsInRpbWVzdGFtcCIsImFjdGl2aXR5IiwiY2xhc3NOYW1lIiwidGltZXN0YW1wRm9ybWF0IiwidXNlU3R5bGVTZXQiLCJ0aW1lc3RhbXBTdHlsZVNldCIsInNlbmRTdGF0dXNTdHlsZVNldCIsInNlbmRTdGF0dXMiLCJjb25zb2xlIiwid2FybiIsImNsYXNzTmFtZXMiLCJkZWZhdWx0UHJvcHMiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJzaGFwZSIsInN0cmluZyIsImlzUmVxdWlyZWQiXSwic291cmNlUm9vdCI6ImNvbXBvbmVudDovLy8iLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9NaWRkbGV3YXJlL0FjdGl2aXR5U3RhdHVzL1RpbWVzdGFtcC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaG9va3MgfSBmcm9tICdib3RmcmFtZXdvcmstd2ViY2hhdC1hcGknO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IEZDIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBXZWJDaGF0QWN0aXZpdHkgfSBmcm9tICdib3RmcmFtZXdvcmstd2ViY2hhdC1jb3JlJztcblxuaW1wb3J0IEFic29sdXRlVGltZSBmcm9tICcuL0Fic29sdXRlVGltZSc7XG5pbXBvcnQgUmVsYXRpdmVUaW1lIGZyb20gJy4vUmVsYXRpdmVUaW1lJztcbmltcG9ydCB1c2VTdHlsZVNldCBmcm9tICcuLi8uLi9ob29rcy91c2VTdHlsZVNldCc7XG5cbmNvbnN0IHsgdXNlU3R5bGVPcHRpb25zIH0gPSBob29rcztcblxudHlwZSBUaW1lc3RhbXBQcm9wcyA9IHtcbiAgYWN0aXZpdHk6IFdlYkNoYXRBY3Rpdml0eTtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xufTtcblxuY29uc3QgVGltZXN0YW1wOiBGQzxUaW1lc3RhbXBQcm9wcz4gPSAoeyBhY3Rpdml0eTogeyB0aW1lc3RhbXAgfSwgY2xhc3NOYW1lIH0pID0+IHtcbiAgY29uc3QgW3sgdGltZXN0YW1wRm9ybWF0IH1dID0gdXNlU3R5bGVPcHRpb25zKCk7XG4gIGNvbnN0IFt7IHRpbWVzdGFtcDogdGltZXN0YW1wU3R5bGVTZXQsIHNlbmRTdGF0dXM6IHNlbmRTdGF0dXNTdHlsZVNldCB9XSA9IHVzZVN0eWxlU2V0KCk7XG5cbiAgdGltZXN0YW1wU3R5bGVTZXQgJiZcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICAnYm90ZnJhbWV3b3JrLXdlYmNoYXQ6IFwic3R5bGVTZXQudGltZXN0YW1wXCIgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBcInN0eWxlU2V0LnNlbmRTdGF0dXNcIi4gVGhpcyBkZXByZWNhdGlvbiBtaWdyYXRpb24gd2lsbCBiZSByZW1vdmVkIG9uIG9yIGFmdGVyIERlY2VtYmVyIDMxLCAyMDIxLidcbiAgICApO1xuXG4gIHJldHVybiAoXG4gICAgISF0aW1lc3RhbXAgJiYgKFxuICAgICAgPHNwYW5cbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCh0aW1lc3RhbXBTdHlsZVNldCB8fCAnJykgKyAnJywgKHNlbmRTdGF0dXNTdHlsZVNldCB8fCAnJykgKyAnJywgKGNsYXNzTmFtZSB8fCAnJykgKyAnJyl9XG4gICAgICA+XG4gICAgICAgIHt0aW1lc3RhbXBGb3JtYXQgPT09ICdyZWxhdGl2ZScgPyA8UmVsYXRpdmVUaW1lIHZhbHVlPXt0aW1lc3RhbXB9IC8+IDogPEFic29sdXRlVGltZSB2YWx1ZT17dGltZXN0YW1wfSAvPn1cbiAgICAgIDwvc3Bhbj5cbiAgICApXG4gICk7XG59O1xuXG5UaW1lc3RhbXAuZGVmYXVsdFByb3BzID0ge1xuICBjbGFzc05hbWU6ICcnXG59O1xuXG5UaW1lc3RhbXAucHJvcFR5cGVzID0ge1xuICAvLyBQcm9wVHlwZXMgY2Fubm90IGZ1bGx5IGNhcHR1cmUgVHlwZVNjcmlwdCB0eXBlcy5cbiAgLy8gQHRzLWlnbm9yZVxuICBhY3Rpdml0eTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICB0aW1lc3RhbXA6IFByb3BUeXBlcy5zdHJpbmdcbiAgfSkuaXNSZXF1aXJlZCxcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nXG59O1xuXG5leHBvcnQgZGVmYXVsdCBUaW1lc3RhbXA7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLElBQVFBLGVBQVIsR0FBNEJDLDZCQUE1QixDQUFRRCxlQUFSOztBQU9BLElBQU1FLFNBQTZCLEdBQUcsU0FBaENBLFNBQWdDLE9BQTRDO0VBQUEsSUFBN0JDLFNBQTZCLFFBQXpDQyxRQUF5QyxDQUE3QkQsU0FBNkI7RUFBQSxJQUFoQkUsU0FBZ0IsUUFBaEJBLFNBQWdCOztFQUNoRix1QkFBOEJMLGVBQWUsRUFBN0M7RUFBQTtFQUFBLElBQVNNLGVBQVQsd0JBQVNBLGVBQVQ7O0VBQ0EsbUJBQTJFLElBQUFDLHFCQUFBLEdBQTNFO0VBQUE7RUFBQTtFQUFBLElBQW9CQyxpQkFBcEIsa0JBQVNMLFNBQVQ7RUFBQSxJQUFtRE0sa0JBQW5ELGtCQUF1Q0MsVUFBdkM7O0VBRUFGLGlCQUFpQixJQUNmRyxPQUFPLENBQUNDLElBQVIsQ0FDRSx1S0FERixDQURGO0VBS0EsT0FDRSxDQUFDLENBQUNULFNBQUYsaUJBQ0U7SUFDRSxTQUFTLEVBQUUsSUFBQVUsbUJBQUEsRUFBVyxDQUFDTCxpQkFBaUIsSUFBSSxFQUF0QixJQUE0QixFQUF2QyxFQUEyQyxDQUFDQyxrQkFBa0IsSUFBSSxFQUF2QixJQUE2QixFQUF4RSxFQUE0RSxDQUFDSixTQUFTLElBQUksRUFBZCxJQUFvQixFQUFoRztFQURiLEdBR0dDLGVBQWUsS0FBSyxVQUFwQixnQkFBaUMsNkJBQUMscUJBQUQ7SUFBYyxLQUFLLEVBQUVIO0VBQXJCLEVBQWpDLGdCQUFzRSw2QkFBQyxxQkFBRDtJQUFjLEtBQUssRUFBRUE7RUFBckIsRUFIekUsQ0FGSjtBQVNELENBbEJEOztBQW9CQUQsU0FBUyxDQUFDWSxZQUFWLEdBQXlCO0VBQ3ZCVCxTQUFTLEVBQUU7QUFEWSxDQUF6QjtBQUlBSCxTQUFTLENBQUNhLFNBQVYsR0FBc0I7RUFDcEI7RUFDQTtFQUNBWCxRQUFRLEVBQUVZLGtCQUFBLENBQVVDLEtBQVYsQ0FBZ0I7SUFDeEJkLFNBQVMsRUFBRWEsa0JBQUEsQ0FBVUU7RUFERyxDQUFoQixFQUVQQyxVQUxpQjtFQU1wQmQsU0FBUyxFQUFFVyxrQkFBQSxDQUFVRTtBQU5ELENBQXRCO2VBU2VoQixTIn0=