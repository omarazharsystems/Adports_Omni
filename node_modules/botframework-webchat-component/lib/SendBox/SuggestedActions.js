"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.connectSuggestedActions = void 0;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _reactFilm = _interopRequireWildcard(require("react-film"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _computeSuggestedActionText = _interopRequireDefault(require("../Utils/computeSuggestedActionText"));

var _connectToWebChat = _interopRequireDefault(require("../connectToWebChat"));

var _RovingTabIndexComposer = _interopRequireDefault(require("../providers/RovingTabIndex/RovingTabIndexComposer"));

var _SuggestedAction = _interopRequireDefault(require("./SuggestedAction"));

var _useFocus = _interopRequireDefault(require("../hooks/useFocus"));

var _useFocusWithin3 = _interopRequireDefault(require("../hooks/internal/useFocusWithin"));

var _useNonce3 = _interopRequireDefault(require("../hooks/internal/useNonce"));

var _useStyleSet7 = _interopRequireDefault(require("../hooks/useStyleSet"));

var _useStyleToEmotionObject = _interopRequireDefault(require("../hooks/internal/useStyleToEmotionObject"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useDirection = _botframeworkWebchatApi.hooks.useDirection,
    useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer,
    useStyleOptions = _botframeworkWebchatApi.hooks.useStyleOptions;
var ROOT_STYLE = {
  '&.webchat__suggested-actions': {
    '&.webchat__suggested-actions--flow-layout .webchat__suggested-actions__flow-box': {
      display: 'flex',
      flexWrap: 'wrap'
    },
    '&.webchat__suggested-actions--stack-layout .webchat__suggested-actions__stack': {
      display: 'flex',
      flexDirection: 'column'
    }
  }
};

var connectSuggestedActions = function connectSuggestedActions() {
  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {
    selectors[_key] = arguments[_key];
  }

  return _connectToWebChat.default.apply(void 0, [function (_ref) {
    var language = _ref.language,
        suggestedActions = _ref.suggestedActions;
    return {
      language: language,
      suggestedActions: suggestedActions
    };
  }].concat(selectors));
};

exports.connectSuggestedActions = connectSuggestedActions;

var SuggestedActionCarouselContainer = function SuggestedActionCarouselContainer(_ref2) {
  var children = _ref2.children,
      className = _ref2.className,
      label = _ref2.label;

  var _useStyleOptions = useStyleOptions(),
      _useStyleOptions2 = _slicedToArray(_useStyleOptions, 1),
      _useStyleOptions2$ = _useStyleOptions2[0],
      suggestedActionsCarouselFlipperBoxWidth = _useStyleOptions2$.suggestedActionsCarouselFlipperBoxWidth,
      suggestedActionsCarouselFlipperCursor = _useStyleOptions2$.suggestedActionsCarouselFlipperCursor,
      suggestedActionsCarouselFlipperSize = _useStyleOptions2$.suggestedActionsCarouselFlipperSize;

  var _useStyleSet = (0, _useStyleSet7.default)(),
      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),
      suggestedActionsStyleSet = _useStyleSet2[0].suggestedActions;

  var _useDirection = useDirection(),
      _useDirection2 = _slicedToArray(_useDirection, 1),
      direction = _useDirection2[0];

  var _useNonce = (0, _useNonce3.default)(),
      _useNonce2 = _slicedToArray(_useNonce, 1),
      nonce = _useNonce2[0];

  var localize = useLocalizer();
  var ref = (0, _react.useRef)();
  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';
  var filmStyleSet = (0, _react.useMemo)(function () {
    return (0, _reactFilm.createBasicStyleSet)({
      autoHide: false,
      cursor: suggestedActionsCarouselFlipperCursor,
      flipperBoxWidth: suggestedActionsCarouselFlipperBoxWidth,
      flipperSize: suggestedActionsCarouselFlipperSize
    });
  }, [suggestedActionsCarouselFlipperBoxWidth, suggestedActionsCarouselFlipperCursor, suggestedActionsCarouselFlipperSize]);
  var nextFlipperAriaLabel = localize('SUGGESTED_ACTIONS_FLIPPER_NEXT_ALT');
  var previousFlipperAriaLabel = localize('SUGGESTED_ACTIONS_FLIPPER_PREVIOUS_ALT');

  var _useFocusWithin = (0, _useFocusWithin3.default)(ref),
      _useFocusWithin2 = _slicedToArray(_useFocusWithin, 1),
      focusedWithin = _useFocusWithin2[0];

  var leftFlipperAriaLabel = direction === 'rtl' ? nextFlipperAriaLabel : previousFlipperAriaLabel;
  var rightFlipperAriaLabel = direction === 'rtl' ? previousFlipperAriaLabel : nextFlipperAriaLabel;
  return (
    /*#__PURE__*/
    // TODO: The content of suggested actions should be the labelled by the activity.
    //       That means, when the user focus into the suggested actions, it should read similar to "Bot said, what's your preference of today? Suggested actions has items: apple button, orange button, banana button."
    _react.default.createElement("div", {
      "aria-label": label,
      "aria-orientation": "horizontal",
      className: (0, _classnames.default)('webchat__suggested-actions', 'webchat__suggested-actions--carousel-layout', {
        'webchat__suggested-actions--focus-within': focusedWithin,
        'webchat__suggested-actions--rtl': direction === 'rtl'
      }, rootClassName, suggestedActionsStyleSet + '', (className || '') + ''),
      ref: ref,
      role: "toolbar"
    }, !!children && !!_react.default.Children.count(children) && /*#__PURE__*/_react.default.createElement(_reactFilm.default, {
      autoCenter: false,
      className: "webchat__suggested-actions__carousel",
      dir: direction,
      flipperBlurFocusOnClick: true,
      leftFlipperAriaLabel: leftFlipperAriaLabel,
      nonce: nonce,
      rightFlipperAriaLabel: rightFlipperAriaLabel,
      showDots: false,
      showScrollBar: false,
      styleSet: filmStyleSet
    }, children), /*#__PURE__*/_react.default.createElement("div", {
      className: "webchat__suggested-actions__focus-indicator"
    }))
  );
};

SuggestedActionCarouselContainer.defaultProps = {
  children: undefined,
  className: undefined
};
SuggestedActionCarouselContainer.propTypes = {
  children: _propTypes.default.any,
  className: _propTypes.default.string,
  label: _propTypes.default.string.isRequired
};

var SuggestedActionFlowContainer = function SuggestedActionFlowContainer(_ref3) {
  var children = _ref3.children,
      className = _ref3.className,
      label = _ref3.label;

  var _useStyleSet3 = (0, _useStyleSet7.default)(),
      _useStyleSet4 = _slicedToArray(_useStyleSet3, 1),
      suggestedActionsStyleSet = _useStyleSet4[0].suggestedActions;

  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';
  return /*#__PURE__*/_react.default.createElement("div", {
    "aria-label": label,
    "aria-live": "polite",
    "aria-orientation": "horizontal",
    className: (0, _classnames.default)('webchat__suggested-actions', 'webchat__suggested-actions--flow-layout', rootClassName, suggestedActionsStyleSet + '', (className || '') + ''),
    role: "toolbar"
  }, !!children && !!_react.default.Children.count(children) && /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__suggested-actions__flow-box"
  }, _react.default.Children.map(children, function (child) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "webchat__suggested-actions__flow-item-box"
    }, child);
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__suggested-actions__focus-indicator"
  }));
};

SuggestedActionFlowContainer.defaultProps = {
  children: undefined,
  className: undefined
};
SuggestedActionFlowContainer.propTypes = {
  children: _propTypes.default.any,
  className: _propTypes.default.string,
  label: _propTypes.default.string.isRequired
};

var SuggestedActionStackedContainer = function SuggestedActionStackedContainer(_ref4) {
  var children = _ref4.children,
      className = _ref4.className,
      label = _ref4.label;

  var _useStyleSet5 = (0, _useStyleSet7.default)(),
      _useStyleSet6 = _slicedToArray(_useStyleSet5, 1),
      suggestedActionsStyleSet = _useStyleSet6[0].suggestedActions;

  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';
  return /*#__PURE__*/_react.default.createElement("div", {
    "aria-label": label,
    "aria-live": "polite",
    "aria-orientation": "vertical",
    className: (0, _classnames.default)('webchat__suggested-actions', 'webchat__suggested-actions--stacked-layout', rootClassName, suggestedActionsStyleSet + '', (className || '') + ''),
    role: "toolbar"
  }, !!children && !!_react.default.Children.count(children) && /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__suggested-actions__stack"
  }, children), /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__suggested-actions__focus-indicator"
  }));
};

SuggestedActionStackedContainer.defaultProps = {
  children: undefined,
  className: undefined
};
SuggestedActionStackedContainer.propTypes = {
  children: _propTypes.default.any,
  className: _propTypes.default.string,
  label: _propTypes.default.string.isRequired
};

var SuggestedActions = function SuggestedActions(_ref5) {
  var className = _ref5.className,
      _ref5$suggestedAction = _ref5.suggestedActions,
      suggestedActions = _ref5$suggestedAction === void 0 ? [] : _ref5$suggestedAction;

  var _useStyleOptions3 = useStyleOptions(),
      _useStyleOptions4 = _slicedToArray(_useStyleOptions3, 1),
      _useStyleOptions4$ = _useStyleOptions4[0],
      suggestedActionLayout = _useStyleOptions4$.suggestedActionLayout,
      suggestedActionsStackedLayoutButtonTextWrap = _useStyleOptions4$.suggestedActionsStackedLayoutButtonTextWrap;

  var localize = useLocalizer();
  var focus = (0, _useFocus.default)();
  var handleEscapeKey = (0, _react.useCallback)(function () {
    focus('sendBox');
  }, [focus]);
  var label = localize('SUGGESTED_ACTIONS_LABEL_ALT');
  var children = suggestedActions.map(function (cardAction, index) {
    var _ref6 = cardAction,
        displayText = _ref6.displayText,
        image = _ref6.image,
        imageAltText = _ref6.imageAltText,
        text = _ref6.text,
        type = _ref6.type,
        value = _ref6.value;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "webchat__suggested-actions__item-box",
      key: index
    }, /*#__PURE__*/_react.default.createElement(_SuggestedAction.default, {
      buttonText: (0, _computeSuggestedActionText.default)(cardAction),
      className: "webchat__suggested-actions__button",
      displayText: displayText,
      image: image // Image alt text should use `imageAltText` field and fallback to `text` field.
      // https://github.com/microsoft/botframework-sdk/blob/main/specs/botframework-activity/botframework-activity.md#image-alt-text
      ,
      imageAlt: image && (imageAltText || text),
      itemIndex: index,
      text: text,
      textClassName: suggestedActionLayout === 'stacked' && suggestedActionsStackedLayoutButtonTextWrap ? 'webchat__suggested-actions__button-text-stacked-text-wrap' : 'webchat__suggested-actions__button-text',
      type: type,
      value: value
    }));
  }); // If there are no suggested actions, we will render nothing.

  if (!children.length) {
    return null;
  }

  if (suggestedActionLayout === 'flow') {
    return /*#__PURE__*/_react.default.createElement(_RovingTabIndexComposer.default, {
      onEscapeKey: handleEscapeKey
    }, /*#__PURE__*/_react.default.createElement(SuggestedActionFlowContainer, {
      className: className,
      label: label
    }, children));
  } else if (suggestedActionLayout === 'stacked') {
    return /*#__PURE__*/_react.default.createElement(_RovingTabIndexComposer.default, {
      onEscapeKey: handleEscapeKey,
      orientation: "vertical"
    }, /*#__PURE__*/_react.default.createElement(SuggestedActionStackedContainer, {
      className: className,
      label: label
    }, children));
  }

  return /*#__PURE__*/_react.default.createElement(_RovingTabIndexComposer.default, {
    onEscapeKey: handleEscapeKey
  }, /*#__PURE__*/_react.default.createElement(SuggestedActionCarouselContainer, {
    className: className,
    label: label
  }, children));
};

SuggestedActions.defaultProps = {
  className: ''
};
SuggestedActions.propTypes = {
  className: _propTypes.default.string,
  // TypeScript class is not mappable to PropTypes.func
  // @ts-ignore
  suggestedActions: _propTypes.default.arrayOf(_propTypes.default.shape({
    displayText: _propTypes.default.string,
    image: _propTypes.default.string,
    imageAltText: _propTypes.default.string,
    text: _propTypes.default.string,
    title: _propTypes.default.string,
    type: _propTypes.default.string.isRequired,
    value: _propTypes.default.any
  })).isRequired
};

var _default = connectSuggestedActions()(SuggestedActions);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,