"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var useCreateAttachmentForScreenReaderRenderer = _botframeworkWebchatApi.hooks.useCreateAttachmentForScreenReaderRenderer,
    useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer;
var ACTIVITY_NUM_ATTACHMENTS_ALT_IDS = {
  few: 'ACTIVITY_NUM_ATTACHMENTS_FEW_ALT',
  many: 'ACTIVITY_NUM_ATTACHMENTS_MANY_ALT',
  one: 'ACTIVITY_NUM_ATTACHMENTS_ONE_ALT',
  other: 'ACTIVITY_NUM_ATTACHMENTS_OTHER_ALT',
  two: 'ACTIVITY_NUM_ATTACHMENTS_TWO_ALT'
};

// When "renderAttachments" is false, we will not render the content of attachments.
// That means, it will only render "2 attachments", instead of "image attachment".
// This is used in the visual transcript, where we render "Press ENTER to interact."
var LiveRegionAttachments = function LiveRegionAttachments(_ref) {
  var activity = _ref.activity;
  var _activity$attachments = activity.attachments,
      attachments = _activity$attachments === void 0 ? [] : _activity$attachments;
  var createAttachmentForScreenReaderRenderer = useCreateAttachmentForScreenReaderRenderer();
  var localizeWithPlural = useLocalizer({
    plural: true
  });
  var attachmentForScreenReaderRenderers = attachments.map(function (attachment) {
    return createAttachmentForScreenReaderRenderer({
      activity: activity,
      attachment: attachment
    });
  }).filter(Boolean);
  var numGenericAttachments = attachments.length - attachmentForScreenReaderRenderers.length;
  var numAttachmentsAlt = !!numGenericAttachments && localizeWithPlural(ACTIVITY_NUM_ATTACHMENTS_ALT_IDS, numGenericAttachments);
  return /*#__PURE__*/_react.default.createElement(_react.Fragment, null, attachmentForScreenReaderRenderers.map(function (render, index) {
    return (
      /*#__PURE__*/
      // Direct Line does not have key for attachment other than index.
      // eslint-disable-next-line react/no-array-index-key
      _react.default.createElement("div", {
        key: index
      }, render())
    );
  }), numAttachmentsAlt && /*#__PURE__*/_react.default.createElement("p", null, numAttachmentsAlt));
};

LiveRegionAttachments.propTypes = {
  // PropTypes is not fully compatible with TypeScript definition.
  // @ts-ignore
  activity: _propTypes.default.shape({
    attachments: _propTypes.default.array,
    type: _propTypes.default.oneOf(['message'])
  }).isRequired
};
var _default = LiveRegionAttachments;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1c2VDcmVhdGVBdHRhY2htZW50Rm9yU2NyZWVuUmVhZGVyUmVuZGVyZXIiLCJob29rcyIsInVzZUxvY2FsaXplciIsIkFDVElWSVRZX05VTV9BVFRBQ0hNRU5UU19BTFRfSURTIiwiZmV3IiwibWFueSIsIm9uZSIsIm90aGVyIiwidHdvIiwiTGl2ZVJlZ2lvbkF0dGFjaG1lbnRzIiwiYWN0aXZpdHkiLCJhdHRhY2htZW50cyIsImNyZWF0ZUF0dGFjaG1lbnRGb3JTY3JlZW5SZWFkZXJSZW5kZXJlciIsImxvY2FsaXplV2l0aFBsdXJhbCIsInBsdXJhbCIsImF0dGFjaG1lbnRGb3JTY3JlZW5SZWFkZXJSZW5kZXJlcnMiLCJtYXAiLCJhdHRhY2htZW50IiwiZmlsdGVyIiwiQm9vbGVhbiIsIm51bUdlbmVyaWNBdHRhY2htZW50cyIsImxlbmd0aCIsIm51bUF0dGFjaG1lbnRzQWx0IiwicmVuZGVyIiwiaW5kZXgiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJzaGFwZSIsImFycmF5IiwidHlwZSIsIm9uZU9mIiwiaXNSZXF1aXJlZCJdLCJzb3VyY2VSb290IjoiY29tcG9uZW50Oi8vLyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL0xpdmVSZWdpb24vcHJpdmF0ZS9MaXZlUmVnaW9uQXR0YWNobWVudHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGhvb2tzIH0gZnJvbSAnYm90ZnJhbWV3b3JrLXdlYmNoYXQtYXBpJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB0eXBlIHsgVkZDIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBXZWJDaGF0QWN0aXZpdHkgfSBmcm9tICdib3RmcmFtZXdvcmstd2ViY2hhdC1jb3JlJztcblxuY29uc3QgeyB1c2VDcmVhdGVBdHRhY2htZW50Rm9yU2NyZWVuUmVhZGVyUmVuZGVyZXIsIHVzZUxvY2FsaXplciB9ID0gaG9va3M7XG5cbmNvbnN0IEFDVElWSVRZX05VTV9BVFRBQ0hNRU5UU19BTFRfSURTID0ge1xuICBmZXc6ICdBQ1RJVklUWV9OVU1fQVRUQUNITUVOVFNfRkVXX0FMVCcsXG4gIG1hbnk6ICdBQ1RJVklUWV9OVU1fQVRUQUNITUVOVFNfTUFOWV9BTFQnLFxuICBvbmU6ICdBQ1RJVklUWV9OVU1fQVRUQUNITUVOVFNfT05FX0FMVCcsXG4gIG90aGVyOiAnQUNUSVZJVFlfTlVNX0FUVEFDSE1FTlRTX09USEVSX0FMVCcsXG4gIHR3bzogJ0FDVElWSVRZX05VTV9BVFRBQ0hNRU5UU19UV09fQUxUJ1xufTtcblxudHlwZSBMaXZlUmVnaW9uQXR0YWNobWVudHNQcm9wcyA9IHtcbiAgYWN0aXZpdHk6IFdlYkNoYXRBY3Rpdml0eSAmIHsgdHlwZTogJ21lc3NhZ2UnIH07XG59O1xuXG4vLyBXaGVuIFwicmVuZGVyQXR0YWNobWVudHNcIiBpcyBmYWxzZSwgd2Ugd2lsbCBub3QgcmVuZGVyIHRoZSBjb250ZW50IG9mIGF0dGFjaG1lbnRzLlxuLy8gVGhhdCBtZWFucywgaXQgd2lsbCBvbmx5IHJlbmRlciBcIjIgYXR0YWNobWVudHNcIiwgaW5zdGVhZCBvZiBcImltYWdlIGF0dGFjaG1lbnRcIi5cbi8vIFRoaXMgaXMgdXNlZCBpbiB0aGUgdmlzdWFsIHRyYW5zY3JpcHQsIHdoZXJlIHdlIHJlbmRlciBcIlByZXNzIEVOVEVSIHRvIGludGVyYWN0LlwiXG5jb25zdCBMaXZlUmVnaW9uQXR0YWNobWVudHM6IFZGQzxMaXZlUmVnaW9uQXR0YWNobWVudHNQcm9wcz4gPSAoeyBhY3Rpdml0eSB9KSA9PiB7XG4gIGNvbnN0IHsgYXR0YWNobWVudHMgPSBbXSB9ID0gYWN0aXZpdHk7XG4gIGNvbnN0IGNyZWF0ZUF0dGFjaG1lbnRGb3JTY3JlZW5SZWFkZXJSZW5kZXJlciA9IHVzZUNyZWF0ZUF0dGFjaG1lbnRGb3JTY3JlZW5SZWFkZXJSZW5kZXJlcigpO1xuICBjb25zdCBsb2NhbGl6ZVdpdGhQbHVyYWwgPSB1c2VMb2NhbGl6ZXIoeyBwbHVyYWw6IHRydWUgfSk7XG5cbiAgY29uc3QgYXR0YWNobWVudEZvclNjcmVlblJlYWRlclJlbmRlcmVycyA9IGF0dGFjaG1lbnRzXG4gICAgLm1hcChhdHRhY2htZW50ID0+IGNyZWF0ZUF0dGFjaG1lbnRGb3JTY3JlZW5SZWFkZXJSZW5kZXJlcih7IGFjdGl2aXR5LCBhdHRhY2htZW50IH0pKVxuICAgIC5maWx0ZXIoQm9vbGVhbik7XG5cbiAgY29uc3QgbnVtR2VuZXJpY0F0dGFjaG1lbnRzID0gYXR0YWNobWVudHMubGVuZ3RoIC0gYXR0YWNobWVudEZvclNjcmVlblJlYWRlclJlbmRlcmVycy5sZW5ndGg7XG5cbiAgY29uc3QgbnVtQXR0YWNobWVudHNBbHQgPVxuICAgICEhbnVtR2VuZXJpY0F0dGFjaG1lbnRzICYmIGxvY2FsaXplV2l0aFBsdXJhbChBQ1RJVklUWV9OVU1fQVRUQUNITUVOVFNfQUxUX0lEUywgbnVtR2VuZXJpY0F0dGFjaG1lbnRzKTtcblxuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIHthdHRhY2htZW50Rm9yU2NyZWVuUmVhZGVyUmVuZGVyZXJzLm1hcCgocmVuZGVyLCBpbmRleCkgPT4gKFxuICAgICAgICAvLyBEaXJlY3QgTGluZSBkb2VzIG5vdCBoYXZlIGtleSBmb3IgYXR0YWNobWVudCBvdGhlciB0aGFuIGluZGV4LlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tYXJyYXktaW5kZXgta2V5XG4gICAgICAgIDxkaXYga2V5PXtpbmRleH0+e3JlbmRlcigpfTwvZGl2PlxuICAgICAgKSl9XG4gICAgICB7bnVtQXR0YWNobWVudHNBbHQgJiYgPHA+e251bUF0dGFjaG1lbnRzQWx0fTwvcD59XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn07XG5cbkxpdmVSZWdpb25BdHRhY2htZW50cy5wcm9wVHlwZXMgPSB7XG4gIC8vIFByb3BUeXBlcyBpcyBub3QgZnVsbHkgY29tcGF0aWJsZSB3aXRoIFR5cGVTY3JpcHQgZGVmaW5pdGlvbi5cbiAgLy8gQHRzLWlnbm9yZVxuICBhY3Rpdml0eTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhdHRhY2htZW50czogUHJvcFR5cGVzLmFycmF5LFxuICAgIHR5cGU6IFByb3BUeXBlcy5vbmVPZihbJ21lc3NhZ2UnXSlcbiAgfSkuaXNSZXF1aXJlZFxufTtcblxuZXhwb3J0IGRlZmF1bHQgTGl2ZVJlZ2lvbkF0dGFjaG1lbnRzO1xuXG5leHBvcnQgdHlwZSB7IExpdmVSZWdpb25BdHRhY2htZW50c1Byb3BzIH07XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7Ozs7OztBQUtBLElBQVFBLDBDQUFSLEdBQXFFQyw2QkFBckUsQ0FBUUQsMENBQVI7QUFBQSxJQUFvREUsWUFBcEQsR0FBcUVELDZCQUFyRSxDQUFvREMsWUFBcEQ7QUFFQSxJQUFNQyxnQ0FBZ0MsR0FBRztFQUN2Q0MsR0FBRyxFQUFFLGtDQURrQztFQUV2Q0MsSUFBSSxFQUFFLG1DQUZpQztFQUd2Q0MsR0FBRyxFQUFFLGtDQUhrQztFQUl2Q0MsS0FBSyxFQUFFLG9DQUpnQztFQUt2Q0MsR0FBRyxFQUFFO0FBTGtDLENBQXpDOztBQVlBO0FBQ0E7QUFDQTtBQUNBLElBQU1DLHFCQUFzRCxHQUFHLFNBQXpEQSxxQkFBeUQsT0FBa0I7RUFBQSxJQUFmQyxRQUFlLFFBQWZBLFFBQWU7RUFDL0UsNEJBQTZCQSxRQUE3QixDQUFRQyxXQUFSO0VBQUEsSUFBUUEsV0FBUixzQ0FBc0IsRUFBdEI7RUFDQSxJQUFNQyx1Q0FBdUMsR0FBR1osMENBQTBDLEVBQTFGO0VBQ0EsSUFBTWEsa0JBQWtCLEdBQUdYLFlBQVksQ0FBQztJQUFFWSxNQUFNLEVBQUU7RUFBVixDQUFELENBQXZDO0VBRUEsSUFBTUMsa0NBQWtDLEdBQUdKLFdBQVcsQ0FDbkRLLEdBRHdDLENBQ3BDLFVBQUFDLFVBQVU7SUFBQSxPQUFJTCx1Q0FBdUMsQ0FBQztNQUFFRixRQUFRLEVBQVJBLFFBQUY7TUFBWU8sVUFBVSxFQUFWQTtJQUFaLENBQUQsQ0FBM0M7RUFBQSxDQUQwQixFQUV4Q0MsTUFGd0MsQ0FFakNDLE9BRmlDLENBQTNDO0VBSUEsSUFBTUMscUJBQXFCLEdBQUdULFdBQVcsQ0FBQ1UsTUFBWixHQUFxQk4sa0NBQWtDLENBQUNNLE1BQXRGO0VBRUEsSUFBTUMsaUJBQWlCLEdBQ3JCLENBQUMsQ0FBQ0YscUJBQUYsSUFBMkJQLGtCQUFrQixDQUFDVixnQ0FBRCxFQUFtQ2lCLHFCQUFuQyxDQUQvQztFQUdBLG9CQUNFLDZCQUFDLGVBQUQsUUFDR0wsa0NBQWtDLENBQUNDLEdBQW5DLENBQXVDLFVBQUNPLE1BQUQsRUFBU0MsS0FBVDtJQUFBO01BQUE7TUFDdEM7TUFDQTtNQUNBO1FBQUssR0FBRyxFQUFFQTtNQUFWLEdBQWtCRCxNQUFNLEVBQXhCO0lBSHNDO0VBQUEsQ0FBdkMsQ0FESCxFQU1HRCxpQkFBaUIsaUJBQUksd0NBQUlBLGlCQUFKLENBTnhCLENBREY7QUFVRCxDQXhCRDs7QUEwQkFiLHFCQUFxQixDQUFDZ0IsU0FBdEIsR0FBa0M7RUFDaEM7RUFDQTtFQUNBZixRQUFRLEVBQUVnQixrQkFBQSxDQUFVQyxLQUFWLENBQWdCO0lBQ3hCaEIsV0FBVyxFQUFFZSxrQkFBQSxDQUFVRSxLQURDO0lBRXhCQyxJQUFJLEVBQUVILGtCQUFBLENBQVVJLEtBQVYsQ0FBZ0IsQ0FBQyxTQUFELENBQWhCO0VBRmtCLENBQWhCLEVBR1BDO0FBTjZCLENBQWxDO2VBU2V0QixxQiJ9