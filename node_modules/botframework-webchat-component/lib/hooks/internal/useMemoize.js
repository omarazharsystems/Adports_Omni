"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useMemoize;

var _react = require("react");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * `useMemoize` will memoize multiple calls to the same memoize function.
 *
 * This is similar to `useMemo`. But instead of calling it once, `useMemoize` enables multiple calls while the `callback` function is executed.
 *
 * @param {Fn<TArgs, TIntermediate>} fn - The function to be memoized.
 * @param {(fn: Fn<TArgs, TIntermediate>) => TFinal} callback - When called, this function should execute the memoizing function.
 * @param {DependencyList[]} deps - Dependencies to detect for chagnes.
 */
function useMemoize(fn, callback, deps) {
  if (typeof fn !== 'function') {
    throw new Error('The first argument must be a function.');
  } else if (typeof callback !== 'function') {
    throw new Error('The second argument must be a function.');
  } else if (!Array.isArray(deps)) {
    throw new Error('The third argument must be an array.');
  }

  var memoizedFn = (0, _react.useMemo)(function () {
    var cache = [];
    return function (run) {
      var nextCache = [];
      var result = run(function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var _ref = [].concat(_toConsumableArray(cache), nextCache).find(function (_ref2) {
          var cachedArgs = _ref2.args;
          return args.length === cachedArgs.length && args.every(function (arg, index) {
            return Object.is(arg, cachedArgs[+index]);
          });
        }) || {
          result: fn.apply(void 0, args)
        },
            result = _ref.result;

        nextCache.push({
          args: args,
          result: result
        });
        return result;
      });
      cache = nextCache;
      return result;
    }; // We are manually creating the deps here. The "callback" arg is also designed not to be impact deps, similar to useEffect(fn), where "fn" is not in deps.

    /* eslint-disable-next-line react-hooks/exhaustive-deps */
  }, [fn].concat(_toConsumableArray(deps)));
  return memoizedFn(callback);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1c2VNZW1vaXplIiwiZm4iLCJjYWxsYmFjayIsImRlcHMiLCJFcnJvciIsIkFycmF5IiwiaXNBcnJheSIsIm1lbW9pemVkRm4iLCJ1c2VNZW1vIiwiY2FjaGUiLCJydW4iLCJuZXh0Q2FjaGUiLCJyZXN1bHQiLCJhcmdzIiwiZmluZCIsImNhY2hlZEFyZ3MiLCJsZW5ndGgiLCJldmVyeSIsImFyZyIsImluZGV4IiwiT2JqZWN0IiwiaXMiLCJwdXNoIl0sInNvdXJjZVJvb3QiOiJjb21wb25lbnQ6Ly8vIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaG9va3MvaW50ZXJuYWwvdXNlTWVtb2l6ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEZXBlbmRlbmN5TGlzdCwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcblxudHlwZSBDYWNoZTxUQXJncywgVFJlc3VsdD4gPSB7IGFyZ3M6IFRBcmdzW107IHJlc3VsdDogVFJlc3VsdCB9O1xudHlwZSBGbjxUQXJncywgVFJlc3VsdD4gPSAoLi4uYXJnczogVEFyZ3NbXSkgPT4gVFJlc3VsdDtcblxuLyoqXG4gKiBgdXNlTWVtb2l6ZWAgd2lsbCBtZW1vaXplIG11bHRpcGxlIGNhbGxzIHRvIHRoZSBzYW1lIG1lbW9pemUgZnVuY3Rpb24uXG4gKlxuICogVGhpcyBpcyBzaW1pbGFyIHRvIGB1c2VNZW1vYC4gQnV0IGluc3RlYWQgb2YgY2FsbGluZyBpdCBvbmNlLCBgdXNlTWVtb2l6ZWAgZW5hYmxlcyBtdWx0aXBsZSBjYWxscyB3aGlsZSB0aGUgYGNhbGxiYWNrYCBmdW5jdGlvbiBpcyBleGVjdXRlZC5cbiAqXG4gKiBAcGFyYW0ge0ZuPFRBcmdzLCBUSW50ZXJtZWRpYXRlPn0gZm4gLSBUaGUgZnVuY3Rpb24gdG8gYmUgbWVtb2l6ZWQuXG4gKiBAcGFyYW0geyhmbjogRm48VEFyZ3MsIFRJbnRlcm1lZGlhdGU+KSA9PiBURmluYWx9IGNhbGxiYWNrIC0gV2hlbiBjYWxsZWQsIHRoaXMgZnVuY3Rpb24gc2hvdWxkIGV4ZWN1dGUgdGhlIG1lbW9pemluZyBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7RGVwZW5kZW5jeUxpc3RbXX0gZGVwcyAtIERlcGVuZGVuY2llcyB0byBkZXRlY3QgZm9yIGNoYWduZXMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZU1lbW9pemU8VEludGVybWVkaWF0ZSwgVEZpbmFsPihcbiAgZm46IEZuPHVua25vd24sIFRJbnRlcm1lZGlhdGU+LFxuICBjYWxsYmFjazogKGZuOiBGbjx1bmtub3duLCBUSW50ZXJtZWRpYXRlPikgPT4gVEZpbmFsLFxuICBkZXBzOiBEZXBlbmRlbmN5TGlzdFtdXG4pOiBURmluYWwge1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignVGhlIHNlY29uZCBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkoZGVwcykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSB0aGlyZCBhcmd1bWVudCBtdXN0IGJlIGFuIGFycmF5LicpO1xuICB9XG5cbiAgY29uc3QgbWVtb2l6ZWRGbiA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGxldCBjYWNoZTogQ2FjaGU8dW5rbm93biwgVEludGVybWVkaWF0ZT5bXSA9IFtdO1xuXG4gICAgcmV0dXJuIChydW46IChmbjogRm48dW5rbm93biwgVEludGVybWVkaWF0ZT4pID0+IFRGaW5hbCkgPT4ge1xuICAgICAgY29uc3QgbmV4dENhY2hlOiBDYWNoZTx1bmtub3duLCBUSW50ZXJtZWRpYXRlPltdID0gW107XG4gICAgICBjb25zdCByZXN1bHQgPSBydW4oKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgY29uc3QgeyByZXN1bHQgfSA9IFsuLi5jYWNoZSwgLi4ubmV4dENhY2hlXS5maW5kKFxuICAgICAgICAgICh7IGFyZ3M6IGNhY2hlZEFyZ3MgfSkgPT5cbiAgICAgICAgICAgIGFyZ3MubGVuZ3RoID09PSBjYWNoZWRBcmdzLmxlbmd0aCAmJiBhcmdzLmV2ZXJ5KChhcmcsIGluZGV4KSA9PiBPYmplY3QuaXMoYXJnLCBjYWNoZWRBcmdzWytpbmRleF0pKVxuICAgICAgICApIHx8IHsgcmVzdWx0OiBmbiguLi5hcmdzKSB9O1xuXG4gICAgICAgIG5leHRDYWNoZS5wdXNoKHsgYXJncywgcmVzdWx0IH0pO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9KTtcblxuICAgICAgY2FjaGUgPSBuZXh0Q2FjaGU7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICAvLyBXZSBhcmUgbWFudWFsbHkgY3JlYXRpbmcgdGhlIGRlcHMgaGVyZS4gVGhlIFwiY2FsbGJhY2tcIiBhcmcgaXMgYWxzbyBkZXNpZ25lZCBub3QgdG8gYmUgaW1wYWN0IGRlcHMsIHNpbWlsYXIgdG8gdXNlRWZmZWN0KGZuKSwgd2hlcmUgXCJmblwiIGlzIG5vdCBpbiBkZXBzLlxuICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHMgKi9cbiAgfSwgW2ZuLCAuLi5kZXBzXSk7XG5cbiAgcmV0dXJuIG1lbW9pemVkRm4oY2FsbGJhY2spO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2UsU0FBU0EsVUFBVCxDQUNiQyxFQURhLEVBRWJDLFFBRmEsRUFHYkMsSUFIYSxFQUlMO0VBQ1IsSUFBSSxPQUFPRixFQUFQLEtBQWMsVUFBbEIsRUFBOEI7SUFDNUIsTUFBTSxJQUFJRyxLQUFKLENBQVUsd0NBQVYsQ0FBTjtFQUNELENBRkQsTUFFTyxJQUFJLE9BQU9GLFFBQVAsS0FBb0IsVUFBeEIsRUFBb0M7SUFDekMsTUFBTSxJQUFJRSxLQUFKLENBQVUseUNBQVYsQ0FBTjtFQUNELENBRk0sTUFFQSxJQUFJLENBQUNDLEtBQUssQ0FBQ0MsT0FBTixDQUFjSCxJQUFkLENBQUwsRUFBMEI7SUFDL0IsTUFBTSxJQUFJQyxLQUFKLENBQVUsc0NBQVYsQ0FBTjtFQUNEOztFQUVELElBQU1HLFVBQVUsR0FBRyxJQUFBQyxjQUFBLEVBQVEsWUFBTTtJQUMvQixJQUFJQyxLQUFzQyxHQUFHLEVBQTdDO0lBRUEsT0FBTyxVQUFDQyxHQUFELEVBQXFEO01BQzFELElBQU1DLFNBQTBDLEdBQUcsRUFBbkQ7TUFDQSxJQUFNQyxNQUFNLEdBQUdGLEdBQUcsQ0FBQyxZQUFhO1FBQUEsa0NBQVRHLElBQVM7VUFBVEEsSUFBUztRQUFBOztRQUM5QixXQUFtQiw2QkFBSUosS0FBSixHQUFjRSxTQUFkLEVBQXlCRyxJQUF6QixDQUNqQjtVQUFBLElBQVNDLFVBQVQsU0FBR0YsSUFBSDtVQUFBLE9BQ0VBLElBQUksQ0FBQ0csTUFBTCxLQUFnQkQsVUFBVSxDQUFDQyxNQUEzQixJQUFxQ0gsSUFBSSxDQUFDSSxLQUFMLENBQVcsVUFBQ0MsR0FBRCxFQUFNQyxLQUFOO1lBQUEsT0FBZ0JDLE1BQU0sQ0FBQ0MsRUFBUCxDQUFVSCxHQUFWLEVBQWVILFVBQVUsQ0FBQyxDQUFDSSxLQUFGLENBQXpCLENBQWhCO1VBQUEsQ0FBWCxDQUR2QztRQUFBLENBRGlCLEtBR2Q7VUFBRVAsTUFBTSxFQUFFWCxFQUFFLE1BQUYsU0FBTVksSUFBTjtRQUFWLENBSEw7UUFBQSxJQUFRRCxNQUFSLFFBQVFBLE1BQVI7O1FBS0FELFNBQVMsQ0FBQ1csSUFBVixDQUFlO1VBQUVULElBQUksRUFBSkEsSUFBRjtVQUFRRCxNQUFNLEVBQU5BO1FBQVIsQ0FBZjtRQUVBLE9BQU9BLE1BQVA7TUFDRCxDQVRpQixDQUFsQjtNQVdBSCxLQUFLLEdBQUdFLFNBQVI7TUFFQSxPQUFPQyxNQUFQO0lBQ0QsQ0FoQkQsQ0FIK0IsQ0FvQi9COztJQUNBO0VBQ0QsQ0F0QmtCLEdBc0JmWCxFQXRCZSw0QkFzQlJFLElBdEJRLEdBQW5CO0VBd0JBLE9BQU9JLFVBQVUsQ0FBQ0wsUUFBRCxDQUFqQjtBQUNEIn0=