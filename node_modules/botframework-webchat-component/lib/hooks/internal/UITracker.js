"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _react = require("react");

var _downscaleImageToDataURLUsingWorker = require("../../Utils/downscaleImageToDataURL/downscaleImageToDataURLUsingWorker");

var _BypassSpeechSynthesisPonyfill = require("./BypassSpeechSynthesisPonyfill");

var _useWebSpeechPonyfill3 = _interopRequireDefault(require("../useWebSpeechPonyfill"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useTrackDimension = _botframeworkWebchatApi.hooks.useTrackDimension;

var Tracker = function Tracker() {
  var _useWebSpeechPonyfill = (0, _useWebSpeechPonyfill3.default)(),
      _useWebSpeechPonyfill2 = _slicedToArray(_useWebSpeechPonyfill, 1),
      webSpeechPonyfill = _useWebSpeechPonyfill2[0];

  var trackDimension = useTrackDimension();
  var speechRecognitionCapability = !!webSpeechPonyfill.SpeechRecognition;
  var speechSynthesisCapability = webSpeechPonyfill.speechSynthesis && webSpeechPonyfill.speechSynthesis !== _BypassSpeechSynthesisPonyfill.speechSynthesis;
  (0, _react.useEffect)(function () {
    trackDimension('capability:downscaleImage:workerType', (0, _downscaleImageToDataURLUsingWorker.checkSupport)() ? 'web worker' : 'main');
    trackDimension('capability:renderer', 'html'); // TODO: [P2] #2937 Differentiate between Cognitive Services and browser speech

    trackDimension('prop:speechRecognition', !!speechRecognitionCapability + '');
    trackDimension('prop:speechSynthesis', !!speechSynthesisCapability + '');
  }, [trackDimension, speechRecognitionCapability, speechSynthesisCapability]);
  return false;
};

var _default = Tracker;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1c2VUcmFja0RpbWVuc2lvbiIsImhvb2tzIiwiVHJhY2tlciIsInVzZVdlYlNwZWVjaFBvbnlmaWxsIiwid2ViU3BlZWNoUG9ueWZpbGwiLCJ0cmFja0RpbWVuc2lvbiIsInNwZWVjaFJlY29nbml0aW9uQ2FwYWJpbGl0eSIsIlNwZWVjaFJlY29nbml0aW9uIiwic3BlZWNoU3ludGhlc2lzQ2FwYWJpbGl0eSIsInNwZWVjaFN5bnRoZXNpcyIsInVzZUVmZmVjdCIsInN1cHBvcnRXb3JrZXIiXSwic291cmNlUm9vdCI6ImNvbXBvbmVudDovLy8iLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ob29rcy9pbnRlcm5hbC9VSVRyYWNrZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaG9va3MgfSBmcm9tICdib3RmcmFtZXdvcmstd2ViY2hhdC1hcGknO1xuaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBjaGVja1N1cHBvcnQgYXMgc3VwcG9ydFdvcmtlciB9IGZyb20gJy4uLy4uL1V0aWxzL2Rvd25zY2FsZUltYWdlVG9EYXRhVVJML2Rvd25zY2FsZUltYWdlVG9EYXRhVVJMVXNpbmdXb3JrZXInO1xuaW1wb3J0IHsgc3BlZWNoU3ludGhlc2lzIH0gZnJvbSAnLi9CeXBhc3NTcGVlY2hTeW50aGVzaXNQb255ZmlsbCc7XG5pbXBvcnQgdXNlV2ViU3BlZWNoUG9ueWZpbGwgZnJvbSAnLi4vdXNlV2ViU3BlZWNoUG9ueWZpbGwnO1xuXG5jb25zdCB7IHVzZVRyYWNrRGltZW5zaW9uIH0gPSBob29rcztcblxuY29uc3QgVHJhY2tlciA9ICgpID0+IHtcbiAgY29uc3QgW3dlYlNwZWVjaFBvbnlmaWxsXSA9IHVzZVdlYlNwZWVjaFBvbnlmaWxsKCk7XG4gIGNvbnN0IHRyYWNrRGltZW5zaW9uID0gdXNlVHJhY2tEaW1lbnNpb24oKTtcblxuICBjb25zdCBzcGVlY2hSZWNvZ25pdGlvbkNhcGFiaWxpdHkgPSAhIXdlYlNwZWVjaFBvbnlmaWxsLlNwZWVjaFJlY29nbml0aW9uO1xuICBjb25zdCBzcGVlY2hTeW50aGVzaXNDYXBhYmlsaXR5ID1cbiAgICB3ZWJTcGVlY2hQb255ZmlsbC5zcGVlY2hTeW50aGVzaXMgJiYgd2ViU3BlZWNoUG9ueWZpbGwuc3BlZWNoU3ludGhlc2lzICE9PSBzcGVlY2hTeW50aGVzaXM7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICB0cmFja0RpbWVuc2lvbignY2FwYWJpbGl0eTpkb3duc2NhbGVJbWFnZTp3b3JrZXJUeXBlJywgc3VwcG9ydFdvcmtlcigpID8gJ3dlYiB3b3JrZXInIDogJ21haW4nKTtcbiAgICB0cmFja0RpbWVuc2lvbignY2FwYWJpbGl0eTpyZW5kZXJlcicsICdodG1sJyk7XG5cbiAgICAvLyBUT0RPOiBbUDJdICMyOTM3IERpZmZlcmVudGlhdGUgYmV0d2VlbiBDb2duaXRpdmUgU2VydmljZXMgYW5kIGJyb3dzZXIgc3BlZWNoXG4gICAgdHJhY2tEaW1lbnNpb24oJ3Byb3A6c3BlZWNoUmVjb2duaXRpb24nLCAhIXNwZWVjaFJlY29nbml0aW9uQ2FwYWJpbGl0eSArICcnKTtcbiAgICB0cmFja0RpbWVuc2lvbigncHJvcDpzcGVlY2hTeW50aGVzaXMnLCAhIXNwZWVjaFN5bnRoZXNpc0NhcGFiaWxpdHkgKyAnJyk7XG4gIH0sIFt0cmFja0RpbWVuc2lvbiwgc3BlZWNoUmVjb2duaXRpb25DYXBhYmlsaXR5LCBzcGVlY2hTeW50aGVzaXNDYXBhYmlsaXR5XSk7XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVHJhY2tlcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsSUFBUUEsaUJBQVIsR0FBOEJDLDZCQUE5QixDQUFRRCxpQkFBUjs7QUFFQSxJQUFNRSxPQUFPLEdBQUcsU0FBVkEsT0FBVSxHQUFNO0VBQ3BCLDRCQUE0QixJQUFBQyw4QkFBQSxHQUE1QjtFQUFBO0VBQUEsSUFBT0MsaUJBQVA7O0VBQ0EsSUFBTUMsY0FBYyxHQUFHTCxpQkFBaUIsRUFBeEM7RUFFQSxJQUFNTSwyQkFBMkIsR0FBRyxDQUFDLENBQUNGLGlCQUFpQixDQUFDRyxpQkFBeEQ7RUFDQSxJQUFNQyx5QkFBeUIsR0FDN0JKLGlCQUFpQixDQUFDSyxlQUFsQixJQUFxQ0wsaUJBQWlCLENBQUNLLGVBQWxCLEtBQXNDQSw4Q0FEN0U7RUFHQSxJQUFBQyxnQkFBQSxFQUFVLFlBQU07SUFDZEwsY0FBYyxDQUFDLHNDQUFELEVBQXlDLElBQUFNLGdEQUFBLE1BQWtCLFlBQWxCLEdBQWlDLE1BQTFFLENBQWQ7SUFDQU4sY0FBYyxDQUFDLHFCQUFELEVBQXdCLE1BQXhCLENBQWQsQ0FGYyxDQUlkOztJQUNBQSxjQUFjLENBQUMsd0JBQUQsRUFBMkIsQ0FBQyxDQUFDQywyQkFBRixHQUFnQyxFQUEzRCxDQUFkO0lBQ0FELGNBQWMsQ0FBQyxzQkFBRCxFQUF5QixDQUFDLENBQUNHLHlCQUFGLEdBQThCLEVBQXZELENBQWQ7RUFDRCxDQVBELEVBT0csQ0FBQ0gsY0FBRCxFQUFpQkMsMkJBQWpCLEVBQThDRSx5QkFBOUMsQ0FQSDtFQVNBLE9BQU8sS0FBUDtBQUNELENBbEJEOztlQW9CZU4sTyJ9