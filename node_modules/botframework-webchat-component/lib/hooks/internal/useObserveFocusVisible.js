"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useObserveFocusVisible;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _react = require("react");

var _supportPseudoClass = _interopRequireDefault(require("../../Utils/supportPseudoClass"));

var _useNonce3 = _interopRequireDefault(require("./useNonce"));

var _useValueRef = _interopRequireDefault(require("./useValueRef"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var usePonyfill = _botframeworkWebchatApi.hooks.usePonyfill;
var INPUT_TYPES_ALLOW_LIST = ['date', 'datetime-local', 'datetime', 'email', 'month', 'number', 'password', 'search', 'tel', 'text', 'time', 'url', 'week'];
/**
 * Computes whether the given element should automatically trigger the
 * `focus-visible` class being added, i.e. whether it should always match
 * `:focus-visible` when focused.
 * @param {Element} el
 * @return {boolean}
 */

function focusTriggersKeyboardModality(el) {
  var isContentEditable = el.isContentEditable,
      readOnly = el.readOnly,
      tagName = el.tagName,
      type = el.type;
  return tagName === 'INPUT' && INPUT_TYPES_ALLOW_LIST.includes(type) && !readOnly || tagName === 'TEXTAREA' && !readOnly || isContentEditable;
}

function createEventSubscription(target, types, handler) {
  var subscribed;

  var subscribe = function subscribe() {
    if (!subscribed) {
      types.forEach(function (type) {
        return target.addEventListener(type, handler);
      });
      subscribed = true;
    }
  };

  var unsubscribe = function unsubscribe() {
    if (subscribed) {
      types.forEach(function (type) {
        return target.removeEventListener(type, handler);
      });
      subscribed = undefined;
    }
  };

  return {
    pause: unsubscribe,
    resume: subscribe
  };
} // TODO: Add tests
//       1. Focus via keyboard vs. mouse
//       2. Focus via keyboard, switch app, switch back (expect to get another focusVisible after switch back)
//       3. Focus via mouse, switch app, switch back (do NOT expect to get another focusVisible after switch back)


function useObserveFocusVisibleForLegacyBrowsers(targetRef, onFocusVisibleRef) {
  var _usePonyfill = usePonyfill(),
      _usePonyfill2 = _slicedToArray(_usePonyfill, 1),
      Date = _usePonyfill2[0].Date; // This polyfill algorithm is adopted from https://github.com/WICG/focus-visible.


  var blurSinceRef = (0, _react.useRef)(0);
  var hadKeyboardEventRef = (0, _react.useRef)(true);
  var hasFocusVisibleRef = (0, _react.useRef)(false);
  var eventSubscription = (0, _react.useMemo)(function () {
    return createEventSubscription(document, ['mousemove', 'mousedown', 'mouseup', 'pointermove', 'pointerdown', 'pointerup', 'touchmove', 'touchstart', 'touchend'], function (event) {
      var _nodeName;

      if (((_nodeName = event.target.nodeName) === null || _nodeName === void 0 ? void 0 : _nodeName.toLowerCase()) !== 'html') {
        hadKeyboardEventRef.current = false;
        eventSubscription.pause();
      }
    });
  }, [hadKeyboardEventRef]);
  var setHasFocusVisible = (0, _react.useCallback)(function (nextHasFocusVisible) {
    if (hasFocusVisibleRef.current !== nextHasFocusVisible) {
      hasFocusVisibleRef.current = nextHasFocusVisible;
      nextHasFocusVisible && (onFocusVisibleRef === null || onFocusVisibleRef === void 0 ? void 0 : onFocusVisibleRef.current());
    }
  }, [hasFocusVisibleRef, onFocusVisibleRef]);
  var handleKeyDown = (0, _react.useCallback)(function (event) {
    if (event.altKey || event.ctrlKey || event.metaKey) {
      return;
    }

    if (event.target === targetRef.current) {
      setHasFocusVisible(true);
    }

    hadKeyboardEventRef.current = true;
  }, [hadKeyboardEventRef, setHasFocusVisible, targetRef]);
  var handlePointerDown = (0, _react.useCallback)(function () {
    hadKeyboardEventRef.current = false;
  }, [hadKeyboardEventRef]);
  var handleFocus = (0, _react.useCallback)(function (_ref) {
    var target = _ref.target;
    target === targetRef.current && (hadKeyboardEventRef.current || focusTriggersKeyboardModality(target)) && setHasFocusVisible(true);
  }, [hadKeyboardEventRef, setHasFocusVisible, targetRef]);
  var handleBlur = (0, _react.useCallback)(function (event) {
    if (event.target === targetRef.current && hasFocusVisibleRef.current) {
      blurSinceRef.current = Date.now();
      setHasFocusVisible(false);
    }
  }, [blurSinceRef, Date, hasFocusVisibleRef, setHasFocusVisible, targetRef]);
  var handleVisibilityChange = (0, _react.useCallback)(function () {
    if (document.visibilityState === 'hidden') {
      // The element is blurred due to "visibilityState" set to "hidden".
      // 100ms is referenced from the WICG polyfill.
      // eslint-disable-next-line no-magic-numbers
      if (Date.now() - blurSinceRef.current < 100) {
        hadKeyboardEventRef.current = true;
      }

      eventSubscription.resume();
    }
  }, [blurSinceRef, Date, eventSubscription, hadKeyboardEventRef]);
  (0, _react.useEffect)(function () {
    document.addEventListener('keydown', handleKeyDown, true);
    document.addEventListener('mousedown', handlePointerDown, true);
    document.addEventListener('pointerdown', handlePointerDown, true);
    document.addEventListener('touchstart', handlePointerDown, true);
    document.addEventListener('visibilitychange', handleVisibilityChange, true);
    return function () {
      document.removeEventListener('keydown', handleKeyDown);
      document.removeEventListener('mousedown', handlePointerDown);
      document.removeEventListener('pointerdown', handlePointerDown);
      document.removeEventListener('touchstart', handlePointerDown);
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    };
  }, [handleKeyDown, handlePointerDown, handleVisibilityChange]);
  (0, _react.useEffect)(function () {
    var target = targetRef.current;
    target.addEventListener('blur', handleBlur, true);
    target.addEventListener('focus', handleFocus, true);
    return function () {
      target.removeEventListener('blur', handleBlur);
      target.removeEventListener('focus', handleFocus);
    }; // We specifically add "targetRef.current" here.
    // If the target element changed, we should reattach our event listeners.
  }, [handleBlur, handleFocus, targetRef]);
  (0, _react.useEffect)(function () {
    eventSubscription.resume();
    return function () {
      return eventSubscription.pause();
    };
  }, [eventSubscription]);
}

function useObserveFocusVisibleForModernBrowsers(targetRef, onFocusVisibleRef) {
  var handleFocus = (0, _react.useCallback)(function () {
    var current = targetRef.current;

    if ( // "msMatchesSelector" is vendor-prefixed version of "matches".
    // eslint-disable-next-line dot-notation
    (current.matches || current['msMatchesSelector']).call(current, ':focus-visible')) {
      onFocusVisibleRef === null || onFocusVisibleRef === void 0 ? void 0 : onFocusVisibleRef.current();
    }
  }, [onFocusVisibleRef, targetRef]);
  (0, _react.useEffect)(function () {
    var target = targetRef.current;
    target.addEventListener('focus', handleFocus);
    return function () {
      return target.removeEventListener('focus', handleFocus);
    }; // We specifically add "targetRef.current" here.
    // If the target element changed, we should reattach our event listeners.
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [handleFocus, targetRef, targetRef.current]);
}

function useObserveFocusVisible(targetRef, onFocusVisible) {
  var _useNonce = (0, _useNonce3.default)(),
      _useNonce2 = _slicedToArray(_useNonce, 1),
      nonce = _useNonce2[0];

  var onFocusVisibleRef = (0, _useValueRef.default)(onFocusVisible); // The nonce is use for browser capabilities. Just in case the "nonce" had changed unexpectedly, the capabilities of the browser should never change.
  // Thus, we are using an initial version of "nonce". In case web devs changed the "nonce" to an invalid value, we won't break rules of hooks (as stated below).

  var nonceRef = (0, _react.useRef)(nonce); // ":focus-visible" selector is supported from Chrome/Edge 86+ and not supported in IE11 or Safari.
  // Doing a capability check on pseudo classes requires injecting a stylesheet, thus nonce is needed.

  var supportFocusVisible = (0, _react.useMemo)(function () {
    return (0, _supportPseudoClass.default)(':focus-visible', nonceRef.current);
  }, [nonceRef]); // Since "supportPseudoClass" is a browser capability, the result should be constant during the page lifetime.
  // Thus, running hooks conditionally is okay here.

  if (supportFocusVisible) {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    useObserveFocusVisibleForModernBrowsers(targetRef, onFocusVisibleRef);
  } else {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    useObserveFocusVisibleForLegacyBrowsers(targetRef, onFocusVisibleRef);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1c2VQb255ZmlsbCIsImhvb2tzIiwiSU5QVVRfVFlQRVNfQUxMT1dfTElTVCIsImZvY3VzVHJpZ2dlcnNLZXlib2FyZE1vZGFsaXR5IiwiZWwiLCJpc0NvbnRlbnRFZGl0YWJsZSIsInJlYWRPbmx5IiwidGFnTmFtZSIsInR5cGUiLCJpbmNsdWRlcyIsImNyZWF0ZUV2ZW50U3Vic2NyaXB0aW9uIiwidGFyZ2V0IiwidHlwZXMiLCJoYW5kbGVyIiwic3Vic2NyaWJlZCIsInN1YnNjcmliZSIsImZvckVhY2giLCJhZGRFdmVudExpc3RlbmVyIiwidW5zdWJzY3JpYmUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidW5kZWZpbmVkIiwicGF1c2UiLCJyZXN1bWUiLCJ1c2VPYnNlcnZlRm9jdXNWaXNpYmxlRm9yTGVnYWN5QnJvd3NlcnMiLCJ0YXJnZXRSZWYiLCJvbkZvY3VzVmlzaWJsZVJlZiIsIkRhdGUiLCJibHVyU2luY2VSZWYiLCJ1c2VSZWYiLCJoYWRLZXlib2FyZEV2ZW50UmVmIiwiaGFzRm9jdXNWaXNpYmxlUmVmIiwiZXZlbnRTdWJzY3JpcHRpb24iLCJ1c2VNZW1vIiwiZG9jdW1lbnQiLCJldmVudCIsIm5vZGVOYW1lIiwidG9Mb3dlckNhc2UiLCJjdXJyZW50Iiwic2V0SGFzRm9jdXNWaXNpYmxlIiwidXNlQ2FsbGJhY2siLCJuZXh0SGFzRm9jdXNWaXNpYmxlIiwiaGFuZGxlS2V5RG93biIsImFsdEtleSIsImN0cmxLZXkiLCJtZXRhS2V5IiwiaGFuZGxlUG9pbnRlckRvd24iLCJoYW5kbGVGb2N1cyIsImhhbmRsZUJsdXIiLCJub3ciLCJoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlIiwidmlzaWJpbGl0eVN0YXRlIiwidXNlRWZmZWN0IiwidXNlT2JzZXJ2ZUZvY3VzVmlzaWJsZUZvck1vZGVybkJyb3dzZXJzIiwibWF0Y2hlcyIsImNhbGwiLCJ1c2VPYnNlcnZlRm9jdXNWaXNpYmxlIiwib25Gb2N1c1Zpc2libGUiLCJ1c2VOb25jZSIsIm5vbmNlIiwidXNlVmFsdWVSZWYiLCJub25jZVJlZiIsInN1cHBvcnRGb2N1c1Zpc2libGUiLCJzdXBwb3J0UHNldWRvQ2xhc3MiXSwic291cmNlUm9vdCI6ImNvbXBvbmVudDovLy8iLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ob29rcy9pbnRlcm5hbC91c2VPYnNlcnZlRm9jdXNWaXNpYmxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGhvb2tzIH0gZnJvbSAnYm90ZnJhbWV3b3JrLXdlYmNoYXQtYXBpJztcbmltcG9ydCB7IE11dGFibGVSZWZPYmplY3QsIFJlZk9iamVjdCwgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlTWVtbywgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgc3VwcG9ydFBzZXVkb0NsYXNzIGZyb20gJy4uLy4uL1V0aWxzL3N1cHBvcnRQc2V1ZG9DbGFzcyc7XG5pbXBvcnQgdXNlTm9uY2UgZnJvbSAnLi91c2VOb25jZSc7XG5pbXBvcnQgdXNlVmFsdWVSZWYgZnJvbSAnLi91c2VWYWx1ZVJlZic7XG5cbmNvbnN0IHsgdXNlUG9ueWZpbGwgfSA9IGhvb2tzO1xuXG5jb25zdCBJTlBVVF9UWVBFU19BTExPV19MSVNUID0gW1xuICAnZGF0ZScsXG4gICdkYXRldGltZS1sb2NhbCcsXG4gICdkYXRldGltZScsXG4gICdlbWFpbCcsXG4gICdtb250aCcsXG4gICdudW1iZXInLFxuICAncGFzc3dvcmQnLFxuICAnc2VhcmNoJyxcbiAgJ3RlbCcsXG4gICd0ZXh0JyxcbiAgJ3RpbWUnLFxuICAndXJsJyxcbiAgJ3dlZWsnXG5dO1xuXG4vKipcbiAqIENvbXB1dGVzIHdoZXRoZXIgdGhlIGdpdmVuIGVsZW1lbnQgc2hvdWxkIGF1dG9tYXRpY2FsbHkgdHJpZ2dlciB0aGVcbiAqIGBmb2N1cy12aXNpYmxlYCBjbGFzcyBiZWluZyBhZGRlZCwgaS5lLiB3aGV0aGVyIGl0IHNob3VsZCBhbHdheXMgbWF0Y2hcbiAqIGA6Zm9jdXMtdmlzaWJsZWAgd2hlbiBmb2N1c2VkLlxuICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gZm9jdXNUcmlnZ2Vyc0tleWJvYXJkTW9kYWxpdHkoZWw6IEhUTUxJbnB1dEVsZW1lbnQgfCBIVE1MVGV4dEFyZWFFbGVtZW50KTogYm9vbGVhbiB7XG4gIGNvbnN0IHsgaXNDb250ZW50RWRpdGFibGUsIHJlYWRPbmx5LCB0YWdOYW1lLCB0eXBlIH0gPSBlbDtcblxuICByZXR1cm4gKFxuICAgICh0YWdOYW1lID09PSAnSU5QVVQnICYmIElOUFVUX1RZUEVTX0FMTE9XX0xJU1QuaW5jbHVkZXModHlwZSkgJiYgIXJlYWRPbmx5KSB8fFxuICAgICh0YWdOYW1lID09PSAnVEVYVEFSRUEnICYmICFyZWFkT25seSkgfHxcbiAgICBpc0NvbnRlbnRFZGl0YWJsZVxuICApO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudFN1YnNjcmlwdGlvbihcbiAgdGFyZ2V0OiBFbGVtZW50IHwgTm9kZSxcbiAgdHlwZXM6IHN0cmluZ1tdLFxuICBoYW5kbGVyOiAoZXZlbnQ6IEV2ZW50KSA9PiB2b2lkXG4pOiB7XG4gIHBhdXNlOiAoKSA9PiB2b2lkO1xuICByZXN1bWU6ICgpID0+IHZvaWQ7XG59IHtcbiAgbGV0IHN1YnNjcmliZWQ6IHRydWU7XG5cbiAgY29uc3Qgc3Vic2NyaWJlID0gKCkgPT4ge1xuICAgIGlmICghc3Vic2NyaWJlZCkge1xuICAgICAgdHlwZXMuZm9yRWFjaCh0eXBlID0+IHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZXIpKTtcbiAgICAgIHN1YnNjcmliZWQgPSB0cnVlO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCB1bnN1YnNjcmliZSA9ICgpID0+IHtcbiAgICBpZiAoc3Vic2NyaWJlZCkge1xuICAgICAgdHlwZXMuZm9yRWFjaCh0eXBlID0+IHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZXIpKTtcbiAgICAgIHN1YnNjcmliZWQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgcGF1c2U6IHVuc3Vic2NyaWJlLFxuICAgIHJlc3VtZTogc3Vic2NyaWJlXG4gIH07XG59XG5cbi8vIFRPRE86IEFkZCB0ZXN0c1xuLy8gICAgICAgMS4gRm9jdXMgdmlhIGtleWJvYXJkIHZzLiBtb3VzZVxuLy8gICAgICAgMi4gRm9jdXMgdmlhIGtleWJvYXJkLCBzd2l0Y2ggYXBwLCBzd2l0Y2ggYmFjayAoZXhwZWN0IHRvIGdldCBhbm90aGVyIGZvY3VzVmlzaWJsZSBhZnRlciBzd2l0Y2ggYmFjaylcbi8vICAgICAgIDMuIEZvY3VzIHZpYSBtb3VzZSwgc3dpdGNoIGFwcCwgc3dpdGNoIGJhY2sgKGRvIE5PVCBleHBlY3QgdG8gZ2V0IGFub3RoZXIgZm9jdXNWaXNpYmxlIGFmdGVyIHN3aXRjaCBiYWNrKVxuZnVuY3Rpb24gdXNlT2JzZXJ2ZUZvY3VzVmlzaWJsZUZvckxlZ2FjeUJyb3dzZXJzKFxuICB0YXJnZXRSZWY6IFJlZk9iamVjdDxIVE1MRWxlbWVudD4sXG4gIG9uRm9jdXNWaXNpYmxlUmVmOiBNdXRhYmxlUmVmT2JqZWN0PCgpID0+IHZvaWQ+XG4pIHtcbiAgY29uc3QgW3sgRGF0ZSB9XSA9IHVzZVBvbnlmaWxsKCk7XG4gIC8vIFRoaXMgcG9seWZpbGwgYWxnb3JpdGhtIGlzIGFkb3B0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlLlxuICBjb25zdCBibHVyU2luY2VSZWYgPSB1c2VSZWYoMCk7XG4gIGNvbnN0IGhhZEtleWJvYXJkRXZlbnRSZWYgPSB1c2VSZWYodHJ1ZSk7XG4gIGNvbnN0IGhhc0ZvY3VzVmlzaWJsZVJlZiA9IHVzZVJlZihmYWxzZSk7XG5cbiAgY29uc3QgZXZlbnRTdWJzY3JpcHRpb24gPSB1c2VNZW1vKFxuICAgICgpID0+XG4gICAgICBjcmVhdGVFdmVudFN1YnNjcmlwdGlvbihcbiAgICAgICAgZG9jdW1lbnQsXG4gICAgICAgIFtcbiAgICAgICAgICAnbW91c2Vtb3ZlJyxcbiAgICAgICAgICAnbW91c2Vkb3duJyxcbiAgICAgICAgICAnbW91c2V1cCcsXG4gICAgICAgICAgJ3BvaW50ZXJtb3ZlJyxcbiAgICAgICAgICAncG9pbnRlcmRvd24nLFxuICAgICAgICAgICdwb2ludGVydXAnLFxuICAgICAgICAgICd0b3VjaG1vdmUnLFxuICAgICAgICAgICd0b3VjaHN0YXJ0JyxcbiAgICAgICAgICAndG91Y2hlbmQnXG4gICAgICAgIF0sXG4gICAgICAgIGV2ZW50ID0+IHtcbiAgICAgICAgICBpZiAoKGV2ZW50LnRhcmdldCBhcyBIVE1MRWxlbWVudCkubm9kZU5hbWU/LnRvTG93ZXJDYXNlKCkgIT09ICdodG1sJykge1xuICAgICAgICAgICAgaGFkS2V5Ym9hcmRFdmVudFJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgICAgICBldmVudFN1YnNjcmlwdGlvbi5wYXVzZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKSxcbiAgICBbaGFkS2V5Ym9hcmRFdmVudFJlZl1cbiAgKTtcblxuICBjb25zdCBzZXRIYXNGb2N1c1Zpc2libGUgPSB1c2VDYWxsYmFjayhcbiAgICBuZXh0SGFzRm9jdXNWaXNpYmxlID0+IHtcbiAgICAgIGlmIChoYXNGb2N1c1Zpc2libGVSZWYuY3VycmVudCAhPT0gbmV4dEhhc0ZvY3VzVmlzaWJsZSkge1xuICAgICAgICBoYXNGb2N1c1Zpc2libGVSZWYuY3VycmVudCA9IG5leHRIYXNGb2N1c1Zpc2libGU7XG4gICAgICAgIG5leHRIYXNGb2N1c1Zpc2libGUgJiYgb25Gb2N1c1Zpc2libGVSZWY/LmN1cnJlbnQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtoYXNGb2N1c1Zpc2libGVSZWYsIG9uRm9jdXNWaXNpYmxlUmVmXVxuICApO1xuXG4gIGNvbnN0IGhhbmRsZUtleURvd24gPSB1c2VDYWxsYmFjayhcbiAgICAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgIGlmIChldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gdGFyZ2V0UmVmLmN1cnJlbnQpIHtcbiAgICAgICAgc2V0SGFzRm9jdXNWaXNpYmxlKHRydWUpO1xuICAgICAgfVxuXG4gICAgICBoYWRLZXlib2FyZEV2ZW50UmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgW2hhZEtleWJvYXJkRXZlbnRSZWYsIHNldEhhc0ZvY3VzVmlzaWJsZSwgdGFyZ2V0UmVmXVxuICApO1xuXG4gIGNvbnN0IGhhbmRsZVBvaW50ZXJEb3duID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGhhZEtleWJvYXJkRXZlbnRSZWYuY3VycmVudCA9IGZhbHNlO1xuICB9LCBbaGFkS2V5Ym9hcmRFdmVudFJlZl0pO1xuXG4gIGNvbnN0IGhhbmRsZUZvY3VzID0gdXNlQ2FsbGJhY2soXG4gICAgKHsgdGFyZ2V0IH06IEV2ZW50KSA9PiB7XG4gICAgICB0YXJnZXQgPT09IHRhcmdldFJlZi5jdXJyZW50ICYmXG4gICAgICAgIChoYWRLZXlib2FyZEV2ZW50UmVmLmN1cnJlbnQgfHwgZm9jdXNUcmlnZ2Vyc0tleWJvYXJkTW9kYWxpdHkodGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpKSAmJlxuICAgICAgICBzZXRIYXNGb2N1c1Zpc2libGUodHJ1ZSk7XG4gICAgfSxcbiAgICBbaGFkS2V5Ym9hcmRFdmVudFJlZiwgc2V0SGFzRm9jdXNWaXNpYmxlLCB0YXJnZXRSZWZdXG4gICk7XG5cbiAgY29uc3QgaGFuZGxlQmx1ciA9IHVzZUNhbGxiYWNrKFxuICAgIChldmVudDogRXZlbnQpID0+IHtcbiAgICAgIGlmIChldmVudC50YXJnZXQgPT09IHRhcmdldFJlZi5jdXJyZW50ICYmIGhhc0ZvY3VzVmlzaWJsZVJlZi5jdXJyZW50KSB7XG4gICAgICAgIGJsdXJTaW5jZVJlZi5jdXJyZW50ID0gRGF0ZS5ub3coKTtcblxuICAgICAgICBzZXRIYXNGb2N1c1Zpc2libGUoZmFsc2UpO1xuICAgICAgfVxuICAgIH0sXG4gICAgW2JsdXJTaW5jZVJlZiwgRGF0ZSwgaGFzRm9jdXNWaXNpYmxlUmVmLCBzZXRIYXNGb2N1c1Zpc2libGUsIHRhcmdldFJlZl1cbiAgKTtcblxuICBjb25zdCBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09ICdoaWRkZW4nKSB7XG4gICAgICAvLyBUaGUgZWxlbWVudCBpcyBibHVycmVkIGR1ZSB0byBcInZpc2liaWxpdHlTdGF0ZVwiIHNldCB0byBcImhpZGRlblwiLlxuICAgICAgLy8gMTAwbXMgaXMgcmVmZXJlbmNlZCBmcm9tIHRoZSBXSUNHIHBvbHlmaWxsLlxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW1hZ2ljLW51bWJlcnNcbiAgICAgIGlmIChEYXRlLm5vdygpIC0gYmx1clNpbmNlUmVmLmN1cnJlbnQgPCAxMDApIHtcbiAgICAgICAgaGFkS2V5Ym9hcmRFdmVudFJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgZXZlbnRTdWJzY3JpcHRpb24ucmVzdW1lKCk7XG4gICAgfVxuICB9LCBbYmx1clNpbmNlUmVmLCBEYXRlLCBldmVudFN1YnNjcmlwdGlvbiwgaGFkS2V5Ym9hcmRFdmVudFJlZl0pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleURvd24sIHRydWUpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlLCB0cnVlKTtcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93bik7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBoYW5kbGVQb2ludGVyRG93bik7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIGhhbmRsZVBvaW50ZXJEb3duKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBoYW5kbGVQb2ludGVyRG93bik7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSk7XG4gICAgfTtcbiAgfSwgW2hhbmRsZUtleURvd24sIGhhbmRsZVBvaW50ZXJEb3duLCBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCB7IGN1cnJlbnQ6IHRhcmdldCB9ID0gdGFyZ2V0UmVmO1xuXG4gICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBoYW5kbGVCbHVyLCB0cnVlKTtcbiAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBoYW5kbGVGb2N1cywgdHJ1ZSk7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2JsdXInLCBoYW5kbGVCbHVyKTtcbiAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1cycsIGhhbmRsZUZvY3VzKTtcbiAgICB9O1xuXG4gICAgLy8gV2Ugc3BlY2lmaWNhbGx5IGFkZCBcInRhcmdldFJlZi5jdXJyZW50XCIgaGVyZS5cbiAgICAvLyBJZiB0aGUgdGFyZ2V0IGVsZW1lbnQgY2hhbmdlZCwgd2Ugc2hvdWxkIHJlYXR0YWNoIG91ciBldmVudCBsaXN0ZW5lcnMuXG4gIH0sIFtoYW5kbGVCbHVyLCBoYW5kbGVGb2N1cywgdGFyZ2V0UmVmXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBldmVudFN1YnNjcmlwdGlvbi5yZXN1bWUoKTtcblxuICAgIHJldHVybiAoKSA9PiBldmVudFN1YnNjcmlwdGlvbi5wYXVzZSgpO1xuICB9LCBbZXZlbnRTdWJzY3JpcHRpb25dKTtcbn1cblxuZnVuY3Rpb24gdXNlT2JzZXJ2ZUZvY3VzVmlzaWJsZUZvck1vZGVybkJyb3dzZXJzKFxuICB0YXJnZXRSZWY6IFJlZk9iamVjdDxIVE1MRWxlbWVudD4sXG4gIG9uRm9jdXNWaXNpYmxlUmVmOiBNdXRhYmxlUmVmT2JqZWN0PCgpID0+IHZvaWQ+XG4pIHtcbiAgY29uc3QgaGFuZGxlRm9jdXMgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgY29uc3QgeyBjdXJyZW50IH0gPSB0YXJnZXRSZWY7XG5cbiAgICBpZiAoXG4gICAgICAvLyBcIm1zTWF0Y2hlc1NlbGVjdG9yXCIgaXMgdmVuZG9yLXByZWZpeGVkIHZlcnNpb24gb2YgXCJtYXRjaGVzXCIuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZG90LW5vdGF0aW9uXG4gICAgICAoY3VycmVudC5tYXRjaGVzIHx8IChjdXJyZW50Wydtc01hdGNoZXNTZWxlY3RvciddIGFzIChzZWxlY3Rvcjogc3RyaW5nKSA9PiBib29sZWFuKSkuY2FsbChcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgJzpmb2N1cy12aXNpYmxlJ1xuICAgICAgKVxuICAgICkge1xuICAgICAgb25Gb2N1c1Zpc2libGVSZWY/LmN1cnJlbnQoKTtcbiAgICB9XG4gIH0sIFtvbkZvY3VzVmlzaWJsZVJlZiwgdGFyZ2V0UmVmXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCB7IGN1cnJlbnQ6IHRhcmdldCB9ID0gdGFyZ2V0UmVmO1xuXG4gICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgaGFuZGxlRm9jdXMpO1xuXG4gICAgcmV0dXJuICgpID0+IHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1cycsIGhhbmRsZUZvY3VzKTtcblxuICAgIC8vIFdlIHNwZWNpZmljYWxseSBhZGQgXCJ0YXJnZXRSZWYuY3VycmVudFwiIGhlcmUuXG4gICAgLy8gSWYgdGhlIHRhcmdldCBlbGVtZW50IGNoYW5nZWQsIHdlIHNob3VsZCByZWF0dGFjaCBvdXIgZXZlbnQgbGlzdGVuZXJzLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgW2hhbmRsZUZvY3VzLCB0YXJnZXRSZWYsIHRhcmdldFJlZi5jdXJyZW50XSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZU9ic2VydmVGb2N1c1Zpc2libGUodGFyZ2V0UmVmOiBSZWZPYmplY3Q8SFRNTEVsZW1lbnQ+LCBvbkZvY3VzVmlzaWJsZTogKCkgPT4gdm9pZCkge1xuICBjb25zdCBbbm9uY2VdID0gdXNlTm9uY2UoKTtcbiAgY29uc3Qgb25Gb2N1c1Zpc2libGVSZWYgPSB1c2VWYWx1ZVJlZihvbkZvY3VzVmlzaWJsZSk7XG5cbiAgLy8gVGhlIG5vbmNlIGlzIHVzZSBmb3IgYnJvd3NlciBjYXBhYmlsaXRpZXMuIEp1c3QgaW4gY2FzZSB0aGUgXCJub25jZVwiIGhhZCBjaGFuZ2VkIHVuZXhwZWN0ZWRseSwgdGhlIGNhcGFiaWxpdGllcyBvZiB0aGUgYnJvd3NlciBzaG91bGQgbmV2ZXIgY2hhbmdlLlxuICAvLyBUaHVzLCB3ZSBhcmUgdXNpbmcgYW4gaW5pdGlhbCB2ZXJzaW9uIG9mIFwibm9uY2VcIi4gSW4gY2FzZSB3ZWIgZGV2cyBjaGFuZ2VkIHRoZSBcIm5vbmNlXCIgdG8gYW4gaW52YWxpZCB2YWx1ZSwgd2Ugd29uJ3QgYnJlYWsgcnVsZXMgb2YgaG9va3MgKGFzIHN0YXRlZCBiZWxvdykuXG4gIGNvbnN0IG5vbmNlUmVmID0gdXNlUmVmKG5vbmNlKTtcblxuICAvLyBcIjpmb2N1cy12aXNpYmxlXCIgc2VsZWN0b3IgaXMgc3VwcG9ydGVkIGZyb20gQ2hyb21lL0VkZ2UgODYrIGFuZCBub3Qgc3VwcG9ydGVkIGluIElFMTEgb3IgU2FmYXJpLlxuICAvLyBEb2luZyBhIGNhcGFiaWxpdHkgY2hlY2sgb24gcHNldWRvIGNsYXNzZXMgcmVxdWlyZXMgaW5qZWN0aW5nIGEgc3R5bGVzaGVldCwgdGh1cyBub25jZSBpcyBuZWVkZWQuXG4gIGNvbnN0IHN1cHBvcnRGb2N1c1Zpc2libGUgPSB1c2VNZW1vKCgpID0+IHN1cHBvcnRQc2V1ZG9DbGFzcygnOmZvY3VzLXZpc2libGUnLCBub25jZVJlZi5jdXJyZW50KSwgW25vbmNlUmVmXSk7XG5cbiAgLy8gU2luY2UgXCJzdXBwb3J0UHNldWRvQ2xhc3NcIiBpcyBhIGJyb3dzZXIgY2FwYWJpbGl0eSwgdGhlIHJlc3VsdCBzaG91bGQgYmUgY29uc3RhbnQgZHVyaW5nIHRoZSBwYWdlIGxpZmV0aW1lLlxuICAvLyBUaHVzLCBydW5uaW5nIGhvb2tzIGNvbmRpdGlvbmFsbHkgaXMgb2theSBoZXJlLlxuICBpZiAoc3VwcG9ydEZvY3VzVmlzaWJsZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIHVzZU9ic2VydmVGb2N1c1Zpc2libGVGb3JNb2Rlcm5Ccm93c2Vycyh0YXJnZXRSZWYsIG9uRm9jdXNWaXNpYmxlUmVmKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICB1c2VPYnNlcnZlRm9jdXNWaXNp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