import { DependencyList } from 'react';
type Fn<TArgs, TResult> = (...args: TArgs[]) => TResult;
/**
 * `useMemoize` will memoize multiple calls to the same memoize function.
 *
 * This is similar to `useMemo`. But instead of calling it once, `useMemoize` enables multiple calls while the `callback` function is executed.
 *
 * @param {Fn<TArgs, TIntermediate>} fn - The function to be memoized.
 * @param {(fn: Fn<TArgs, TIntermediate>) => TFinal} callback - When called, this function should execute the memoizing function.
 * @param {DependencyList[]} deps - Dependencies to detect for chagnes.
 */
export default function useMemoize<TIntermediate, TFinal>(fn: Fn<unknown, TIntermediate>, callback: (fn: Fn<unknown, TIntermediate>) => TFinal, deps: DependencyList[]): TFinal;
export {};
//# sourceMappingURL=useMemoize.d.ts.map