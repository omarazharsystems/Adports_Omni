"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _excluded = ["aria-hidden", "children", "disabled", "onClick", "tabIndex"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var PREVENT_DEFAULT_HANDLER = function PREVENT_DEFAULT_HANDLER(event) {
  return event.preventDefault();
};

// Differences between <button> and <AccessibleButton>:
// - Disable behavior
//   - When the widget is disabled
//     - Set "aria-disabled" attribute to "true"
//     - Set "readonly" attribute
//     - Set "tabIndex" to -1
//     - Remove "onClick" handler
//   - Why this is needed
//     - Browser compatibility: when the widget is disabled, different browser send focus to different places
//     - When the widget become disabled, it's reasonable to keep the focus on the same widget for an extended period of time
//       - When the user presses TAB after the current widget is disabled, it should jump to the next non-disabled widget
// Developers using this accessible widget will need to:
// - Style the disabled widget themselves, using CSS query `:disabled, [aria-disabled="true"] {}`
// - Modify all code that check disabled through "disabled" attribute to use aria-disabled="true" instead
//   - aria-disabled="true" is the source of truth
// - If the widget is contained by a <form>, the developer need to filter out some `onSubmit` event caused by this widget
var AccessibleButton = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, forwardedRef) {
  var ariaHidden = _ref['aria-hidden'],
      children = _ref.children,
      disabled = _ref.disabled,
      onClick = _ref.onClick,
      tabIndex = _ref.tabIndex,
      props = _objectWithoutProperties(_ref, _excluded);

  var targetRef = (0, _react.useRef)();
  var ref = forwardedRef || targetRef;
  return /*#__PURE__*/_react.default.createElement("button", _extends({
    "aria-disabled": disabled || undefined,
    "aria-hidden": ariaHidden,
    onClick: disabled ? PREVENT_DEFAULT_HANDLER : onClick,
    ref: ref,
    tabIndex: disabled ? -1 : tabIndex
  }, props, {
    type: "button"
  }), children);
});
AccessibleButton.defaultProps = {
  'aria-hidden': undefined,
  children: undefined,
  disabled: undefined,
  onClick: undefined,
  tabIndex: undefined
};
AccessibleButton.displayName = 'AccessibleButton';
AccessibleButton.propTypes = {
  'aria-hidden': _propTypes.default.bool,
  children: _propTypes.default.any,
  disabled: _propTypes.default.bool,
  onClick: _propTypes.default.func,
  tabIndex: _propTypes.default.number,
  // TypeScript class is not mappable to PropTypes.oneOf(['button'])
  // @ts-ignore
  type: _propTypes.default.oneOf(['button']).isRequired
};
var _default = AccessibleButton;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQUkVWRU5UX0RFRkFVTFRfSEFORExFUiIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJBY2Nlc3NpYmxlQnV0dG9uIiwiZm9yd2FyZFJlZiIsImZvcndhcmRlZFJlZiIsImFyaWFIaWRkZW4iLCJjaGlsZHJlbiIsImRpc2FibGVkIiwib25DbGljayIsInRhYkluZGV4IiwicHJvcHMiLCJ0YXJnZXRSZWYiLCJ1c2VSZWYiLCJyZWYiLCJ1bmRlZmluZWQiLCJkZWZhdWx0UHJvcHMiLCJkaXNwbGF5TmFtZSIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsImJvb2wiLCJhbnkiLCJmdW5jIiwibnVtYmVyIiwidHlwZSIsIm9uZU9mIiwiaXNSZXF1aXJlZCJdLCJzb3VyY2VSb290IjoiY29tcG9uZW50Oi8vLyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL1V0aWxzL0FjY2Vzc2libGVCdXR0b24udHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludCBuby1tYWdpYy1udW1iZXJzOiBbXCJlcnJvclwiLCB7IFwiaWdub3JlXCI6IFstMV0gfV0gKi9cblxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBmb3J3YXJkUmVmLCBNb3VzZUV2ZW50SGFuZGxlciwgUmVhY3ROb2RlLCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IFBSRVZFTlRfREVGQVVMVF9IQU5ETEVSID0gZXZlbnQgPT4gZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxudHlwZSBBY2Nlc3NpYmxlQnV0dG9uUHJvcHMgPSB7XG4gICdhcmlhLWhpZGRlbic/OiBib29sZWFuO1xuICBjaGlsZHJlbj86IFJlYWN0Tm9kZTtcbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xuICBvbkNsaWNrPzogTW91c2VFdmVudEhhbmRsZXI8SFRNTEJ1dHRvbkVsZW1lbnQ+O1xuICB0YWJJbmRleD86IG51bWJlcjtcbiAgdHlwZTogJ2J1dHRvbic7XG59ICYgUmVhY3QuQnV0dG9uSFRNTEF0dHJpYnV0ZXM8SFRNTEJ1dHRvbkVsZW1lbnQ+O1xuXG4vLyBEaWZmZXJlbmNlcyBiZXR3ZWVuIDxidXR0b24+IGFuZCA8QWNjZXNzaWJsZUJ1dHRvbj46XG4vLyAtIERpc2FibGUgYmVoYXZpb3Jcbi8vICAgLSBXaGVuIHRoZSB3aWRnZXQgaXMgZGlzYWJsZWRcbi8vICAgICAtIFNldCBcImFyaWEtZGlzYWJsZWRcIiBhdHRyaWJ1dGUgdG8gXCJ0cnVlXCJcbi8vICAgICAtIFNldCBcInJlYWRvbmx5XCIgYXR0cmlidXRlXG4vLyAgICAgLSBTZXQgXCJ0YWJJbmRleFwiIHRvIC0xXG4vLyAgICAgLSBSZW1vdmUgXCJvbkNsaWNrXCIgaGFuZGxlclxuLy8gICAtIFdoeSB0aGlzIGlzIG5lZWRlZFxuLy8gICAgIC0gQnJvd3NlciBjb21wYXRpYmlsaXR5OiB3aGVuIHRoZSB3aWRnZXQgaXMgZGlzYWJsZWQsIGRpZmZlcmVudCBicm93c2VyIHNlbmQgZm9jdXMgdG8gZGlmZmVyZW50IHBsYWNlc1xuLy8gICAgIC0gV2hlbiB0aGUgd2lkZ2V0IGJlY29tZSBkaXNhYmxlZCwgaXQncyByZWFzb25hYmxlIHRvIGtlZXAgdGhlIGZvY3VzIG9uIHRoZSBzYW1lIHdpZGdldCBmb3IgYW4gZXh0ZW5kZWQgcGVyaW9kIG9mIHRpbWVcbi8vICAgICAgIC0gV2hlbiB0aGUgdXNlciBwcmVzc2VzIFRBQiBhZnRlciB0aGUgY3VycmVudCB3aWRnZXQgaXMgZGlzYWJsZWQsIGl0IHNob3VsZCBqdW1wIHRvIHRoZSBuZXh0IG5vbi1kaXNhYmxlZCB3aWRnZXRcblxuLy8gRGV2ZWxvcGVycyB1c2luZyB0aGlzIGFjY2Vzc2libGUgd2lkZ2V0IHdpbGwgbmVlZCB0bzpcbi8vIC0gU3R5bGUgdGhlIGRpc2FibGVkIHdpZGdldCB0aGVtc2VsdmVzLCB1c2luZyBDU1MgcXVlcnkgYDpkaXNhYmxlZCwgW2FyaWEtZGlzYWJsZWQ9XCJ0cnVlXCJdIHt9YFxuLy8gLSBNb2RpZnkgYWxsIGNvZGUgdGhhdCBjaGVjayBkaXNhYmxlZCB0aHJvdWdoIFwiZGlzYWJsZWRcIiBhdHRyaWJ1dGUgdG8gdXNlIGFyaWEtZGlzYWJsZWQ9XCJ0cnVlXCIgaW5zdGVhZFxuLy8gICAtIGFyaWEtZGlzYWJsZWQ9XCJ0cnVlXCIgaXMgdGhlIHNvdXJjZSBvZiB0cnV0aFxuLy8gLSBJZiB0aGUgd2lkZ2V0IGlzIGNvbnRhaW5lZCBieSBhIDxmb3JtPiwgdGhlIGRldmVsb3BlciBuZWVkIHRvIGZpbHRlciBvdXQgc29tZSBgb25TdWJtaXRgIGV2ZW50IGNhdXNlZCBieSB0aGlzIHdpZGdldFxuXG5jb25zdCBBY2Nlc3NpYmxlQnV0dG9uID0gZm9yd2FyZFJlZjxIVE1MQnV0dG9uRWxlbWVudCwgQWNjZXNzaWJsZUJ1dHRvblByb3BzPihcbiAgKHsgJ2FyaWEtaGlkZGVuJzogYXJpYUhpZGRlbiwgY2hpbGRyZW4sIGRpc2FibGVkLCBvbkNsaWNrLCB0YWJJbmRleCwgLi4ucHJvcHMgfSwgZm9yd2FyZGVkUmVmKSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0UmVmID0gdXNlUmVmKCk7XG5cbiAgICBjb25zdCByZWYgPSBmb3J3YXJkZWRSZWYgfHwgdGFyZ2V0UmVmO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxidXR0b25cbiAgICAgICAgYXJpYS1kaXNhYmxlZD17ZGlzYWJsZWQgfHwgdW5kZWZpbmVkfVxuICAgICAgICBhcmlhLWhpZGRlbj17YXJpYUhpZGRlbn1cbiAgICAgICAgb25DbGljaz17ZGlzYWJsZWQgPyBQUkVWRU5UX0RFRkFVTFRfSEFORExFUiA6IG9uQ2xpY2t9XG4gICAgICAgIHJlZj17cmVmfVxuICAgICAgICB0YWJJbmRleD17ZGlzYWJsZWQgPyAtMSA6IHRhYkluZGV4fVxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L2J1dHRvbj5cbiAgICApO1xuICB9XG4pO1xuXG5BY2Nlc3NpYmxlQnV0dG9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgJ2FyaWEtaGlkZGVuJzogdW5kZWZpbmVkLFxuICBjaGlsZHJlbjogdW5kZWZpbmVkLFxuICBkaXNhYmxlZDogdW5kZWZpbmVkLFxuICBvbkNsaWNrOiB1bmRlZmluZWQsXG4gIHRhYkluZGV4OiB1bmRlZmluZWRcbn07XG5cbkFjY2Vzc2libGVCdXR0b24uZGlzcGxheU5hbWUgPSAnQWNjZXNzaWJsZUJ1dHRvbic7XG5cbkFjY2Vzc2libGVCdXR0b24ucHJvcFR5cGVzID0ge1xuICAnYXJpYS1oaWRkZW4nOiBQcm9wVHlwZXMuYm9vbCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5hbnksXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIHRhYkluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICAvLyBUeXBlU2NyaXB0IGNsYXNzIGlzIG5vdCBtYXBwYWJsZSB0byBQcm9wVHlwZXMub25lT2YoWydidXR0b24nXSlcbiAgLy8gQHRzLWlnbm9yZVxuICB0eXBlOiBQcm9wVHlwZXMub25lT2YoWydidXR0b24nXSkuaXNSZXF1aXJlZFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQWNjZXNzaWJsZUJ1dHRvbjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBRUE7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSx1QkFBdUIsR0FBRyxTQUExQkEsdUJBQTBCLENBQUFDLEtBQUs7RUFBQSxPQUFJQSxLQUFLLENBQUNDLGNBQU4sRUFBSjtBQUFBLENBQXJDOztBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsSUFBTUMsZ0JBQWdCLGdCQUFHLElBQUFDLGlCQUFBLEVBQ3ZCLGdCQUFpRkMsWUFBakYsRUFBa0c7RUFBQSxJQUFoRkMsVUFBZ0YsUUFBL0YsYUFBK0Y7RUFBQSxJQUFwRUMsUUFBb0UsUUFBcEVBLFFBQW9FO0VBQUEsSUFBMURDLFFBQTBELFFBQTFEQSxRQUEwRDtFQUFBLElBQWhEQyxPQUFnRCxRQUFoREEsT0FBZ0Q7RUFBQSxJQUF2Q0MsUUFBdUMsUUFBdkNBLFFBQXVDO0VBQUEsSUFBMUJDLEtBQTBCOztFQUNoRyxJQUFNQyxTQUFTLEdBQUcsSUFBQUMsYUFBQSxHQUFsQjtFQUVBLElBQU1DLEdBQUcsR0FBR1QsWUFBWSxJQUFJTyxTQUE1QjtFQUVBLG9CQUNFO0lBQ0UsaUJBQWVKLFFBQVEsSUFBSU8sU0FEN0I7SUFFRSxlQUFhVCxVQUZmO0lBR0UsT0FBTyxFQUFFRSxRQUFRLEdBQUdSLHVCQUFILEdBQTZCUyxPQUhoRDtJQUlFLEdBQUcsRUFBRUssR0FKUDtJQUtFLFFBQVEsRUFBRU4sUUFBUSxHQUFHLENBQUMsQ0FBSixHQUFRRTtFQUw1QixHQU1NQyxLQU5OO0lBT0UsSUFBSSxFQUFDO0VBUFAsSUFTR0osUUFUSCxDQURGO0FBYUQsQ0FuQnNCLENBQXpCO0FBc0JBSixnQkFBZ0IsQ0FBQ2EsWUFBakIsR0FBZ0M7RUFDOUIsZUFBZUQsU0FEZTtFQUU5QlIsUUFBUSxFQUFFUSxTQUZvQjtFQUc5QlAsUUFBUSxFQUFFTyxTQUhvQjtFQUk5Qk4sT0FBTyxFQUFFTSxTQUpxQjtFQUs5QkwsUUFBUSxFQUFFSztBQUxvQixDQUFoQztBQVFBWixnQkFBZ0IsQ0FBQ2MsV0FBakIsR0FBK0Isa0JBQS9CO0FBRUFkLGdCQUFnQixDQUFDZSxTQUFqQixHQUE2QjtFQUMzQixlQUFlQyxrQkFBQSxDQUFVQyxJQURFO0VBRTNCYixRQUFRLEVBQUVZLGtCQUFBLENBQVVFLEdBRk87RUFHM0JiLFFBQVEsRUFBRVcsa0JBQUEsQ0FBVUMsSUFITztFQUkzQlgsT0FBTyxFQUFFVSxrQkFBQSxDQUFVRyxJQUpRO0VBSzNCWixRQUFRLEVBQUVTLGtCQUFBLENBQVVJLE1BTE87RUFNM0I7RUFDQTtFQUNBQyxJQUFJLEVBQUVMLGtCQUFBLENBQVVNLEtBQVYsQ0FBZ0IsQ0FBQyxRQUFELENBQWhCLEVBQTRCQztBQVJQLENBQTdCO2VBV2V2QixnQiJ9