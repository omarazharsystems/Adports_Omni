"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _Context = _interopRequireDefault(require("./Context"));

var _getTabIndex = _interopRequireDefault(require("./getTabIndex"));

var _inputtableKey = _interopRequireDefault(require("./inputtableKey"));

var _excluded = ["children", "disabled", "onKeyDownCapture", "sendFocusRef"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var DEFAULT_STYLE = {
  outline: 0
};

var BaseFocusBox = function BaseFocusBox(_ref, ref) {
  var children = _ref.children,
      disabled = _ref.disabled,
      onKeyDownCapture = _ref.onKeyDownCapture,
      sendFocusRefProp = _ref.sendFocusRef,
      otherProps = _objectWithoutProperties(_ref, _excluded);

  var sendFocusRefPersist = (0, _react.useRef)(null);
  var patchedSendFocusRef = (0, _react.useMemo)(function () {
    return sendFocusRefProp || sendFocusRefPersist;
  }, [sendFocusRefPersist, sendFocusRefProp]);
  var context = (0, _react.useMemo)(function () {
    return {
      sendFocusRef: patchedSendFocusRef
    };
  }, [patchedSendFocusRef]);
  var focus = (0, _react.useCallback)(function () {
    var current = patchedSendFocusRef.current;
    current && current.focus();
  }, [patchedSendFocusRef]);
  var handleKeyDownCapture = (0, _react.useCallback)(function (event) {
    onKeyDownCapture && onKeyDownCapture(event);
    var altKey = event.altKey,
        ctrlKey = event.ctrlKey,
        key = event.key,
        metaKey = event.metaKey,
        target = event.target;
    var tabIndex = (0, _getTabIndex.default)(target);

    if (altKey || ctrlKey && key !== 'v' || metaKey || !(0, _inputtableKey.default)(key) && key !== 'Backspace') {
      // Ignore if one of the utility key (except SHIFT) is pressed
      // E.g. CTRL-C on a link in one of the message should not jump to chat box
      // E.g. "A" or "Backspace" should jump to chat box
      return;
    }

    if (typeof tabIndex !== 'number' || tabIndex < 0 || target.getAttribute('aria-disabled') === 'true') {
      event.stopPropagation();
      focus();
    }
  }, [focus, onKeyDownCapture]);
  return /*#__PURE__*/_react.default.createElement(_Context.default.Provider, {
    value: context
  }, /*#__PURE__*/_react.default.createElement("div", _extends({}, otherProps, {
    onKeyDownCapture: disabled ? undefined : handleKeyDownCapture,
    ref: ref,
    style: DEFAULT_STYLE,
    tabIndex: -1
  }), typeof children === 'function' ? children({
    focus: focus
  }) : children));
};

var FocusBox = /*#__PURE__*/(0, _react.forwardRef)(BaseFocusBox);
FocusBox.defaultProps = BaseFocusBox.defaultProps = {
  children: undefined,
  disabled: false,
  onKeyDownCapture: undefined
};
FocusBox.propTypes = BaseFocusBox.propTypes = {
  children: _propTypes.default.any,
  disabled: _propTypes.default.bool,
  onKeyDownCapture: _propTypes.default.func,
  sendFocusRef: _propTypes.default.shape({
    current: _propTypes.default.shape({
      focus: _propTypes.default.func
    })
  }).isRequired
};
var _default = FocusBox;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJERUZBVUxUX1NUWUxFIiwib3V0bGluZSIsIkJhc2VGb2N1c0JveCIsInJlZiIsImNoaWxkcmVuIiwiZGlzYWJsZWQiLCJvbktleURvd25DYXB0dXJlIiwic2VuZEZvY3VzUmVmUHJvcCIsInNlbmRGb2N1c1JlZiIsIm90aGVyUHJvcHMiLCJzZW5kRm9jdXNSZWZQZXJzaXN0IiwidXNlUmVmIiwicGF0Y2hlZFNlbmRGb2N1c1JlZiIsInVzZU1lbW8iLCJjb250ZXh0IiwiZm9jdXMiLCJ1c2VDYWxsYmFjayIsImN1cnJlbnQiLCJoYW5kbGVLZXlEb3duQ2FwdHVyZSIsImV2ZW50IiwiYWx0S2V5IiwiY3RybEtleSIsImtleSIsIm1ldGFLZXkiLCJ0YXJnZXQiLCJ0YWJJbmRleCIsImdldFRhYkluZGV4IiwiaW5wdXR0YWJsZUtleSIsImdldEF0dHJpYnV0ZSIsInN0b3BQcm9wYWdhdGlvbiIsInVuZGVmaW5lZCIsIkZvY3VzQm94IiwiZm9yd2FyZFJlZiIsImRlZmF1bHRQcm9wcyIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsImFueSIsImJvb2wiLCJmdW5jIiwic2hhcGUiLCJpc1JlcXVpcmVkIl0sInNvdXJjZVJvb3QiOiJjb21wb25lbnQ6Ly8vIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvVXRpbHMvVHlwZUZvY3VzU2luay9Gb2N1c0JveC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGlzIGZvciBkZWZhdWx0UHJvcHM6IHsgY2hpbGRyZW46IHVuZGVmaW5lZCB9XG4vKiBlc2xpbnQgbm8tdW5kZWZpbmVkOiBcIm9mZlwiICovXG5cbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgZm9yd2FyZFJlZiwgdXNlQ2FsbGJhY2ssIHVzZU1lbW8sIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IENvbnRleHQgZnJvbSAnLi9Db250ZXh0JztcbmltcG9ydCBnZXRUYWJJbmRleCBmcm9tICcuL2dldFRhYkluZGV4JztcbmltcG9ydCBpbnB1dHRhYmxlS2V5IGZyb20gJy4vaW5wdXR0YWJsZUtleSc7XG5cbmNvbnN0IERFRkFVTFRfU1RZTEUgPSB7IG91dGxpbmU6IDAgfTtcblxuY29uc3QgQmFzZUZvY3VzQm94ID0gKHsgY2hpbGRyZW4sIGRpc2FibGVkLCBvbktleURvd25DYXB0dXJlLCBzZW5kRm9jdXNSZWY6IHNlbmRGb2N1c1JlZlByb3AsIC4uLm90aGVyUHJvcHMgfSwgcmVmKSA9PiB7XG4gIGNvbnN0IHNlbmRGb2N1c1JlZlBlcnNpc3QgPSB1c2VSZWYobnVsbCk7XG4gIGNvbnN0IHBhdGNoZWRTZW5kRm9jdXNSZWYgPSB1c2VNZW1vKFxuICAgICgpID0+IHNlbmRGb2N1c1JlZlByb3AgfHwgc2VuZEZvY3VzUmVmUGVyc2lzdCxcbiAgICBbc2VuZEZvY3VzUmVmUGVyc2lzdCwgc2VuZEZvY3VzUmVmUHJvcF1cbiAgKTtcblxuICBjb25zdCBjb250ZXh0ID0gdXNlTWVtbyhcbiAgICAoKSA9PiAoe1xuICAgICAgc2VuZEZvY3VzUmVmOiBwYXRjaGVkU2VuZEZvY3VzUmVmXG4gICAgfSksXG4gICAgW3BhdGNoZWRTZW5kRm9jdXNSZWZdXG4gICk7XG5cbiAgY29uc3QgZm9jdXMgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgY29uc3QgeyBjdXJyZW50IH0gPSBwYXRjaGVkU2VuZEZvY3VzUmVmO1xuXG4gICAgY3VycmVudCAmJiBjdXJyZW50LmZvY3VzKCk7XG4gIH0sIFtwYXRjaGVkU2VuZEZvY3VzUmVmXSk7XG5cbiAgY29uc3QgaGFuZGxlS2V5RG93bkNhcHR1cmUgPSB1c2VDYWxsYmFjayhcbiAgICBldmVudCA9PiB7XG4gICAgICBvbktleURvd25DYXB0dXJlICYmIG9uS2V5RG93bkNhcHR1cmUoZXZlbnQpO1xuXG4gICAgICBjb25zdCB7IGFsdEtleSwgY3RybEtleSwga2V5LCBtZXRhS2V5LCB0YXJnZXQgfSA9IGV2ZW50O1xuICAgICAgY29uc3QgdGFiSW5kZXggPSBnZXRUYWJJbmRleCh0YXJnZXQpO1xuXG4gICAgICBpZiAoYWx0S2V5IHx8IChjdHJsS2V5ICYmIGtleSAhPT0gJ3YnKSB8fCBtZXRhS2V5IHx8ICghaW5wdXR0YWJsZUtleShrZXkpICYmIGtleSAhPT0gJ0JhY2tzcGFjZScpKSB7XG4gICAgICAgIC8vIElnbm9yZSBpZiBvbmUgb2YgdGhlIHV0aWxpdHkga2V5IChleGNlcHQgU0hJRlQpIGlzIHByZXNzZWRcbiAgICAgICAgLy8gRS5nLiBDVFJMLUMgb24gYSBsaW5rIGluIG9uZSBvZiB0aGUgbWVzc2FnZSBzaG91bGQgbm90IGp1bXAgdG8gY2hhdCBib3hcbiAgICAgICAgLy8gRS5nLiBcIkFcIiBvciBcIkJhY2tzcGFjZVwiIHNob3VsZCBqdW1wIHRvIGNoYXQgYm94XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB0YWJJbmRleCAhPT0gJ251bWJlcicgfHwgdGFiSW5kZXggPCAwIHx8IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2FyaWEtZGlzYWJsZWQnKSA9PT0gJ3RydWUnKSB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIGZvY3VzKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBbZm9jdXMsIG9uS2V5RG93bkNhcHR1cmVdXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17Y29udGV4dH0+XG4gICAgICA8ZGl2XG4gICAgICAgIHsuLi5vdGhlclByb3BzfVxuICAgICAgICBvbktleURvd25DYXB0dXJlPXtkaXNhYmxlZCA/IHVuZGVmaW5lZCA6IGhhbmRsZUtleURvd25DYXB0dXJlfVxuICAgICAgICByZWY9e3JlZn1cbiAgICAgICAgc3R5bGU9e0RFRkFVTFRfU1RZTEV9XG4gICAgICAgIHRhYkluZGV4PXstMX1cbiAgICAgID5cbiAgICAgICAge3R5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkcmVuKHsgZm9jdXMgfSkgOiBjaGlsZHJlbn1cbiAgICAgIDwvZGl2PlxuICAgIDwvQ29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn07XG5cbmNvbnN0IEZvY3VzQm94ID0gZm9yd2FyZFJlZihCYXNlRm9jdXNCb3gpO1xuXG5Gb2N1c0JveC5kZWZhdWx0UHJvcHMgPSBCYXNlRm9jdXNCb3guZGVmYXVsdFByb3BzID0ge1xuICBjaGlsZHJlbjogdW5kZWZpbmVkLFxuICBkaXNhYmxlZDogZmFsc2UsXG4gIG9uS2V5RG93bkNhcHR1cmU6IHVuZGVmaW5lZFxufTtcblxuRm9jdXNCb3gucHJvcFR5cGVzID0gQmFzZUZvY3VzQm94LnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5hbnksXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgb25LZXlEb3duQ2FwdHVyZTogUHJvcFR5cGVzLmZ1bmMsXG4gIHNlbmRGb2N1c1JlZjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBjdXJyZW50OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgZm9jdXM6IFByb3BUeXBlcy5mdW5jXG4gICAgfSlcbiAgfSkuaXNSZXF1aXJlZFxufTtcblxuZXhwb3J0IGRlZmF1bHQgRm9jdXNCb3g7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUdBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsSUFBTUEsYUFBYSxHQUFHO0VBQUVDLE9BQU8sRUFBRTtBQUFYLENBQXRCOztBQUVBLElBQU1DLFlBQVksR0FBRyxTQUFmQSxZQUFlLE9BQTBGQyxHQUExRixFQUFrRztFQUFBLElBQS9GQyxRQUErRixRQUEvRkEsUUFBK0Y7RUFBQSxJQUFyRkMsUUFBcUYsUUFBckZBLFFBQXFGO0VBQUEsSUFBM0VDLGdCQUEyRSxRQUEzRUEsZ0JBQTJFO0VBQUEsSUFBM0NDLGdCQUEyQyxRQUF6REMsWUFBeUQ7RUFBQSxJQUF0QkMsVUFBc0I7O0VBQ3JILElBQU1DLG1CQUFtQixHQUFHLElBQUFDLGFBQUEsRUFBTyxJQUFQ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