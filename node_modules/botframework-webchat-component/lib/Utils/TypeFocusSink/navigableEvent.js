"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = navigableEvent;

// Navigable event means the end-user is focusing on an inputtable element, but it is okay to capture the arrow keys.
// For example, if the end-user is on <button>, we can capture the arrow keys.
// We can also capture arrow keys when the user is on a <textarea> without contents.
// eslint-disable-next-line complexity
function navigableEvent(event) {
  var altKey = event.altKey,
      target = event.target,
      tagName = event.target.tagName;
  var autocompleteAttribute = target.getAttribute('autocomplete');
  var autocomplete = autocompleteAttribute && autocompleteAttribute !== 'off'; // Generally, we allow up/down arrow keys on all elements captured here, except those handled by the user agent.
  // For example, if it is on <select>, we will ignore up/down arrow keys. Also true for textbox with autocomplete.
  // For some elements, user agent doesn't handle arrow keys when ALT key is held, so we can still handle ALT + UP/DOWN keys.
  // For example, user agent ignores ALT + UP/DOWN on <input type="text"> with content.
  // Counter-example: user agent continues to handle ALT + UP/DOWN on <input type="number">.

  if (tagName === 'INPUT') {
    var list = target.list,
        type = target.type,
        value = target.value; // These are buttons, up/down arrow keys are not handled by the user agent.

    if (type === 'button' || type === 'checkbox' || type === 'file' || type === 'image' || type === 'radio' || type === 'reset' || type === 'submit') {
      return true;
    } else if (type === 'email' || type === 'password' || type === 'search' || type === 'tel' || type === 'text' || type === 'url') {
      if (autocomplete || list) {
        // "autocomplete" and "list" are comboboxes. Up/down arrow keys may be handled by the user agent.
        return true;
      } else if (altKey || !value) {
        // If the input has content, user agent will handle up/down arrow and it work similar to HOME/END keys.
        // "altKey" can be used; user agent ignores ALT + UP/DOWN.
        return true;
      }
    }
  } else if (tagName === 'SELECT') {
    // User agent handles up/down arrow keys for dropdown list.
    return false;
  } else if (tagName === 'TEXTAREA') {
    if (!autocomplete && (altKey || !target.value)) {
      // User agent handles up/down arrow keys for multiline text box if it has content or is auto-complete.
      return true;
    }
  } else if (target.getAttribute('contenteditable') === 'true') {
    if (altKey || !target.innerHTML) {
      // "contenteditable" element works like <textarea> minus "autocomplete".
      return true;
    }
  } else {
    return true;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJuYXZpZ2FibGVFdmVudCIsImV2ZW50IiwiYWx0S2V5IiwidGFyZ2V0IiwidGFnTmFtZSIsImF1dG9jb21wbGV0ZUF0dHJpYnV0ZSIsImdldEF0dHJpYnV0ZSIsImF1dG9jb21wbGV0ZSIsImxpc3QiLCJ0eXBlIiwidmFsdWUiLCJpbm5lckhUTUwiXSwic291cmNlUm9vdCI6ImNvbXBvbmVudDovLy8iLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9VdGlscy9UeXBlRm9jdXNTaW5rL25hdmlnYWJsZUV2ZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIE5hdmlnYWJsZSBldmVudCBtZWFucyB0aGUgZW5kLXVzZXIgaXMgZm9jdXNpbmcgb24gYW4gaW5wdXR0YWJsZSBlbGVtZW50LCBidXQgaXQgaXMgb2theSB0byBjYXB0dXJlIHRoZSBhcnJvdyBrZXlzLlxuLy8gRm9yIGV4YW1wbGUsIGlmIHRoZSBlbmQtdXNlciBpcyBvbiA8YnV0dG9uPiwgd2UgY2FuIGNhcHR1cmUgdGhlIGFycm93IGtleXMuXG4vLyBXZSBjYW4gYWxzbyBjYXB0dXJlIGFycm93IGtleXMgd2hlbiB0aGUgdXNlciBpcyBvbiBhIDx0ZXh0YXJlYT4gd2l0aG91dCBjb250ZW50cy5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBuYXZpZ2FibGVFdmVudChldmVudCkge1xuICBjb25zdCB7XG4gICAgYWx0S2V5LFxuICAgIHRhcmdldCxcbiAgICB0YXJnZXQ6IHsgdGFnTmFtZSB9XG4gIH0gPSBldmVudDtcblxuICBjb25zdCBhdXRvY29tcGxldGVBdHRyaWJ1dGUgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdhdXRvY29tcGxldGUnKTtcbiAgY29uc3QgYXV0b2NvbXBsZXRlID0gYXV0b2NvbXBsZXRlQXR0cmlidXRlICYmIGF1dG9jb21wbGV0ZUF0dHJpYnV0ZSAhPT0gJ29mZic7XG5cbiAgLy8gR2VuZXJhbGx5LCB3ZSBhbGxvdyB1cC9kb3duIGFycm93IGtleXMgb24gYWxsIGVsZW1lbnRzIGNhcHR1cmVkIGhlcmUsIGV4Y2VwdCB0aG9zZSBoYW5kbGVkIGJ5IHRoZSB1c2VyIGFnZW50LlxuICAvLyBGb3IgZXhhbXBsZSwgaWYgaXQgaXMgb24gPHNlbGVjdD4sIHdlIHdpbGwgaWdub3JlIHVwL2Rvd24gYXJyb3cga2V5cy4gQWxzbyB0cnVlIGZvciB0ZXh0Ym94IHdpdGggYXV0b2NvbXBsZXRlLlxuXG4gIC8vIEZvciBzb21lIGVsZW1lbnRzLCB1c2VyIGFnZW50IGRvZXNuJ3QgaGFuZGxlIGFycm93IGtleXMgd2hlbiBBTFQga2V5IGlzIGhlbGQsIHNvIHdlIGNhbiBzdGlsbCBoYW5kbGUgQUxUICsgVVAvRE9XTiBrZXlzLlxuICAvLyBGb3IgZXhhbXBsZSwgdXNlciBhZ2VudCBpZ25vcmVzIEFMVCArIFVQL0RPV04gb24gPGlucHV0IHR5cGU9XCJ0ZXh0XCI+IHdpdGggY29udGVudC5cbiAgLy8gQ291bnRlci1leGFtcGxlOiB1c2VyIGFnZW50IGNvbnRpbnVlcyB0byBoYW5kbGUgQUxUICsgVVAvRE9XTiBvbiA8aW5wdXQgdHlwZT1cIm51bWJlclwiPi5cbiAgaWYgKHRhZ05hbWUgPT09ICdJTlBVVCcpIHtcbiAgICBjb25zdCB7IGxpc3QsIHR5cGUsIHZhbHVlIH0gPSB0YXJnZXQ7XG5cbiAgICAvLyBUaGVzZSBhcmUgYnV0dG9ucywgdXAvZG93biBhcnJvdyBrZXlzIGFyZSBub3QgaGFuZGxlZCBieSB0aGUgdXNlciBhZ2VudC5cbiAgICBpZiAoXG4gICAgICB0eXBlID09PSAnYnV0dG9uJyB8fFxuICAgICAgdHlwZSA9PT0gJ2NoZWNrYm94JyB8fFxuICAgICAgdHlwZSA9PT0gJ2ZpbGUnIHx8XG4gICAgICB0eXBlID09PSAnaW1hZ2UnIHx8XG4gICAgICB0eXBlID09PSAncmFkaW8nIHx8XG4gICAgICB0eXBlID09PSAncmVzZXQnIHx8XG4gICAgICB0eXBlID09PSAnc3VibWl0J1xuICAgICkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIHR5cGUgPT09ICdlbWFpbCcgfHxcbiAgICAgIHR5cGUgPT09ICdwYXNzd29yZCcgfHxcbiAgICAgIHR5cGUgPT09ICdzZWFyY2gnIHx8XG4gICAgICB0eXBlID09PSAndGVsJyB8fFxuICAgICAgdHlwZSA9PT0gJ3RleHQnIHx8XG4gICAgICB0eXBlID09PSAndXJsJ1xuICAgICkge1xuICAgICAgaWYgKGF1dG9jb21wbGV0ZSB8fCBsaXN0KSB7XG4gICAgICAgIC8vIFwiYXV0b2NvbXBsZXRlXCIgYW5kIFwibGlzdFwiIGFyZSBjb21ib2JveGVzLiBVcC9kb3duIGFycm93IGtleXMgbWF5IGJlIGhhbmRsZWQgYnkgdGhlIHVzZXIgYWdlbnQuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChhbHRLZXkgfHwgIXZhbHVlKSB7XG4gICAgICAgIC8vIElmIHRoZSBpbnB1dCBoYXMgY29udGVudCwgdXNlciBhZ2VudCB3aWxsIGhhbmRsZSB1cC9kb3duIGFycm93IGFuZCBpdCB3b3JrIHNpbWlsYXIgdG8gSE9NRS9FTkQga2V5cy5cbiAgICAgICAgLy8gXCJhbHRLZXlcIiBjYW4gYmUgdXNlZDsgdXNlciBhZ2VudCBpZ25vcmVzIEFMVCArIFVQL0RPV04uXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmICh0YWdOYW1lID09PSAnU0VMRUNUJykge1xuICAgIC8vIFVzZXIgYWdlbnQgaGFuZGxlcyB1cC9kb3duIGFycm93IGtleXMgZm9yIGRyb3Bkb3duIGxpc3QuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKHRhZ05hbWUgPT09ICdURVhUQVJFQScpIHtcbiAgICBpZiAoIWF1dG9jb21wbGV0ZSAmJiAoYWx0S2V5IHx8ICF0YXJnZXQudmFsdWUpKSB7XG4gICAgICAvLyBVc2VyIGFnZW50IGhhbmRsZXMgdXAvZG93biBhcnJvdyBrZXlzIGZvciBtdWx0aWxpbmUgdGV4dCBib3ggaWYgaXQgaGFzIGNvbnRlbnQgb3IgaXMgYXV0by1jb21wbGV0ZS5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0YXJnZXQuZ2V0QXR0cmlidXRlKCdjb250ZW50ZWRpdGFibGUnKSA9PT0gJ3RydWUnKSB7XG4gICAgaWYgKGFsdEtleSB8fCAhdGFyZ2V0LmlubmVySFRNTCkge1xuICAgICAgLy8gXCJjb250ZW50ZWRpdGFibGVcIiBlbGVtZW50IHdvcmtzIGxpa2UgPHRleHRhcmVhPiBtaW51cyBcImF1dG9jb21wbGV0ZVwiLlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNlLFNBQVNBLGNBQVQsQ0FBd0JDLEtBQXhCLEVBQStCO0VBQzVDLElBQ0VDLE1BREYsR0FJSUQsS0FKSixDQUNFQyxNQURGO0VBQUEsSUFFRUMsTUFGRixHQUlJRixLQUpKLENBRUVFLE1BRkY7RUFBQSxJQUdZQyxPQUhaLEdBSUlILEtBSkosQ0FHRUUsTUFIRixDQUdZQyxPQUhaO0VBTUEsSUFBTUMscUJBQXFCLEdBQUdGLE1BQU0sQ0FBQ0csWUFBUCxDQUFvQixjQUFwQixDQUE5QjtFQUNBLElBQU1DLFlBQVksR0FBR0YscUJBQXFCLElBQUlBLHFCQUFxQixLQUFLLEtBQXhFLENBUjRDLENBVTVDO0VBQ0E7RUFFQTtFQUNBO0VBQ0E7O0VBQ0EsSUFBSUQsT0FBTyxLQUFLLE9BQWhCLEVBQXlCO0lBQ3ZCLElBQVFJLElBQVIsR0FBOEJMLE1BQTlCLENBQVFLLElBQVI7SUFBQSxJQUFjQyxJQUFkLEdBQThCTixNQUE5QixDQUFjTSxJQUFkO0lBQUEsSUFBb0JDLEtBQXBCLEdBQThCUCxNQUE5QixDQUFvQk8sS0FBcEIsQ0FEdUIsQ0FHdkI7O0lBQ0EsSUFDRUQsSUFBSSxLQUFLLFFBQVQsSUFDQUEsSUFBSSxLQUFLLFVBRFQsSUFFQUEsSUFBSSxLQUFLLE1BRlQsSUFHQUEsSUFBSSxLQUFLLE9BSFQsSUFJQUEsSUFBSSxLQUFLLE9BSlQsSUFLQUEsSUFBSSxLQUFLLE9BTFQsSUFNQUEsSUFBSSxLQUFLLFFBUFgsRUFRRTtNQUNBLE9BQU8sSUFBUDtJQUNELENBVkQsTUFVTyxJQUNMQSxJQUFJLEtBQUssT0FBVCxJQUNBQSxJQUFJLEtBQUssVUFEVCxJQUVBQSxJQUFJLEtBQUssUUFGVCxJQUdBQSxJQUFJLEtBQUssS0FIVCxJQUlBQSxJQUFJLEtBQUssTUFKVCxJQUtBQSxJQUFJLEtBQUssS0FOSixFQU9MO01BQ0EsSUFBSUYsWUFBWSxJQUFJQyxJQUFwQixFQUEwQjtRQUN4QjtRQUNBLE9BQU8sSUFBUDtNQUNELENBSEQsTUFHTyxJQUFJTixNQUFNLElBQUksQ0FBQ1EsS0FBZixFQUFzQjtRQUMzQjtRQUNBO1FBQ0EsT0FBTyxJQUFQO01BQ0Q7SUFDRjtFQUNGLENBL0JELE1BK0JPLElBQUlOLE9BQU8sS0FBSyxRQUFoQixFQUEwQjtJQUMvQjtJQUNBLE9BQU8sS0FBUDtFQUNELENBSE0sTUFHQSxJQUFJQSxPQUFPLEtBQUssVUFBaEIsRUFBNEI7SUFDakMsSUFBSSxDQUFDRyxZQUFELEtBQWtCTCxNQUFNLElBQUksQ0FBQ0MsTUFBTSxDQUFDTyxLQUFwQyxDQUFKLEVBQWdEO01BQzlDO01BQ0EsT0FBTyxJQUFQO0lBQ0Q7RUFDRixDQUxNLE1BS0EsSUFBSVAsTUFBTSxDQUFDRyxZQUFQLENBQW9CLGlCQUFwQixNQUEyQyxNQUEvQyxFQUF1RDtJQUM1RCxJQUFJSixNQUFNLElBQUksQ0FBQ0MsTUFBTSxDQUFDUSxTQUF0QixFQUFpQztNQUMvQjtNQUNBLE9BQU8sSUFBUDtJQUNEO0VBQ0YsQ0FMTSxNQUtBO0lBQ0wsT0FBTyxJQUFQO0VBQ0Q7QUFDRiJ9