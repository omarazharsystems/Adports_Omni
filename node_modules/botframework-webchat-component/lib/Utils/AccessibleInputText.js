"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _useEnterKeyHint = _interopRequireDefault(require("../hooks/internal/useEnterKeyHint"));

var _excluded = ["aria-errormessage", "className", "disabled", "enterKeyHint", "onChange", "onFocus", "onKeyDown", "onKeyDownCapture", "onKeyPress", "onSelect", "placeholder", "readOnly", "tabIndex", "value"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var AccessibleInputText = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, forwardedRef) {
  var ariaErrorMessage = _ref['aria-errormessage'],
      className = _ref.className,
      disabled = _ref.disabled,
      enterKeyHint = _ref.enterKeyHint,
      onChange = _ref.onChange,
      onFocus = _ref.onFocus,
      onKeyDown = _ref.onKeyDown,
      onKeyDownCapture = _ref.onKeyDownCapture,
      onKeyPress = _ref.onKeyPress,
      onSelect = _ref.onSelect,
      placeholder = _ref.placeholder,
      readOnly = _ref.readOnly,
      tabIndex = _ref.tabIndex,
      value = _ref.value,
      props = _objectWithoutProperties(_ref, _excluded);

  var targetRef = (0, _react.useRef)();
  var ref = forwardedRef || targetRef;
  (0, _useEnterKeyHint.default)(ref, enterKeyHint);
  return /*#__PURE__*/_react.default.createElement("input", _extends({
    "aria-disabled": disabled || undefined,
    "aria-errormessage": ariaErrorMessage,
    className: className,
    onChange: disabled ? undefined : onChange,
    onFocus: disabled ? undefined : onFocus,
    onKeyDown: disabled ? undefined : onKeyDown,
    onKeyDownCapture: disabled ? undefined : onKeyDownCapture,
    onKeyPress: disabled ? undefined : onKeyPress,
    onSelect: disabled ? undefined : onSelect,
    placeholder: placeholder,
    readOnly: readOnly || disabled,
    ref: ref,
    tabIndex: disabled ? -1 : tabIndex,
    value: value
  }, props, {
    type: "text"
  }));
});
AccessibleInputText.defaultProps = {
  'aria-errormessage': undefined,
  className: undefined,
  disabled: undefined,
  enterKeyHint: undefined,
  inputMode: undefined,
  onChange: undefined,
  onFocus: undefined,
  onKeyDown: undefined,
  onKeyDownCapture: undefined,
  onKeyPress: undefined,
  onSelect: undefined,
  placeholder: undefined,
  readOnly: undefined,
  tabIndex: undefined,
  value: undefined
};
AccessibleInputText.displayName = 'AccessibleInputText';
AccessibleInputText.propTypes = {
  'aria-errormessage': _propTypes.default.string,
  className: _propTypes.default.string,
  disabled: _propTypes.default.bool,
  enterKeyHint: _propTypes.default.string,
  inputMode: _propTypes.default.oneOf(['text', 'none', 'tel', 'url', 'email', 'numeric', 'decimal', 'search']),
  onChange: _propTypes.default.func,
  onFocus: _propTypes.default.func,
  onKeyDown: _propTypes.default.func,
  onKeyDownCapture: _propTypes.default.func,
  onKeyPress: _propTypes.default.func,
  onSelect: _propTypes.default.func,
  placeholder: _propTypes.default.string,
  readOnly: _propTypes.default.bool,
  tabIndex: _propTypes.default.number,
  // @ts-ignore PropTypes and TypeScript type do not well understood each other.
  type: _propTypes.default.oneOf(['text']).isRequired,
  value: _propTypes.default.string
};
var _default = AccessibleInputText;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,