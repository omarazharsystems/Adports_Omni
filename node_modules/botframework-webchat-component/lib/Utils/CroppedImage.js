"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _useStyleToEmotionObject = _interopRequireDefault(require("../hooks/internal/useStyleToEmotionObject"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ROOT_STYLE = {
  overflow: 'hidden',
  position: 'relative',
  '& > img': {
    height: 'auto',
    left: '50%',
    position: 'absolute',
    top: '50%',
    transform: 'translate(-50%, -50%)',
    width: '100%'
  }
};

var CroppedImage = function CroppedImage(_ref) {
  var alt = _ref.alt,
      className = _ref.className,
      height = _ref.height,
      src = _ref.src,
      width = _ref.width;
  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';
  var sizeStyle = (0, _react.useMemo)(function () {
    return {
      height: height,
      width: width
    };
  }, [height, width]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)(rootClassName, (className || '') + ''),
    style: sizeStyle
  }, /*#__PURE__*/_react.default.createElement("img", {
    alt: alt,
    src: src
  }));
};

CroppedImage.defaultProps = {
  alt: '',
  className: ''
};
CroppedImage.propTypes = {
  alt: _propTypes.default.string,
  className: _propTypes.default.string,
  height: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]).isRequired,
  src: _propTypes.default.string.isRequired,
  width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]).isRequired
};
var _default = CroppedImage;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJST09UX1NUWUxFIiwib3ZlcmZsb3ciLCJwb3NpdGlvbiIsImhlaWdodCIsImxlZnQiLCJ0b3AiLCJ0cmFuc2Zvcm0iLCJ3aWR0aCIsIkNyb3BwZWRJbWFnZSIsImFsdCIsImNsYXNzTmFtZSIsInNyYyIsInJvb3RDbGFzc05hbWUiLCJ1c2VTdHlsZVRvRW1vdGlvbk9iamVjdCIsInNpemVTdHlsZSIsInVzZU1lbW8iLCJjbGFzc05hbWVzIiwiZGVmYXVsdFByb3BzIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwic3RyaW5nIiwib25lT2ZUeXBlIiwibnVtYmVyIiwiaXNSZXF1aXJlZCJdLCJzb3VyY2VSb290IjoiY29tcG9uZW50Oi8vLyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL1V0aWxzL0Nyb3BwZWRJbWFnZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHVzZVN0eWxlVG9FbW90aW9uT2JqZWN0IGZyb20gJy4uL2hvb2tzL2ludGVybmFsL3VzZVN0eWxlVG9FbW90aW9uT2JqZWN0JztcblxuY29uc3QgUk9PVF9TVFlMRSA9IHtcbiAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcblxuICAnJiA+IGltZyc6IHtcbiAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICBsZWZ0OiAnNTAlJyxcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0b3A6ICc1MCUnLFxuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtNTAlLCAtNTAlKScsXG4gICAgd2lkdGg6ICcxMDAlJ1xuICB9XG59O1xuXG5jb25zdCBDcm9wcGVkSW1hZ2UgPSAoeyBhbHQsIGNsYXNzTmFtZSwgaGVpZ2h0LCBzcmMsIHdpZHRoIH0pID0+IHtcbiAgY29uc3Qgcm9vdENsYXNzTmFtZSA9IHVzZVN0eWxlVG9FbW90aW9uT2JqZWN0KCkoUk9PVF9TVFlMRSkgKyAnJztcbiAgY29uc3Qgc2l6ZVN0eWxlID0gdXNlTWVtbygoKSA9PiAoeyBoZWlnaHQsIHdpZHRoIH0pLCBbaGVpZ2h0LCB3aWR0aF0pO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZXMocm9vdENsYXNzTmFtZSwgKGNsYXNzTmFtZSB8fCAnJykgKyAnJyl9IHN0eWxlPXtzaXplU3R5bGV9PlxuICAgICAgPGltZyBhbHQ9e2FsdH0gc3JjPXtzcmN9IC8+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5Dcm9wcGVkSW1hZ2UuZGVmYXVsdFByb3BzID0ge1xuICBhbHQ6ICcnLFxuICBjbGFzc05hbWU6ICcnXG59O1xuXG5Dcm9wcGVkSW1hZ2UucHJvcFR5cGVzID0ge1xuICBhbHQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgaGVpZ2h0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSkuaXNSZXF1aXJlZCxcbiAgc3JjOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHdpZHRoOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSkuaXNSZXF1aXJlZFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ3JvcHBlZEltYWdlO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFQTs7Ozs7Ozs7QUFFQSxJQUFNQSxVQUFVLEdBQUc7RUFDakJDLFFBQVEsRUFBRSxRQURPO0VBRWpCQyxRQUFRLEVBQUUsVUFGTztFQUlqQixXQUFXO0lBQ1RDLE1BQU0sRUFBRSxNQURDO0lBRVRDLElBQUksRUFBRSxLQUZHO0lBR1RGLFFBQVEsRUFBRSxVQUhEO0lBSVRHLEdBQUcsRUFBRSxLQUpJO0lBS1RDLFNBQVMsRUFBRSx1QkFMRjtJQU1UQyxLQUFLLEVBQUU7RUFORTtBQUpNLENBQW5COztBQWNBLElBQU1DLFlBQVksR0FBRyxTQUFmQSxZQUFlLE9BQTRDO0VBQUEsSUFBekNDLEdBQXlDLFFBQXpDQSxHQUF5QztFQUFBLElBQXBDQyxTQUFvQyxRQUFwQ0EsU0FBb0M7RUFBQSxJQUF6QlAsTUFBeUIsUUFBekJBLE1BQXlCO0VBQUEsSUFBakJRLEdBQWlCLFFBQWpCQSxHQUFpQjtFQUFBLElBQVpKLEtBQVksUUFBWkEsS0FBWTtFQUMvRCxJQUFNSyxhQUFhLEdBQUcsSUFBQUMsZ0NBQUEsSUFBMEJiLFVBQTFCLElBQXdDLEVBQTlEO0VBQ0EsSUFBTWMsU0FBUyxHQUFHLElBQUFDLGNBQUEsRUFBUTtJQUFBLE9BQU87TUFBRVosTUFBTSxFQUFOQSxNQUFGO01BQVVJLEtBQUssRUFBTEE7SUFBVixDQUFQO0VBQUEsQ0FBUixFQUFtQyxDQUFDSixNQUFELEVBQVNJLEtBQVQsQ0FBbkMsQ0FBbEI7RUFFQSxvQkFDRTtJQUFLLFNBQVMsRUFBRSxJQUFBUyxtQkFBQSxFQUFXSixhQUFYLEVBQTBCLENBQUNGLFNBQVMsSUFBSSxFQUFkLElBQW9CLEVBQTlDLENBQWhCO0lBQW1FLEtBQUssRUFBRUk7RUFBMUUsZ0JBQ0U7SUFBSyxHQUFHLEVBQUVMLEdBQVY7SUFBZSxHQUFHLEVBQUVFO0VBQXBCLEVBREYsQ0FERjtBQUtELENBVEQ7O0FBV0FILFlBQVksQ0FBQ1MsWUFBYixHQUE0QjtFQUMxQlIsR0FBRyxFQUFFLEVBRHFCO0VBRTFCQyxTQUFTLEVBQUU7QUFGZSxDQUE1QjtBQUtBRixZQUFZLENBQUNVLFNBQWIsR0FBeUI7RUFDdkJULEdBQUcsRUFBRVUsa0JBQUEsQ0FBVUMsTUFEUTtFQUV2QlYsU0FBUyxFQUFFUyxrQkFBQSxDQUFVQyxNQUZFO0VBR3ZCakIsTUFBTSxFQUFFZ0Isa0JBQUEsQ0FBVUUsU0FBVixDQUFvQixDQUFDRixrQkFBQSxDQUFVRyxNQUFYLEVBQW1CSCxrQkFBQSxDQUFVQyxNQUE3QixDQUFwQixFQUEwREcsVUFIM0M7RUFJdkJaLEdBQUcsRUFBRVEsa0JBQUEsQ0FBVUMsTUFBVixDQUFpQkcsVUFKQztFQUt2QmhCLEtBQUssRUFBRVksa0JBQUEsQ0FBVUUsU0FBVixDQUFvQixDQUFDRixrQkFBQSxDQUFVRyxNQUFYLEVBQW1CSCxrQkFBQSxDQUFVQyxNQUE3QixDQUFwQixFQUEwREc7QUFMMUMsQ0FBekI7ZUFRZWYsWSJ9