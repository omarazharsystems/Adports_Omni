"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = firstTabbableDescendant;
exports.orSelf = orSelf;

var _getTabIndex = _interopRequireDefault(require("./TypeFocusSink/getTabIndex"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ALWAYS_TRUE_FN = function ALWAYS_TRUE_FN() {
  return true;
};

var SELECTOR = 'a[href], audio, button, details, details summary, embed, iframe, input, object, rect, select, svg[focusable], textarea, video, [tabindex]';

function firstTabbableDescendant(element) {
  var filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ALWAYS_TRUE_FN;

  if (!element) {
    return;
  } // This is best-effort for finding a tabbable element.
  // For a comprehensive list, please refer to https://allyjs.io/data-tables/focusable.html and update this list accordingly.


  var focusables = [].filter.call(element.querySelectorAll(SELECTOR), filter);
  return [].find.call(focusables, function (focusable) {
    var tabIndex = (0, _getTabIndex.default)(focusable);
    return typeof tabIndex === 'number' && tabIndex >= 0;
  });
}

function orSelf(element) {
  if (!element) {
    return;
  } // "msMatchesSelector" is vendor-prefixed version of "matches".
  // eslint-disable-next-line dot-notation


  if ((element.matches || element['msMatchesSelector']).call(element, SELECTOR)) {
    return element;
  }

  return firstTabbableDescendant(element);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBTFdBWVNfVFJVRV9GTiIsIlNFTEVDVE9SIiwiZmlyc3RUYWJiYWJsZURlc2NlbmRhbnQiLCJlbGVtZW50IiwiZmlsdGVyIiwiZm9jdXNhYmxlcyIsImNhbGwiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZmluZCIsImZvY3VzYWJsZSIsInRhYkluZGV4IiwiZ2V0VGFiSW5kZXgiLCJvclNlbGYiLCJtYXRjaGVzIl0sInNvdXJjZVJvb3QiOiJjb21wb25lbnQ6Ly8vIiwic291cmNlcyI6WyIuLi8uLi9zcmMvVXRpbHMvZmlyc3RUYWJiYWJsZURlc2NlbmRhbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGdldFRhYkluZGV4IGZyb20gJy4vVHlwZUZvY3VzU2luay9nZXRUYWJJbmRleCc7XG5cbmNvbnN0IEFMV0FZU19UUlVFX0ZOID0gKCkgPT4gdHJ1ZTtcblxuY29uc3QgU0VMRUNUT1IgPVxuICAnYVtocmVmXSwgYXVkaW8sIGJ1dHRvbiwgZGV0YWlscywgZGV0YWlscyBzdW1tYXJ5LCBlbWJlZCwgaWZyYW1lLCBpbnB1dCwgb2JqZWN0LCByZWN0LCBzZWxlY3QsIHN2Z1tmb2N1c2FibGVdLCB0ZXh0YXJlYSwgdmlkZW8sIFt0YWJpbmRleF0nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaXJzdFRhYmJhYmxlRGVzY2VuZGFudChlbGVtZW50LCBmaWx0ZXIgPSBBTFdBWVNfVFJVRV9GTikge1xuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBUaGlzIGlzIGJlc3QtZWZmb3J0IGZvciBmaW5kaW5nIGEgdGFiYmFibGUgZWxlbWVudC5cbiAgLy8gRm9yIGEgY29tcHJlaGVuc2l2ZSBsaXN0LCBwbGVhc2UgcmVmZXIgdG8gaHR0cHM6Ly9hbGx5anMuaW8vZGF0YS10YWJsZXMvZm9jdXNhYmxlLmh0bWwgYW5kIHVwZGF0ZSB0aGlzIGxpc3QgYWNjb3JkaW5nbHkuXG4gIGNvbnN0IGZvY3VzYWJsZXMgPSBbXS5maWx0ZXIuY2FsbChlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU0VMRUNUT1IpLCBmaWx0ZXIpO1xuXG4gIHJldHVybiBbXS5maW5kLmNhbGwoZm9jdXNhYmxlcywgZm9jdXNhYmxlID0+IHtcbiAgICBjb25zdCB0YWJJbmRleCA9IGdldFRhYkluZGV4KGZvY3VzYWJsZSk7XG5cbiAgICByZXR1cm4gdHlwZW9mIHRhYkluZGV4ID09PSAnbnVtYmVyJyAmJiB0YWJJbmRleCA+PSAwO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb3JTZWxmKGVsZW1lbnQpIHtcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gXCJtc01hdGNoZXNTZWxlY3RvclwiIGlzIHZlbmRvci1wcmVmaXhlZCB2ZXJzaW9uIG9mIFwibWF0Y2hlc1wiLlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZG90LW5vdGF0aW9uXG4gIGlmICgoZWxlbWVudC5tYXRjaGVzIHx8IGVsZW1lbnRbJ21zTWF0Y2hlc1NlbGVjdG9yJ10pLmNhbGwoZWxlbWVudCwgU0VMRUNUT1IpKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gZmlyc3RUYWJiYWJsZURlc2NlbmRhbnQoZWxlbWVudCk7XG59XG5cbmV4cG9ydCB7IG9yU2VsZiB9O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7O0FBRUEsSUFBTUEsY0FBYyxHQUFHLFNBQWpCQSxjQUFpQjtFQUFBLE9BQU0sSUFBTjtBQUFBLENBQXZCOztBQUVBLElBQU1DLFFBQVEsR0FDWiwySUFERjs7QUFHZSxTQUFTQyx1QkFBVCxDQUFpQ0MsT0FBakMsRUFBbUU7RUFBQSxJQUF6QkMsTUFBeUIsdUVBQWhCSixjQUFnQjs7RUFDaEYsSUFBSSxDQUFDRyxPQUFMLEVBQWM7SUFDWjtFQUNELENBSCtFLENBS2hGO0VBQ0E7OztFQUNBLElBQU1FLFVBQVUsR0FBRyxHQUFHRCxNQUFILENBQVVFLElBQVYsQ0FBZUgsT0FBTyxDQUFDSSxnQkFBUixDQUF5Qk4sUUFBekIsQ0FBZixFQUFtREcsTUFBbkQsQ0FBbkI7RUFFQSxPQUFPLEdBQUdJLElBQUgsQ0FBUUYsSUFBUixDQUFhRCxVQUFiLEVBQXlCLFVBQUFJLFNBQVMsRUFBSTtJQUMzQyxJQUFNQyxRQUFRLEdBQUcsSUFBQUMsb0JBQUEsRUFBWUYsU0FBWixDQUFqQjtJQUVBLE9BQU8sT0FBT0MsUUFBUCxLQUFvQixRQUFwQixJQUFnQ0EsUUFBUSxJQUFJLENBQW5EO0VBQ0QsQ0FKTSxDQUFQO0FBS0Q7O0FBRUQsU0FBU0UsTUFBVCxDQUFnQlQsT0FBaEIsRUFBeUI7RUFDdkIsSUFBSSxDQUFDQSxPQUFMLEVBQWM7SUFDWjtFQUNELENBSHNCLENBS3ZCO0VBQ0E7OztFQUNBLElBQUksQ0FBQ0EsT0FBTyxDQUFDVSxPQUFSLElBQW1CVixPQUFPLENBQUMsbUJBQUQsQ0FBM0IsRUFBa0RHLElBQWxELENBQXVESCxPQUF2RCxFQUFnRUYsUUFBaEUsQ0FBSixFQUErRTtJQUM3RSxPQUFPRSxPQUFQO0VBQ0Q7O0VBRUQsT0FBT0QsdUJBQXVCLENBQUNDLE9BQUQsQ0FBOUI7QUFDRCJ9