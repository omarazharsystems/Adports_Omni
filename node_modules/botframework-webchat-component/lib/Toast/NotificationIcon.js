"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _botframeworkWebchatCore = require("botframework-webchat-core");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _CheckMarkIcon = _interopRequireDefault(require("./CheckMarkIcon"));

var _ExclamationMarkIcon = _interopRequireDefault(require("./ExclamationMarkIcon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer;

var NotificationIcon = function NotificationIcon(_ref) {
  var className = _ref.className,
      level = _ref.level;
  var localize = useLocalizer();
  var prefixes = {
    error: localize('TOAST_ALT_ERROR'),
    info: localize('TOAST_ALT_INFO'),
    success: localize('TOAST_ALT_SUCCESS'),
    warn: localize('TOAST_ALT_WARN')
  }; // Mitigated through denylisting.
  // eslint-disable-next-line security/detect-object-injection

  var prefix = !(0, _botframeworkWebchatCore.isForbiddenPropertyName)(level) && prefixes[level] || '';
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, level === 'success' ? /*#__PURE__*/_react.default.createElement(_CheckMarkIcon.default, {
    "aria-label": prefix,
    className: className
  }) : /*#__PURE__*/_react.default.createElement(_ExclamationMarkIcon.default, {
    "aria-label": prefix,
    className: className
  }));
};

NotificationIcon.defaultProps = {
  className: undefined
};
NotificationIcon.propTypes = {
  className: _propTypes.default.string,
  level: _propTypes.default.oneOf(['error', 'info', 'success', 'warn']).isRequired
};
var _default = NotificationIcon;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1c2VMb2NhbGl6ZXIiLCJob29rcyIsIk5vdGlmaWNhdGlvbkljb24iLCJjbGFzc05hbWUiLCJsZXZlbCIsImxvY2FsaXplIiwicHJlZml4ZXMiLCJlcnJvciIsImluZm8iLCJzdWNjZXNzIiwid2FybiIsInByZWZpeCIsImlzRm9yYmlkZGVuUHJvcGVydHlOYW1lIiwiZGVmYXVsdFByb3BzIiwidW5kZWZpbmVkIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwic3RyaW5nIiwib25lT2YiLCJpc1JlcXVpcmVkIl0sInNvdXJjZVJvb3QiOiJjb21wb25lbnQ6Ly8vIiwic291cmNlcyI6WyIuLi8uLi9zcmMvVG9hc3QvTm90aWZpY2F0aW9uSWNvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBob29rcyB9IGZyb20gJ2JvdGZyYW1ld29yay13ZWJjaGF0LWFwaSc7XG5pbXBvcnQgeyBpc0ZvcmJpZGRlblByb3BlcnR5TmFtZSB9IGZyb20gJ2JvdGZyYW1ld29yay13ZWJjaGF0LWNvcmUnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBDaGVja01hcmtJY29uIGZyb20gJy4vQ2hlY2tNYXJrSWNvbic7XG5pbXBvcnQgRXhjbGFtYXRpb25NYXJrSWNvbiBmcm9tICcuL0V4Y2xhbWF0aW9uTWFya0ljb24nO1xuXG5jb25zdCB7IHVzZUxvY2FsaXplciB9ID0gaG9va3M7XG5cbmNvbnN0IE5vdGlmaWNhdGlvbkljb24gPSAoeyBjbGFzc05hbWUsIGxldmVsIH0pID0+IHtcbiAgY29uc3QgbG9jYWxpemUgPSB1c2VMb2NhbGl6ZXIoKTtcblxuICBjb25zdCBwcmVmaXhlcyA9IHtcbiAgICBlcnJvcjogbG9jYWxpemUoJ1RPQVNUX0FMVF9FUlJPUicpLFxuICAgIGluZm86IGxvY2FsaXplKCdUT0FTVF9BTFRfSU5GTycpLFxuICAgIHN1Y2Nlc3M6IGxvY2FsaXplKCdUT0FTVF9BTFRfU1VDQ0VTUycpLFxuICAgIHdhcm46IGxvY2FsaXplKCdUT0FTVF9BTFRfV0FSTicpXG4gIH07XG5cbiAgLy8gTWl0aWdhdGVkIHRocm91Z2ggZGVueWxpc3RpbmcuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBzZWN1cml0eS9kZXRlY3Qtb2JqZWN0LWluamVjdGlvblxuICBjb25zdCBwcmVmaXggPSAoIWlzRm9yYmlkZGVuUHJvcGVydHlOYW1lKGxldmVsKSAmJiBwcmVmaXhlc1tsZXZlbF0pIHx8ICcnO1xuXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAge2xldmVsID09PSAnc3VjY2VzcycgPyAoXG4gICAgICAgIDxDaGVja01hcmtJY29uIGFyaWEtbGFiZWw9e3ByZWZpeH0gY2xhc3NOYW1lPXtjbGFzc05hbWV9IC8+XG4gICAgICApIDogKFxuICAgICAgICA8RXhjbGFtYXRpb25NYXJrSWNvbiBhcmlhLWxhYmVsPXtwcmVmaXh9IGNsYXNzTmFtZT17Y2xhc3NOYW1lfSAvPlxuICAgICAgKX1cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApO1xufTtcblxuTm90aWZpY2F0aW9uSWNvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIGNsYXNzTmFtZTogdW5kZWZpbmVkXG59O1xuXG5Ob3RpZmljYXRpb25JY29uLnByb3BUeXBlcyA9IHtcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBsZXZlbDogUHJvcFR5cGVzLm9uZU9mKFsnZXJyb3InLCAnaW5mbycsICdzdWNjZXNzJywgJ3dhcm4nXSkuaXNSZXF1aXJlZFxufTtcblxuZXhwb3J0IGRlZmF1bHQgTm90aWZpY2F0aW9uSWNvbjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOzs7O0FBRUEsSUFBUUEsWUFBUixHQUF5QkMsNkJBQXpCLENBQVFELFlBQVI7O0FBRUEsSUFBTUUsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFtQixPQUEwQjtFQUFBLElBQXZCQyxTQUF1QixRQUF2QkEsU0FBdUI7RUFBQSxJQUFaQyxLQUFZLFFBQVpBLEtBQVk7RUFDakQsSUFBTUMsUUFBUSxHQUFHTCxZQUFZLEVBQTdCO0VBRUEsSUFBTU0sUUFBUSxHQUFHO0lBQ2ZDLEtBQUssRUFBRUYsUUFBUSxDQUFDLGlCQUFELENBREE7SUFFZkcsSUFBSSxFQUFFSCxRQUFRLENBQUMsZ0JBQUQsQ0FGQztJQUdmSSxPQUFPLEVBQUVKLFFBQVEsQ0FBQyxtQkFBRCxDQUhGO0lBSWZLLElBQUksRUFBRUwsUUFBUSxDQUFDLGdCQUFEO0VBSkMsQ0FBakIsQ0FIaUQsQ0FVakQ7RUFDQTs7RUFDQSxJQUFNTSxNQUFNLEdBQUksQ0FBQyxJQUFBQyxnREFBQSxFQUF3QlIsS0FBeEIsQ0FBRCxJQUFtQ0UsUUFBUSxDQUFDRixLQUFELENBQTVDLElBQXdELEVBQXZFO0VBRUEsb0JBQ0UsNkJBQUMsY0FBRCxDQUFPLFFBQVAsUUFDR0EsS0FBSyxLQUFLLFNBQVYsZ0JBQ0MsNkJBQUMsc0JBQUQ7SUFBZSxjQUFZTyxNQUEzQjtJQUFtQyxTQUFTLEVBQUVSO0VBQTlDLEVBREQsZ0JBR0MsNkJBQUMsNEJBQUQ7SUFBcUIsY0FBWVEsTUFBakM7SUFBeUMsU0FBUyxFQUFFUjtFQUFwRCxFQUpKLENBREY7QUFTRCxDQXZCRDs7QUF5QkFELGdCQUFnQixDQUFDVyxZQUFqQixHQUFnQztFQUM5QlYsU0FBUyxFQUFFVztBQURtQixDQUFoQztBQUlBWixnQkFBZ0IsQ0FBQ2EsU0FBakIsR0FBNkI7RUFDM0JaLFNBQVMsRUFBRWEsa0JBQUEsQ0FBVUMsTUFETTtFQUUzQmIsS0FBSyxFQUFFWSxrQkFBQSxDQUFVRSxLQUFWLENBQWdCLENBQUMsT0FBRCxFQUFVLE1BQVYsRUFBa0IsU0FBbEIsRUFBNkIsTUFBN0IsQ0FBaEIsRUFBc0RDO0FBRmxDLENBQTdCO2VBS2VqQixnQiJ9