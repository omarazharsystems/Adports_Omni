"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _isPresentational = _interopRequireDefault(require("./LiveRegion/isPresentational"));

var _LiveRegionActivity = _interopRequireDefault(require("../LiveRegion/LiveRegionActivity"));

var _SendFailed = _interopRequireDefault(require("./LiveRegion/SendFailed"));

var _LiveRegionTwinComposer = _interopRequireDefault(require("../providers/LiveRegionTwin/LiveRegionTwinComposer"));

var _tabbableElements = _interopRequireDefault(require("../Utils/tabbableElements"));

var _useLocalizeAccessKey = _interopRequireDefault(require("../hooks/internal/useLocalizeAccessKey"));

var _useQueueStaticElement = _interopRequireDefault(require("../providers/LiveRegionTwin/useQueueStaticElement"));

var _useStyleToEmotionObject = _interopRequireDefault(require("../hooks/internal/useStyleToEmotionObject"));

var _useSuggestedActionsAccessKey = _interopRequireDefault(require("../hooks/internal/useSuggestedActionsAccessKey"));

var _useTypistNames3 = _interopRequireDefault(require("./useTypistNames"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useActivities = _botframeworkWebchatApi.hooks.useActivities,
    useGetKeyByActivity = _botframeworkWebchatApi.hooks.useGetKeyByActivity,
    useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer,
    useStyleOptions = _botframeworkWebchatApi.hooks.useStyleOptions;
var ROOT_STYLE = {
  '&.webchat__live-region-transcript': {
    '& .webchat__live-region-transcript__note, & .webchat__live-region-transcript__note, & .webchat__live-region-transcript__text-element': {
      color: 'transparent',
      height: 1,
      overflow: 'hidden',
      position: 'absolute',
      top: 0,
      whiteSpace: 'nowrap',
      width: 1
    }
  }
};

var LiveRegionTranscriptCore = function LiveRegionTranscriptCore(_ref) {
  var activityElementMapRef = _ref.activityElementMapRef;

  // We are looking for all activities instead of just those will be rendered.
  // This is because some activities that chosen not be rendered in the chat history,
  // we might still need to be read by screen reader. Such as, suggested actions without text content.
  var _useSuggestedActionsA = (0, _useSuggestedActionsAccessKey.default)(),
      _useSuggestedActionsA2 = _slicedToArray(_useSuggestedActionsA, 1),
      accessKey = _useSuggestedActionsA2[0];

  var _useActivities = useActivities(),
      _useActivities2 = _slicedToArray(_useActivities, 1),
      activities = _useActivities2[0];

  var _useTypistNames = (0, _useTypistNames3.default)(),
      _useTypistNames2 = _slicedToArray(_useTypistNames, 1),
      typistNames = _useTypistNames2[0];

  var getKeyByActivity = useGetKeyByActivity();
  var localize = useLocalizer();
  var localizeAccessKeyAsAccessibleName = (0, _useLocalizeAccessKey.default)('accessible name');
  var queueStaticElement = (0, _useQueueStaticElement.default)();
  var liveRegionInteractiveLabelAlt = localize('TRANSCRIPT_LIVE_REGION_INTERACTIVE_LABEL_ALT');
  var liveRegionInteractiveWithLinkLabelAlt = localize('TRANSCRIPT_LIVE_REGION_INTERACTIVE_WITH_LINKS_LABEL_ALT');
  var typingIndicator = !!typistNames.length && localize(typistNames.length > 1 ? 'TYPING_INDICATOR_MULTIPLE_TEXT' : 'TYPING_INDICATOR_SINGLE_TEXT', typistNames[0]);
  var liveRegionSuggestedActionsLabelAlt = accessKey ? localize('TRANSCRIPT_LIVE_REGION_SUGGESTED_ACTIONS_WITH_ACCESS_KEY_LABEL_ALT', localizeAccessKeyAsAccessibleName(accessKey)) : localize('TRANSCRIPT_LIVE_REGION_SUGGESTED_ACTIONS_LABEL_ALT');
  var keyedActivities = (0, _react.useMemo)(function () {
    return Object.freeze(activities.reduce(function (intermediate, activity) {
      // Only "message" activity will be read by screen reader.
      if (activity.type === 'message') {
        return intermediate.set(getKeyByActivity(activity), activity);
      }

      return intermediate;
    }, new Map()));
  }, [activities, getKeyByActivity]);
  var prevRenderingActivitiesRef = (0, _react.useRef)();
  (0, _react.useEffect)(function () {
    var prevRenderingActivities = prevRenderingActivitiesRef.current;
    var appendedActivities = []; // Bottom-up, find activities which are recently appended (i.e. new activity will have a new key).
    // We only consider new activities added to the bottom of the chat history.
    // Based on how `aria-relevant="additions"` works, activities that are updated, deleted, or reordered, should be ignored.

    var _iterator = _createForOfIteratorHelper(Array.from(keyedActivities.entries()).reverse()),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _step$value = _slicedToArray(_step.value, 2),
            key = _step$value[0],
            activity = _step$value[1];

        if (prevRenderingActivities !== null && prevRenderingActivities !== void 0 && prevRenderingActivities.has(key)) {
          break;
        }

        appendedActivities.unshift({
          activity: activity,
          key: key
        });
        (0, _isPresentational.default)(activity) || queueStaticElement( /*#__PURE__*/_react.default.createElement(_LiveRegionActivity.default, {
          activity: activity
        }));
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    var hasNewLink = appendedActivities.some(function (_ref2) {
      var _activityElementMapRe;

      var key = _ref2.key;
      return (_activityElementMapRe = activityElementMapRef.current.get(key)) === null || _activityElementMapRe === void 0 ? void 0 : _activityElementMapRe.querySelector('a');
    });
    var hasNewWidget = appendedActivities.some(function (_ref3) {
      var _activityElementMapRe2;

      var key = _ref3.key;
      return !!(0, _tabbableElements.default)((_activityElementMapRe2 = activityElementMapRef.current.get(key)) === null || _activityElementMapRe2 === void 0 ? void 0 : _activityElementMapRe2.querySelector('.webchat__basic-transcript__activity-body')).length;
    });
    var hasSuggestedActions = appendedActivities.some(function (_ref4) {
      var _activity$suggestedAc, _activity$suggestedAc2;

      var activity = _ref4.activity;
      return activity.type === 'message' && ((_activity$suggestedAc = activity.suggestedActions) === null || _activity$suggestedAc === void 0 ? void 0 : (_activity$suggestedAc2 = _activity$suggestedAc.actions) === null || _activity$suggestedAc2 === void 0 ? void 0 : _activity$suggestedAc2.length);
    }); // This is a footnote reading either:
    // - "Message is interactive. Press shift tab key 2 to 3 times to switch to the chat history. Then click on the message to interact.", or;
    // - "One or more links in the message. Press shift tab key 2 to 3 times to switch to the chat history. Then click on the message to interact."

    if (hasNewLink || hasNewWidget) {
      queueStaticElement( /*#__PURE__*/_react.default.createElement("div", {
        className: "webchat__live-region-transcript__note",
        role: "note"
      }, hasNewLink ? liveRegionInteractiveWithLinkLabelAlt : liveRegionInteractiveLabelAlt));
    } // This is a footnote reading "Suggested actions container: has content. Press CTRL + SHIFT + A to select."


    if (hasSuggestedActions) {
      queueStaticElement( /*#__PURE__*/_react.default.createElement("div", {
        className: "webchat__live-region-transcript__note",
        role: "note"
      }, liveRegionSuggestedActionsLabelAlt));
    }

    prevRenderingActivitiesRef.current = keyedActivities;
  }, [activityElementMapRef, liveRegionInteractiveLabelAlt, liveRegionInteractiveWithLinkLabelAlt, liveRegionSuggestedActionsLabelAlt, prevRenderingActivitiesRef, queueStaticElement, keyedActivities]);
  (0, _react.useEffect)(function () {
    typingIndicator && queueStaticElement(typingIndicator);
  }, [queueStaticElement, typingIndicator]);
  return /*#__PURE__*/_react.default.createElement(_SendFailed.default, null);
};

var LiveRegionTranscript = function LiveRegionTranscript(_ref5) {
  var activityElementMapRef = _ref5.activityElementMapRef;

  var _useStyleOptions = useStyleOptions(),
      _useStyleOptions2 = _slicedToArray(_useStyleOptions, 1),
      internalLiveRegionFadeAfter = _useStyleOptions2[0].internalLiveRegionFadeAfter;

  var localize = useLocalizer();
  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';
  var transcriptRoleDescription = localize('TRANSCRIPT_ARIA_ROLE_ALT');
  return /*#__PURE__*/_react.default.createElement(_LiveRegionTwinComposer.default, {
    "aria-roledescription": transcriptRoleDescription,
    className: (0, _classnames.default)('webchat__live-region-transcript', rootClassName),
    fadeAfter: internalLiveRegionFadeAfter,
    role: "log",
    textElementClassName: "webchat__live-region-transcript__text-element"
  }, /*#__PURE__*/_react.default.createElement(LiveRegionTranscriptCore, {
    activityElementMapRef: activityElementMapRef
  }));
};

LiveRegionTranscript.propTypes = {
  // PropTypes cannot be fully expressed in TypeScript.
  // @ts-ignore
  activityElementMapRef: _propTypes.default.shape({
    current: _propTypes.default.instanceOf(Map)
  }).isRequired
};
var _default = LiveRegionTranscript;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,