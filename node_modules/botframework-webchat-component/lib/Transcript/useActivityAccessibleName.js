"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useActivityAccessibleName;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _react = require("react");

var _SendStatus = require("../types/internal/SendStatus");

var _activityAltText = _interopRequireDefault(require("../Utils/activityAltText"));

var _tabbableElements = _interopRequireDefault(require("../Utils/tabbableElements"));

var _useRenderMarkdownAsHTML = _interopRequireDefault(require("../hooks/useRenderMarkdownAsHTML"));

var _useValueRef = _interopRequireDefault(require("../hooks/internal/useValueRef"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var InteractiveType;

(function (InteractiveType) {
  InteractiveType[InteractiveType["LINK"] = 0] = "LINK";
  InteractiveType[InteractiveType["WIDGET"] = 1] = "WIDGET";
})(InteractiveType || (InteractiveType = {}));

var useAvatarForBot = _botframeworkWebchatApi.hooks.useAvatarForBot,
    useGetKeyByActivity = _botframeworkWebchatApi.hooks.useGetKeyByActivity,
    useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer,
    useSendStatusByActivityKey = _botframeworkWebchatApi.hooks.useSendStatusByActivityKey;
var ACTIVITY_NUM_ATTACHMENTS_ALT_IDS = {
  few: 'ACTIVITY_NUM_ATTACHMENTS_FEW_ALT',
  many: 'ACTIVITY_NUM_ATTACHMENTS_MANY_ALT',
  one: 'ACTIVITY_NUM_ATTACHMENTS_ONE_ALT',
  other: 'ACTIVITY_NUM_ATTACHMENTS_OTHER_ALT',
  two: 'ACTIVITY_NUM_ATTACHMENTS_TWO_ALT'
};
/**
 * Computes accessible name of an activity during transcript navigation.
 *
 * This text should be kept simple and short.
 *
 * Due to a bug in Safari, accessible name for active descendant must be a string but not a DOM element.
 */

function useActivityAccessibleName(activity, bodyRef) {
  var _activity$from, _activity$attachments;

  var _useAvatarForBot = useAvatarForBot(),
      _useAvatarForBot2 = _slicedToArray(_useAvatarForBot, 1),
      botInitials = _useAvatarForBot2[0].initials;

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      interactiveType = _useState2[0],
      setInteractiveType = _useState2[1];

  var _useSendStatusByActiv = useSendStatusByActivityKey(),
      _useSendStatusByActiv2 = _slicedToArray(_useSendStatusByActiv, 1),
      sendStatusByActivityKey = _useSendStatusByActiv2[0];

  var fromSelf = ((_activity$from = activity.from) === null || _activity$from === void 0 ? void 0 : _activity$from.role) === 'user';
  var getKeyByActivity = useGetKeyByActivity();
  var localize = useLocalizer();
  var localizeWithPlural = useLocalizer({
    plural: true
  });
  var numAttachments = activity.type === 'message' ? ((_activity$attachments = activity.attachments) === null || _activity$attachments === void 0 ? void 0 : _activity$attachments.length) || 0 : 0;
  var renderMarkdownAsHTML = (0, _useRenderMarkdownAsHTML.default)();
  /** "Click to interact." */

  var activityInteractiveFootNoteAlt = localize('ACTIVITY_INTERACTIVE_FOOTNOTE_ALT');
  /** "Message is interactive." */

  var activityInteractiveReasonInteractiveContentAlt = localize('ACTIVITY_INTERACTIVE_REASON_INTERACTIVE_CONTENT_ALT');
  /** "One or more links in the message." */

  var activityInteractiveReasonLinkAlt = localize('ACTIVITY_INTERACTIVE_REASON_LINK_ALT');
  /** "Send failed." */

  var activityInteractiveReasonSendFailedAlt = localize('ACTIVITY_INTERACTIVE_REASON_SEND_FAILED_ALT');
  var activityKey = (0, _react.useMemo)(function () {
    return getKeyByActivity(activity);
  }, [activity, getKeyByActivity]);
  var greetingAlt = (0, _react.useMemo)(function () {
    return (fromSelf ? localize('ACTIVITY_YOU_SAID_ALT') : localize('ACTIVITY_BOT_SAID_ALT', botInitials || '')).replace(/[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]{2,}/g, ' ');
  }, [botInitials, fromSelf, localize]);
  var interactiveTypeRef = (0, _useValueRef.default)(interactiveType);
  var messageTextAlt = (0, _react.useMemo)(function () {
    return (0, _activityAltText.default)(activity, renderMarkdownAsHTML);
  }, [activity, renderMarkdownAsHTML]);
  var numAttachmentsAlt = (0, _react.useMemo)(function () {
    return numAttachments ? localizeWithPlural(ACTIVITY_NUM_ATTACHMENTS_ALT_IDS, numAttachments) : '';
  }, [localizeWithPlural, numAttachments]);
  var isSendFailed = (0, _react.useMemo)(function () {
    return sendStatusByActivityKey.get(activityKey) === _SendStatus.SEND_FAILED;
  }, [activityKey, sendStatusByActivityKey]);
  var accessibleName = (0, _react.useMemo)( // We are concatenating in a single string for Safari. If we split it up, Safari will only narrate the first section.
  function () {
    return [greetingAlt, messageTextAlt, numAttachmentsAlt, isSendFailed ? activityInteractiveReasonSendFailedAlt : '', interactiveType === InteractiveType.LINK ? activityInteractiveReasonLinkAlt : interactiveType === InteractiveType.WIDGET ? activityInteractiveReasonInteractiveContentAlt : '', interactiveType || isSendFailed ? activityInteractiveFootNoteAlt : ''].filter(Boolean).join(' ');
  }, [activityInteractiveFootNoteAlt, activityInteractiveReasonInteractiveContentAlt, activityInteractiveReasonLinkAlt, activityInteractiveReasonSendFailedAlt, greetingAlt, interactiveType, isSendFailed, messageTextAlt, numAttachmentsAlt]);
  (0, _react.useEffect)(function () {
    var _bodyRef$current;

    var hasLinks = !!((_bodyRef$current = bodyRef.current) !== null && _bodyRef$current !== void 0 && _bodyRef$current.querySelector('a'));
    var hasWidgets = !!(0, _tabbableElements.default)(bodyRef.current).length;
    interactiveTypeRef.current !== hasWidgets && setInteractiveType(hasLinks ? InteractiveType.LINK : hasWidgets ? InteractiveType.WIDGET : false);
  }, [bodyRef, interactiveTypeRef, setInteractiveType]);
  return [accessibleName];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJbnRlcmFjdGl2ZVR5cGUiLCJ1c2VBdmF0YXJGb3JCb3QiLCJob29rcyIsInVzZUdldEtleUJ5QWN0aXZpdHkiLCJ1c2VMb2NhbGl6ZXIiLCJ1c2VTZW5kU3RhdHVzQnlBY3Rpdml0eUtleSIsIkFDVElWSVRZX05VTV9BVFRBQ0hNRU5UU19BTFRfSURTIiwiZmV3IiwibWFueSIsIm9uZSIsIm90aGVyIiwidHdvIiwidXNlQWN0aXZpdHlBY2Nlc3NpYmxlTmFtZSIsImFjdGl2aXR5IiwiYm9keVJlZiIsImJvdEluaXRpYWxzIiwiaW5pdGlhbHMiLCJ1c2VTdGF0ZSIsImludGVyYWN0aXZlVHlwZSIsInNldEludGVyYWN0aXZlVHlwZSIsInNlbmRTdGF0dXNCeUFjdGl2aXR5S2V5IiwiZnJvbVNlbGYiLCJmcm9tIiwicm9sZSIsImdldEtleUJ5QWN0aXZpdHkiLCJsb2NhbGl6ZSIsImxvY2FsaXplV2l0aFBsdXJhbCIsInBsdXJhbCIsIm51bUF0dGFjaG1lbnRzIiwidHlwZSIsImF0dGFjaG1lbnRzIiwibGVuZ3RoIiwicmVuZGVyTWFya2Rvd25Bc0hUTUwiLCJ1c2VSZW5kZXJNYXJrZG93bkFzSFRNTCIsImFjdGl2aXR5SW50ZXJhY3RpdmVGb290Tm90ZUFsdCIsImFjdGl2aXR5SW50ZXJhY3RpdmVSZWFzb25JbnRlcmFjdGl2ZUNvbnRlbnRBbHQiLCJhY3Rpdml0eUludGVyYWN0aXZlUmVhc29uTGlua0FsdCIsImFjdGl2aXR5SW50ZXJhY3RpdmVSZWFzb25TZW5kRmFpbGVkQWx0IiwiYWN0aXZpdHlLZXkiLCJ1c2VNZW1vIiwiZ3JlZXRpbmdBbHQiLCJyZXBsYWNlIiwiaW50ZXJhY3RpdmVUeXBlUmVmIiwidXNlVmFsdWVSZWYiLCJtZXNzYWdlVGV4dEFsdCIsImFjdGl2aXR5QWx0VGV4dCIsIm51bUF0dGFjaG1lbnRzQWx0IiwiaXNTZW5kRmFpbGVkIiwiZ2V0IiwiU0VORF9GQUlMRUQiLCJhY2Nlc3NpYmxlTmFtZSIsIkxJTksiLCJXSURHRVQiLCJmaWx0ZXIiLCJCb29sZWFuIiwiam9pbiIsInVzZUVmZmVjdCIsImhhc0xpbmtzIiwiY3VycmVudCIsInF1ZXJ5U2VsZWN0b3IiLCJoYXNXaWRnZXRzIiwidGFiYmFibGVFbGVtZW50cyJdLCJzb3VyY2VSb290IjoiY29tcG9uZW50Oi8vLyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL1RyYW5zY3JpcHQvdXNlQWN0aXZpdHlBY2Nlc3NpYmxlTmFtZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBob29rcyB9IGZyb20gJ2JvdGZyYW1ld29yay13ZWJjaGF0LWFwaSc7XG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBSZWZPYmplY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IFdlYkNoYXRBY3Rpdml0eSB9IGZyb20gJ2JvdGZyYW1ld29yay13ZWJjaGF0LWNvcmUnO1xuXG5pbXBvcnQgeyBTRU5EX0ZBSUxFRCB9IGZyb20gJy4uL3R5cGVzL2ludGVybmFsL1NlbmRTdGF0dXMnO1xuaW1wb3J0IGFjdGl2aXR5QWx0VGV4dCBmcm9tICcuLi9VdGlscy9hY3Rpdml0eUFsdFRleHQnO1xuaW1wb3J0IHRhYmJhYmxlRWxlbWVudHMgZnJvbSAnLi4vVXRpbHMvdGFiYmFibGVFbGVtZW50cyc7XG5pbXBvcnQgdXNlUmVuZGVyTWFya2Rvd25Bc0hUTUwgZnJvbSAnLi4vaG9va3MvdXNlUmVuZGVyTWFya2Rvd25Bc0hUTUwnO1xuaW1wb3J0IHVzZVZhbHVlUmVmIGZyb20gJy4uL2hvb2tzL2ludGVybmFsL3VzZVZhbHVlUmVmJztcblxuZW51bSBJbnRlcmFjdGl2ZVR5cGUge1xuICBMSU5LLFxuICBXSURHRVRcbn1cblxuY29uc3QgeyB1c2VBdmF0YXJGb3JCb3QsIHVzZUdldEtleUJ5QWN0aXZpdHksIHVzZUxvY2FsaXplciwgdXNlU2VuZFN0YXR1c0J5QWN0aXZpdHlLZXkgfSA9IGhvb2tzO1xuXG5jb25zdCBBQ1RJVklUWV9OVU1fQVRUQUNITUVOVFNfQUxUX0lEUyA9IHtcbiAgZmV3OiAnQUNUSVZJVFlfTlVNX0FUVEFDSE1FTlRTX0ZFV19BTFQnLFxuICBtYW55OiAnQUNUSVZJVFlfTlVNX0FUVEFDSE1FTlRTX01BTllfQUxUJyxcbiAgb25lOiAnQUNUSVZJVFlfTlVNX0FUVEFDSE1FTlRTX09ORV9BTFQnLFxuICBvdGhlcjogJ0FDVElWSVRZX05VTV9BVFRBQ0hNRU5UU19PVEhFUl9BTFQnLFxuICB0d286ICdBQ1RJVklUWV9OVU1fQVRUQUNITUVOVFNfVFdPX0FMVCdcbn07XG5cbi8qKlxuICogQ29tcHV0ZXMgYWNjZXNzaWJsZSBuYW1lIG9mIGFuIGFjdGl2aXR5IGR1cmluZyB0cmFuc2NyaXB0IG5hdmlnYXRpb24uXG4gKlxuICogVGhpcyB0ZXh0IHNob3VsZCBiZSBrZXB0IHNpbXBsZSBhbmQgc2hvcnQuXG4gKlxuICogRHVlIHRvIGEgYnVnIGluIFNhZmFyaSwgYWNjZXNzaWJsZSBuYW1lIGZvciBhY3RpdmUgZGVzY2VuZGFudCBtdXN0IGJlIGEgc3RyaW5nIGJ1dCBub3QgYSBET00gZWxlbWVudC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlQWN0aXZpdHlBY2Nlc3NpYmxlTmFtZShhY3Rpdml0eTogV2ViQ2hhdEFjdGl2aXR5LCBib2R5UmVmOiBSZWZPYmplY3Q8SFRNTEVsZW1lbnQ+KSB7XG4gIGNvbnN0IFt7IGluaXRpYWxzOiBib3RJbml0aWFscyB9XSA9IHVzZUF2YXRhckZvckJvdCgpO1xuICBjb25zdCBbaW50ZXJhY3RpdmVUeXBlLCBzZXRJbnRlcmFjdGl2ZVR5cGVdID0gdXNlU3RhdGU8SW50ZXJhY3RpdmVUeXBlIHwgZmFsc2U+KGZhbHNlKTtcbiAgY29uc3QgW3NlbmRTdGF0dXNCeUFjdGl2aXR5S2V5XSA9IHVzZVNlbmRTdGF0dXNCeUFjdGl2aXR5S2V5KCk7XG4gIGNvbnN0IGZyb21TZWxmID0gYWN0aXZpdHkuZnJvbT8ucm9sZSA9PT0gJ3VzZXInO1xuICBjb25zdCBnZXRLZXlCeUFjdGl2aXR5ID0gdXNlR2V0S2V5QnlBY3Rpdml0eSgpO1xuICBjb25zdCBsb2NhbGl6ZSA9IHVzZUxvY2FsaXplcigpO1xuICBjb25zdCBsb2NhbGl6ZVdpdGhQbHVyYWwgPSB1c2VMb2NhbGl6ZXIoeyBwbHVyYWw6IHRydWUgfSk7XG4gIGNvbnN0IG51bUF0dGFjaG1lbnRzID0gYWN0aXZpdHkudHlwZSA9PT0gJ21lc3NhZ2UnID8gYWN0aXZpdHkuYXR0YWNobWVudHM/Lmxlbmd0aCB8fCAwIDogMDtcbiAgY29uc3QgcmVuZGVyTWFya2Rvd25Bc0hUTUwgPSB1c2VSZW5kZXJNYXJrZG93bkFzSFRNTCgpO1xuXG4gIC8qKiBcIkNsaWNrIHRvIGludGVyYWN0LlwiICovXG4gIGNvbnN0IGFjdGl2aXR5SW50ZXJhY3RpdmVGb290Tm90ZUFsdCA9IGxvY2FsaXplKCdBQ1RJVklUWV9JTlRFUkFDVElWRV9GT09UTk9URV9BTFQnKTtcbiAgLyoqIFwiTWVzc2FnZSBpcyBpbnRlcmFjdGl2ZS5cIiAqL1xuICBjb25zdCBhY3Rpdml0eUludGVyYWN0aXZlUmVhc29uSW50ZXJhY3RpdmVDb250ZW50QWx0ID0gbG9jYWxpemUoXG4gICAgJ0FDVElWSVRZX0lOVEVSQUNUSVZFX1JFQVNPTl9JTlRFUkFDVElWRV9DT05URU5UX0FMVCdcbiAgKTtcbiAgLyoqIFwiT25lIG9yIG1vcmUgbGlua3MgaW4gdGhlIG1lc3NhZ2UuXCIgKi9cbiAgY29uc3QgYWN0aXZpdHlJbnRlcmFjdGl2ZVJlYXNvbkxpbmtBbHQgPSBsb2NhbGl6ZSgnQUNUSVZJVFlfSU5URVJBQ1RJVkVfUkVBU09OX0xJTktfQUxUJyk7XG4gIC8qKiBcIlNlbmQgZmFpbGVkLlwiICovXG4gIGNvbnN0IGFjdGl2aXR5SW50ZXJhY3RpdmVSZWFzb25TZW5kRmFpbGVkQWx0ID0gbG9jYWxpemUoJ0FDVElWSVRZX0lOVEVSQUNUSVZFX1JFQVNPTl9TRU5EX0ZBSUxFRF9BTFQnKTtcbiAgY29uc3QgYWN0aXZpdHlLZXkgPSB1c2VNZW1vKCgpID0+IGdldEtleUJ5QWN0aXZpdHkoYWN0aXZpdHkpLCBbYWN0aXZpdHksIGdldEtleUJ5QWN0aXZpdHldKTtcbiAgY29uc3QgZ3JlZXRpbmdBbHQgPSB1c2VNZW1vKFxuICAgICgpID0+XG4gICAgICAoZnJvbVNlbGYgPyBsb2NhbGl6ZSgnQUNUSVZJVFlfWU9VX1NBSURfQUxUJykgOiBsb2NhbGl6ZSgnQUNUSVZJVFlfQk9UX1NBSURfQUxUJywgYm90SW5pdGlhbHMgfHwgJycpKS5yZXBsYWNlKFxuICAgICAgICAvXFxzezIsfS9ndSxcbiAgICAgICAgJyAnXG4gICAgICApLFxuICAgIFtib3RJbml0aWFscywgZnJvbVNlbGYsIGxvY2FsaXplXVxuICApO1xuICBjb25zdCBpbnRlcmFjdGl2ZVR5cGVSZWYgPSB1c2VWYWx1ZVJlZihpbnRlcmFjdGl2ZVR5cGUpO1xuICBjb25zdCBtZXNzYWdlVGV4dEFsdCA9IHVzZU1lbW8oXG4gICAgKCkgPT4gYWN0aXZpdHlBbHRUZXh0KGFjdGl2aXR5LCByZW5kZXJNYXJrZG93bkFzSFRNTCksXG4gICAgW2FjdGl2aXR5LCByZW5kZXJNYXJrZG93bkFzSFRNTF1cbiAgKTtcbiAgY29uc3QgbnVtQXR0YWNobWVudHNBbHQgPSB1c2VNZW1vKFxuICAgICgpID0+IChudW1BdHRhY2htZW50cyA/IGxvY2FsaXplV2l0aFBsdXJhbChBQ1RJVklUWV9OVU1fQVRUQUNITUVOVFNfQUxUX0lEUywgbnVtQXR0YWNobWVudHMpIDogJycpLFxuICAgIFtsb2NhbGl6ZVdpdGhQbHVyYWwsIG51bUF0dGFjaG1lbnRzXVxuICApO1xuXG4gIGNvbnN0IGlzU2VuZEZhaWxlZCA9IHVzZU1lbW8oXG4gICAgKCkgPT4gc2VuZFN0YXR1c0J5QWN0aXZpdHlLZXkuZ2V0KGFjdGl2aXR5S2V5KSA9PT0gU0VORF9GQUlMRUQsXG4gICAgW2FjdGl2aXR5S2V5LCBzZW5kU3RhdHVzQnlBY3Rpdml0eUtleV1cbiAgKTtcblxuICBjb25zdCBhY2Nlc3NpYmxlTmFtZSA9IHVzZU1lbW8oXG4gICAgLy8gV2UgYXJlIGNvbmNhdGVuYXRpbmcgaW4gYSBzaW5nbGUgc3RyaW5nIGZvciBTYWZhcmkuIElmIHdlIHNwbGl0IGl0IHVwLCBTYWZhcmkgd2lsbCBvbmx5IG5hcnJhdGUgdGhlIGZpcnN0IHNlY3Rpb24uXG4gICAgKCkgPT5cbiAgICAgIFtcbiAgICAgICAgZ3JlZXRpbmdBbHQsXG4gICAgICAgIG1lc3NhZ2VUZXh0QWx0LFxuICAgICAgICBudW1BdHRhY2htZW50c0FsdCxcbiAgICAgICAgaXNTZW5kRmFpbGVkID8gYWN0aXZpdHlJbnRlcmFjdGl2ZVJlYXNvblNlbmRGYWlsZWRBbHQgOiAnJyxcbiAgICAgICAgaW50ZXJhY3RpdmVUeXBlID09PSBJbnRlcmFjdGl2ZVR5cGUuTElOS1xuICAgICAgICAgID8gYWN0aXZpdHlJbnRlcmFjdGl2ZVJlYXNvbkxpbmtBbHRcbiAgICAgICAgICA6IGludGVyYWN0aXZlVHlwZSA9PT0gSW50ZXJhY3RpdmVUeXBlLldJREdFVFxuICAgICAgICAgID8gYWN0aXZpdHlJbnRlcmFjdGl2ZVJlYXNvbkludGVyYWN0aXZlQ29udGVudEFsdFxuICAgICAgICAgIDogJycsXG4gICAgICAgIGludGVyYWN0aXZlVHlwZSB8fCBpc1NlbmRGYWlsZWQgPyBhY3Rpdml0eUludGVyYWN0aXZlRm9vdE5vdGVBbHQgOiAnJ1xuICAgICAgXVxuICAgICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAgIC5qb2luKCcgJyksXG4gICAgW1xuICAgICAgYWN0aXZpdHlJbnRlcmFjdGl2ZUZvb3ROb3RlQWx0LFxuICAgICAgYWN0aXZpdHlJbnRlcmFjdGl2ZVJlYXNvbkludGVyYWN0aXZlQ29udGVudEFsdCxcbiAgICAgIGFjdGl2aXR5SW50ZXJhY3RpdmVSZWFzb25MaW5rQWx0LFxuICAgICAgYWN0aXZpdHlJbnRlcmFjdGl2ZVJlYXNvblNlbmRGYWlsZWRBbHQsXG4gICAgICBncmVldGluZ0FsdCxcbiAgICAgIGludGVyYWN0aXZlVHlwZSxcbiAgICAgIGlzU2VuZEZhaWxlZCxcbiAgICAgIG1lc3NhZ2VUZXh0QWx0LFxuICAgICAgbnVtQXR0YWNobWVudHNBbHRcbiAgICBdXG4gICk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBoYXNMaW5rcyA9ICEhYm9keVJlZi5jdXJyZW50Py5xdWVyeVNlbGVjdG9yKCdhJyk7XG4gICAgY29uc3QgaGFzV2lkZ2V0cyA9ICEhdGFiYmFibGVFbGVtZW50cyhib2R5UmVmLmN1cnJlbnQpLmxlbmd0aDtcblxuICAgIGludGVyYWN0aXZlVHlwZVJlZi5jdXJyZW50ICE9PSBoYXNXaWRnZXRzICYmXG4gICAgICBzZXRJbnRlcmFjdGl2ZVR5cGUoaGFzTGlua3MgPyBJbnRlcmFjdGl2ZVR5cGUuTElOSyA6IGhhc1dpZGdldHMgPyBJbnRlcmFjdGl2ZVR5cGUuV0lER0VUIDogZmFsc2UpO1xuICB9LCBbYm9keVJlZiwgaW50ZXJhY3RpdmVUeXBlUmVmLCBzZXRJbnRlcmFjdGl2ZVR5cGVdKTtcblxuICByZXR1cm4gW2FjY2Vzc2libGVOYW1lXTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUlBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7O0lBRUtBLGU7O1dBQUFBLGU7RUFBQUEsZSxDQUFBQSxlO0VBQUFBLGUsQ0FBQUEsZTtHQUFBQSxlLEtBQUFBLGU7O0FBS0wsSUFBUUMsZUFBUixHQUEyRkMsNkJBQTNGLENBQVFELGVBQVI7QUFBQSxJQUF5QkUsbUJBQXpCLEdBQTJGRCw2QkFBM0YsQ0FBeUJDLG1CQUF6QjtBQUFBLElBQThDQyxZQUE5QyxHQUEyRkYsNkJBQTNGLENBQThDRSxZQUE5QztBQUFBLElBQTREQywwQkFBNUQsR0FBMkZILDZCQUEzRixDQUE0REcsMEJBQTVEO0FBRUEsSUFBTUMsZ0NBQWdDLEdBQUc7RUFDdkNDLEdBQUcsRUFBRSxrQ0FEa0M7RUFFdkNDLElBQUksRUFBRSxtQ0FGaUM7RUFHdkNDLEdBQUcsRUFBRSxrQ0FIa0M7RUFJdkNDLEtBQUssRUFBRSxvQ0FK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