"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useTypistNames;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _react = require("react");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useActiveTyping = _botframeworkWebchatApi.hooks.useActiveTyping;

function arrayEquals(x, y) {
  return x.length === y.length && x.every(function (value, index) {
    return y[+index] === value;
  });
}
/** Gets names of users who are actively typing, sorted by the time they started typing. */


function useTypistNames() {
  var _useActiveTyping = useActiveTyping(),
      _useActiveTyping2 = _slicedToArray(_useActiveTyping, 1),
      activeTyping = _useActiveTyping2[0];

  var prevTypistNamesStateRef = (0, _react.useRef)(Object.freeze([Object.freeze([])]));
  var activeTypingFromOthersValues = Object.values(activeTyping).filter(function (_ref) {
    var role = _ref.role;
    return role !== 'user';
  }); // Sort the list by the first typist.

  var sortedActiveTypingFromOthersValues = activeTypingFromOthersValues.sort(function (_ref2, _ref3) {
    var x = _ref2.at;
    var y = _ref3.at;
    return x - y;
  });
  var typistNamesState = Object.freeze([Object.freeze(sortedActiveTypingFromOthersValues.map(function (_ref4) {
    var name = _ref4.name;
    return name;
  }))]);
  var prevTypistNamesState = prevTypistNamesStateRef.current;
  var nextTypistNamesState = arrayEquals(typistNamesState[0], prevTypistNamesState[0]) ? prevTypistNamesState : typistNamesState;
  (0, _react.useEffect)(function () {
    prevTypistNamesStateRef.current = nextTypistNamesState;
  }, [prevTypistNamesStateRef, nextTypistNamesState]);
  return nextTypistNamesState;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1c2VBY3RpdmVUeXBpbmciLCJob29rcyIsImFycmF5RXF1YWxzIiwieCIsInkiLCJsZW5ndGgiLCJldmVyeSIsInZhbHVlIiwiaW5kZXgiLCJ1c2VUeXBpc3ROYW1lcyIsImFjdGl2ZVR5cGluZyIsInByZXZUeXBpc3ROYW1lc1N0YXRlUmVmIiwidXNlUmVmIiwiT2JqZWN0IiwiZnJlZXplIiwiYWN0aXZlVHlwaW5nRnJvbU90aGVyc1ZhbHVlcyIsInZhbHVlcyIsImZpbHRlciIsInJvbGUiLCJzb3J0ZWRBY3RpdmVUeXBpbmdGcm9tT3RoZXJzVmFsdWVzIiwic29ydCIsImF0IiwidHlwaXN0TmFtZXNTdGF0ZSIsIm1hcCIsIm5hbWUiLCJwcmV2VHlwaXN0TmFtZXNTdGF0ZSIsImN1cnJlbnQiLCJuZXh0VHlwaXN0TmFtZXNTdGF0ZSIsInVzZUVmZmVjdCJdLCJzb3VyY2VSb290IjoiY29tcG9uZW50Oi8vLyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL1RyYW5zY3JpcHQvdXNlVHlwaXN0TmFtZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaG9va3MgfSBmcm9tICdib3RmcmFtZXdvcmstd2ViY2hhdC1hcGknO1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IHsgdXNlQWN0aXZlVHlwaW5nIH0gPSBob29rcztcblxuZnVuY3Rpb24gYXJyYXlFcXVhbHM8VD4oeDogcmVhZG9ubHkgVFtdLCB5OiByZWFkb25seSBUW10pOiBib29sZWFuIHtcbiAgcmV0dXJuIHgubGVuZ3RoID09PSB5Lmxlbmd0aCAmJiB4LmV2ZXJ5KCh2YWx1ZSwgaW5kZXgpID0+IHlbK2luZGV4XSA9PT0gdmFsdWUpO1xufVxuXG4vKiogR2V0cyBuYW1lcyBvZiB1c2VycyB3aG8gYXJlIGFjdGl2ZWx5IHR5cGluZywgc29ydGVkIGJ5IHRoZSB0aW1lIHRoZXkgc3RhcnRlZCB0eXBpbmcuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VUeXBpc3ROYW1lcygpOiByZWFkb25seSBbcmVhZG9ubHkgc3RyaW5nW11dIHtcbiAgY29uc3QgW2FjdGl2ZVR5cGluZ10gPSB1c2VBY3RpdmVUeXBpbmcoKTtcbiAgY29uc3QgcHJldlR5cGlzdE5hbWVzU3RhdGVSZWYgPSB1c2VSZWY8cmVhZG9ubHkgW3JlYWRvbmx5IHN0cmluZ1tdXT4oXG4gICAgT2JqZWN0LmZyZWV6ZShbT2JqZWN0LmZyZWV6ZShbXSBhcyBzdHJpbmdbXSldKSBhcyBbcmVhZG9ubHkgc3RyaW5nW11dXG4gICk7XG5cbiAgY29uc3QgYWN0aXZlVHlwaW5nRnJvbU90aGVyc1ZhbHVlcyA9IE9iamVjdC52YWx1ZXMoYWN0aXZlVHlwaW5nKS5maWx0ZXIoKHsgcm9sZSB9KSA9PiByb2xlICE9PSAndXNlcicpO1xuXG4gIC8vIFNvcnQgdGhlIGxpc3QgYnkgdGhlIGZpcnN0IHR5cGlzdC5cbiAgY29uc3Qgc29ydGVkQWN0aXZlVHlwaW5nRnJvbU90aGVyc1ZhbHVlcyA9IGFjdGl2ZVR5cGluZ0Zyb21PdGhlcnNWYWx1ZXMuc29ydCgoeyBhdDogeCB9LCB7IGF0OiB5IH0pID0+IHggLSB5KTtcblxuICBjb25zdCB0eXBpc3ROYW1lc1N0YXRlOiByZWFkb25seSBbcmVhZG9ubHkgc3RyaW5nW11dID0gT2JqZWN0LmZyZWV6ZShbXG4gICAgT2JqZWN0LmZyZWV6ZShzb3J0ZWRBY3RpdmVUeXBpbmdGcm9tT3RoZXJzVmFsdWVzLm1hcCgoeyBuYW1lIH0pID0+IG5hbWUpKVxuICBdKSBhcyByZWFkb25seSBbcmVhZG9ubHkgc3RyaW5nW11dO1xuXG4gIGNvbnN0IHsgY3VycmVudDogcHJldlR5cGlzdE5hbWVzU3RhdGUgfSA9IHByZXZUeXBpc3ROYW1lc1N0YXRlUmVmO1xuXG4gIGNvbnN0IG5leHRUeXBpc3ROYW1lc1N0YXRlID0gYXJyYXlFcXVhbHModHlwaXN0TmFtZXNTdGF0ZVswXSwgcHJldlR5cGlzdE5hbWVzU3RhdGVbMF0pXG4gICAgPyBwcmV2VHlwaXN0TmFtZXNTdGF0ZVxuICAgIDogdHlwaXN0TmFtZXNTdGF0ZTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHByZXZUeXBpc3ROYW1lc1N0YXRlUmVmLmN1cnJlbnQgPSBuZXh0VHlwaXN0TmFtZXNTdGF0ZTtcbiAgfSwgW3ByZXZUeXBpc3ROYW1lc1N0YXRlUmVmLCBuZXh0VHlwaXN0TmFtZXNTdGF0ZV0pO1xuXG4gIHJldHVybiBuZXh0VHlwaXN0TmFtZXNTdGF0ZTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7Ozs7Ozs7Ozs7OztBQUVBLElBQVFBLGVBQVIsR0FBNEJDLDZCQUE1QixDQUFRRCxlQUFSOztBQUVBLFNBQVNFLFdBQVQsQ0FBd0JDLENBQXhCLEVBQXlDQyxDQUF6QyxFQUFtRTtFQUNqRSxPQUFPRCxDQUFDLENBQUNFLE1BQUYsS0FBYUQsQ0FBQyxDQUFDQyxNQUFmLElBQXlCRixDQUFDLENBQUNHLEtBQUYsQ0FBUSxVQUFDQyxLQUFELEVBQVFDLEtBQVI7SUFBQSxPQUFrQkosQ0FBQyxDQUFDLENBQUNJLEtBQUYsQ0FBRCxLQUFjRCxLQUFoQztFQUFBLENBQVIsQ0FBaEM7QUFDRDtBQUVEOzs7QUFDZSxTQUFTRSxjQUFULEdBQXdEO0VBQ3JFLHVCQUF1QlQsZUFBZSxFQUF0QztFQUFBO0VBQUEsSUFBT1UsWUFBUDs7RUFDQSxJQUFNQyx1QkFBdUIsR0FBRyxJQUFBQyxhQUFBLEVBQzlCQyxNQUFNLENBQUNDLE1BQVAsQ0FBYyxDQUFDRCxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLENBQUQsQ0FBZCxDQUQ4QixDQUFoQztFQUlBLElBQU1DLDRCQUE0QixHQUFHRixNQUFNLENBQUNHLE1BQVAsQ0FBY04sWUFBZCxFQUE0Qk8sTUFBNUIsQ0FBbUM7SUFBQSxJQUFHQyxJQUFILFFBQUdBLElBQUg7SUFBQSxPQUFjQSxJQUFJLEtBQUssTUFBdkI7RUFBQSxDQUFuQyxDQUFyQyxDQU5xRSxDQVFyRTs7RUFDQSxJQUFNQyxrQ0FBa0MsR0FBR0osNEJBQTRCLENBQUNLLElBQTdCLENBQWtDO0lBQUEsSUFBT2pCLENBQVAsU0FBR2tCLEVBQUg7SUFBQSxJQUFrQmpCLENBQWxCLFNBQWNpQixFQUFkO0lBQUEsT0FBMEJsQixDQUFDLEdBQUdDLENBQTlCO0VBQUEsQ0FBbEMsQ0FBM0M7RUFFQSxJQUFNa0IsZ0JBQThDLEdBQUdULE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLENBQ25FRCxNQUFNLENBQUNDLE1BQVAsQ0FBY0ssa0NBQWtDLENBQUNJLEdBQW5DLENBQXVDO0lBQUEsSUFBR0MsSUFBSCxTQUFHQSxJQUFIO0lBQUEsT0FBY0EsSUFBZDtFQUFBLENBQXZDLENBQWQsQ0FEbUUsQ0FBZCxDQUF2RDtFQUlBLElBQWlCQyxvQkFBakIsR0FBMENkLHVCQUExQyxDQUFRZSxPQUFSO0VBRUEsSUFBTUMsb0JBQW9CLEdBQUd6QixXQUFXLENBQUNvQixnQkFBZ0IsQ0FBQyxDQUFELENBQWpCLEVBQXNCRyxvQkFBb0IsQ0FBQyxDQUFELENBQTFDLENBQVgsR0FDekJBLG9CQUR5QixHQUV6QkgsZ0JBRko7RUFJQSxJQUFBTSxnQkFBQSxFQUFVLFlBQU07SUFDZGpCLHVCQUF1QixDQUFDZSxPQUF4QixHQUFrQ0Msb0JBQWxDO0VBQ0QsQ0FGRCxFQUVHLENBQUNoQix1QkFBRCxFQUEwQmdCLG9CQUExQixDQUZIO0VBSUEsT0FBT0Esb0JBQVA7QUFDRCJ9