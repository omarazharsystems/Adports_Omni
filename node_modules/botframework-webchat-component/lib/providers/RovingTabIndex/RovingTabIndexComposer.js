"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _Context = _interopRequireDefault(require("./private/Context"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint complexity: ["error", 50] */
var RovingTabIndexComposer = function RovingTabIndexComposer(_ref) {
  var children = _ref.children,
      onEscapeKey = _ref.onEscapeKey,
      orientation = _ref.orientation;
  var activeItemIndexRef = (0, _react.useRef)(0);
  var itemRefsRef = (0, _react.useRef)([]);
  var refreshTabIndices = (0, _react.useCallback)(function () {
    var activeItemIndex = activeItemIndexRef.current;
    itemRefsRef.current.forEach(function (_ref2, index) {
      var current = _ref2.current;
      current === null || current === void 0 ? void 0 : current.setAttribute('tabindex', activeItemIndex === index ? '0' : '-1');
    });
  }, [activeItemIndexRef]);
  var setActiveItemIndex = (0, _react.useCallback)(function (valueOrFunction) {
    var _itemRefsRef$current$;

    // All calls to this function is expected to be under event handlers (post-rendering).
    var nextActiveItemIndex;

    if (typeof valueOrFunction === 'number') {
      nextActiveItemIndex = valueOrFunction;
    } else {
      nextActiveItemIndex = valueOrFunction(activeItemIndexRef.current);
    } // If the index points to no item, fallback to the first item.
    // This make sure at least one of the item in the container is selected.


    if (nextActiveItemIndex && !((_itemRefsRef$current$ = itemRefsRef.current[+nextActiveItemIndex]) !== null && _itemRefsRef$current$ !== void 0 && _itemRefsRef$current$.current)) {
      nextActiveItemIndex = 0;
    }

    if (activeItemIndexRef.current !== nextActiveItemIndex) {
      var _itemRefsRef$current$2, _itemRefsRef$current$3;

      activeItemIndexRef.current = nextActiveItemIndex;
      refreshTabIndices();
      (_itemRefsRef$current$2 = itemRefsRef.current[+nextActiveItemIndex]) === null || _itemRefsRef$current$2 === void 0 ? void 0 : (_itemRefsRef$current$3 = _itemRefsRef$current$2.current) === null || _itemRefsRef$current$3 === void 0 ? void 0 : _itemRefsRef$current$3.focus();
    }
  }, [activeItemIndexRef, itemRefsRef, refreshTabIndices]);
  var handleFocus = (0, _react.useCallback)(function (event) {
    var target = event.target;
    var index = itemRefsRef.current.findIndex(function (_ref3) {
      var current = _ref3.current;
      return current === target;
    });
    ~index && setActiveItemIndex(index);
  }, [itemRefsRef, setActiveItemIndex]);
  var handleKeyDown = (0, _react.useCallback)(function (event) {
    var key = event.key;
    var vertical = orientation === 'vertical';

    switch (key) {
      case 'ArrowDown':
      case 'ArrowRight':
      case 'Down': // IE11

      case 'Right':
        // IE11
        if (vertical && key === 'ArrowRight' || !vertical && key === 'ArrowDown') {
          return;
        }

        setActiveItemIndex(function (value) {
          // The `itemRefsRef` array could be a sparse array.
          // Thus, the next item may not be immediately next to the current one.
          var itemIndices = itemRefsRef.current.map(function (_, index) {
            return index;
          });
          var nextIndex = itemIndices.indexOf(value) + 1;

          if (nextIndex >= itemIndices.length) {
            return itemIndices[0];
          }

          return itemIndices[+nextIndex];
        });
        break;

      case 'ArrowLeft':
      case 'ArrowUp':
      case 'Left': // IE11

      case 'Up':
        // IE11
        if (vertical && key === 'ArrowLeft' || !vertical && key === 'ArrowUp') {
          return;
        }

        setActiveItemIndex(function (value) {
          // The `itemRefsRef` array could be a sparse array.
          // Thus, the next item may not be immediately next to the current one.
          var itemIndices = itemRefsRef.current.map(function (_, index) {
            return index;
          });
          var nextIndex = itemIndices.indexOf(value) - 1;

          if (nextIndex < 0) {
            return itemIndices[itemIndices.length - 1];
          }

          return itemIndices[+nextIndex];
        });
        break;

      case 'Home':
        setActiveItemIndex(0);
        break;

      case 'End':
        setActiveItemIndex(Infinity);
        break;

      case 'Escape':
        if (!onEscapeKey) {
          // If the "onEscapeKey" prop is not passed, don't call preventDefault() and stopPropagation().
          return;
        }

        onEscapeKey();
        break;

      default:
        return;
    }

    event.preventDefault();
    event.stopPropagation();
  }, [setActiveItemIndex, onEscapeKey, orientation]);
  var itemEffector = (0, _react.useCallback)(function (ref, index) {
    var current = ref.current;
    itemRefsRef.current[+index] = ref;
    current.addEventListener('focus', handleFocus);
    current.addEventListener('keydown', handleKeyDown);
    current.setAttribute('tabindex', activeItemIndexRef.current === index ? '0' : '-1');
    return function () {
      current.removeEventListener('focus', handleFocus);
      current.removeEventListener('keydown', handleKeyDown);
      delete itemRefsRef.current[+index];
    };
  }, [activeItemIndexRef, handleFocus, handleKeyDown]);
  var contextValue = (0, _react.useMemo)(function () {
    return {
      itemEffector: itemEffector
    };
  }, [itemEffector]); // This hook run on every render to rectify `activeItemIndexRef`.
  // So it will always point to an existing item or first item if available.

  (0, _react.useEffect)(function () {
    setActiveItemIndex(function (value) {
      return value;
    });
  });
  return /*#__PURE__*/_react.default.createElement(_Context.default.Provider, {
    value: contextValue
  }, children);
};

RovingTabIndexComposer.defaultProps = {
  onEscapeKey: undefined,
  orientation: 'horizontal'
};
RovingTabIndexComposer.propTypes = {
  onEscapeKey: _propTypes.default.func,
  orientation: _propTypes.default.oneOf(['horizontal', 'vertical'])
};
var _default = RovingTabIndexComposer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,