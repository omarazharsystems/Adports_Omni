"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _useRefFrom = require("use-ref-from");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _Context = _interopRequireDefault(require("./private/Context"));

var _useFocus = _interopRequireDefault(require("../../../hooks/useFocus"));

var _useScrollToEnd = _interopRequireDefault(require("../../../hooks/useScrollToEnd"));

var _useStyleToEmotionObject = _interopRequireDefault(require("../../../hooks/internal/useStyleToEmotionObject"));

var _useUniqueId = _interopRequireDefault(require("../../../hooks/internal/useUniqueId"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useConnectivityStatus = _botframeworkWebchatApi.hooks.useConnectivityStatus,
    useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer,
    usePonyfill = _botframeworkWebchatApi.hooks.usePonyfill,
    useSendBoxValue = _botframeworkWebchatApi.hooks.useSendBoxValue,
    useSubmitSendBox = _botframeworkWebchatApi.hooks.useSubmitSendBox;
var SUBMIT_ERROR_MESSAGE_STYLE = {
  '&.webchat__submit-error-message': {
    // .sr-only - This component is intended to be invisible to the visual Web Chat user, but read by the AT when using a screen reader
    color: 'transparent',
    height: 1,
    overflow: 'hidden',
    position: 'absolute',
    // We need to set top: 0, otherwise, it will repro:
    // - Run NVDA
    // - Make the transcript long enough to show the scrollbar
    // - Press SHIFT-TAB, focus on upload button
    // - Press up arrow multiple times
    top: 0,
    whiteSpace: 'nowrap',
    width: 1
  }
}; // False positive: we are using `setTimeout` as a type.
// eslint-disable-next-line no-restricted-globals

var TIME_TO_QUEUE_ERROR_MESSAGE = 500;
var TIME_TO_RESET_ERROR_MESSAGE = 50; // This component is marked as internal because it is not fully implemented and is not ready to be consumed publicly.
// When it is done, it should provide and replace all the functionalities we did in Redux, including but not limited to:
// - Speech interims
// - Maintain text box value
// - Multiple <SendBoxComposer> in a single Web Chat instance
//    - Web devs should be able to put an individual send box instance into an activity
//    - The send box instance in the activity, should be separated from the bottommost send box
//    - The valued typed inside the activity, should be separated from the value typed into the bottommost send box
// In the old days, we use Redux to keep the send box state.
// However, when web devs put 2 send box on their page, it makes things complex because both send boxes will interact with each other.
// We would rather have them separate. If web devs want them to interact with each other, they will do the wiring themselves.

// TODO: [P2] Complete this component.
var SendBoxComposer = function SendBoxComposer(_ref) {
  var children = _ref.children;

  var _usePonyfill = usePonyfill(),
      _usePonyfill2 = _slicedToArray(_usePonyfill, 1),
      _usePonyfill2$ = _usePonyfill2[0],
      clearTimeout = _usePonyfill2$.clearTimeout,
      setTimeout = _usePonyfill2$.setTimeout;

  var _useConnectivityStatu = useConnectivityStatus(),
      _useConnectivityStatu2 = _slicedToArray(_useConnectivityStatu, 1),
      connectivityStatus = _useConnectivityStatu2[0];

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      error = _useState2[0],
      setError = _useState2[1];

  var _useSendBoxValue = useSendBoxValue(),
      _useSendBoxValue2 = _slicedToArray(_useSendBoxValue, 1),
      sendBoxValue = _useSendBoxValue2[0];

  var apiSubmitSendBox = useSubmitSendBox();
  var focus = (0, _useFocus.default)();
  var localize = useLocalizer();
  var scrollToEnd = (0, _useScrollToEnd.default)();
  var styleToEmotionObject = (0, _useStyleToEmotionObject.default)();
  var submitErrorMessageId = (0, _useUniqueId.default)('webchat__send-box__error-message-id');
  var timeoutRef = (0, _react.useRef)(undefined);
  var errorMessageStringMap = (0, _react.useMemo)(function () {
    return Object.freeze(new Map().set('empty', localize('SEND_BOX_IS_EMPTY_TOOLTIP_ALT')) // TODO: [P0] We should add a new string for "Cannot send message while offline."
    .set('offline', localize('CONNECTIVITY_STATUS_ALT_FATAL')));
  }, [localize]);
  var focusRef = (0, _useRefFrom.useRefFrom)(focus);
  var scrollToEndRef = (0, _useRefFrom.useRefFrom)(scrollToEnd);
  var setErrorRef = (0, _react.useRef)(setError);
  var submitErrorMessageClassName = styleToEmotionObject(SUBMIT_ERROR_MESSAGE_STYLE) + '';
  var submitErrorMessageIdState = (0, _react.useMemo)(function () {
    return Object.freeze([error ? submitErrorMessageId : undefined]);
  }, [error, submitErrorMessageId]);
  setErrorRef.current = setError;
  var submitErrorRef = (0, _useRefFrom.useRefFrom)(connectivityStatus !== 'connected' && connectivityStatus !== 'reconnected' ? 'offline' : !sendBoxValue ? 'empty' : undefined);
  var submit = (0, _react.useCallback)(function () {
    var _focusRef$current;

    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        setFocus = _ref2.setFocus;

    (setFocus === 'main' || setFocus === 'sendBox' || setFocus === 'sendBoxWithoutKeyboard') && ((_focusRef$current = focusRef.current) === null || _focusRef$current === void 0 ? void 0 : _focusRef$current.call(focusRef, setFocus === 'main' || setFocus === 'sendBox' ? setFocus : 'sendBoxWithoutKeyboard'));
    var submitError = submitErrorRef.current;

    if (submitError) {
      var _setErrorRef$current;

      timeoutRef.current && timeoutRef.current.forEach(clearTimeout);
      (_setErrorRef$current = setErrorRef.current) === null || _setErrorRef$current === void 0 ? void 0 : _setErrorRef$current.call(setErrorRef, false);
      timeoutRef.current = Object.freeze([setTimeout(function () {
        var _setErrorRef$current2;

        return (_setErrorRef$current2 = setErrorRef.current) === null || _setErrorRef$current2 === void 0 ? void 0 : _setErrorRef$current2.call(setErrorRef, submitError);
      }, TIME_TO_RESET_ERROR_MESSAGE), setTimeout(function () {
        var _setErrorRef$current3;

        return (_setErrorRef$current3 = setErrorRef.current) === null || _setErrorRef$current3 === void 0 ? void 0 : _setErrorRef$current3.call(setErrorRef, false);
      }, TIME_TO_QUEUE_ERROR_MESSAGE)]);
    } else {
      var _scrollToEndRef$curre;

      (_scrollToEndRef$curre = scrollToEndRef.current) === null || _scrollToEndRef$curre === void 0 ? void 0 : _scrollToEndRef$curre.call(scrollToEndRef);
      apiSubmitSendBox();
    }
  }, [apiSubmitSendBox, clearTimeout, focusRef, scrollToEndRef, setErrorRef, setTimeout, submitErrorRef, timeoutRef]);
  (0, _react.useEffect)( // Prevent `setTimeout()` from firing after unmount.
  function () {
    return function () {
      setErrorRef.current = undefined;
    };
  }, [setErrorRef]);
  var context = (0, _react.useMemo)(function () {
    return {
      submit: submit,
      submitErrorMessageIdState: submitErrorMessageIdState
    };
  }, [submit, submitErrorMessageIdState]);
  return /*#__PURE__*/_react.default.createElement(_Context.default.Provider, {
    value: context
  }, children, /*#__PURE__*/_react.default.createElement("span", {
    className: (0, _classnames.default)('webchat__submit-error-message', submitErrorMessageClassName) // "id" is required for "aria-errormessage" as IDREF.
    // eslint-disable-next-line react/forbid-dom-props
    ,
    id: submitErrorMessageId,
    role: "alert"
  }, error ? errorMessageStringMap.get(error) : ''));
};

var _default = SendBoxComposer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,