"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _LiveRegionTwinContainer = _interopRequireDefault(require("./private/LiveRegionTwinContainer"));

var _Context = _interopRequireDefault(require("./private/Context"));

var _useValueRef = _interopRequireDefault(require("../../hooks/internal/useValueRef"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var usePonyfill = _botframeworkWebchatApi.hooks.usePonyfill;
var DEFAULT_ARIA_LIVE = 'polite';
var DEFAULT_FADE_AFTER = 1000;

/**
 * Live region twin is an UI component for queueing texts or elements to the screen reader using
 * a container element with `aria-live` attribute set.
 *
 * After the text is rendered and queued, it will be removed to reduce burden on the DOM tree.
 * Currently, we assume the assistive technologies should pick up the text within 1 second of rendering.
 * This value is configurable.
 *
 * By default, the live region is visible. If is is not desirable, the caller can use `className` prop to
 * hide its visuals.
 */
var LiveRegionTwinComposer = function LiveRegionTwinComposer(_ref) {
  var ariaLabel = _ref['aria-label'],
      _ref$ariaLive = _ref['aria-live'],
      ariaLive = _ref$ariaLive === void 0 ? DEFAULT_ARIA_LIVE : _ref$ariaLive,
      ariaRoleDescription = _ref['aria-roledescription'],
      children = _ref.children,
      className = _ref.className,
      _ref$fadeAfter = _ref.fadeAfter,
      fadeAfter = _ref$fadeAfter === void 0 ? DEFAULT_FADE_AFTER : _ref$fadeAfter,
      role = _ref.role,
      textElementClassName = _ref.textElementClassName;

  var _usePonyfill = usePonyfill(),
      _usePonyfill2 = _slicedToArray(_usePonyfill, 1),
      _usePonyfill2$ = _usePonyfill2[0],
      clearTimeout = _usePonyfill2$.clearTimeout,
      setTimeout = _usePonyfill2$.setTimeout;

  var _useState = (0, _react.useState)([]),
      _useState2 = _slicedToArray(_useState, 2),
      staticElementEntries = _useState2[0],
      setStaticElementEntries = _useState2[1];

  var fadeAfterRef = (0, _useValueRef.default)(fadeAfter);
  var markAllAsRenderedTimeoutIdRef = (0, _react.useRef)();
  var nextKeyRef = (0, _react.useRef)(1);
  var staticElementEntriesRef = (0, _useValueRef.default)(staticElementEntries); // This function is called by an effect hook `useMarkAllAsRenderedEffect`, it must be designed with converging in mind.
  // To prevent infinite render loop, after multiple calls to this function, it should eventually no-op.

  var markAllAsRendered = (0, _react.useCallback)(function () {
    if (!staticElementEntriesRef.current.length) {
      // Nothing to remove.
      return;
    } // When removing each element one-by-one based on an individual timeout, Narrator would narrate them twice occasionally.
    // Possibly it think some elements that is not removed during the current cycle, are new elements and queued them twice.
    // Thus, we are removing all at once to prevent bugs in Narrator.


    markAllAsRenderedTimeoutIdRef.current && clearTimeout(markAllAsRenderedTimeoutIdRef.current);
    markAllAsRenderedTimeoutIdRef.current = setTimeout(function () {
      // We are playing safe by using value ref to check its length here.
      // If we are certain that `setStaticElements(emptyArray => emptyArray)` is a no-op,
      // we could replace it with just the setter function.
      staticElementEntriesRef.current.length && setStaticElementEntries([]);
    }, fadeAfterRef.current);
  }, [clearTimeout, fadeAfterRef, markAllAsRenderedTimeoutIdRef, setStaticElementEntries, setTimeout, staticElementEntriesRef]); // When this component is unmounting, make sure all future `setTimeout` are cleared and should not be fired.

  (0, _react.useEffect)(function () {
    return function () {
      return markAllAsRenderedTimeoutIdRef.current && clearTimeout(markAllAsRenderedTimeoutIdRef.current);
    };
  }, [clearTimeout, markAllAsRenderedTimeoutIdRef]);
  var queueStaticElement = (0, _react.useCallback)(function (element) {
    var key = nextKeyRef.current;
    nextKeyRef.current = nextKeyRef.current + 1;
    setStaticElementEntries(function (entries) {
      return [].concat(_toConsumableArray(entries), [{
        element: element,
        key: key
      }]);
    });
  }, [nextKeyRef, setStaticElementEntries]);
  var staticElementEntriesState = (0, _react.useMemo)(function () {
    return Object.freeze([Object.freeze(staticElementEntries)]);
  }, [staticElementEntries]);
  var context = (0, _react.useMemo)(function () {
    return {
      markAllAsRendered: markAllAsRendered,
      queueStaticElement: queueStaticElement,
      staticElementEntriesState: staticElementEntriesState
    };
  }, [markAllAsRendered, queueStaticElement, staticElementEntriesState]);
  return /*#__PURE__*/_react.default.createElement(_Context.default.Provider, {
    value: context
  }, /*#__PURE__*/_react.default.createElement(_LiveRegionTwinContainer.default, {
    "aria-label": ariaLabel,
    "aria-live": ariaLive,
    "aria-roledescription": ariaRoleDescription,
    className: className,
    role: role,
    textElementClassName: textElementClassName
  }), children);
};

LiveRegionTwinComposer.defaultProps = {
  'aria-label': undefined,
  'aria-live': DEFAULT_ARIA_LIVE,
  'aria-roledescription': undefined,
  children: undefined,
  className: undefined,
  fadeAfter: DEFAULT_FADE_AFTER,
  role: undefined,
  textElementClassName: undefined
};
LiveRegionTwinComposer.propTypes = {
  'aria-label': _propTypes.default.string,
  'aria-live': _propTypes.default.oneOf(['assertive', 'polite']),
  'aria-roledescription': _propTypes.default.string,
  children: _propTypes.default.any,
  className: _propTypes.default.string,
  fadeAfter: _propTypes.default.number,
  role: _propTypes.default.string,
  textElementClassName: _propTypes.default.string
};
var _default = LiveRegionTwinComposer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,