"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _useMarkAllAsRenderedEffect = _interopRequireDefault(require("./useMarkAllAsRenderedEffect"));

var _useStaticElementEntries = _interopRequireDefault(require("./useStaticElementEntries"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

// This container is marked as private because we assume there is only one instance under the <LiveRegionTwinContext>.
var LiveRegionTwinContainer = function LiveRegionTwinContainer(_ref) {
  var ariaLabel = _ref['aria-label'],
      ariaLive = _ref['aria-live'],
      ariaRoleDescription = _ref['aria-roledescription'],
      className = _ref.className,
      role = _ref.role,
      textElementClassName = _ref.textElementClassName;

  var _useStaticElementEntr = (0, _useStaticElementEntries.default)(),
      _useStaticElementEntr2 = _slicedToArray(_useStaticElementEntr, 1),
      staticElementEntries = _useStaticElementEntr2[0]; // We assume there is only one instance under the <LiveRegionTwinContext>.
  // The assumption made us safe to mark everything is rendered.
  // In contrary, if we have 0-to-many at different time, we may falsely mark something as rendered.


  (0, _useMarkAllAsRenderedEffect.default)();
  return /*#__PURE__*/_react.default.createElement("div", {
    "aria-label": ariaLabel,
    "aria-live": ariaLive,
    "aria-roledescription": ariaRoleDescription,
    className: className,
    role: role
  }, staticElementEntries.map(function (_ref2) {
    var element = _ref2.element,
        key = _ref2.key;

    if (typeof element === 'string') {
      return /*#__PURE__*/_react.default.createElement("div", {
        "aria-atomic": true,
        className: textElementClassName,
        key: key
      }, element);
    }

    return /*#__PURE__*/_react.default.createElement(_react.Fragment, {
      key: key
    }, element);
  }));
};

LiveRegionTwinContainer.defaultProps = {
  'aria-label': undefined,
  'aria-roledescription': undefined,
  className: undefined,
  role: undefined,
  textElementClassName: undefined
};
LiveRegionTwinContainer.propTypes = {
  'aria-label': _propTypes.default.string,
  // PropTypes.oneOf() returns type of `string`, but not `'assertive' | 'polite'`.
  // @ts-ignore
  'aria-live': _propTypes.default.oneOf(['assertive', 'polite']).isRequired,
  'aria-roledescription': _propTypes.default.string,
  className: _propTypes.default.string,
  role: _propTypes.default.string,
  textElementClassName: _propTypes.default.string
};
var _default = LiveRegionTwinContainer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJMaXZlUmVnaW9uVHdpbkNvbnRhaW5lciIsImFyaWFMYWJlbCIsImFyaWFMaXZlIiwiYXJpYVJvbGVEZXNjcmlwdGlvbiIsImNsYXNzTmFtZSIsInJvbGUiLCJ0ZXh0RWxlbWVudENsYXNzTmFtZSIsInVzZVN0YXRpY0VsZW1lbnRFbnRyaWVzIiwic3RhdGljRWxlbWVudEVudHJpZXMiLCJ1c2VNYXJrQWxsQXNSZW5kZXJlZEVmZmVjdCIsIm1hcCIsImVsZW1lbnQiLCJrZXkiLCJkZWZhdWx0UHJvcHMiLCJ1bmRlZmluZWQiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJvbmVPZiIsImlzUmVxdWlyZWQiXSwic291cmNlUm9vdCI6ImNvbXBvbmVudDovLy8iLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9wcm92aWRlcnMvTGl2ZVJlZ2lvblR3aW4vcHJpdmF0ZS9MaXZlUmVnaW9uVHdpbkNvbnRhaW5lci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHR5cGUgeyBWRkMgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB1c2VNYXJrQWxsQXNSZW5kZXJlZEVmZmVjdCBmcm9tICcuL3VzZU1hcmtBbGxBc1JlbmRlcmVkRWZmZWN0JztcbmltcG9ydCB1c2VTdGF0aWNFbGVtZW50RW50cmllcyBmcm9tICcuL3VzZVN0YXRpY0VsZW1lbnRFbnRyaWVzJztcblxudHlwZSBMaXZlUmVnaW9uVHdpbkNvbnRhaW5lclByb3BzID0ge1xuICAnYXJpYS1sYWJlbCc/OiBzdHJpbmc7XG4gICdhcmlhLWxpdmUnOiAnYXNzZXJ0aXZlJyB8ICdwb2xpdGUnO1xuICAnYXJpYS1yb2xlZGVzY3JpcHRpb24nPzogc3RyaW5nO1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIHJvbGU/OiBzdHJpbmc7XG4gIHRleHRFbGVtZW50Q2xhc3NOYW1lPzogc3RyaW5nO1xufTtcblxuLy8gVGhpcyBjb250YWluZXIgaXMgbWFya2VkIGFzIHByaXZhdGUgYmVjYXVzZSB3ZSBhc3N1bWUgdGhlcmUgaXMgb25seSBvbmUgaW5zdGFuY2UgdW5kZXIgdGhlIDxMaXZlUmVnaW9uVHdpbkNvbnRleHQ+LlxuY29uc3QgTGl2ZVJlZ2lvblR3aW5Db250YWluZXI6IFZGQzxMaXZlUmVnaW9uVHdpbkNvbnRhaW5lclByb3BzPiA9ICh7XG4gICdhcmlhLWxhYmVsJzogYXJpYUxhYmVsLFxuICAnYXJpYS1saXZlJzogYXJpYUxpdmUsXG4gICdhcmlhLXJvbGVkZXNjcmlwdGlvbic6IGFyaWFSb2xlRGVzY3JpcHRpb24sXG4gIGNsYXNzTmFtZSxcbiAgcm9sZSxcbiAgdGV4dEVsZW1lbnRDbGFzc05hbWVcbn0pID0+IHtcbiAgY29uc3QgW3N0YXRpY0VsZW1lbnRFbnRyaWVzXSA9IHVzZVN0YXRpY0VsZW1lbnRFbnRyaWVzKCk7XG5cbiAgLy8gV2UgYXNzdW1lIHRoZXJlIGlzIG9ubHkgb25lIGluc3RhbmNlIHVuZGVyIHRoZSA8TGl2ZVJlZ2lvblR3aW5Db250ZXh0Pi5cbiAgLy8gVGhlIGFzc3VtcHRpb24gbWFkZSB1cyBzYWZlIHRvIG1hcmsgZXZlcnl0aGluZyBpcyByZW5kZXJlZC5cbiAgLy8gSW4gY29udHJhcnksIGlmIHdlIGhhdmUgMC10by1tYW55IGF0IGRpZmZlcmVudCB0aW1lLCB3ZSBtYXkgZmFsc2VseSBtYXJrIHNvbWV0aGluZyBhcyByZW5kZXJlZC5cbiAgdXNlTWFya0FsbEFzUmVuZGVyZWRFZmZlY3QoKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGFyaWEtbGFiZWw9e2FyaWFMYWJlbH1cbiAgICAgIGFyaWEtbGl2ZT17YXJpYUxpdmV9XG4gICAgICBhcmlhLXJvbGVkZXNjcmlwdGlvbj17YXJpYVJvbGVEZXNjcmlwdGlvbn1cbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgcm9sZT17cm9sZX1cbiAgICA+XG4gICAgICB7c3RhdGljRWxlbWVudEVudHJpZXMubWFwKCh7IGVsZW1lbnQsIGtleSB9KSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgZWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBhcmlhLWF0b21pYz17dHJ1ZX0gY2xhc3NOYW1lPXt0ZXh0RWxlbWVudENsYXNzTmFtZX0ga2V5PXtrZXl9PlxuICAgICAgICAgICAgICB7ZWxlbWVudH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gPEZyYWdtZW50IGtleT17a2V5fT57ZWxlbWVudH08L0ZyYWdtZW50PjtcbiAgICAgIH0pfVxuICAgIDwvZGl2PlxuICApO1xufTtcblxuTGl2ZVJlZ2lvblR3aW5Db250YWluZXIuZGVmYXVsdFByb3BzID0ge1xuICAnYXJpYS1sYWJlbCc6IHVuZGVmaW5lZCxcbiAgJ2FyaWEtcm9sZWRlc2NyaXB0aW9uJzogdW5kZWZpbmVkLFxuICBjbGFzc05hbWU6IHVuZGVmaW5lZCxcbiAgcm9sZTogdW5kZWZpbmVkLFxuICB0ZXh0RWxlbWVudENsYXNzTmFtZTogdW5kZWZpbmVkXG59O1xuXG5MaXZlUmVnaW9uVHdpbkNvbnRhaW5lci5wcm9wVHlwZXMgPSB7XG4gICdhcmlhLWxhYmVsJzogUHJvcFR5cGVzLnN0cmluZyxcbiAgLy8gUHJvcFR5cGVzLm9uZU9mKCkgcmV0dXJucyB0eXBlIG9mIGBzdHJpbmdgLCBidXQgbm90IGAnYXNzZXJ0aXZlJyB8ICdwb2xpdGUnYC5cbiAgLy8gQHRzLWlnbm9yZVxuICAnYXJpYS1saXZlJzogUHJvcFR5cGVzLm9uZU9mKFsnYXNzZXJ0aXZlJywgJ3BvbGl0ZSddKS5pc1JlcXVpcmVkLFxuICAnYXJpYS1yb2xlZGVzY3JpcHRpb24nOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHJvbGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHRleHRFbGVtZW50Q2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nXG59O1xuXG5leHBvcnQgZGVmYXVsdCBMaXZlUmVnaW9uVHdpbkNvbnRhaW5lcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBSUE7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBV0E7QUFDQSxJQUFNQSx1QkFBMEQsR0FBRyxTQUE3REEsdUJBQTZELE9BTzdEO0VBQUEsSUFOVUMsU0FNVixRQU5KLFlBTUk7RUFBQSxJQUxTQyxRQUtULFFBTEosV0FLSTtFQUFBLElBSm9CQyxtQkFJcEIsUUFKSixzQkFJSTtFQUFBLElBSEpDLFNBR0ksUUFISkEsU0FHSTtFQUFBLElBRkpDLElBRUksUUFGSkEsSUFFSTtFQUFBLElBREpDLG9CQUNJLFFBREpBLG9CQUNJOztFQUNKLDRCQUErQixJQUFBQyxnQ0FBQSxHQUEvQjtFQUFBO0VBQUEsSUFBT0Msb0JBQVAsNkJBREksQ0FHSjtFQUNBO0VBQ0E7OztFQUNBLElBQUFDLG1DQUFBO0VBRUEsb0JBQ0U7SUFDRSxjQUFZUixTQURkO0lBRUUsYUFBV0MsUUFGYjtJQUdFLHdCQUFzQkMsbUJBSHhCO0lBSUUsU0FBUyxFQUFFQyxTQUpiO0lBS0UsSUFBSSxFQUFFQztFQUxSLEdBT0dHLG9CQUFvQixDQUFDRSxHQUFyQixDQUF5QixpQkFBc0I7SUFBQSxJQUFuQkMsT0FBbUIsU0FBbkJBLE9BQW1CO0lBQUEsSUFBVkMsR0FBVSxTQUFWQSxHQUFVOztJQUM5QyxJQUFJLE9BQU9ELE9BQVAsS0FBbUIsUUFBdkIsRUFBaUM7TUFDL0Isb0JBQ0U7UUFBSyxlQUFhLElBQWxCO1FBQXdCLFNBQVMsRUFBRUwsb0JBQW5DO1FBQXlELEdBQUcsRUFBRU07TUFBOUQsR0FDR0QsT0FESCxDQURGO0lBS0Q7O0lBRUQsb0JBQU8sNkJBQUMsZUFBRDtNQUFVLEdBQUcsRUFBRUM7SUFBZixHQUFxQkQsT0FBckIsQ0FBUDtFQUNELENBVkEsQ0FQSCxDQURGO0FBcUJELENBcENEOztBQXNDQVgsdUJBQXVCLENBQUNhLFlBQXhCLEdBQXVDO0VBQ3JDLGNBQWNDLFNBRHVCO0VBRXJDLHdCQUF3QkEsU0FGYTtFQUdyQ1YsU0FBUyxFQUFFVSxTQUgwQjtFQUlyQ1QsSUFBSSxFQUFFUyxTQUorQjtFQUtyQ1Isb0JBQW9CLEVBQUVRO0FBTGUsQ0FBdkM7QUFRQWQsdUJBQXVCLENBQUNlLFNBQXhCLEdBQW9DO0VBQ2xDLGNBQWNDLGtCQUFBLENBQVVDLE1BRFU7RUFFbEM7RUFDQTtFQUNBLGFBQWFELGtCQUFBLENBQVVFLEtBQVYsQ0FBZ0IsQ0FBQyxXQUFELEVBQWMsUUFBZCxDQUFoQixFQUF5Q0MsVUFKcEI7RUFLbEMsd0JBQXdCSCxrQkFBQSxDQUFVQyxNQUxBO0VBTWxDYixTQUFTLEVBQUVZLGtCQUFBLENBQVVDLE1BTmE7RUFPbENaLElBQUksRUFBRVcsa0JBQUEsQ0FBVUMsTUFQa0I7RUFRbENYLG9CQUFvQixFQUFFVSxrQkFBQSxDQUFVQztBQVJFLENBQXBDO2VBV2VqQix1QiJ9