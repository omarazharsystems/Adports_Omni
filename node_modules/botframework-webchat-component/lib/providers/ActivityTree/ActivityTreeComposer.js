"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _react = _interopRequireWildcard(require("react"));

var _Context = _interopRequireDefault(require("./private/Context"));

var _useActivitiesWithRenderer = _interopRequireDefault(require("./private/useActivitiesWithRenderer"));

var _useContext = _interopRequireDefault(require("./private/useContext"));

var _useActivityTreeWithRenderer = _interopRequireDefault(require("./private/useActivityTreeWithRenderer"));

var _useMemoWithPrevious = _interopRequireDefault(require("../../hooks/internal/useMemoWithPrevious"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useActivities = _botframeworkWebchatApi.hooks.useActivities,
    useCreateActivityRenderer = _botframeworkWebchatApi.hooks.useCreateActivityRenderer;

var ActivityTreeComposer = function ActivityTreeComposer(_ref) {
  var children = _ref.children;
  var existingContext = (0, _useContext.default)(false);

  if (existingContext) {
    throw new Error('botframework-webchat internal: <ActivityTreeComposer> should not be nested.');
  }

  var _useActivities = useActivities(),
      _useActivities2 = _slicedToArray(_useActivities, 1),
      activities = _useActivities2[0];

  var createActivityRenderer = useCreateActivityRenderer();
  var activitiesWithRenderer = (0, _useActivitiesWithRenderer.default)(activities, createActivityRenderer);
  var activityTreeWithRenderer = (0, _useActivityTreeWithRenderer.default)(activitiesWithRenderer);
  var flattenedActivityTreeWithRenderer = (0, _useMemoWithPrevious.default)(function (prevFlattenedActivityTree) {
    var nextFlattenedActivityTree = Object.freeze(activityTreeWithRenderer.reduce(function (intermediate, entriesWithSameSender) {
      return entriesWithSameSender.reduce(function (intermediate, entriesWithSameSenderAndStatus) {
        return entriesWithSameSenderAndStatus.reduce(function (intermediate, entry) {
          intermediate.push(entry);
          return intermediate;
        }, intermediate);
      }, intermediate);
    }, []));
    return nextFlattenedActivityTree.length === (prevFlattenedActivityTree === null || prevFlattenedActivityTree === void 0 ? void 0 : prevFlattenedActivityTree.length) && nextFlattenedActivityTree.every(function (item, index) {
      return item === prevFlattenedActivityTree[+index];
    }) ? prevFlattenedActivityTree : nextFlattenedActivityTree;
  }, [activityTreeWithRenderer]);
  var contextValue = (0, _react.useMemo)(function () {
    return {
      activityTreeWithRendererState: Object.freeze([activityTreeWithRenderer]),
      flattenedActivityTreeWithRendererState: Object.freeze([flattenedActivityTreeWithRenderer])
    };
  }, [activityTreeWithRenderer, flattenedActivityTreeWithRenderer]);
  return /*#__PURE__*/_react.default.createElement(_Context.default.Provider, {
    value: contextValue
  }, children);
};

var _default = ActivityTreeComposer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1c2VBY3Rpdml0aWVzIiwiaG9va3MiLCJ1c2VDcmVhdGVBY3Rpdml0eVJlbmRlcmVyIiwiQWN0aXZpdHlUcmVlQ29tcG9zZXIiLCJjaGlsZHJlbiIsImV4aXN0aW5nQ29udGV4dCIsInVzZUFjdGl2aXR5VHJlZUNvbnRleHQiLCJFcnJvciIsImFjdGl2aXRpZXMiLCJjcmVhdGVBY3Rpdml0eVJlbmRlcmVyIiwiYWN0aXZpdGllc1dpdGhSZW5kZXJlciIsInVzZUFjdGl2aXRpZXNXaXRoUmVuZGVyZXIiLCJhY3Rpdml0eVRyZWVXaXRoUmVuZGVyZXIiLCJ1c2VBY3Rpdml0eVRyZWVXaXRoUmVuZGVyZXIiLCJmbGF0dGVuZWRBY3Rpdml0eVRyZWVXaXRoUmVuZGVyZXIiLCJ1c2VNZW1vV2l0aFByZXZpb3VzIiwicHJldkZsYXR0ZW5lZEFjdGl2aXR5VHJlZSIsIm5leHRGbGF0dGVuZWRBY3Rpdml0eVRyZWUiLCJPYmplY3QiLCJmcmVlemUiLCJyZWR1Y2UiLCJpbnRlcm1lZGlhdGUiLCJlbnRyaWVzV2l0aFNhbWVTZW5kZXIiLCJlbnRyaWVzV2l0aFNhbWVTZW5kZXJBbmRTdGF0dXMiLCJlbnRyeSIsInB1c2giLCJsZW5ndGgiLCJldmVyeSIsIml0ZW0iLCJpbmRleCIsImNvbnRleHRWYWx1ZSIsInVzZU1lbW8iLCJhY3Rpdml0eVRyZWVXaXRoUmVuZGVyZXJTdGF0ZSIsImZsYXR0ZW5lZEFjdGl2aXR5VHJlZVdpdGhSZW5kZXJlclN0YXRlIl0sInNvdXJjZVJvb3QiOiJjb21wb25lbnQ6Ly8vIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJvdmlkZXJzL0FjdGl2aXR5VHJlZS9BY3Rpdml0eVRyZWVDb21wb3Nlci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaG9va3MgfSBmcm9tICdib3RmcmFtZXdvcmstd2ViY2hhdC1hcGknO1xuaW1wb3J0IFJlYWN0LCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB0eXBlIHsgQWN0aXZpdHlDb21wb25lbnRGYWN0b3J5IH0gZnJvbSAnYm90ZnJhbWV3b3JrLXdlYmNoYXQtYXBpJztcbmltcG9ydCB0eXBlIHsgRkMsIFByb3BzV2l0aENoaWxkcmVuIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBXZWJDaGF0QWN0aXZpdHkgfSBmcm9tICdib3RmcmFtZXdvcmstd2ViY2hhdC1jb3JlJztcblxuaW1wb3J0IHsgQWN0aXZpdHlXaXRoUmVuZGVyZXIsIFJlYWRvbmx5QWN0aXZpdHlUcmVlIH0gZnJvbSAnLi9wcml2YXRlL3R5cGVzJztcbmltcG9ydCBBY3Rpdml0eVRyZWVDb250ZXh0IGZyb20gJy4vcHJpdmF0ZS9Db250ZXh0JztcbmltcG9ydCB1c2VBY3Rpdml0aWVzV2l0aFJlbmRlcmVyIGZyb20gJy4vcHJpdmF0ZS91c2VBY3Rpdml0aWVzV2l0aFJlbmRlcmVyJztcbmltcG9ydCB1c2VBY3Rpdml0eVRyZWVDb250ZXh0IGZyb20gJy4vcHJpdmF0ZS91c2VDb250ZXh0JztcbmltcG9ydCB1c2VBY3Rpdml0eVRyZWVXaXRoUmVuZGVyZXIgZnJvbSAnLi9wcml2YXRlL3VzZUFjdGl2aXR5VHJlZVdpdGhSZW5kZXJlcic7XG5pbXBvcnQgdXNlTWVtb1dpdGhQcmV2aW91cyBmcm9tICcuLi8uLi9ob29rcy9pbnRlcm5hbC91c2VNZW1vV2l0aFByZXZpb3VzJztcblxuaW1wb3J0IHR5cGUgeyBBY3Rpdml0eVRyZWVDb250ZXh0VHlwZSB9IGZyb20gJy4vcHJpdmF0ZS9Db250ZXh0JztcblxudHlwZSBBY3Rpdml0eVRyZWVDb21wb3NlclByb3BzID0gUHJvcHNXaXRoQ2hpbGRyZW48e30+O1xuXG5jb25zdCB7IHVzZUFjdGl2aXRpZXMsIHVzZUNyZWF0ZUFjdGl2aXR5UmVuZGVyZXIgfSA9IGhvb2tzO1xuXG5jb25zdCBBY3Rpdml0eVRyZWVDb21wb3NlcjogRkM8QWN0aXZpdHlUcmVlQ29tcG9zZXJQcm9wcz4gPSAoeyBjaGlsZHJlbiB9KSA9PiB7XG4gIGNvbnN0IGV4aXN0aW5nQ29udGV4dCA9IHVzZUFjdGl2aXR5VHJlZUNvbnRleHQoZmFsc2UpO1xuXG4gIGlmIChleGlzdGluZ0NvbnRleHQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2JvdGZyYW1ld29yay13ZWJjaGF0IGludGVybmFsOiA8QWN0aXZpdHlUcmVlQ29tcG9zZXI+IHNob3VsZCBub3QgYmUgbmVzdGVkLicpO1xuICB9XG5cbiAgY29uc3QgW2FjdGl2aXRpZXNdOiBbV2ViQ2hhdEFjdGl2aXR5W11dID0gdXNlQWN0aXZpdGllcygpO1xuICBjb25zdCBjcmVhdGVBY3Rpdml0eVJlbmRlcmVyOiBBY3Rpdml0eUNvbXBvbmVudEZhY3RvcnkgPSB1c2VDcmVhdGVBY3Rpdml0eVJlbmRlcmVyKCk7XG5cbiAgY29uc3QgYWN0aXZpdGllc1dpdGhSZW5kZXJlciA9IHVzZUFjdGl2aXRpZXNXaXRoUmVuZGVyZXIoYWN0aXZpdGllcywgY3JlYXRlQWN0aXZpdHlSZW5kZXJlcik7XG5cbiAgY29uc3QgYWN0aXZpdHlUcmVlV2l0aFJlbmRlcmVyID0gdXNlQWN0aXZpdHlUcmVlV2l0aFJlbmRlcmVyKGFjdGl2aXRpZXNXaXRoUmVuZGVyZXIpO1xuXG4gIGNvbnN0IGZsYXR0ZW5lZEFjdGl2aXR5VHJlZVdpdGhSZW5kZXJlciA9IHVzZU1lbW9XaXRoUHJldmlvdXM8UmVhZG9ubHk8QWN0aXZpdHlXaXRoUmVuZGVyZXJbXT4+KFxuICAgIHByZXZGbGF0dGVuZWRBY3Rpdml0eVRyZWUgPT4ge1xuICAgICAgY29uc3QgbmV4dEZsYXR0ZW5lZEFjdGl2aXR5VHJlZSA9IE9iamVjdC5mcmVlemUoXG4gICAgICAgIGFjdGl2aXR5VHJlZVdpdGhSZW5kZXJlci5yZWR1Y2U8QWN0aXZpdHlXaXRoUmVuZGVyZXJbXT4oXG4gICAgICAgICAgKGludGVybWVkaWF0ZSwgZW50cmllc1dpdGhTYW1lU2VuZGVyKSA9PlxuICAgICAgICAgICAgZW50cmllc1dpdGhTYW1lU2VuZGVyLnJlZHVjZTxBY3Rpdml0eVdpdGhSZW5kZXJlcltdPihcbiAgICAgICAgICAgICAgKGludGVybWVkaWF0ZSwgZW50cmllc1dpdGhTYW1lU2VuZGVyQW5kU3RhdHVzKSA9PlxuICAgICAgICAgICAgICAgIGVudHJpZXNXaXRoU2FtZVNlbmRlckFuZFN0YXR1cy5yZWR1Y2U8QWN0aXZpdHlXaXRoUmVuZGVyZXJbXT4oKGludGVybWVkaWF0ZSwgZW50cnkpID0+IHtcbiAgICAgICAgICAgICAgICAgIGludGVybWVkaWF0ZS5wdXNoKGVudHJ5KTtcblxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGludGVybWVkaWF0ZTtcbiAgICAgICAgICAgICAgICB9LCBpbnRlcm1lZGlhdGUpLFxuICAgICAgICAgICAgICBpbnRlcm1lZGlhdGVcbiAgICAgICAgICAgICksXG4gICAgICAgICAgW11cbiAgICAgICAgKVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIG5leHRGbGF0dGVuZWRBY3Rpdml0eVRyZWUubGVuZ3RoID09PSBwcmV2RmxhdHRlbmVkQWN0aXZpdHlUcmVlPy5sZW5ndGggJiZcbiAgICAgICAgbmV4dEZsYXR0ZW5lZEFjdGl2aXR5VHJlZS5ldmVyeSgoaXRlbSwgaW5kZXgpID0+IGl0ZW0gPT09IHByZXZGbGF0dGVuZWRBY3Rpdml0eVRyZWVbK2luZGV4XSlcbiAgICAgICAgPyBwcmV2RmxhdHRlbmVkQWN0aXZpdHlUcmVlXG4gICAgICAgIDogbmV4dEZsYXR0ZW5lZEFjdGl2aXR5VHJlZTtcbiAgICB9LFxuICAgIFthY3Rpdml0eVRyZWVXaXRoUmVuZGVyZXJdXG4gICk7XG5cbiAgY29uc3QgY29udGV4dFZhbHVlOiBBY3Rpdml0eVRyZWVDb250ZXh0VHlwZSA9IHVzZU1lbW8oXG4gICAgKCkgPT4gKHtcbiAgICAgIGFjdGl2aXR5VHJlZVdpdGhSZW5kZXJlclN0YXRlOiBPYmplY3QuZnJlZXplKFthY3Rpdml0eVRyZWVXaXRoUmVuZGVyZXJdKSBhcyByZWFkb25seSBbUmVhZG9ubHlBY3Rpdml0eVRyZWVdLFxuICAgICAgZmxhdHRlbmVkQWN0aXZpdHlUcmVlV2l0aFJlbmRlcmVyU3RhdGU6IE9iamVjdC5mcmVlemUoW2ZsYXR0ZW5lZEFjdGl2aXR5VHJlZVdpdGhSZW5kZXJlcl0pIGFzIHJlYWRvbmx5IFtcbiAgICAgICAgcmVhZG9ubHkgQWN0aXZpdHlXaXRoUmVuZGVyZXJbXVxuICAgICAgXVxuICAgIH0pLFxuICAgIFthY3Rpdml0eVRyZWVXaXRoUmVuZGVyZXIsIGZsYXR0ZW5lZEFjdGl2aXR5VHJlZVdpdGhSZW5kZXJlcl1cbiAgKTtcblxuICByZXR1cm4gPEFjdGl2aXR5VHJlZUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2NvbnRleHRWYWx1ZX0+e2NoaWxkcmVufTwvQWN0aXZpdHlUcmVlQ29udGV4dC5Qcm92aWRlcj47XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBY3Rpdml0eVRyZWVDb21wb3NlcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBT0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBTUEsSUFBUUEsYUFBUixHQUFxREMsNkJBQXJELENBQVFELGFBQVI7QUFBQSxJQUF1QkUseUJBQXZCLEdBQXFERCw2QkFBckQsQ0FBdUJDLHlCQUF2Qjs7QUFFQSxJQUFNQyxvQkFBbUQsR0FBRyxTQUF0REEsb0JBQXNELE9BQWtCO0VBQUEsSUFBZkMsUUFBZSxRQUFmQSxRQUFlO0VBQzVFLElBQU1DLGVBQWUsR0FBRyxJQUFBQyxtQkFBQSxFQUF1QixLQUF2QixDQUF4Qjs7RUFFQSxJQUFJRCxlQUFKLEVBQXFCO0lBQ25CLE1BQU0sSUFBSUUsS0FBSixDQUFVLDZFQUFWLENBQU47RUFDRDs7RUFFRCxxQkFBMENQLGFBQWEsRUFBdkQ7RUFBQTtFQUFBLElBQU9RLFVBQVA7O0VBQ0EsSUFBTUMsc0JBQWdELEdBQUdQLHlCQUF5QixFQUFsRjtFQUVBLElBQU1RLHNCQUFzQixHQUFHLElBQUFDLGtDQUFBLEVBQTBCSCxVQUExQixFQUFzQ0Msc0JBQXRDLENBQS9CO0VBRUEsSUFBTUcsd0JBQXdCLEdBQUcsSUFBQUMsb0NBQUEsRUFBNEJILHNCQUE1QixDQUFqQztFQUVBLElBQU1JLGlDQUFpQyxHQUFHLElBQUFDLDRCQUFBLEVBQ3hDLFVBQUFDLHlCQUF5QixFQUFJO0lBQzNCLElBQU1DLHlCQUF5QixHQUFHQyxNQUFNLENBQUNDLE1BQVAsQ0FDaENQLHdCQUF3QixDQUFDUSxNQUF6QixDQUNFLFVBQUNDLFlBQUQsRUFBZUMscUJBQWY7TUFBQSxPQUNFQSxxQkFBcUIsQ0FBQ0YsTUFBdEIsQ0FDRSxVQUFDQyxZQUFELEVBQWVFLDhCQUFmO1FBQUEsT0FDRUEsOEJBQThCLENBQUNILE1BQS9CLENBQThELFVBQUNDLFlBQUQsRUFBZUcsS0FBZixFQUF5QjtVQUNyRkgsWUFBWSxDQUFDSSxJQUFiLENBQWtCRCxLQUFsQjtVQUVBLE9BQU9ILFlBQVA7UUFDRCxDQUpELEVBSUdBLFlBSkgsQ0FERjtNQUFBLENBREYsRUFPRUEsWUFQRixDQURGO0lBQUEsQ0FERixFQVdFLEVBWEYsQ0FEZ0MsQ0FBbEM7SUFnQkEsT0FBT0oseUJBQXlCLENBQUNTLE1BQTFCLE1BQXFDVix5QkFBckMsYUFBcUNBLHlCQUFyQyx1QkFBcUNBLHlCQUF5QixDQUFFVSxNQUFoRSxLQUNMVCx5QkFBeUIsQ0FBQ1UsS0FBMUIsQ0FBZ0MsVUFBQ0MsSUFBRCxFQUFPQyxLQUFQO01BQUEsT0FBaUJELElBQUksS0FBS1oseUJBQXlCLENBQUMsQ0FBQ2EsS0FBRixDQUFuRDtJQUFBLENBQWhDLENBREssR0FFSGIseUJBRkcsR0FHSEMseUJBSEo7RUFJRCxDQXRCdUMsRUF1QnhDLENBQUNMLHdCQUFELENBdkJ3QyxDQUExQztFQTBCQSxJQUFNa0IsWUFBcUMsR0FBRyxJQUFBQyxjQUFBLEVBQzVDO0lBQUEsT0FBTztNQUNMQyw2QkFBNkIsRUFBRWQsTUFBTSxDQUFDQyxNQUFQLENBQWMsQ0FBQ1Asd0JBQUQsQ0FBZCxDQUQxQjtNQUVMcUIsc0NBQXNDLEVBQUVmLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLENBQUNMLGlDQUFELENBQWQ7SUFGbkMsQ0FBUDtFQUFBLENBRDRDLEVBTzVDLENBQUNGLHdCQUFELEVBQTJCRSxpQ0FBM0IsQ0FQNEMsQ0FBOUM7RUFVQSxvQkFBTyw2QkFBQyxnQkFBRCxDQUFxQixRQUFyQjtJQUE4QixLQUFLLEVBQUVnQjtFQUFyQyxHQUFvRDFCLFFBQXBELENBQVA7QUFDRCxDQW5ERDs7ZUFxRGVELG9CIn0=