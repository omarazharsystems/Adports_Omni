"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _react = require("react");

var _intersectionOf = _interopRequireDefault(require("../../../Utils/intersectionOf"));

var _removeInline = _interopRequireDefault(require("../../../Utils/removeInline"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useGroupActivities = _botframeworkWebchatApi.hooks.useGroupActivities;

function validateAllEntriesTagged(entries, bins) {
  return entries.every(function (entry) {
    return bins.some(function (bin) {
      return bin.includes(entry);
    });
  });
} // Activity tree is a multidimensional array, while activities is a 1D array.
// - The first dimension of the array contains activities with same sender;
// - The second dimension of the array contains activities with same status.
// [
//   [
//     // Both messages are from bot and is sent as a batch, we will group them as an array.
//     'Bot: Hello!'
//     'Bot: What can I help today?'
//   ],
//   [
//     'User: What is the weather?'
//   ],
//   [
//     'Bot: Let me look it up... hold on.'
//   ],
//   [
//     // This message is in a different group because it is more than a few seconds apart from the previous message.
//     'Bot: Here is the weather forecast.'
//   ]
// ]


function useActivityTreeWithRenderer(entries) {
  var groupActivities = useGroupActivities(); // We bin activities in 2 different ways:
  // - `activitiesBySender` is a 2D array containing activities with same sender
  // - `activitiesByStatus` is a 2D array containing activities with same status
  // Both arrays should contains all activities.

  var _useMemo = (0, _react.useMemo)(function () {
    var visibleActivities = entries.map(function (_ref) {
      var activity = _ref.activity;
      return activity;
    });
    var groupActivitiesResult = groupActivities({
      activities: visibleActivities
    });
    var activitiesBySender = (groupActivitiesResult === null || groupActivitiesResult === void 0 ? void 0 : groupActivitiesResult.sender) || [];
    var activitiesByStatus = (groupActivitiesResult === null || groupActivitiesResult === void 0 ? void 0 : groupActivitiesResult.status) || [];

    var _map = [activitiesBySender, activitiesByStatus].map(function (bins) {
      return bins.map(function (bin) {
        return bin.map(function (activity) {
          return entries.find(function (entry) {
            return entry.activity === activity;
          });
        });
      });
    }),
        _map2 = _slicedToArray(_map, 2),
        entriesBySender = _map2[0],
        entriesByStatus = _map2[1];

    if (!validateAllEntriesTagged(visibleActivities, activitiesBySender)) {
      console.warn('botframework-webchat: Not every activities are grouped in the "sender" property. Please fix "groupActivitiesMiddleware" and group every activities.');
    }

    if (!validateAllEntriesTagged(visibleActivities, activitiesByStatus)) {
      console.warn('botframework-webchat: Not every activities are grouped in the "status" property. Please fix "groupActivitiesMiddleware" and group every activities.');
    }

    return {
      entriesBySender: entriesBySender,
      entriesByStatus: entriesByStatus
    };
  }, [entries, groupActivities]),
      entriesBySender = _useMemo.entriesBySender,
      entriesByStatus = _useMemo.entriesByStatus; // Create a tree of activities with 2 dimensions: sender, followed by status.


  var activityTree = (0, _react.useMemo)(function () {
    var entriesPendingGrouping = _toConsumableArray(entries);

    var activityTree = [];

    var _loop = function _loop() {
      var found = void 0;
      var entriesWithSameSender = entriesBySender.find(function (bin) {
        return bin.includes(entriesPendingGrouping[0]);
      });
      var senderTree = [];
      entriesWithSameSender === null || entriesWithSameSender === void 0 ? void 0 : entriesWithSameSender.forEach(function (entry) {
        var entriesWithSameStatus = entriesByStatus.find(function (bin) {
          return bin.includes(entry);
        });
        var entriesWithSameSenderAndStatus = (0, _intersectionOf.default)(entriesPendingGrouping, entriesWithSameSender, entriesWithSameStatus);

        if (entriesWithSameSenderAndStatus.length) {
          senderTree.push(Object.freeze(entriesWithSameSenderAndStatus));

          _removeInline.default.apply(void 0, [entriesPendingGrouping].concat(_toConsumableArray(entriesWithSameSenderAndStatus)));

          found = true;
        }
      }); // If the entry is not grouped by the middleware, just put the entry in its own bin.

      found || senderTree.push(Object.freeze([entriesPendingGrouping.shift()]));
      activityTree.push(Object.freeze(senderTree));
    };

    while (entriesPendingGrouping.length) {
      _loop();
    } // Assertion: All entries must be assigned to the activityTree.


    if (!entries.every(function (activity) {
      return activityTree.some(function (activitiesWithSameSender) {
        return activitiesWithSameSender.some(function (activitiesWithSameSenderAndStatus) {
          return activitiesWithSameSenderAndStatus.includes(activity);
        });
      });
    })) {
      console.warn('botframework-webchat internal: Not all visible activities are grouped in the activityTree.', {
        entries: entries,
        activityTree: activityTree
      });
    }

    return Object.freeze(activityTree);
  }, [entriesBySender, entriesByStatus, entries]);
  return activityTree;
}

var _default = useActivityTreeWithRenderer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,