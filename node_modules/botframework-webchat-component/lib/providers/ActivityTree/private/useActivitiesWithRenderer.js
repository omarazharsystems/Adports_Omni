"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useActivitiesWithRenderer;

var _react = require("react");

var _useMemoize = _interopRequireDefault(require("../../../hooks/internal/useMemoize"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function useActivitiesWithRenderer(activities, createActivityRenderer) {
  var createActivityRendererWithLiteralArgs = (0, _react.useCallback)(function (activity, nextVisibleActivity) {
    return createActivityRenderer({
      activity: activity,
      nextVisibleActivity: nextVisibleActivity
    });
  }, [createActivityRenderer]); // Create a memoized context of the createActivityRenderer function.
  // TODO: [P2] Rename useMemoize to useMemoAll

  var entries = (0, _useMemoize.default)(createActivityRendererWithLiteralArgs, function (createActivityRendererWithLiteralArgsMemoized) {
    // All calls to createActivityRendererWithLiteralArgsMemoized() in this function will be memoized (LRU = 1).
    // In the next render cycle, calls to createActivityRendererWithLiteralArgsMemoized() might return the memoized result instead.
    // This is an improvement to React useMemo(), because it only allows 1 memoization.
    // useMemoize() allows any number of memoization.
    var activitiesWithRenderer = [];
    var nextVisibleActivity;

    for (var index = activities.length - 1; index >= 0; index--) {
      var activity = activities[+index];
      var renderActivity = createActivityRendererWithLiteralArgsMemoized(activity, nextVisibleActivity);

      if (renderActivity) {
        activitiesWithRenderer.splice(0, 0, {
          activity: activity,
          renderActivity: renderActivity
        });
        nextVisibleActivity = activity;
      }
    }

    return Object.freeze(activitiesWithRenderer);
  }, [activities]);
  var prevEntriesRef = (0, _react.useRef)([]);
  var prevEntries = prevEntriesRef.current;

  if (prevEntries.length !== entries.length || prevEntries.some(function (prevEntry, index) {
    var entry = entries[+index];
    return entry.activity !== prevEntry.activity || entry.renderActivity !== prevEntry.renderActivity;
  })) {
    prevEntriesRef.current = entries;
  }

  return prevEntriesRef.current;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1c2VBY3Rpdml0aWVzV2l0aFJlbmRlcmVyIiwiYWN0aXZpdGllcyIsImNyZWF0ZUFjdGl2aXR5UmVuZGVyZXIiLCJjcmVhdGVBY3Rpdml0eVJlbmRlcmVyV2l0aExpdGVyYWxBcmdzIiwidXNlQ2FsbGJhY2siLCJhY3Rpdml0eSIsIm5leHRWaXNpYmxlQWN0aXZpdHkiLCJlbnRyaWVzIiwidXNlTWVtb2l6ZSIsImNyZWF0ZUFjdGl2aXR5UmVuZGVyZXJXaXRoTGl0ZXJhbEFyZ3NNZW1vaXplZCIsImFjdGl2aXRpZXNXaXRoUmVuZGVyZXIiLCJpbmRleCIsImxlbmd0aCIsInJlbmRlckFjdGl2aXR5Iiwic3BsaWNlIiwiT2JqZWN0IiwiZnJlZXplIiwicHJldkVudHJpZXNSZWYiLCJ1c2VSZWYiLCJwcmV2RW50cmllcyIsImN1cnJlbnQiLCJzb21lIiwicHJldkVudHJ5IiwiZW50cnkiXSwic291cmNlUm9vdCI6ImNvbXBvbmVudDovLy8iLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9wcm92aWRlcnMvQWN0aXZpdHlUcmVlL3ByaXZhdGUvdXNlQWN0aXZpdGllc1dpdGhSZW5kZXJlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBXZWJDaGF0QWN0aXZpdHkgfSBmcm9tICdib3RmcmFtZXdvcmstd2ViY2hhdC1jb3JlJztcblxuaW1wb3J0IHVzZU1lbW9pemUgZnJvbSAnLi4vLi4vLi4vaG9va3MvaW50ZXJuYWwvdXNlTWVtb2l6ZSc7XG5pbXBvcnQgdHlwZSB7IEFjdGl2aXR5V2l0aFJlbmRlcmVyIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUFjdGl2aXRpZXNXaXRoUmVuZGVyZXIoXG4gIGFjdGl2aXRpZXM6IHJlYWRvbmx5IFdlYkNoYXRBY3Rpdml0eVtdLFxuICBjcmVhdGVBY3Rpdml0eVJlbmRlcmVyXG4pOiByZWFkb25seSBBY3Rpdml0eVdpdGhSZW5kZXJlcltdIHtcbiAgY29uc3QgY3JlYXRlQWN0aXZpdHlSZW5kZXJlcldpdGhMaXRlcmFsQXJncyA9IHVzZUNhbGxiYWNrKFxuICAgIChhY3Rpdml0eTogV2ViQ2hhdEFjdGl2aXR5LCBuZXh0VmlzaWJsZUFjdGl2aXR5OiBXZWJDaGF0QWN0aXZpdHkpID0+XG4gICAgICBjcmVhdGVBY3Rpdml0eVJlbmRlcmVyKHsgYWN0aXZpdHksIG5leHRWaXNpYmxlQWN0aXZpdHkgfSksXG4gICAgW2NyZWF0ZUFjdGl2aXR5UmVuZGVyZXJdXG4gICk7XG5cbiAgLy8gQ3JlYXRlIGEgbWVtb2l6ZWQgY29udGV4dCBvZiB0aGUgY3JlYXRlQWN0aXZpdHlSZW5kZXJlciBmdW5jdGlvbi5cbiAgLy8gVE9ETzogW1AyXSBSZW5hbWUgdXNlTWVtb2l6ZSB0byB1c2VNZW1vQWxsXG4gIGNvbnN0IGVudHJpZXMgPSB1c2VNZW1vaXplKFxuICAgIGNyZWF0ZUFjdGl2aXR5UmVuZGVyZXJXaXRoTGl0ZXJhbEFyZ3MsXG4gICAgY3JlYXRlQWN0aXZpdHlSZW5kZXJlcldpdGhMaXRlcmFsQXJnc01lbW9pemVkID0+IHtcbiAgICAgIC8vIEFsbCBjYWxscyB0byBjcmVhdGVBY3Rpdml0eVJlbmRlcmVyV2l0aExpdGVyYWxBcmdzTWVtb2l6ZWQoKSBpbiB0aGlzIGZ1bmN0aW9uIHdpbGwgYmUgbWVtb2l6ZWQgKExSVSA9IDEpLlxuICAgICAgLy8gSW4gdGhlIG5leHQgcmVuZGVyIGN5Y2xlLCBjYWxscyB0byBjcmVhdGVBY3Rpdml0eVJlbmRlcmVyV2l0aExpdGVyYWxBcmdzTWVtb2l6ZWQoKSBtaWdodCByZXR1cm4gdGhlIG1lbW9pemVkIHJlc3VsdCBpbnN0ZWFkLlxuICAgICAgLy8gVGhpcyBpcyBhbiBpbXByb3ZlbWVudCB0byBSZWFjdCB1c2VNZW1vKCksIGJlY2F1c2UgaXQgb25seSBhbGxvd3MgMSBtZW1vaXphdGlvbi5cbiAgICAgIC8vIHVzZU1lbW9pemUoKSBhbGxvd3MgYW55IG51bWJlciBvZiBtZW1vaXphdGlvbi5cblxuICAgICAgY29uc3QgYWN0aXZpdGllc1dpdGhSZW5kZXJlcjogQWN0aXZpdHlXaXRoUmVuZGVyZXJbXSA9IFtdO1xuICAgICAgbGV0IG5leHRWaXNpYmxlQWN0aXZpdHk6IFdlYkNoYXRBY3Rpdml0eTtcblxuICAgICAgZm9yIChsZXQgaW5kZXggPSBhY3Rpdml0aWVzLmxlbmd0aCAtIDE7IGluZGV4ID49IDA7IGluZGV4LS0pIHtcbiAgICAgICAgY29uc3QgYWN0aXZpdHkgPSBhY3Rpdml0aWVzWytpbmRleF07XG4gICAgICAgIGNvbnN0IHJlbmRlckFjdGl2aXR5ID0gY3JlYXRlQWN0aXZpdHlSZW5kZXJlcldpdGhMaXRlcmFsQXJnc01lbW9pemVkKGFjdGl2aXR5LCBuZXh0VmlzaWJsZUFjdGl2aXR5KTtcblxuICAgICAgICBpZiAocmVuZGVyQWN0aXZpdHkpIHtcbiAgICAgICAgICBhY3Rpdml0aWVzV2l0aFJlbmRlcmVyLnNwbGljZSgwLCAwLCB7XG4gICAgICAgICAgICBhY3Rpdml0eSxcbiAgICAgICAgICAgIHJlbmRlckFjdGl2aXR5XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBuZXh0VmlzaWJsZUFjdGl2aXR5ID0gYWN0aXZpdHk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIE9iamVjdC5mcmVlemUoYWN0aXZpdGllc1dpdGhSZW5kZXJlcik7XG4gICAgfSxcbiAgICBbYWN0aXZpdGllc11cbiAgKTtcblxuICBjb25zdCBwcmV2RW50cmllc1JlZiA9IHVzZVJlZjxyZWFkb25seSBBY3Rpdml0eVdpdGhSZW5kZXJlcltdPihbXSk7XG4gIGNvbnN0IHsgY3VycmVudDogcHJldkVudHJpZXMgfSA9IHByZXZFbnRyaWVzUmVmO1xuXG4gIGlmIChcbiAgICBwcmV2RW50cmllcy5sZW5ndGggIT09IGVudHJpZXMubGVuZ3RoIHx8XG4gICAgcHJldkVudHJpZXMuc29tZSgocHJldkVudHJ5LCBpbmRleCkgPT4ge1xuICAgICAgY29uc3QgZW50cnkgPSBlbnRyaWVzWytpbmRleF07XG5cbiAgICAgIHJldHVybiBlbnRyeS5hY3Rpdml0eSAhPT0gcHJldkVudHJ5LmFjdGl2aXR5IHx8IGVudHJ5LnJlbmRlckFjdGl2aXR5ICE9PSBwcmV2RW50cnkucmVuZGVyQWN0aXZpdHk7XG4gICAgfSlcbiAgKSB7XG4gICAgcHJldkVudHJpZXNSZWYuY3VycmVudCA9IGVudHJpZXM7XG4gIH1cblxuICByZXR1cm4gcHJldkVudHJpZXNSZWYuY3VycmVudDtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUdBOzs7O0FBR2UsU0FBU0EseUJBQVQsQ0FDYkMsVUFEYSxFQUViQyxzQkFGYSxFQUdvQjtFQUNqQyxJQUFNQyxxQ0FBcUMsR0FBRyxJQUFBQyxrQkFBQSxFQUM1QyxVQUFDQyxRQUFELEVBQTRCQyxtQkFBNUI7SUFBQSxPQUNFSixzQkFBc0IsQ0FBQztNQUFFRyxRQUFRLEVBQVJBLFFBQUY7TUFBWUMsbUJBQW1CLEVBQW5CQTtJQUFaLENBQUQsQ0FEeEI7RUFBQSxDQUQ0QyxFQUc1QyxDQUFDSixzQkFBRCxDQUg0QyxDQUE5QyxDQURpQyxDQU9qQztFQUNBOztFQUNBLElBQU1LLE9BQU8sR0FBRyxJQUFBQyxtQkFBQSxFQUNkTCxxQ0FEYyxFQUVkLFVBQUFNLDZDQUE2QyxFQUFJO0lBQy9DO0lBQ0E7SUFDQTtJQUNBO0lBRUEsSUFBTUMsc0JBQThDLEdBQUcsRUFBdkQ7SUFDQSxJQUFJSixtQkFBSjs7SUFFQSxLQUFLLElBQUlLLEtBQUssR0FBR1YsVUFBVSxDQUFDVyxNQUFYLEdBQW9CLENBQXJDLEVBQXdDRCxLQUFLLElBQUksQ0FBakQsRUFBb0RBLEtBQUssRUFBekQsRUFBNkQ7TUFDM0QsSUFBTU4sUUFBUSxHQUFHSixVQUFVLENBQUMsQ0FBQ1UsS0FBRixDQUEzQjtNQUNBLElBQU1FLGNBQWMsR0FBR0osNkNBQTZDLENBQUNKLFFBQUQsRUFBV0MsbUJBQVgsQ0FBcEU7O01BRUEsSUFBSU8sY0FBSixFQUFvQjtRQUNsQkgsc0JBQXNCLENBQUNJLE1BQXZCLENBQThCLENBQTlCLEVBQWlDLENBQWpDLEVBQW9DO1VBQ2xDVCxRQUFRLEVBQVJBLFFBRGtDO1VBRWxDUSxjQUFjLEVBQWRBO1FBRmtDLENBQXBDO1FBS0FQLG1CQUFtQixHQUFHRCxRQUF0QjtNQUNEO0lBQ0Y7O0lBRUQsT0FBT1UsTUFBTSxDQUFDQyxNQUFQLENBQWNOLHNCQUFkLENBQVA7RUFDRCxDQTFCYSxFQTJCZCxDQUFDVCxVQUFELENBM0JjLENBQWhCO0VBOEJBLElBQU1nQixjQUFjLEdBQUcsSUFBQUMsYUFBQSxFQUF3QyxFQUF4QyxDQUF2QjtFQUNBLElBQWlCQyxXQUFqQixHQUFpQ0YsY0FBakMsQ0FBUUcsT0FBUjs7RUFFQSxJQUNFRCxXQUFXLENBQUNQLE1BQVosS0FBdUJMLE9BQU8sQ0FBQ0ssTUFBL0IsSUFDQU8sV0FBVyxDQUFDRSxJQUFaLENBQWlCLFVBQUNDLFNBQUQsRUFBWVgsS0FBWixFQUFzQjtJQUNyQyxJQUFNWSxLQUFLLEdBQUdoQixPQUFPLENBQUMsQ0FBQ0ksS0FBRixDQUFyQjtJQUVBLE9BQU9ZLEtBQUssQ0FBQ2xCLFFBQU4sS0FBbUJpQixTQUFTLENBQUNqQixRQUE3QixJQUF5Q2tCLEtBQUssQ0FBQ1YsY0FBTixLQUF5QlMsU0FBUyxDQUFDVCxjQUFuRjtFQUNELENBSkQsQ0FGRixFQU9FO0lBQ0FJLGNBQWMsQ0FBQ0csT0FBZixHQUF5QmIsT0FBekI7RUFDRDs7RUFFRCxPQUFPVSxjQUFjLENBQUNHLE9BQXRCO0FBQ0QifQ==