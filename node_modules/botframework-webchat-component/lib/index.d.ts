import { concatMiddleware, hooks as apiHooks, localize } from 'botframework-webchat-api';
import ReactWebChat, { ReactWebChatProps } from './ReactWebChat';
import { ComposerProps } from './Composer';
import { BasicWebChatProps } from './BasicWebChat';
import connectToWebChat from './connectToWebChat';
import Context from './hooks/internal/WebChatUIContext';
import createCoreActivityMiddleware from './Middleware/Activity/createCoreMiddleware';
import createCoreActivityStatusMiddleware from './Middleware/ActivityStatus/createCoreMiddleware';
import createCoreAttachmentMiddleware from './Middleware/Attachment/createCoreMiddleware';
import createStyleSet from './Styles/createStyleSet';
import getTabIndex from './Utils/TypeFocusSink/getTabIndex';
import * as componentHooks from './hooks/index';
declare const hooks: {
    useDictateAbortable: typeof componentHooks.useDictateAbortable;
    useFocus: typeof componentHooks.useFocus;
    useFocusSendBox: typeof componentHooks.useFocusSendBox;
    useMicrophoneButtonClick: typeof componentHooks.useMicrophoneButtonClick;
    useMicrophoneButtonDisabled: typeof componentHooks.useMicrophoneButtonDisabled;
    useObserveScrollPosition: typeof componentHooks.useObserveScrollPosition;
    useObserveTranscriptFocus: typeof componentHooks.useObserveTranscriptFocus;
    useRenderMarkdownAsHTML: typeof componentHooks.useRenderMarkdownAsHTML;
    useScrollDown: typeof componentHooks.useScrollDown;
    useScrollTo: typeof componentHooks.useScrollTo;
    useScrollToEnd: typeof componentHooks.useScrollToEnd;
    useScrollUp: typeof componentHooks.useScrollUp;
    useSendBoxSpeechInterimsVisible: typeof componentHooks.useSendBoxSpeechInterimsVisible;
    useSendFiles: typeof componentHooks.useSendFiles;
    useStyleSet: typeof componentHooks.useStyleSet;
    useTextBoxSubmit: typeof componentHooks.useTextBoxSubmit;
    useTextBoxValue: typeof componentHooks.useTextBoxValue;
    useTypingIndicatorVisible: typeof componentHooks.useTypingIndicatorVisible;
    useWebSpeechPonyfill: typeof componentHooks.useWebSpeechPonyfill;
    useActiveTyping: typeof apiHooks.useActiveTyping;
    useActivities: typeof apiHooks.useActivities;
    useActivityKeys: typeof apiHooks.useActivityKeys;
    useActivityKeysByRead: typeof apiHooks.useActivityKeysByRead;
    useAvatarForBot: typeof apiHooks.useAvatarForBot;
    useAvatarForUser: typeof apiHooks.useAvatarForUser;
    useByteFormatter: typeof apiHooks.useByteFormatter;
    useConnectivityStatus: typeof apiHooks.useConnectivityStatus;
    useCreateActivityRenderer: typeof apiHooks.useCreateActivityRenderer;
    useCreateActivityStatusRenderer: typeof apiHooks.useCreateActivityStatusRenderer;
    useCreateAttachmentForScreenReaderRenderer: any;
    useCreateAvatarRenderer: typeof apiHooks.useCreateAvatarRenderer;
    useCreateScrollToEndButtonRenderer: typeof apiHooks.useCreateScrollToEndButtonRenderer;
    useDateFormatter: typeof apiHooks.useDateFormatter;
    useDebouncedNotifications: typeof apiHooks.useDebouncedNotifications;
    useDictateInterims: typeof apiHooks.useDictateInterims;
    useDictateState: typeof apiHooks.useDictateState;
    useDirection: typeof apiHooks.useDirection;
    useDisabled: typeof apiHooks.useDisabled;
    useDismissNotification: typeof apiHooks.useDismissNotification;
    useEmitTypingIndicator: typeof apiHooks.useEmitTypingIndicator;
    useGetActivityByKey: typeof apiHooks.useGetActivityByKey;
    useGetHasAcknowledgedByActivityKey: typeof apiHooks.useGetHasAcknowledgedByActivityKey;
    useGetKeyByActivity: typeof apiHooks.useGetKeyByActivity;
    useGetKeyByActivityId: typeof apiHooks.useGetKeyByActivityId;
    useGetSendTimeoutForActivity: typeof apiHooks.useGetSendTimeoutForActivity;
    useGrammars: typeof apiHooks.useGrammars;
    useGroupActivities: typeof apiHooks.useGroupActivities;
    useGroupTimestamp: typeof apiHooks.useGroupTimestamp;
    useLanguage: typeof apiHooks.useLanguage;
    useLastAcknowledgedActivityKey: typeof apiHooks.useLastAcknowledgedActivityKey;
    useLastReadActivityKey: typeof apiHooks.useLastReadActivityKey;
    useLocalizer: typeof apiHooks.useLocalizer;
    useMarkActivityAsSpoken: typeof apiHooks.useMarkActivityAsSpoken;
    useMarkActivityKeyAsRead: typeof apiHooks.useMarkActivityKeyAsRead;
    useMarkAllAsAcknowledged: typeof apiHooks.useMarkAllAsAcknowledged;
    usePerformCardAction: typeof apiHooks.usePerformCardAction;
    usePonyfill: typeof apiHooks.usePonyfill;
    usePostActivity: typeof apiHooks.usePostActivity;
    useReferenceGrammarID: typeof apiHooks.useReferenceGrammarID;
    useRelativeTimeFormatter: typeof apiHooks.useRelativeTimeFormatter;
    useRenderActivity: any;
    useRenderActivityStatus: any;
    useRenderAttachment: any;
    useRenderAvatar: any;
    useRenderToast: typeof apiHooks.useRenderToast;
    useRenderTypingIndicator: typeof apiHooks.useRenderTypingIndicator;
    useSendBoxValue: typeof apiHooks.useSendBoxValue;
    useSendEvent: typeof apiHooks.useSendEvent;
    useSendMessage: typeof apiHooks.useSendMessage;
    useSendMessageBack: typeof apiHooks.useSendMessageBack;
    useSendPostBack: typeof apiHooks.useSendPostBack;
    useSendStatusByActivityKey: typeof apiHooks.useSendStatusByActivityKey;
    useSendTimeoutForActivity: typeof apiHooks.useSendTimeoutForActivity;
    useSendTypingIndicator: typeof apiHooks.useSendTypingIndicator;
    useSetNotification: typeof apiHooks.useSetNotification;
    useShouldSpeakIncomingActivity: typeof apiHooks.useShouldSpeakIncomingActivity;
    useStartDictate: typeof apiHooks.useStartDictate;
    useStopDictate: typeof apiHooks.useStopDictate;
    useStyleOptions: typeof apiHooks.useStyleOptions;
    useSubmitSendBox: typeof apiHooks.useSubmitSendBox;
    useSuggestedActions: typeof apiHooks.useSuggestedActions;
    useTimeoutForSend: typeof apiHooks.useTimeoutForSend;
    useTrackDimension: typeof apiHooks.useTrackDimension;
    useTrackEvent: typeof apiHooks.useTrackEvent;
    useTrackException: typeof apiHooks.useTrackException;
    useTrackTiming: typeof apiHooks.useTrackTiming;
    useUserID: typeof apiHooks.useUserID;
    useUsername: typeof apiHooks.useUsername;
    useVoiceSelector: typeof apiHooks.useVoiceSelector;
};
declare const version: string;
declare const Components: {
    BasicWebChat: import("react").FC<BasicWebChatProps>;
    Composer: import("react").FC<ComposerProps>;
    AccessKeySinkSurface: any;
    BasicConnectivityStatus: any;
    BasicSendBox: import("react").FC<{
        className?: string;
    }>;
    BasicToaster: any;
    BasicTranscript: import("react").FC<{
        className?: string;
    }>;
    AudioContent: import("react").FC<{
        alt?: string;
        autoPlay?: boolean;
        loop?: boolean;
        poster?: string;
        src: string;
    }>;
    FileContent: import("react").FC<{
        className?: string;
        fileName: string;
        href?: string;
        size?: number;
    }>;
    HTMLVideoContent: import("react").FC<{
        alt?: string;
        autoPlay?: boolean;
        loop?: boolean;
        poster?: string;
        src: string;
    }>;
    ImageContent: import("react").FC<{
        alt?: string;
        src: string;
    }>;
    TextContent: import("react").FC<{
        contentType?: string;
        text: string;
    }>;
    VideoContent: import("react").FC<{
        alt?: string;
        autoPlay?: boolean;
        loop?: boolean;
        poster?: string;
        src: string;
    }>;
    VimeoContent: import("react").FC<{
        alt?: string;
        autoPlay?: boolean;
        embedID: string;
        loop?: boolean;
    }>;
    YouTubeContent: import("react").FC<{
        alt?: string;
        autoPlay?: boolean;
        embedID: string;
        loop?: boolean;
    }>;
    Avatar: import("react").VFC<{
        'aria-hidden'?: boolean;
        className?: string;
        fromUser?: boolean;
    }>;
    Bubble: import("react").FC<{
        'aria-hidden'?: boolean;
        children?: import("react").ReactNode;
        className?: string;
        fromUser?: boolean;
        nub?: boolean | "hidden";
    }>;
    ErrorBox: import("react").FC<{
        error: Error;
        type?: string;
    }>;
    SendStatus: import("react").FC<{
        activity: import("botframework-webchat-core/lib/types/WebChatActivity").WebChatActivity;
        sendStatus: import("./types/internal/SendStatus").SendStatus;
    }>;
    SpeakActivity: import("react").FC<{
        activity: import("botframework-webchat-core/lib/types/WebChatActivity").WebChatActivity;
    }>;
    Timestamp: import("react").FC<{
        activity: import("botframework-webchat-core/lib/types/WebChatActivity").WebChatActivity;
        className?: string;
    }>;
    connectSendStatus: (...selectors: any[]) => any;
    connectSpeakActivity: (...selectors: any[]) => any;
    DictationInterims: import("react").FC<{
        className?: string;
    }>;
    MicrophoneButton: import("react").FC<{
        className?: string;
    }>;
    SendButton: import("react").FC<{
        className?: string;
    }>;
    SendTextBox: {
        ({ className }: {
            className: any;
        }): JSX.Element;
        defaultProps: {
            className: string;
        };
        propTypes: {
            className: import("prop-types").Requireable<string>;
        };
    };
    SuggestedActions: any;
    UploadButton: import("react").FC<{
        className?: string;
    }>;
    connectDictationInterims: (...selectors: any[]) => any;
    connectMicrophoneButton: (...selectors: any[]) => any;
    connectSendButton: (...selectors: any[]) => any;
    connectSendTextBox: (...selectors: any[]) => any;
    connectSuggestedActions: (...selectors: any[]) => any;
    connectUploadButton: (...selectors: any[]) => any;
};
export default ReactWebChat;
export { Components, concatMiddleware, connectToWebChat, Context, createCoreActivityMiddleware, createCoreActivityStatusMiddleware, createCoreAttachmentMiddleware, createStyleSet, getTabIndex, hooks, localize, version };
export type { BasicWebChatProps, ComposerProps, ReactWebChatProps };
//# sourceMappingURL=index.d.ts.map